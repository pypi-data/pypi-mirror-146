# coding: utf-8

"""
    A-maze-ing API

    This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from hightech_amazeing.api_client import ApiClient


class MazesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all(self, **kwargs):  # noqa: E501
        """ðŸ“œ All the mazes that exist in the game.  # noqa: E501

        Even though you can only play a maze once, this method will return all the mazes. This is not laziness from the server side, this is to make it slightly more \"interesting\", because you need to keep track of the mazes you have already played on your implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MazeInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_with_http_info(self, **kwargs):  # noqa: E501
        """ðŸ“œ All the mazes that exist in the game.  # noqa: E501

        Even though you can only play a maze once, this method will return all the mazes. This is not laziness from the server side, this is to make it slightly more \"interesting\", because you need to keep track of the mazes you have already played on your implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MazeInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User token']  # noqa: E501

        return self.api_client.call_api(
            '/api/mazes/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MazeInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enter(self, maze_name, **kwargs):  # noqa: E501
        """ðŸŒŸ Enter a maze.  # noqa: E501

        Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \"multiple times\", you need to request to forget your player data (via the player API).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enter(maze_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str maze_name: What maze do you wish to enter. (required)
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enter_with_http_info(maze_name, **kwargs)  # noqa: E501
        else:
            (data) = self.enter_with_http_info(maze_name, **kwargs)  # noqa: E501
            return data

    def enter_with_http_info(self, maze_name, **kwargs):  # noqa: E501
        """ðŸŒŸ Enter a maze.  # noqa: E501

        Keep in mind that you can only be playing one maze at a time. Invoking this method when you are already in a maze will result in a failure. Also, you can only play the same maze once. If you wish to play the same maze \"multiple times\", you need to request to forget your player data (via the player API).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enter_with_http_info(maze_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str maze_name: What maze do you wish to enter. (required)
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maze_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'maze_name' is set
        if self.api_client.client_side_validation and ('maze_name' not in params or
                                                       params['maze_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `maze_name` when calling `enter`")  # noqa: E501

        if self.api_client.client_side_validation and ('maze_name' in params and
                                                       len(params['maze_name']) < 1):
            raise ValueError("Invalid value for parameter `maze_name` when calling `enter`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'maze_name' in params:
            query_params.append(('mazeName', params['maze_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User token']  # noqa: E501

        return self.api_client.call_api(
            '/api/mazes/enter', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PossibleActionsAndCurrentScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
