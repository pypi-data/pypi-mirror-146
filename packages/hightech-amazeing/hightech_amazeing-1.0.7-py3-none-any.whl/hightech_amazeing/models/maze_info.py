# coding: utf-8

"""
    A-maze-ing API

    This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from hightech_amazeing.configuration import Configuration


class MazeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'total_tiles': 'int',
        'potential_reward': 'int'
    }

    attribute_map = {
        'name': 'name',
        'total_tiles': 'totalTiles',
        'potential_reward': 'potentialReward'
    }

    def __init__(self, name=None, total_tiles=None, potential_reward=None, _configuration=None):  # noqa: E501
        """MazeInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._total_tiles = None
        self._potential_reward = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if total_tiles is not None:
            self.total_tiles = total_tiles
        if potential_reward is not None:
            self.potential_reward = potential_reward

    @property
    def name(self):
        """Gets the name of this MazeInfo.  # noqa: E501

        The name of the maze. Might give you a hint regarding its structure.  # noqa: E501

        :return: The name of this MazeInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MazeInfo.

        The name of the maze. Might give you a hint regarding its structure.  # noqa: E501

        :param name: The name of this MazeInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def total_tiles(self):
        """Gets the total_tiles of this MazeInfo.  # noqa: E501

        How many tiles exist in this maze.  # noqa: E501

        :return: The total_tiles of this MazeInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_tiles

    @total_tiles.setter
    def total_tiles(self, total_tiles):
        """Sets the total_tiles of this MazeInfo.

        How many tiles exist in this maze.  # noqa: E501

        :param total_tiles: The total_tiles of this MazeInfo.  # noqa: E501
        :type: int
        """

        self._total_tiles = total_tiles

    @property
    def potential_reward(self):
        """Gets the potential_reward of this MazeInfo.  # noqa: E501

        The total available reward in this maze.  # noqa: E501

        :return: The potential_reward of this MazeInfo.  # noqa: E501
        :rtype: int
        """
        return self._potential_reward

    @potential_reward.setter
    def potential_reward(self, potential_reward):
        """Sets the potential_reward of this MazeInfo.

        The total available reward in this maze.  # noqa: E501

        :param potential_reward: The potential_reward of this MazeInfo.  # noqa: E501
        :type: int
        """

        self._potential_reward = potential_reward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MazeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MazeInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MazeInfo):
            return True

        return self.to_dict() != other.to_dict()
