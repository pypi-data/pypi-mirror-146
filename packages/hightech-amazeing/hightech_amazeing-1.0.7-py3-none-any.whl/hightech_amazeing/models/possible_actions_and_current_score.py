# coding: utf-8

"""
    A-maze-ing API

    This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from hightech_amazeing.configuration import Configuration


class PossibleActionsAndCurrentScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'possible_move_actions': 'list[MoveAction]',
        'can_collect_score_here': 'bool',
        'can_exit_maze_here': 'bool',
        'current_score_in_hand': 'int',
        'current_score_in_bag': 'int',
        'tag_on_current_tile': 'int'
    }

    attribute_map = {
        'possible_move_actions': 'possibleMoveActions',
        'can_collect_score_here': 'canCollectScoreHere',
        'can_exit_maze_here': 'canExitMazeHere',
        'current_score_in_hand': 'currentScoreInHand',
        'current_score_in_bag': 'currentScoreInBag',
        'tag_on_current_tile': 'tagOnCurrentTile'
    }

    def __init__(self, possible_move_actions=None, can_collect_score_here=None, can_exit_maze_here=None, current_score_in_hand=None, current_score_in_bag=None, tag_on_current_tile=None, _configuration=None):  # noqa: E501
        """PossibleActionsAndCurrentScore - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._possible_move_actions = None
        self._can_collect_score_here = None
        self._can_exit_maze_here = None
        self._current_score_in_hand = None
        self._current_score_in_bag = None
        self._tag_on_current_tile = None
        self.discriminator = None

        if possible_move_actions is not None:
            self.possible_move_actions = possible_move_actions
        if can_collect_score_here is not None:
            self.can_collect_score_here = can_collect_score_here
        if can_exit_maze_here is not None:
            self.can_exit_maze_here = can_exit_maze_here
        if current_score_in_hand is not None:
            self.current_score_in_hand = current_score_in_hand
        if current_score_in_bag is not None:
            self.current_score_in_bag = current_score_in_bag
        if tag_on_current_tile is not None:
            self.tag_on_current_tile = tag_on_current_tile

    @property
    def possible_move_actions(self):
        """Gets the possible_move_actions of this PossibleActionsAndCurrentScore.  # noqa: E501

        The actions available on your surrounding tiles (lookahead of one tile).  # noqa: E501

        :return: The possible_move_actions of this PossibleActionsAndCurrentScore.  # noqa: E501
        :rtype: list[MoveAction]
        """
        return self._possible_move_actions

    @possible_move_actions.setter
    def possible_move_actions(self, possible_move_actions):
        """Sets the possible_move_actions of this PossibleActionsAndCurrentScore.

        The actions available on your surrounding tiles (lookahead of one tile).  # noqa: E501

        :param possible_move_actions: The possible_move_actions of this PossibleActionsAndCurrentScore.  # noqa: E501
        :type: list[MoveAction]
        """

        self._possible_move_actions = possible_move_actions

    @property
    def can_collect_score_here(self):
        """Gets the can_collect_score_here of this PossibleActionsAndCurrentScore.  # noqa: E501

        In the tile where you are standing, is it possible to collect score (from hand to bag).  # noqa: E501

        :return: The can_collect_score_here of this PossibleActionsAndCurrentScore.  # noqa: E501
        :rtype: bool
        """
        return self._can_collect_score_here

    @can_collect_score_here.setter
    def can_collect_score_here(self, can_collect_score_here):
        """Sets the can_collect_score_here of this PossibleActionsAndCurrentScore.

        In the tile where you are standing, is it possible to collect score (from hand to bag).  # noqa: E501

        :param can_collect_score_here: The can_collect_score_here of this PossibleActionsAndCurrentScore.  # noqa: E501
        :type: bool
        """

        self._can_collect_score_here = can_collect_score_here

    @property
    def can_exit_maze_here(self):
        """Gets the can_exit_maze_here of this PossibleActionsAndCurrentScore.  # noqa: E501

        In the tile where you are standing, is it possible to exit the maze. Remember you will lose any score in hand  and only be rewarded with the score you have in your bag.  # noqa: E501

        :return: The can_exit_maze_here of this PossibleActionsAndCurrentScore.  # noqa: E501
        :rtype: bool
        """
        return self._can_exit_maze_here

    @can_exit_maze_here.setter
    def can_exit_maze_here(self, can_exit_maze_here):
        """Sets the can_exit_maze_here of this PossibleActionsAndCurrentScore.

        In the tile where you are standing, is it possible to exit the maze. Remember you will lose any score in hand  and only be rewarded with the score you have in your bag.  # noqa: E501

        :param can_exit_maze_here: The can_exit_maze_here of this PossibleActionsAndCurrentScore.  # noqa: E501
        :type: bool
        """

        self._can_exit_maze_here = can_exit_maze_here

    @property
    def current_score_in_hand(self):
        """Gets the current_score_in_hand of this PossibleActionsAndCurrentScore.  # noqa: E501

        What is the score you currently have in your hand. Find a score collection point and issue a collect  score command to move this score into your bag. Score in your hand is not awarded when you exit a maze.  # noqa: E501

        :return: The current_score_in_hand of this PossibleActionsAndCurrentScore.  # noqa: E501
        :rtype: int
        """
        return self._current_score_in_hand

    @current_score_in_hand.setter
    def current_score_in_hand(self, current_score_in_hand):
        """Sets the current_score_in_hand of this PossibleActionsAndCurrentScore.

        What is the score you currently have in your hand. Find a score collection point and issue a collect  score command to move this score into your bag. Score in your hand is not awarded when you exit a maze.  # noqa: E501

        :param current_score_in_hand: The current_score_in_hand of this PossibleActionsAndCurrentScore.  # noqa: E501
        :type: int
        """

        self._current_score_in_hand = current_score_in_hand

    @property
    def current_score_in_bag(self):
        """Gets the current_score_in_bag of this PossibleActionsAndCurrentScore.  # noqa: E501

        What is the score currently in your bag. When you exit the maze this score will be rewarded to your total  overall score.  # noqa: E501

        :return: The current_score_in_bag of this PossibleActionsAndCurrentScore.  # noqa: E501
        :rtype: int
        """
        return self._current_score_in_bag

    @current_score_in_bag.setter
    def current_score_in_bag(self, current_score_in_bag):
        """Sets the current_score_in_bag of this PossibleActionsAndCurrentScore.

        What is the score currently in your bag. When you exit the maze this score will be rewarded to your total  overall score.  # noqa: E501

        :param current_score_in_bag: The current_score_in_bag of this PossibleActionsAndCurrentScore.  # noqa: E501
        :type: int
        """

        self._current_score_in_bag = current_score_in_bag

    @property
    def tag_on_current_tile(self):
        """Gets the tag_on_current_tile of this PossibleActionsAndCurrentScore.  # noqa: E501

        The tag on the current tile  # noqa: E501

        :return: The tag_on_current_tile of this PossibleActionsAndCurrentScore.  # noqa: E501
        :rtype: int
        """
        return self._tag_on_current_tile

    @tag_on_current_tile.setter
    def tag_on_current_tile(self, tag_on_current_tile):
        """Sets the tag_on_current_tile of this PossibleActionsAndCurrentScore.

        The tag on the current tile  # noqa: E501

        :param tag_on_current_tile: The tag_on_current_tile of this PossibleActionsAndCurrentScore.  # noqa: E501
        :type: int
        """

        self._tag_on_current_tile = tag_on_current_tile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PossibleActionsAndCurrentScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PossibleActionsAndCurrentScore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PossibleActionsAndCurrentScore):
            return True

        return self.to_dict() != other.to_dict()
