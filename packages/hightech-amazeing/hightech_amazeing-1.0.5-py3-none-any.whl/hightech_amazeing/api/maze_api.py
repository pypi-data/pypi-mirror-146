# coding: utf-8

"""
    A-maze-ing API

    This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from hightech_amazeing.api_client import ApiClient


class MazeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def collect_score(self, **kwargs):  # noqa: E501
        """💰 Collect score from your hand to your bag.  # noqa: E501

        Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_score(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collect_score_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.collect_score_with_http_info(**kwargs)  # noqa: E501
            return data

    def collect_score_with_http_info(self, **kwargs):  # noqa: E501
        """💰 Collect score from your hand to your bag.  # noqa: E501

        Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_score_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect_score" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User token']  # noqa: E501

        return self.api_client.call_api(
            '/api/maze/collectScore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PossibleActionsAndCurrentScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exit_maze(self, **kwargs):  # noqa: E501
        """🚪 Exit the maze.  # noqa: E501

        Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.  Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exit_maze(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exit_maze_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.exit_maze_with_http_info(**kwargs)  # noqa: E501
            return data

    def exit_maze_with_http_info(self, **kwargs):  # noqa: E501
        """🚪 Exit the maze.  # noqa: E501

        Remember that when you exit a maze, only score in your bag will carry over and be awarded to your overall player score. Any score left in your hand will be lost.  Also, remember that you can only play the same maze once, so make sure you have collected as much score as you can.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exit_maze_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exit_maze" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User token']  # noqa: E501

        return self.api_client.call_api(
            '/api/maze/exit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move(self, direction, **kwargs):  # noqa: E501
        """Move in the supplied direction.  # noqa: E501

        You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \"wall\" in your way and you try to move there.. well, it's gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. 🤷🏻‍  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move(direction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction: (required)
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_with_http_info(direction, **kwargs)  # noqa: E501
        else:
            (data) = self.move_with_http_info(direction, **kwargs)  # noqa: E501
            return data

    def move_with_http_info(self, direction, **kwargs):  # noqa: E501
        """Move in the supplied direction.  # noqa: E501

        You must have already entered a maze. This method will return 200 even if you could not move in this direction. If there is a \"wall\" in your way and you try to move there.. well, it's gonna hurt, but you will remain in the same place.. which.. technically.. is valid.. 🤷🏻‍  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_with_http_info(direction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction: (required)
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if self.api_client.client_side_validation and ('direction' not in params or
                                                       params['direction'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `direction` when calling `move`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User token']  # noqa: E501

        return self.api_client.call_api(
            '/api/maze/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PossibleActionsAndCurrentScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def possible_actions(self, **kwargs):  # noqa: E501
        """👀 Get the list of possible actions, from the tile where you are standing.  # noqa: E501

        You must have already entered a maze. Also, you shouldn't require this method that much, given than any action you perform on the maze will return this same information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.possible_actions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.possible_actions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.possible_actions_with_http_info(**kwargs)  # noqa: E501
            return data

    def possible_actions_with_http_info(self, **kwargs):  # noqa: E501
        """👀 Get the list of possible actions, from the tile where you are standing.  # noqa: E501

        You must have already entered a maze. Also, you shouldn't require this method that much, given than any action you perform on the maze will return this same information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.possible_actions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method possible_actions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User token']  # noqa: E501

        return self.api_client.call_api(
            '/api/maze/possibleActions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PossibleActionsAndCurrentScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tag(self, tag_value, **kwargs):  # noqa: E501
        """Tag the current tile with the given (non-negative) number  # noqa: E501

        You must have already entered a maze. This method will return 200 even if you already tagged this tile. By tagging a tile \"again\" you will rewrite the previous tag.‍  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag(tag_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tag_value: (required)
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tag_with_http_info(tag_value, **kwargs)  # noqa: E501
        else:
            (data) = self.tag_with_http_info(tag_value, **kwargs)  # noqa: E501
            return data

    def tag_with_http_info(self, tag_value, **kwargs):  # noqa: E501
        """Tag the current tile with the given (non-negative) number  # noqa: E501

        You must have already entered a maze. This method will return 200 even if you already tagged this tile. By tagging a tile \"again\" you will rewrite the previous tag.‍  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tag_with_http_info(tag_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int tag_value: (required)
        :return: PossibleActionsAndCurrentScore
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag_value' is set
        if self.api_client.client_side_validation and ('tag_value' not in params or
                                                       params['tag_value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag_value` when calling `tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_value' in params:
            query_params.append(('tagValue', params['tag_value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User token']  # noqa: E501

        return self.api_client.call_api(
            '/api/maze/tag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PossibleActionsAndCurrentScore',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
