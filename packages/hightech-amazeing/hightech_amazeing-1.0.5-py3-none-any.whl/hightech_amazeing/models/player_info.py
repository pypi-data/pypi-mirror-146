# coding: utf-8

"""
    A-maze-ing API

    This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from hightech_amazeing.configuration import Configuration


class PlayerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player_id': 'str',
        'name': 'str',
        'is_in_maze': 'bool',
        'maze': 'str',
        'has_found_easter_egg': 'bool',
        'maze_score_in_hand': 'int',
        'maze_score_in_bag': 'int',
        'player_score': 'int'
    }

    attribute_map = {
        'player_id': 'playerId',
        'name': 'name',
        'is_in_maze': 'isInMaze',
        'maze': 'maze',
        'has_found_easter_egg': 'hasFoundEasterEgg',
        'maze_score_in_hand': 'mazeScoreInHand',
        'maze_score_in_bag': 'mazeScoreInBag',
        'player_score': 'playerScore'
    }

    def __init__(self, player_id=None, name=None, is_in_maze=None, maze=None, has_found_easter_egg=None, maze_score_in_hand=None, maze_score_in_bag=None, player_score=None, _configuration=None):  # noqa: E501
        """PlayerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._player_id = None
        self._name = None
        self._is_in_maze = None
        self._maze = None
        self._has_found_easter_egg = None
        self._maze_score_in_hand = None
        self._maze_score_in_bag = None
        self._player_score = None
        self.discriminator = None

        if player_id is not None:
            self.player_id = player_id
        if name is not None:
            self.name = name
        if is_in_maze is not None:
            self.is_in_maze = is_in_maze
        if maze is not None:
            self.maze = maze
        if has_found_easter_egg is not None:
            self.has_found_easter_egg = has_found_easter_egg
        if maze_score_in_hand is not None:
            self.maze_score_in_hand = maze_score_in_hand
        if maze_score_in_bag is not None:
            self.maze_score_in_bag = maze_score_in_bag
        if player_score is not None:
            self.player_score = player_score

    @property
    def player_id(self):
        """Gets the player_id of this PlayerInfo.  # noqa: E501

        The public unique identifier of a player.  # noqa: E501

        :return: The player_id of this PlayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this PlayerInfo.

        The public unique identifier of a player.  # noqa: E501

        :param player_id: The player_id of this PlayerInfo.  # noqa: E501
        :type: str
        """

        self._player_id = player_id

    @property
    def name(self):
        """Gets the name of this PlayerInfo.  # noqa: E501

        The name a player has chosen to represent her.  # noqa: E501

        :return: The name of this PlayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlayerInfo.

        The name a player has chosen to represent her.  # noqa: E501

        :param name: The name of this PlayerInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_in_maze(self):
        """Gets the is_in_maze of this PlayerInfo.  # noqa: E501

        An indication of whether a player is currently playing a maze or not.  # noqa: E501

        :return: The is_in_maze of this PlayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_maze

    @is_in_maze.setter
    def is_in_maze(self, is_in_maze):
        """Sets the is_in_maze of this PlayerInfo.

        An indication of whether a player is currently playing a maze or not.  # noqa: E501

        :param is_in_maze: The is_in_maze of this PlayerInfo.  # noqa: E501
        :type: bool
        """

        self._is_in_maze = is_in_maze

    @property
    def maze(self):
        """Gets the maze of this PlayerInfo.  # noqa: E501

        The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze.  # noqa: E501

        :return: The maze of this PlayerInfo.  # noqa: E501
        :rtype: str
        """
        return self._maze

    @maze.setter
    def maze(self, maze):
        """Sets the maze of this PlayerInfo.

        The name of the maze the player is currently playing. Might be null if player  is not currently playing a maze.  # noqa: E501

        :param maze: The maze of this PlayerInfo.  # noqa: E501
        :type: str
        """

        self._maze = maze

    @property
    def has_found_easter_egg(self):
        """Gets the has_found_easter_egg of this PlayerInfo.  # noqa: E501

        Wink wink.  # noqa: E501

        :return: The has_found_easter_egg of this PlayerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_found_easter_egg

    @has_found_easter_egg.setter
    def has_found_easter_egg(self, has_found_easter_egg):
        """Sets the has_found_easter_egg of this PlayerInfo.

        Wink wink.  # noqa: E501

        :param has_found_easter_egg: The has_found_easter_egg of this PlayerInfo.  # noqa: E501
        :type: bool
        """

        self._has_found_easter_egg = has_found_easter_egg

    @property
    def maze_score_in_hand(self):
        """Gets the maze_score_in_hand of this PlayerInfo.  # noqa: E501

        How much score the player has in her hand. Only available if player is playing a maze.  # noqa: E501

        :return: The maze_score_in_hand of this PlayerInfo.  # noqa: E501
        :rtype: int
        """
        return self._maze_score_in_hand

    @maze_score_in_hand.setter
    def maze_score_in_hand(self, maze_score_in_hand):
        """Sets the maze_score_in_hand of this PlayerInfo.

        How much score the player has in her hand. Only available if player is playing a maze.  # noqa: E501

        :param maze_score_in_hand: The maze_score_in_hand of this PlayerInfo.  # noqa: E501
        :type: int
        """

        self._maze_score_in_hand = maze_score_in_hand

    @property
    def maze_score_in_bag(self):
        """Gets the maze_score_in_bag of this PlayerInfo.  # noqa: E501

        How much score the player has in her bag. Only available if player is playing a maze.  # noqa: E501

        :return: The maze_score_in_bag of this PlayerInfo.  # noqa: E501
        :rtype: int
        """
        return self._maze_score_in_bag

    @maze_score_in_bag.setter
    def maze_score_in_bag(self, maze_score_in_bag):
        """Sets the maze_score_in_bag of this PlayerInfo.

        How much score the player has in her bag. Only available if player is playing a maze.  # noqa: E501

        :param maze_score_in_bag: The maze_score_in_bag of this PlayerInfo.  # noqa: E501
        :type: int
        """

        self._maze_score_in_bag = maze_score_in_bag

    @property
    def player_score(self):
        """Gets the player_score of this PlayerInfo.  # noqa: E501

        The accumulated score across all played mazes.  # noqa: E501

        :return: The player_score of this PlayerInfo.  # noqa: E501
        :rtype: int
        """
        return self._player_score

    @player_score.setter
    def player_score(self, player_score):
        """Sets the player_score of this PlayerInfo.

        The accumulated score across all played mazes.  # noqa: E501

        :param player_score: The player_score of this PlayerInfo.  # noqa: E501
        :type: int
        """

        self._player_score = player_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlayerInfo):
            return True

        return self.to_dict() != other.to_dict()
