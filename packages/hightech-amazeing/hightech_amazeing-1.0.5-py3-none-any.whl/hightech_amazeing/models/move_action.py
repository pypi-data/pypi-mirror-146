# coding: utf-8

"""
    A-maze-ing API

    This document describes the API of the A-maze-ing evening server.    This API consists of three different endpoints, which are detailed below.   - To register yourself as a player use the Player endpoint.   - To get information about the available mazes and enter a specific maze use the Mazes endpoint.   - To navigate a maze use the Maze endpoint.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from hightech_amazeing.configuration import Configuration


class MoveAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'str',
        'is_start': 'bool',
        'allows_exit': 'bool',
        'allows_score_collection': 'bool',
        'has_been_visited': 'bool',
        'reward_on_destination': 'int',
        'tag_on_tile': 'int'
    }

    attribute_map = {
        'direction': 'direction',
        'is_start': 'isStart',
        'allows_exit': 'allowsExit',
        'allows_score_collection': 'allowsScoreCollection',
        'has_been_visited': 'hasBeenVisited',
        'reward_on_destination': 'rewardOnDestination',
        'tag_on_tile': 'tagOnTile'
    }

    def __init__(self, direction=None, is_start=None, allows_exit=None, allows_score_collection=None, has_been_visited=None, reward_on_destination=None, tag_on_tile=None, _configuration=None):  # noqa: E501
        """MoveAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._direction = None
        self._is_start = None
        self._allows_exit = None
        self._allows_score_collection = None
        self._has_been_visited = None
        self._reward_on_destination = None
        self._tag_on_tile = None
        self.discriminator = None

        if direction is not None:
            self.direction = direction
        if is_start is not None:
            self.is_start = is_start
        if allows_exit is not None:
            self.allows_exit = allows_exit
        if allows_score_collection is not None:
            self.allows_score_collection = allows_score_collection
        if has_been_visited is not None:
            self.has_been_visited = has_been_visited
        if reward_on_destination is not None:
            self.reward_on_destination = reward_on_destination
        if tag_on_tile is not None:
            self.tag_on_tile = tag_on_tile

    @property
    def direction(self):
        """Gets the direction of this MoveAction.  # noqa: E501

        What is the relative direction of this tile.  # noqa: E501

        :return: The direction of this MoveAction.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this MoveAction.

        What is the relative direction of this tile.  # noqa: E501

        :param direction: The direction of this MoveAction.  # noqa: E501
        :type: str
        """
        allowed_values = ["Up", "Right", "Down", "Left"]  # noqa: E501
        if (self._configuration.client_side_validation and
                direction not in allowed_values):
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def is_start(self):
        """Gets the is_start of this MoveAction.  # noqa: E501

        Is this the tile where the maze begun.  # noqa: E501

        :return: The is_start of this MoveAction.  # noqa: E501
        :rtype: bool
        """
        return self._is_start

    @is_start.setter
    def is_start(self, is_start):
        """Sets the is_start of this MoveAction.

        Is this the tile where the maze begun.  # noqa: E501

        :param is_start: The is_start of this MoveAction.  # noqa: E501
        :type: bool
        """

        self._is_start = is_start

    @property
    def allows_exit(self):
        """Gets the allows_exit of this MoveAction.  # noqa: E501

        Can you exit the maze on this tile.  # noqa: E501

        :return: The allows_exit of this MoveAction.  # noqa: E501
        :rtype: bool
        """
        return self._allows_exit

    @allows_exit.setter
    def allows_exit(self, allows_exit):
        """Sets the allows_exit of this MoveAction.

        Can you exit the maze on this tile.  # noqa: E501

        :param allows_exit: The allows_exit of this MoveAction.  # noqa: E501
        :type: bool
        """

        self._allows_exit = allows_exit

    @property
    def allows_score_collection(self):
        """Gets the allows_score_collection of this MoveAction.  # noqa: E501

        Does this tile allow for score collection (moving score from your hand to your bag).  # noqa: E501

        :return: The allows_score_collection of this MoveAction.  # noqa: E501
        :rtype: bool
        """
        return self._allows_score_collection

    @allows_score_collection.setter
    def allows_score_collection(self, allows_score_collection):
        """Sets the allows_score_collection of this MoveAction.

        Does this tile allow for score collection (moving score from your hand to your bag).  # noqa: E501

        :param allows_score_collection: The allows_score_collection of this MoveAction.  # noqa: E501
        :type: bool
        """

        self._allows_score_collection = allows_score_collection

    @property
    def has_been_visited(self):
        """Gets the has_been_visited of this MoveAction.  # noqa: E501

        Have you visited this tile before.  # noqa: E501

        :return: The has_been_visited of this MoveAction.  # noqa: E501
        :rtype: bool
        """
        return self._has_been_visited

    @has_been_visited.setter
    def has_been_visited(self, has_been_visited):
        """Sets the has_been_visited of this MoveAction.

        Have you visited this tile before.  # noqa: E501

        :param has_been_visited: The has_been_visited of this MoveAction.  # noqa: E501
        :type: bool
        """

        self._has_been_visited = has_been_visited

    @property
    def reward_on_destination(self):
        """Gets the reward_on_destination of this MoveAction.  # noqa: E501

        What reward is available on this tile.  # noqa: E501

        :return: The reward_on_destination of this MoveAction.  # noqa: E501
        :rtype: int
        """
        return self._reward_on_destination

    @reward_on_destination.setter
    def reward_on_destination(self, reward_on_destination):
        """Sets the reward_on_destination of this MoveAction.

        What reward is available on this tile.  # noqa: E501

        :param reward_on_destination: The reward_on_destination of this MoveAction.  # noqa: E501
        :type: int
        """

        self._reward_on_destination = reward_on_destination

    @property
    def tag_on_tile(self):
        """Gets the tag_on_tile of this MoveAction.  # noqa: E501

        The tag on this tile. NOTE: default tag is 0  # noqa: E501

        :return: The tag_on_tile of this MoveAction.  # noqa: E501
        :rtype: int
        """
        return self._tag_on_tile

    @tag_on_tile.setter
    def tag_on_tile(self, tag_on_tile):
        """Sets the tag_on_tile of this MoveAction.

        The tag on this tile. NOTE: default tag is 0  # noqa: E501

        :param tag_on_tile: The tag_on_tile of this MoveAction.  # noqa: E501
        :type: int
        """

        self._tag_on_tile = tag_on_tile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MoveAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoveAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MoveAction):
            return True

        return self.to_dict() != other.to_dict()
