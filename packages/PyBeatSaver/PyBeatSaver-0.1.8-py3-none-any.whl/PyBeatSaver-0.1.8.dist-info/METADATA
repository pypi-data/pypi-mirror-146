Metadata-Version: 2.1
Name: PyBeatSaver
Version: 0.1.8
Summary: Beat Saver API client
Home-page: https://github.com/Kiyomi-Parents/PyBeatSaver
Author: LuCkEr-
Author-email: lucker@lucker.xyz
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/Kiyomi-Parents/PyBeatSaver/issues
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: OutCache (~=0.0.4)
Requires-Dist: python-dateutil (~=2.8.2)
Requires-Dist: setuptools (==62.0.0)
Requires-Dist: marshmallow (==3.15.0)
Requires-Dist: dataclasses-json (~=0.5.7)
Requires-Dist: aiohttp (==3.8.1)
Requires-Dist: Faker (==13.3.4)
Requires-Dist: pytest (==7.1.1)
Requires-Dist: pytest-asyncio (~=0.18.3)

[![PyPI version](https://badge.fury.io/py/PyBeatSaver.svg)](https://pypi.org/project/PyBeatSaver)
# PyBeatSaver
Beat Saver API client

Comes with caching and rate limiting out of the box.

There is also a test mode which can be enabled like this ```beatsaver = BeatSaverAPI(test_mode=True)```.
This will return random data instead of making API requests to Beat Saver.

### Usage:
```python
import asyncio
from pybeatsaver import BeatSaverAPI


async def main():
    async with BeatSaverAPI() as beatsaver:
        beatmap = await beatsaver.beatmap("16d22")
        print(beatmap)

# Get fake data instead
async def main_fake():
    async with BeatSaverAPI(test_mode=True) as beatsaver:
        beatmap = await beatsaver.beatmap("16d22")
        print(beatmap)

asyncio.run(main())
asyncio.run(main_fake())
```

### Faker provider:
```python
from faker import Faker
from pybeatsaver import BeatSaverProvider

faker = Faker()
faker.add_provider(BeatSaverProvider)

beatmap = faker.map_detail()
print(beatmap)
```


