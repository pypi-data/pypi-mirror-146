#include "color_mesh.hpp"

namespace color_mesh {

// glsl vec3 + vec3
vec3 operator + (const vec3 & a, const vec3 & b) {
	return {a.x + b.x, a.y + b.y, a.z + b.z};
}

// glsl vec3 * vec3
vec3 operator * (const vec3 & a, const vec3 & b) {
	return {a.x * b.x, a.y * b.y, a.z * b.z};
}

// glsl vec3 * float
vec3 operator * (const vec3 & a, const float & b) {
	return {a.x * b, a.y * b, a.z * b};
}

// glsl mat3 * vec3
vec3 operator * (const mat3 & a, const vec3 & b) {
	return {
		a.m[0] * b.x + a.m[1] * b.y + a.m[2] * b.z,
		a.m[3] * b.x + a.m[4] * b.y + a.m[5] * b.z,
		a.m[6] * b.x + a.m[7] * b.y + a.m[8] * b.z,
	};
}

// glsl mat3 from bullet btMatrix3x3
mat3 mat3_from_bt(const btMatrix3x3 & m) {
	return {
		(float)m[0][0], (float)m[0][1], (float)m[0][2],
		(float)m[1][0], (float)m[1][1], (float)m[1][2],
		(float)m[2][0], (float)m[2][1], (float)m[2][2],
	};
}

// glsl vec3 from bullet btVector3
vec3 vec3_from_bt(const btVector3 & v) {
	return {(float)v[0], (float)v[1], (float)v[2]};
}

// sphere vertices and normals
const vec3 sphere_vertices[] = {
	{0.0000f, 0.0000f, 1.0000f},
	{0.3607f, 0.0000f, 0.9327f},
	{0.1115f, 0.3431f, 0.9327f},
	{0.6729f, 0.0000f, 0.7397f},
	{0.4795f, 0.3484f, 0.8054f},
	{0.2079f, 0.6399f, 0.7397f},
	{0.8944f, 0.0000f, 0.4472f},
	{0.7844f, 0.3431f, 0.5168f},
	{0.5687f, 0.6399f, 0.5168f},
	{0.2764f, 0.8507f, 0.4472f},
	{-0.2918f, 0.2120f, 0.9327f},
	{-0.1832f, 0.5637f, 0.8054f},
	{-0.5444f, 0.3955f, 0.7397f},
	{-0.0839f, 0.8520f, 0.5168f},
	{-0.4329f, 0.7386f, 0.5168f},
	{-0.7236f, 0.5257f, 0.4472f},
	{-0.2918f, -0.2120f, 0.9327f},
	{-0.5927f, -0.0000f, 0.8054f},
	{-0.5444f, -0.3955f, 0.7397f},
	{-0.8362f, 0.1835f, 0.5168f},
	{-0.8362f, -0.1835f, 0.5168f},
	{-0.7236f, -0.5257f, 0.4472f},
	{0.1115f, -0.3431f, 0.9327f},
	{-0.1832f, -0.5637f, 0.8054f},
	{0.2079f, -0.6399f, 0.7397f},
	{-0.4329f, -0.7386f, 0.5168f},
	{-0.0839f, -0.8520f, 0.5168f},
	{0.2764f, -0.8507f, 0.4472f},
	{0.4795f, -0.3484f, 0.8054f},
	{0.5687f, -0.6399f, 0.5168f},
	{0.7844f, -0.3431f, 0.5168f},
	{0.9647f, -0.2120f, 0.1561f},
	{0.9647f, 0.2120f, 0.1561f},
	{0.9051f, -0.3955f, -0.1561f},
	{0.9855f, 0.0000f, -0.1699f},
	{0.9051f, 0.3955f, -0.1561f},
	{0.7236f, -0.5257f, -0.4472f},
	{0.8362f, -0.1835f, -0.5168f},
	{0.8362f, 0.1835f, -0.5168f},
	{0.7236f, 0.5257f, -0.4472f},
	{0.4998f, 0.8520f, 0.1561f},
	{0.0965f, 0.9830f, 0.1561f},
	{0.6558f, 0.7386f, -0.1561f},
	{0.3045f, 0.9372f, -0.1699f},
	{-0.0965f, 0.9830f, -0.1561f},
	{0.4329f, 0.7386f, -0.5168f},
	{0.0839f, 0.8520f, -0.5168f},
	{-0.2764f, 0.8507f, -0.4472f},
	{-0.6558f, 0.7386f, 0.1561f},
	{-0.9051f, 0.3955f, 0.1561f},
	{-0.4998f, 0.8520f, -0.1561f},
	{-0.7973f, 0.5792f, -0.1699f},
	{-0.9647f, 0.2120f, -0.1561f},
	{-0.5687f, 0.6399f, -0.5168f},
	{-0.7844f, 0.3431f, -0.5168f},
	{-0.8944f, -0.0000f, -0.4472f},
	{-0.9051f, -0.3955f, 0.1561f},
	{-0.6558f, -0.7386f, 0.1561f},
	{-0.9647f, -0.2120f, -0.1561f},
	{-0.7973f, -0.5792f, -0.1699f},
	{-0.4998f, -0.8520f, -0.1561f},
	{-0.7844f, -0.3431f, -0.5168f},
	{-0.5687f, -0.6399f, -0.5168f},
	{-0.2764f, -0.8507f, -0.4472f},
	{0.0965f, -0.9830f, 0.1561f},
	{0.4998f, -0.8520f, 0.1561f},
	{-0.0965f, -0.9830f, -0.1561f},
	{0.3045f, -0.9372f, -0.1699f},
	{0.6558f, -0.7386f, -0.1561f},
	{0.0839f, -0.8520f, -0.5168f},
	{0.4329f, -0.7386f, -0.5168f},
	{0.7973f, 0.5792f, 0.1699f},
	{-0.3045f, 0.9372f, 0.1699f},
	{-0.9855f, -0.0000f, 0.1699f},
	{-0.3045f, -0.9372f, 0.1699f},
	{0.7973f, -0.5792f, 0.1699f},
	{0.0000f, 0.0000f, -1.0000f},
	{-0.1115f, 0.3431f, -0.9327f},
	{0.2918f, 0.2120f, -0.9327f},
	{-0.2079f, 0.6399f, -0.7397f},
	{0.1832f, 0.5637f, -0.8054f},
	{0.5444f, 0.3955f, -0.7397f},
	{-0.3607f, -0.0000f, -0.9327f},
	{-0.6729f, -0.0000f, -0.7397f},
	{-0.4795f, 0.3484f, -0.8054f},
	{-0.1115f, -0.3431f, -0.9327f},
	{-0.2079f, -0.6399f, -0.7397f},
	{-0.4795f, -0.3484f, -0.8054f},
	{0.2918f, -0.2120f, -0.9327f},
	{0.5444f, -0.3955f, -0.7397f},
	{0.1832f, -0.5637f, -0.8054f},
	{0.5927f, 0.0000f, -0.8054f},
};

// sphere vertex and normal index array
const int sphere_index[] = {
	0, 1, 2,
	1, 3, 4,
	1, 4, 2,
	2, 4, 5,
	3, 6, 7,
	3, 7, 4,
	4, 7, 8,
	4, 8, 5,
	5, 8, 9,
	0, 2, 10,
	2, 5, 11,
	2, 11, 10,
	10, 11, 12,
	5, 9, 13,
	5, 13, 11,
	11, 13, 14,
	11, 14, 12,
	12, 14, 15,
	0, 10, 16,
	10, 12, 17,
	10, 17, 16,
	16, 17, 18,
	12, 15, 19,
	12, 19, 17,
	17, 19, 20,
	17, 20, 18,
	18, 20, 21,
	0, 16, 22,
	16, 18, 23,
	16, 23, 22,
	22, 23, 24,
	18, 21, 25,
	18, 25, 23,
	23, 25, 26,
	23, 26, 24,
	24, 26, 27,
	0, 22, 1,
	22, 24, 28,
	22, 28, 1,
	1, 28, 3,
	24, 27, 29,
	24, 29, 28,
	28, 29, 30,
	28, 30, 3,
	3, 30, 6,
	6, 31, 32,
	31, 33, 34,
	31, 34, 32,
	32, 34, 35,
	33, 36, 37,
	33, 37, 34,
	34, 37, 38,
	34, 38, 35,
	35, 38, 39,
	9, 40, 41,
	40, 42, 43,
	40, 43, 41,
	41, 43, 44,
	42, 39, 45,
	42, 45, 43,
	43, 45, 46,
	43, 46, 44,
	44, 46, 47,
	15, 48, 49,
	48, 50, 51,
	48, 51, 49,
	49, 51, 52,
	50, 47, 53,
	50, 53, 51,
	51, 53, 54,
	51, 54, 52,
	52, 54, 55,
	21, 56, 57,
	56, 58, 59,
	56, 59, 57,
	57, 59, 60,
	58, 55, 61,
	58, 61, 59,
	59, 61, 62,
	59, 62, 60,
	60, 62, 63,
	27, 64, 65,
	64, 66, 67,
	64, 67, 65,
	65, 67, 68,
	66, 63, 69,
	66, 69, 67,
	67, 69, 70,
	67, 70, 68,
	68, 70, 36,
	39, 42, 35,
	42, 40, 71,
	42, 71, 35,
	35, 71, 32,
	40, 9, 8,
	40, 8, 71,
	71, 8, 7,
	71, 7, 32,
	32, 7, 6,
	47, 50, 44,
	50, 48, 72,
	50, 72, 44,
	44, 72, 41,
	48, 15, 14,
	48, 14, 72,
	72, 14, 13,
	72, 13, 41,
	41, 13, 9,
	55, 58, 52,
	58, 56, 73,
	58, 73, 52,
	52, 73, 49,
	56, 21, 20,
	56, 20, 73,
	73, 20, 19,
	73, 19, 49,
	49, 19, 15,
	63, 66, 60,
	66, 64, 74,
	66, 74, 60,
	60, 74, 57,
	64, 27, 26,
	64, 26, 74,
	74, 26, 25,
	74, 25, 57,
	57, 25, 21,
	36, 33, 68,
	33, 31, 75,
	33, 75, 68,
	68, 75, 65,
	31, 6, 30,
	31, 30, 75,
	75, 30, 29,
	75, 29, 65,
	65, 29, 27,
	76, 77, 78,
	77, 79, 80,
	77, 80, 78,
	78, 80, 81,
	79, 47, 46,
	79, 46, 80,
	80, 46, 45,
	80, 45, 81,
	81, 45, 39,
	76, 82, 77,
	82, 83, 84,
	82, 84, 77,
	77, 84, 79,
	83, 55, 54,
	83, 54, 84,
	84, 54, 53,
	84, 53, 79,
	79, 53, 47,
	76, 85, 82,
	85, 86, 87,
	85, 87, 82,
	82, 87, 83,
	86, 63, 62,
	86, 62, 87,
	87, 62, 61,
	87, 61, 83,
	83, 61, 55,
	76, 88, 85,
	88, 89, 90,
	88, 90, 85,
	85, 90, 86,
	89, 36, 70,
	89, 70, 90,
	90, 70, 69,
	90, 69, 86,
	86, 69, 63,
	76, 78, 88,
	78, 81, 91,
	78, 91, 88,
	88, 91, 89,
	81, 39, 38,
	81, 38, 91,
	91, 38, 37,
	91, 37, 89,
	89, 37, 36,
};

// box vertices
const vec3 box_vertices[] = {
	{1.0f, 1.0f, 1.0f},
	{1.0f, 1.0f, -1.0f},
	{1.0f, -1.0f, 1.0f},
	{1.0f, -1.0f, -1.0f},
	{-1.0f, 1.0f, 1.0f},
	{-1.0f, 1.0f, -1.0f},
	{-1.0f, -1.0f, 1.0f},
	{-1.0f, -1.0f, -1.0f},
};

// box normals
const vec3 box_normals[] = {
	{1.0f, 0.0f, 0.0f},
	{-1.0f, 0.0f, 0.0f},
	{0.0f, 1.0f, 0.0f},
	{0.0f, -1.0f, 0.0f},
	{0.0f, 0.0f, 1.0f},
	{0.0f, 0.0f, -1.0f},
};

// box vertex index array
const int box_vindex[] = {
	1, 0, 2,
	1, 2, 3,
	4, 5, 6,
	6, 5, 7,
	0, 1, 4,
	4, 1, 5,
	3, 2, 6,
	3, 6, 7,
	2, 0, 4,
	2, 4, 6,
	1, 3, 5,
	5, 3, 7,
};

// box normal index array
const int box_nindex[] = {
	0, 0, 0,
	0, 0, 0,
	1, 1, 1,
	1, 1, 1,
	2, 2, 2,
	2, 2, 2,
	3, 3, 3,
	3, 3, 3,
	4, 4, 4,
	4, 4, 4,
	5, 5, 5,
	5, 5, 5,
};

const int num_sphere_vertices = sizeof(sphere_index) / sizeof(int);
void sphere_mesh(Vertex *& data, const btTransform & transform, btSphereShape * shape, const vec3 & color) {
	/*
		Render a sphere into a buffer
	*/

	// get sphere parameters
	const vec3 origin = vec3_from_bt(transform.getOrigin());
	const mat3 basis = mat3_from_bt(transform.getBasis());
	const float radius = (float)shape->getRadius();

	// build sphere vertices
	for (int i = 0; i < num_sphere_vertices; ++i) {
		const vec3 normal = basis * sphere_vertices[sphere_index[i]];
		const vec3 vertex = origin + normal * radius;
		data[i] = {vertex, normal, color};
	}

	// move the write pointer
	data += num_sphere_vertices;
}

const int num_box_vertices = sizeof(box_vindex) / sizeof(int);
void box_mesh(Vertex *& data, const btTransform & transform, btBoxShape * shape, const vec3 & color) {
	/*
		Render a box into a buffer
	*/

	// get box parameters
	const vec3 origin = vec3_from_bt(transform.getOrigin());
	const mat3 basis = mat3_from_bt(transform.getBasis());
	const vec3 half_extents = vec3_from_bt(shape->getHalfExtentsWithMargin());

	// build box vertices
	for (int i = 0; i < num_box_vertices; ++i) {
		const vec3 vertex = origin + basis * (box_vertices[box_vindex[i]] * half_extents);
		const vec3 normal = basis * box_normals[box_nindex[i]];
		data[i] = {vertex, normal, color};
	}

	// move the write pointer
	data += num_box_vertices;
}

}
