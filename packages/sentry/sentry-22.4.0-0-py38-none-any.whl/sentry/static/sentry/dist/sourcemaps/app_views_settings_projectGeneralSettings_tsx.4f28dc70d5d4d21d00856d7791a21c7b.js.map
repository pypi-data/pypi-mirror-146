{"version":3,"file":"chunks/app_views_settings_projectGeneralSettings_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectGeneralSettings.tsx"],"sourcesContent":["import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {\n  changeProjectSlug,\n  removeProject,\n  transferProject,\n} from 'sentry/actionCreators/projects';\nimport ProjectActions from 'sentry/actions/projectActions';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Field from 'sentry/components/forms/field';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {FieldValue} from 'sentry/components/forms/model';\nimport TextField from 'sentry/components/forms/textField';\nimport {removePageFiltersStorage} from 'sentry/components/organizations/pageFilters/persistence';\nimport {Panel, PanelAlert, PanelHeader} from 'sentry/components/panels';\nimport {fields} from 'sentry/data/forms/projectGeneralSettings';\nimport {t, tct} from 'sentry/locale';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {Organization, Project} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n    onChangeSlug: (slug: string) => void;\n    organization: Organization;\n  };\n\ntype State = AsyncView['state'] & {\n  data: Project;\n};\n\nclass ProjectGeneralSettings extends AsyncView<Props, State> {\n  private _form: Record<string, FieldValue> = {};\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Project Settings'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n\n    return [['data', `/projects/${orgId}/${projectId}/`]];\n  }\n\n  handleTransferFieldChange = (id: string, value: FieldValue) => {\n    this._form[id] = value;\n  };\n\n  handleRemoveProject = () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n\n    removePageFiltersStorage(orgId);\n\n    if (!project) {\n      return;\n    }\n\n    removeProject(this.api, orgId, project).then(() => {\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    }, handleXhrErrorResponse('Unable to remove project'));\n  };\n\n  handleTransferProject = async () => {\n    const {orgId} = this.props.params;\n    const project = this.state.data;\n    if (!project) {\n      return;\n    }\n    if (typeof this._form.email !== 'string' || this._form.email.length < 1) {\n      return;\n    }\n\n    try {\n      await transferProject(this.api, orgId, project, this._form.email);\n      // Need to hard reload because lots of components do not listen to Projects Store\n      window.location.assign('/');\n    } catch (err) {\n      if (err.status >= 500) {\n        handleXhrErrorResponse('Unable to transfer project')(err);\n      }\n    }\n  };\n\n  isProjectAdmin = () => new Set(this.props.organization.access).has('project:admin');\n\n  renderRemoveProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Remove Project')}\n        help={tct(\n          'Remove the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to remove this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be removed. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleRemoveProject}\n            priority=\"danger\"\n            confirmText={t('Remove project')}\n            message={\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Removing this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t('This will also remove all associated event data.')}\n                </TextBlock>\n              </div>\n            }\n          >\n            <div>\n              <Button className=\"ref-remove-project\" type=\"button\" priority=\"danger\">\n                {t('Remove Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderTransferProject() {\n    const project = this.state.data;\n    const isProjectAdmin = this.isProjectAdmin();\n    const {isInternal} = project;\n\n    return (\n      <Field\n        label={t('Transfer Project')}\n        help={tct(\n          'Transfer the [project] project and all related data. [linebreak] Careful, this action cannot be undone.',\n          {\n            project: <strong>{project.slug}</strong>,\n            linebreak: <br />,\n          }\n        )}\n      >\n        {!isProjectAdmin &&\n          t('You do not have the required permission to transfer this project.')}\n\n        {isInternal &&\n          t(\n            'This project cannot be transferred. It is used internally by the Sentry server.'\n          )}\n\n        {isProjectAdmin && !isInternal && (\n          <Confirm\n            onConfirm={this.handleTransferProject}\n            priority=\"danger\"\n            confirmText={t('Transfer project')}\n            renderMessage={({confirm}) => (\n              <div>\n                <TextBlock>\n                  <strong>\n                    {t('Transferring this project is permanent and cannot be undone!')}\n                  </strong>\n                </TextBlock>\n                <TextBlock>\n                  {t(\n                    'Please enter the email of an organization owner to whom you would like to transfer this project.'\n                  )}\n                </TextBlock>\n                <Panel>\n                  <Form\n                    hideFooter\n                    onFieldChange={this.handleTransferFieldChange}\n                    onSubmit={(_data, _onSuccess, _onError, e) => {\n                      e.stopPropagation();\n                      confirm();\n                    }}\n                  >\n                    <TextField\n                      name=\"email\"\n                      label={t('Organization Owner')}\n                      placeholder=\"admin@example.com\"\n                      required\n                      help={t(\n                        'A request will be emailed to this address, asking the organization owner to accept the project transfer.'\n                      )}\n                    />\n                  </Form>\n                </Panel>\n              </div>\n            )}\n          >\n            <div>\n              <Button className=\"ref-transfer-project\" type=\"button\" priority=\"danger\">\n                {t('Transfer Project')}\n              </Button>\n            </div>\n          </Confirm>\n        )}\n      </Field>\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const project = this.state.data;\n    const {orgId, projectId} = this.props.params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n    const team = project.teams.length ? project.teams?.[0] : undefined;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Project Settings')} />\n        <PermissionAlert />\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={{\n            ...project,\n            team,\n          }}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={resp => {\n            this.setState({data: resp});\n            if (projectId !== resp.slug) {\n              changeProjectSlug(projectId, resp.slug);\n              // Container will redirect after stores get updated with new slug\n              this.props.onChangeSlug(resp.slug);\n            }\n            // This will update our project context\n            ProjectActions.updateSuccess(resp);\n          }}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Project Details')}\n            fields={[fields.slug, fields.platform]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Email')}\n            fields={[fields.subjectPrefix]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Event Settings')}\n            fields={[fields.resolveAge]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Client Security')}\n            fields={[\n              fields.allowedDomains,\n              fields.scrapeJavaScript,\n              fields.securityToken,\n              fields.securityTokenHeader,\n              fields.verifySSL,\n            ]}\n            renderHeader={() => (\n              <PanelAlert type=\"info\">\n                <TextBlock noMargin>\n                  {tct(\n                    'Configure origin URLs which Sentry should accept events from. This is used for communication with clients like [link].',\n                    {\n                      link: (\n                        <a href=\"https://github.com/getsentry/sentry-javascript\">\n                          sentry-javascript\n                        </a>\n                      ),\n                    }\n                  )}{' '}\n                  {tct(\n                    'This will restrict requests based on the [Origin] and [Referer] headers.',\n                    {\n                      Origin: <code>Origin</code>,\n                      Referer: <code>Referer</code>,\n                    }\n                  )}\n                </TextBlock>\n              </PanelAlert>\n            )}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Project Administration')}</PanelHeader>\n          {this.renderRemoveProject()}\n          {this.renderTransferProject()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype ContainerProps = {\n  organization: Organization;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\nclass ProjectGeneralSettingsContainer extends Component<ContainerProps> {\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  changedSlug: string | undefined = undefined;\n  unsubscribe = ProjectsStore.listen(() => this.onProjectsUpdate(), undefined);\n\n  onProjectsUpdate() {\n    if (!this.changedSlug) {\n      return;\n    }\n    const project = ProjectsStore.getBySlug(this.changedSlug);\n\n    if (!project) {\n      return;\n    }\n\n    browserHistory.replace(\n      recreateRoute('', {\n        ...this.props,\n        params: {\n          ...this.props.params,\n          projectId: this.changedSlug,\n        },\n      })\n    );\n  }\n\n  render() {\n    return (\n      <ProjectGeneralSettings\n        onChangeSlug={(newSlug: string) => (this.changedSlug = newSlug)}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(ProjectGeneralSettingsContainer);\n"],"names":["recreateRoute","to","options","routes","params","location","stepBack","paths","map","path","lastRootIndex","routeIndex","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","PermissionAlert","access","props","hasAccess","type","t","ProjectGeneralSettings","id","value","_form","orgId","project","state","data","removePageFiltersStorage","removeProject","api","then","window","assign","handleXhrErrorResponse","async","email","length","transferProject","err","status","Set","organization","has","projectId","routeTitleGen","getEndpoints","renderRemoveProject","isProjectAdmin","isInternal","label","help","tct","slug","linebreak","onConfirm","handleRemoveProject","priority","confirmText","message","className","renderTransferProject","handleTransferProject","renderMessage","confirm","hideFooter","onFieldChange","handleTransferFieldChange","onSubmit","_data","_onSuccess","_onError","e","stopPropagation","name","placeholder","required","renderBody","endpoint","jsonFormProps","additionalFieldProps","features","disabled","team","teams","undefined","saveOnBlur","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","resp","setState","changeProjectSlug","onChangeSlug","ProjectActions","fields","renderHeader","noMargin","link","href","Origin","Referer","ProjectGeneralSettingsContainer","Component","ProjectsStore","onProjectsUpdate","componentWillUnmount","unsubscribe","changedSlug","browserHistory","newSlug","withOrganization"],"sourceRoot":""}