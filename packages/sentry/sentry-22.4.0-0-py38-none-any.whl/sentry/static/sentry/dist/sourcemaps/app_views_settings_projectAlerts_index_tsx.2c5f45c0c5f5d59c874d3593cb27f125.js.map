{"version":3,"file":"chunks/app_views_settings_projectAlerts_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yaAYA,MAAMA,EAAgB,QAAC,SAACC,EAAD,aAAWC,GAAZ,SACpB,QAAC,IAAD,CAAQA,aAAcA,EAAcC,OAAQ,CAAC,iBAA7C,SACG,QAAC,UAACC,GAAF,SACC,QAAC,IAAD,CAASF,aAAcA,EAAcG,SAAU,CAAC,aAAhD,SACG,QAAEC,WAAYC,GAAd,SACC,QAAC,WAAD,UACGC,EAAAA,eAAqBP,IACpBO,EAAAA,aAAmBP,EAAU,CAC3BC,aAAAA,EACAO,YAAaL,EACbG,gBAAAA,aAVVP,EAAAA,YAAAA,gBAmBN","sources":["webpack:///./app/views/settings/projectAlerts/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Access from 'sentry/components/acl/access';\nimport Feature from 'sentry/components/acl/feature';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  children: React.ReactNode;\n  organization: Organization;\n} & RouteComponentProps<{organizationId: string; projectId: string}, {}>;\n\nconst ProjectAlerts = ({children, organization}: Props) => (\n  <Access organization={organization} access={['project:write']}>\n    {({hasAccess}) => (\n      <Feature organization={organization} features={['incidents']}>\n        {({hasFeature: hasMetricAlerts}) => (\n          <React.Fragment>\n            {React.isValidElement(children) &&\n              React.cloneElement(children, {\n                organization,\n                canEditRule: hasAccess,\n                hasMetricAlerts,\n              })}\n          </React.Fragment>\n        )}\n      </Feature>\n    )}\n  </Access>\n);\n\nexport default ProjectAlerts;\n"],"names":["ProjectAlerts","children","organization","access","hasAccess","features","hasFeature","hasMetricAlerts","React","canEditRule"],"sourceRoot":""}