{"version":3,"file":"chunks/app_views_settings_account_accountEmails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/account/accountEmails.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {RequestOptions} from 'sentry/api';\nimport AlertLink from 'sentry/components/alertLink';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport accountEmailsFields from 'sentry/data/forms/accountEmails';\nimport {IconDelete, IconStack} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {UserEmail} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nconst ENDPOINT = '/users/me/emails/';\n\ntype Props = AsyncView['props'];\n\ntype State = AsyncView['state'] & {\n  emails: UserEmail[];\n};\n\nclass AccountEmails extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Emails');\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess: Form['props']['onSubmitSuccess'] = (_change, model, id) => {\n    if (id === undefined) {\n      return;\n    }\n    model.setValue(id, '');\n    this.remountComponent();\n  };\n\n  renderBody() {\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Email Addresses')} />\n        <EmailAddresses />\n        <Form\n          apiMethod=\"POST\"\n          apiEndpoint={ENDPOINT}\n          saveOnBlur\n          allowUndo={false}\n          onSubmitSuccess={this.handleSubmitSuccess}\n        >\n          <JsonForm forms={accountEmailsFields} />\n        </Form>\n\n        <AlertLink to=\"/settings/account/notifications\" icon={<IconStack />}>\n          {t('Want to change how many emails you get? Use the notifications panel.')}\n        </AlertLink>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AccountEmails;\n\nexport class EmailAddresses extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['emails', ENDPOINT]];\n  }\n  doApiCall(endpoint: string, requestParams: RequestOptions) {\n    this.setState({loading: true, emails: []}, () =>\n      this.api\n        .requestPromise(endpoint, requestParams)\n        .then(() => this.remountComponent())\n        .catch(err => {\n          this.remountComponent();\n\n          if (err?.responseJSON?.email) {\n            addErrorMessage(err.responseJSON.email);\n          }\n        })\n    );\n  }\n  handleSetPrimary = (email: string) =>\n    this.doApiCall(ENDPOINT, {\n      method: 'PUT',\n      data: {email},\n    });\n\n  handleRemove = (email: string) =>\n    this.doApiCall(ENDPOINT, {\n      method: 'DELETE',\n      data: {email},\n    });\n\n  handleVerify = (email: string) =>\n    this.doApiCall(`${ENDPOINT}confirm/`, {\n      method: 'POST',\n      data: {email},\n    });\n\n  render() {\n    const {emails, loading} = this.state;\n    const primary = emails?.find(({isPrimary}) => isPrimary);\n    const secondary = emails?.filter(({isPrimary}) => !isPrimary);\n\n    if (loading) {\n      return (\n        <Panel>\n          <PanelHeader>{t('Email Addresses')}</PanelHeader>\n          <PanelBody>\n            <LoadingIndicator />\n          </PanelBody>\n        </Panel>\n      );\n    }\n    return (\n      <Panel>\n        <PanelHeader>{t('Email Addresses')}</PanelHeader>\n        <PanelBody>\n          {primary && (\n            <EmailRow\n              onRemove={this.handleRemove}\n              onVerify={this.handleVerify}\n              {...primary}\n            />\n          )}\n\n          {secondary?.map(emailObj => (\n            <EmailRow\n              key={emailObj.email}\n              onSetPrimary={this.handleSetPrimary}\n              onRemove={this.handleRemove}\n              onVerify={this.handleVerify}\n              {...emailObj}\n            />\n          ))}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype EmailRowProps = {\n  email: string;\n  onRemove: (email: string, e: React.MouseEvent) => void;\n  onVerify: (email: string, e: React.MouseEvent) => void;\n  hideRemove?: boolean;\n  isPrimary?: boolean;\n  isVerified?: boolean;\n  onSetPrimary?: (email: string, e: React.MouseEvent) => void;\n};\n\nconst EmailRow = ({\n  email,\n  onRemove,\n  onVerify,\n  onSetPrimary,\n  isVerified,\n  isPrimary,\n  hideRemove,\n}: EmailRowProps) => (\n  <EmailItem>\n    <EmailTags>\n      {email}\n      {!isVerified && <Tag type=\"warning\">{t('Unverified')}</Tag>}\n      {isPrimary && <Tag type=\"success\">{t('Primary')}</Tag>}\n    </EmailTags>\n    <ButtonBar gap={1}>\n      {!isPrimary && isVerified && (\n        <Button size=\"small\" onClick={e => onSetPrimary?.(email, e)}>\n          {t('Set as primary')}\n        </Button>\n      )}\n      {!isVerified && (\n        <Button size=\"small\" onClick={e => onVerify(email, e)}>\n          {t('Resend verification')}\n        </Button>\n      )}\n      {!hideRemove && !isPrimary && (\n        <Button\n          aria-label={t('Remove email')}\n          data-test-id=\"remove\"\n          priority=\"danger\"\n          size=\"small\"\n          icon={<IconDelete />}\n          onClick={e => onRemove(email, e)}\n        />\n      )}\n    </ButtonBar>\n  </EmailItem>\n);\n\nconst EmailTags = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n`;\n\nconst EmailItem = styled(PanelItem)`\n  justify-content: space-between;\n`;\n"],"names":["ENDPOINT","AccountEmails","AsyncView","_change","model","id","undefined","setValue","this","remountComponent","getTitle","t","getEndpoints","renderBody","title","EmailAddresses","apiMethod","apiEndpoint","saveOnBlur","allowUndo","onSubmitSuccess","handleSubmitSuccess","forms","accountEmailsFields","to","icon","AsyncComponent","email","doApiCall","method","data","endpoint","requestParams","setState","loading","emails","api","requestPromise","then","catch","err","responseJSON","addErrorMessage","render","state","primary","find","isPrimary","secondary","filter","EmailRow","onRemove","handleRemove","onVerify","handleVerify","map","emailObj","onSetPrimary","handleSetPrimary","isVerified","hideRemove","EmailItem","EmailTags","type","gap","size","onClick","e","priority","space","PanelItem"],"sourceRoot":""}