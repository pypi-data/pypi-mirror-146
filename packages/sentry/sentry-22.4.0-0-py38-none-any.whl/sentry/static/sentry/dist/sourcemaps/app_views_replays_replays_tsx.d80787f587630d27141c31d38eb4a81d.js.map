{"version":3,"file":"chunks/app_views_replays_replays_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/replays/replays.tsx"],"sourcesContent":["import {MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route=\"eventsv2\"\n      shouldRefetchData={shouldRefetchData}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import * as React from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {usePerformanceEventView} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends React.Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(props.location);\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {api, beforeFetch, afterFetch, didFetch, eventView, orgSlug, route, setError} =\n      this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload);\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const orgSlug = props.orgSlug ?? useOrganization().slug;\n  const eventView = props.eventView ?? usePerformanceEventView();\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport async function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams\n): Promise<[T, string | undefined, ResponseMeta | undefined]> {\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [PerformanceEventViewProvider, _usePerformanceEventView] =\n  createDefinedContext<usePerformanceEventViewContext>({\n    name: 'PerformanceEventViewContext',\n  });\n\nexport {PerformanceEventViewProvider};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import * as React from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = React.createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useContext() {\n    const context = React.useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<ContextType>;\n}\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport PageHeading from 'sentry/components/pageHeading';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconCalendar} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageContent, PageHeader} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {NewQuery, Organization, PageFilters} from 'sentry/types';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport {Replay} from './types';\n\ntype Props = AsyncView['props'] &\n  WithRouterProps<{orgId: string}> & {\n    organization: Organization;\n    selection: PageFilters;\n    statsPeriod?: string | undefined; // revisit i'm sure i'm doing statsperiod wrong\n  };\n\nclass Replays extends React.Component<Props> {\n  getEventView() {\n    const {location, selection} = this.props;\n    const eventQueryParams: NewQuery = {\n      id: '',\n      name: '',\n      version: 2,\n      fields: ['eventID', 'timestamp', 'replayId', 'user.display', 'url'],\n      orderby: '-timestamp',\n      environment: selection.environments,\n      projects: selection.projects,\n      query: 'transaction:sentry-replay', // future: change to replay event\n    };\n\n    if (selection.datetime.period) {\n      eventQueryParams.range = selection.datetime.period;\n    }\n    return EventView.fromNewQueryWithLocation(eventQueryParams, location);\n  }\n\n  getTitle() {\n    return `Replays - ${this.props.params.orgId}`;\n  }\n\n  renderTable(replayList: Array<Replay>) {\n    const {organization} = this.props;\n    return replayList?.map(replay => (\n      <React.Fragment key={replay.id}>\n        <Link\n          to={`/organizations/${organization.slug}/replays/${generateEventSlug({\n            project: replay['project.name'],\n            id: replay.id,\n          })}/`}\n        >\n          <ReplayUserBadge\n            avatarSize={32}\n            displayName={replay['user.display']}\n            user={{\n              username: replay['user.display'],\n              id: replay['user.display'],\n              ip_address: replay['user.display'],\n              name: replay['user.display'],\n              email: replay['user.display'],\n            }}\n            // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n            displayEmail={replay.url?.split('?')[0] || ''}\n          />\n        </Link>\n        <div>\n          <TimeSinceWrapper>\n            <StyledIconCalendarWrapper color=\"gray500\" size=\"sm\" />\n            <TimeSince date={replay.timestamp} />\n          </TimeSinceWrapper>\n        </div>\n      </React.Fragment>\n    ));\n  }\n\n  render() {\n    const {organization} = this.props;\n    return (\n      <PageFiltersContainer\n        showEnvironmentSelector={false}\n        resetParamsOnChange={['cursor']}\n      >\n        <PageContent>\n          <PageHeader>\n            <HeaderTitle>\n              <div>\n                {t('Replays')} <FeatureBadge type=\"alpha\" />\n              </div>\n            </HeaderTitle>\n          </PageHeader>\n\n          <DiscoverQuery\n            eventView={this.getEventView()}\n            location={this.props.location}\n            orgSlug={organization.slug}\n          >\n            {data => {\n              return (\n                <React.Fragment>\n                  <PanelTable\n                    isLoading={data.isLoading}\n                    isEmpty={data.tableData?.data.length === 0}\n                    headers={[t('Session'), t('Timestamp')]}\n                  >\n                    {data.tableData\n                      ? this.renderTable(data.tableData.data as Replay[])\n                      : null}\n                  </PanelTable>\n                  <Pagination pageLinks={data.pageLinks} />\n                </React.Fragment>\n              );\n            }}\n          </DiscoverQuery>\n        </PageContent>\n      </PageFiltersContainer>\n    );\n  }\n}\n\nconst HeaderTitle = styled(PageHeading)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n`;\n\nconst ReplayUserBadge = styled(UserBadge)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.linkColor};\n`;\n\nconst TimeSinceWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(auto, max-content));\n  align-items: center;\n  gap: ${space(1.5)};\n`;\n\nconst StyledIconCalendarWrapper = styled(IconCalendar)`\n  position: relative;\n  top: -1px;\n`;\n\nexport default withRouter(withPageFilters(withOrganization(Replays)));\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","route","withApi","QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","React","isLoading","tableFetchID","undefined","error","tableData","pageLinks","thisAPIPayload","getPayload","otherAPIPayload","isAPIPayloadSimilar","limit","cursor","parseError","detail","responseJSON","t","async","api","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","setState","clear","data","resp","doDiscoverQuery","state","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","noPagination","referrer","payload","getRequestPayload","getEventsAPIPayload","location","per_page","Object","assign","queryExtras","render","childrenProps","children","GenericDiscoverQuery","useOrganization","slug","usePerformanceEventView","_props","params","requestPromise","method","includeAllArgs","query","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","options","strict","Context","displayName","Provider","context","Error","Replays","getEventView","selection","eventQueryParams","id","version","fields","orderby","environment","environments","projects","datetime","period","range","EventView","getTitle","orgId","renderTable","replayList","organization","map","replay","to","generateEventSlug","project","ReplayUserBadge","avatarSize","user","username","ip_address","email","displayEmail","split","TimeSinceWrapper","StyledIconCalendarWrapper","color","size","date","timestamp","showEnvironmentSelector","resetParamsOnChange","HeaderTitle","type","isEmpty","length","headers","PageHeading","UserBadge","p","theme","fontSizeMedium","linkColor","space","IconCalendar","withRouter","withPageFilters","withOrganization"],"sourceRoot":""}