{"version":3,"file":"chunks/SuperuserAccessForm.xxxxxxxxxxxxxxxxxxxx.js","mappings":"mwBAeA,MAAMA,UAA4BC,EAAAA,UAAiB,uDAClC,CACbC,OAAO,EACPC,UAAW,MAHoC,6BAMjC,KACdC,OAAOC,SAASC,aAP+B,2BAUnCC,IACZ,IAAIJ,EAAY,GAEdA,EADiB,MAAfI,EAAIC,OACMC,EAAAA,EAAAA,gBACY,MAAfF,EAAIC,OACDC,EAAAA,EAAAA,kBACY,MAAfF,EAAIC,OACDC,EAAAA,EAAAA,sBAEAA,EAAAA,EAAAA,aAEdC,KAAKC,SAAS,CACZT,OAAO,EACPC,UAAAA,OAIJS,SACE,MAAM,MAACV,EAAD,UAAQC,GAAaO,KAAKG,MAChC,OACE,QAAC,IAAD,WACE,QAAC,IAAD,CACEC,UAAU,MACVC,YAAY,SACZC,aAAaC,EAAAA,EAAAA,GAAE,YACfC,gBAAiBR,KAAKS,cACtBC,cAAeV,KAAKW,YACpBC,YAAa,CAACC,kBAAkB,GAChCC,cAAY,EAPd,UASGtB,IACC,QAACuB,EAAD,CAAaC,KAAK,QAAQC,UAAQ,EAAlC,UACGV,EAAAA,EAAAA,GAAEd,MAGP,QAAC,IAAD,CAAMyB,KAAK,8CA7Cf5B,EAAAA,YAAAA,sBAoDN,MAAMyB,GAAc,OAAOI,EAAAA,EAAP,qBAAH,2CAIjB,K,sDCvEO,IAAKpB,E,0BAAAA,GAAAA,EAAAA,gBAAAA,qBAAAA,EAAAA,kBAAAA,qDAAAA,EAAAA,sBAAAA,2DAAAA,EAAAA,aAAAA,qC,CAAAA,IAAAA,EAAAA","sources":["webpack:///./app/components/superuserAccessForm.tsx","webpack:///./app/constants/superuserAccessErrors.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Form from 'sentry/components/forms/form';\nimport Hook from 'sentry/components/hook';\nimport ThemeAndStyleProvider from 'sentry/components/themeAndStyleProvider';\nimport {ErrorCodes} from 'sentry/constants/superuserAccessErrors';\nimport {t} from 'sentry/locale';\n\ntype State = {\n  error: boolean;\n  errorType: string;\n};\n\nclass SuperuserAccessForm extends Component<State> {\n  state: State = {\n    error: false,\n    errorType: '',\n  };\n\n  handleSuccess = () => {\n    window.location.reload();\n  };\n\n  handleError = err => {\n    let errorType = '';\n    if (err.status === 403) {\n      errorType = ErrorCodes.invalidPassword;\n    } else if (err.status === 401) {\n      errorType = ErrorCodes.invalidSSOSession;\n    } else if (err.status === 400) {\n      errorType = ErrorCodes.invalidAccessCategory;\n    } else {\n      errorType = ErrorCodes.unknownError;\n    }\n    this.setState({\n      error: true,\n      errorType,\n    });\n  };\n\n  render() {\n    const {error, errorType} = this.state;\n    return (\n      <ThemeAndStyleProvider>\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/auth/\"\n          submitLabel={t('Continue')}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={this.handleError}\n          initialData={{isSuperuserModal: true}}\n          resetOnError\n        >\n          {error && (\n            <StyledAlert type=\"error\" showIcon>\n              {t(errorType)}\n            </StyledAlert>\n          )}\n          <Hook name=\"component:superuser-access-category\" />\n        </Form>\n      </ThemeAndStyleProvider>\n    );\n  }\n}\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n\nexport default SuperuserAccessForm;\n","export enum ErrorCodes {\n  invalidPassword = 'Incorrect password',\n  invalidSSOSession = 'Your SSO Session has expired, please reauthnticate',\n  invalidAccessCategory = 'Please fill out the access category and reason correctly',\n  unknownError = 'An error ocurred, please try again',\n}\n"],"names":["SuperuserAccessForm","Component","error","errorType","window","location","reload","err","status","ErrorCodes","this","setState","render","state","apiMethod","apiEndpoint","submitLabel","t","onSubmitSuccess","handleSuccess","onSubmitError","handleError","initialData","isSuperuserModal","resetOnError","StyledAlert","type","showIcon","name","Alert"],"sourceRoot":""}