{"version":3,"file":"chunks/app_components_tagDistributionMeter_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"oxBAoCe,MAAMA,UAA6BC,EAAAA,UAUhDC,cACE,MAAM,SAACC,EAAD,YAAWC,EAAX,MAAwBC,EAAxB,UAA+BC,EAA/B,SAA0CC,EAA1C,mBAAoDC,GACxDC,KAAKC,MAEP,IAAKC,MAAMC,QAAQT,IAAaA,EAASU,QAAU,EACjD,OACE,QAACC,EAAD,WACE,QAACC,EAAD,UAAYV,MAKlB,MAAMW,EAAiBb,EAAS,GAC1Bc,GAAMC,EAAAA,EAAAA,IAAQF,EAAeG,MAAOf,GACpCgB,EAAWC,KAAKC,MAAML,GAoB5B,OACE,QAACH,EAAD,YACE,QAACC,EAAD,UAAYV,KACZ,QAACkB,EAAD,WApBK,YADClB,GAGF,QAACmB,EAAD,WACE,QAAC,IAAD,CACEC,QAAST,EAAeU,KACxBC,QAAQ,EACRC,mBAAiB,EACjBC,YAAarB,EACbsB,UAAQ,OAKP,QAACN,EAAD,UAAQR,EAAeU,OAAQK,EAAAA,EAAAA,GAAE,SASvCzB,GAAaC,EAAW,MAAO,QAACyB,EAAD,WAAUZ,EAAV,aAMxCa,iBACE,MAAM,SACJ9B,EADI,WAEJ+B,EAFI,MAGJ7B,EAHI,UAIJC,EAJI,SAKJC,EALI,YAMJH,EANI,cAOJ+B,EAPI,YAQJC,EARI,YASJC,EATI,mBAUJ7B,GACEC,KAAKC,MAET,OAAIJ,EACK6B,IAGL5B,GACK,QAAC+B,EAAD,UAAaF,MAGF,IAAhBhC,GACK,QAACkC,EAAD,UAAaD,OAIpB,QAACC,EAAD,UACGnC,EAASoC,KAAI,CAACC,EAAOC,KACpB,MAAMxB,GAAMC,EAAAA,EAAAA,IAAQsB,EAAMrB,MAAOf,GAC3BgB,EAAWC,KAAKC,MAAML,GAgBtByB,GACJ,QAAC,WAAD,YACE,eAAKC,UAAU,WAAf,SAfK,YADCtC,GAGF,QAAC,IAAD,CACEoB,QAASe,EAAMd,KACfC,QAAQ,EACRE,YAAarB,IAIVgC,EAAMd,OAAQK,EAAAA,EAAAA,GAAE,SAOxBX,EAFH,OAMIwB,EAA6B,CACjCH,MAAAA,EACAI,GAAIL,EAAMM,IACVC,QAAS,KACPb,MAAAA,GAAAA,EAAa7B,EAAOmC,KAIxB,OACE,eACE,eAAe,OAAMnC,aAAiBmC,EAAMA,QAE5CQ,MAAO,CAACC,MAAOhC,EAAM,KAHvB,UAKE,QAAC,KAAD,CAASZ,MAAOqC,EAAaQ,qBAAqB,QAAlD,SACGV,EAAMW,SACL,QAACC,EAAD,KAEA,QAACC,EAAD,CACE,cAAYtB,EAAAA,EAAAA,GACV,6CACAS,EAAMA,UAEJI,OAZLJ,EAAMA,YAuBvBc,SACE,MAAM,SAACnD,EAAD,YAAWC,GAAeK,KAAKC,MAE/B6C,EAAepD,EAASqD,QAAO,CAACC,EAAKjB,IAAUiB,EAAMjB,EAAMrB,OAAO,GAaxE,OAZiBoC,EAAenD,GAG9BD,EAASuD,KAAK,CACZP,SAAS,EACTzB,MAAMK,EAAAA,EAAAA,GAAE,SACRS,MAAO,QACPrB,MAAOf,EAAcmD,EACrBT,IAAK,MAKP,QAACa,EAAD,WACGlD,KAAKP,cACLO,KAAKwB,qBAjKOjC,EAAAA,YAAAA,wB,OAAAA,EAAAA,eACiB,CAClCM,WAAW,EACXC,UAAU,EACV4B,cAAe,IAAM,KACrBE,YAAa,KAAM,uBAAIN,EAAAA,EAAAA,GAAE,qBACzBK,YAAa,IAAM,KACnB5B,oBAAoB,IAgKxB,MAAMoD,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGID,GAAa,OAAO,MAAP,qBAAH,kBACGE,EAAAA,EAAAA,GAAM,GADT,KAIVvB,GAAa,OAAO,MAAP,qBAAH,yEAMVxB,GAAQ,OAAO,MAAP,qBAAH,2BAEIgD,GAAKA,EAAEC,MAAMC,eAFjB,iDAIQH,EAAAA,EAAAA,GAAM,KAJd,qBAQL9C,GAAY,OAAO,MAAP,qBAAH,UACJ+C,GAAKA,EAAEC,MAAME,WADT,qBAGXC,EAAAA,EAHW,KAMT3C,GAAmB,OAAO,MAAP,qBAAH,uBAEXuC,GAAKA,EAAEC,MAAMI,SAFF,sBAMhB3C,GAAQ,OAAO,MAAP,qBACV0C,EAAAA,EADO,qBAKLlC,GAAU,OAAO,MAAP,qBAAH,oEAGK6B,EAAAA,EAAAA,GAAM,IAHX,WAIFC,GAAKA,EAAEC,MAAME,WAJX,KAOPb,GAAe,OAAO,OAAP,qBAAH,oFAMIQ,EAAOA,EAAO/C,OAAS,GAN3B,KASZwC,GAAU,OAAOe,EAAAA,EAAP,CAAcC,kBAAmBC,EAAAA,EAAjC,oBAAH,qFAMSR,GAAKF,EAAOE,EAAErB,QANvB","sources":["webpack:///./app/components/tagDistributionMeter.tsx"],"sourcesContent":["import * as React from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {TagSegment} from 'sentry/actionCreators/events';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport Version from 'sentry/components/version';\nimport {t} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {percent} from 'sentry/utils';\n\ntype DefaultProps = {\n  hasError: boolean;\n  isLoading: boolean;\n  renderEmpty: () => React.ReactNode;\n  renderError: () => React.ReactNode;\n  renderLoading: () => React.ReactNode;\n  showReleasePackage: boolean;\n};\n\ntype Props = DefaultProps & {\n  segments: TagSegment[];\n  title: string;\n  totalValues: number;\n  onTagClick?: (title: string, value: TagSegment) => void;\n};\n\ntype SegmentValue = {\n  index: number;\n  onClick: () => void;\n  to: LocationDescriptor;\n};\n\nexport default class TagDistributionMeter extends React.Component<Props> {\n  static defaultProps: DefaultProps = {\n    isLoading: false,\n    hasError: false,\n    renderLoading: () => null,\n    renderEmpty: () => <p>{t('No recent data.')}</p>,\n    renderError: () => null,\n    showReleasePackage: false,\n  };\n\n  renderTitle() {\n    const {segments, totalValues, title, isLoading, hasError, showReleasePackage} =\n      this.props;\n\n    if (!Array.isArray(segments) || segments.length <= 0) {\n      return (\n        <Title>\n          <TitleType>{title}</TitleType>\n        </Title>\n      );\n    }\n\n    const largestSegment = segments[0];\n    const pct = percent(largestSegment.count, totalValues);\n    const pctLabel = Math.floor(pct);\n    const renderLabel = () => {\n      switch (title) {\n        case 'release':\n          return (\n            <Label>\n              <Version\n                version={largestSegment.name}\n                anchor={false}\n                tooltipRawVersion\n                withPackage={showReleasePackage}\n                truncate\n              />\n            </Label>\n          );\n        default:\n          return <Label>{largestSegment.name || t('n/a')}</Label>;\n      }\n    };\n\n    return (\n      <Title>\n        <TitleType>{title}</TitleType>\n        <TitleDescription>\n          {renderLabel()}\n          {isLoading || hasError ? null : <Percent>{pctLabel}%</Percent>}\n        </TitleDescription>\n      </Title>\n    );\n  }\n\n  renderSegments() {\n    const {\n      segments,\n      onTagClick,\n      title,\n      isLoading,\n      hasError,\n      totalValues,\n      renderLoading,\n      renderError,\n      renderEmpty,\n      showReleasePackage,\n    } = this.props;\n\n    if (isLoading) {\n      return renderLoading();\n    }\n\n    if (hasError) {\n      return <SegmentBar>{renderError()}</SegmentBar>;\n    }\n\n    if (totalValues === 0) {\n      return <SegmentBar>{renderEmpty()}</SegmentBar>;\n    }\n\n    return (\n      <SegmentBar>\n        {segments.map((value, index) => {\n          const pct = percent(value.count, totalValues);\n          const pctLabel = Math.floor(pct);\n          const renderTooltipValue = () => {\n            switch (title) {\n              case 'release':\n                return (\n                  <Version\n                    version={value.name}\n                    anchor={false}\n                    withPackage={showReleasePackage}\n                  />\n                );\n              default:\n                return value.name || t('n/a');\n            }\n          };\n\n          const tooltipHtml = (\n            <React.Fragment>\n              <div className=\"truncate\">{renderTooltipValue()}</div>\n              {pctLabel}%\n            </React.Fragment>\n          );\n\n          const segmentProps: SegmentValue = {\n            index,\n            to: value.url,\n            onClick: () => {\n              onTagClick?.(title, value);\n            },\n          };\n\n          return (\n            <div\n              data-test-id={`tag-${title}-segment-${value.value}`}\n              key={value.value}\n              style={{width: pct + '%'}}\n            >\n              <Tooltip title={tooltipHtml} containerDisplayMode=\"block\">\n                {value.isOther ? (\n                  <OtherSegment />\n                ) : (\n                  <Segment\n                    aria-label={t(\n                      'Add the %s segment tag to the search query',\n                      value.value\n                    )}\n                    {...segmentProps}\n                  />\n                )}\n              </Tooltip>\n            </div>\n          );\n        })}\n      </SegmentBar>\n    );\n  }\n\n  render() {\n    const {segments, totalValues} = this.props;\n\n    const totalVisible = segments.reduce((sum, value) => sum + value.count, 0);\n    const hasOther = totalVisible < totalValues;\n\n    if (hasOther) {\n      segments.push({\n        isOther: true,\n        name: t('Other'),\n        value: 'other',\n        count: totalValues - totalVisible,\n        url: '',\n      });\n    }\n\n    return (\n      <TagSummary>\n        {this.renderTitle()}\n        {this.renderSegments()}\n      </TagSummary>\n    );\n  }\n}\n\nconst COLORS = [\n  '#3A3387',\n  '#5F40A3',\n  '#8C4FBD',\n  '#B961D3',\n  '#DE76E4',\n  '#EF91E8',\n  '#F7B2EC',\n  '#FCD8F4',\n  '#FEEBF9',\n];\n\nconst TagSummary = styled('div')`\n  margin-bottom: ${space(1)};\n`;\n\nconst SegmentBar = styled('div')`\n  display: flex;\n  overflow: hidden;\n  border-radius: 2px;\n`;\n\nconst Title = styled('div')`\n  display: flex;\n  font-size: ${p => p.theme.fontSizeSmall};\n  justify-content: space-between;\n  margin-bottom: ${space(0.25)};\n  line-height: 1.1;\n`;\n\nconst TitleType = styled('div')`\n  color: ${p => p.theme.textColor};\n  font-weight: bold;\n  ${overflowEllipsis};\n`;\n\nconst TitleDescription = styled('div')`\n  display: flex;\n  color: ${p => p.theme.gray300};\n  text-align: right;\n`;\n\nconst Label = styled('div')`\n  ${overflowEllipsis};\n  max-width: 150px;\n`;\n\nconst Percent = styled('div')`\n  font-weight: bold;\n  font-variant-numeric: tabular-nums;\n  padding-left: ${space(0.5)};\n  color: ${p => p.theme.textColor};\n`;\n\nconst OtherSegment = styled('span')`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${COLORS[COLORS.length - 1]};\n`;\n\nconst Segment = styled(Link, {shouldForwardProp: isPropValid})<SegmentValue>`\n  display: block;\n  width: 100%;\n  height: 16px;\n  color: inherit;\n  outline: none;\n  background-color: ${p => COLORS[p.index]};\n`;\n"],"names":["TagDistributionMeter","React","renderTitle","segments","totalValues","title","isLoading","hasError","showReleasePackage","this","props","Array","isArray","length","Title","TitleType","largestSegment","pct","percent","count","pctLabel","Math","floor","TitleDescription","Label","version","name","anchor","tooltipRawVersion","withPackage","truncate","t","Percent","renderSegments","onTagClick","renderLoading","renderError","renderEmpty","SegmentBar","map","value","index","tooltipHtml","className","segmentProps","to","url","onClick","style","width","containerDisplayMode","isOther","OtherSegment","Segment","render","totalVisible","reduce","sum","push","TagSummary","COLORS","space","p","theme","fontSizeSmall","textColor","overflowEllipsis","gray300","Link","shouldForwardProp","isPropValid"],"sourceRoot":""}