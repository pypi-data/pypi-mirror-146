{"version":3,"file":"chunks/app_components_modals_sudoModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/hook.tsx","webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/modals/sudoModal.tsx","webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/constants/superuserAccessErrors.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport HookStore from 'sentry/stores/hookStore';\nimport {HookName, Hooks} from 'sentry/types/hooks';\n\ntype Props<H extends HookName> = {\n  /**\n   * The name of the hook as listed in hookstore.add(hookName, callback)\n   */\n  name: H;\n  /**\n   * If children are provided as a function to the Hook, the hooks will be\n   * passed down as a render prop.\n   */\n  children?: (opts: {hooks: Array<Hooks[H]>}) => React.ReactNode;\n} & Omit<Parameters<Hooks[H]>[0], 'name'>;\n\ntype HookState<H extends HookName> = {\n  hooks: Array<Hooks[H]>;\n};\n\n/**\n * Instead of accessing the HookStore directly, use this.\n *\n * If the hook slot needs to perform anything w/ the hooks, you can pass a\n * function as a child and you will receive an object with a `hooks` key\n *\n * Example:\n *\n *   <Hook name=\"my-hook\">\n *     {({hooks}) => hooks.map(hook => (\n *       <Wrapper>{hook}</Wrapper>\n *     ))}\n *   </Hook>\n */\nfunction Hook<H extends HookName>({name, ...props}: Props<H>) {\n  class HookComponent extends React.Component<{}, HookState<H>> {\n    static displayName = `Hook(${name})`;\n\n    state = {\n      hooks: HookStore.get(name).map(cb => cb(props)),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    handleHooks(hookName: HookName, hooks: Array<Hooks[H]>) {\n      // Make sure that the incoming hook update matches this component's hook name\n      if (hookName !== name) {\n        return;\n      }\n\n      this.setState({hooks: hooks.map(cb => cb(props))});\n    }\n\n    unsubscribe = HookStore.listen(\n      (hookName: HookName, hooks: Array<Hooks[H]>) => this.handleHooks(hookName, hooks),\n      undefined\n    );\n\n    render() {\n      const {children} = props;\n\n      if (!this.state.hooks || !this.state.hooks.length) {\n        return null;\n      }\n\n      if (typeof children === 'function') {\n        return children({hooks: this.state.hooks});\n      }\n\n      return this.state.hooks;\n    }\n  }\n\n  return <HookComponent />;\n}\n\nexport default Hook;\n","import {Component} from 'react';\n\nimport {Authenticator} from 'sentry/types';\n\nimport U2fSign from './u2fsign';\n\ntype Props = {\n  authenticators: Array<Authenticator>;\n  onTap: U2fSign['props']['onTap'];\n  className?: string;\n  displayMode?: U2fSign['props']['displayMode'];\n};\n\nclass U2fContainer extends Component<Props> {\n  render() {\n    const {className, authenticators} = this.props;\n\n    if (!authenticators.length) {\n      return null;\n    }\n\n    return (\n      <div className={className}>\n        {authenticators.map(auth =>\n          auth.id === 'u2f' && auth.challenge ? (\n            <U2fSign key={auth.id} {...this.props} challengeData={auth.challenge} />\n          ) : null\n        )}\n      </div>\n    );\n  }\n}\n\nexport default U2fContainer;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport InputField from 'sentry/components/forms/inputField';\nimport Hook from 'sentry/components/hook';\nimport U2fContainer from 'sentry/components/u2f/u2fContainer';\nimport {ErrorCodes} from 'sentry/constants/superuserAccessErrors';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport space from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = WithRouterProps &\n  Pick<ModalRenderProps, 'Body' | 'Header'> & {\n    api: Client;\n    closeModal: () => void;\n    /**\n     * User is a superuser without an active su session\n     */\n    isSuperuser?: boolean;\n    /**\n     * expects a function that returns a Promise\n     */\n    retryRequest?: () => Promise<any>;\n  };\n\ntype State = {\n  authenticators: Array<Authenticator>;\n  busy: boolean;\n  error: boolean;\n  errorType: string;\n  showAccessForms: boolean;\n  superuserAccessCategory: string;\n  superuserReason: string;\n};\n\nclass SudoModal extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    errorType: '',\n    busy: false,\n    showAccessForms: true,\n    superuserAccessCategory: '',\n    superuserReason: '',\n    authenticators: [],\n  };\n\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  handleSubmit = async data => {\n    const {api, isSuperuser} = this.props;\n\n    if (this.state.showAccessForms && isSuperuser) {\n      this.setState({\n        showAccessForms: false,\n        superuserAccessCategory: data.superuserAccessCategory,\n        superuserReason: data.superuserReason,\n      });\n    } else {\n      try {\n        await api.requestPromise('/auth/', {method: 'PUT', data});\n        this.handleSuccess();\n      } catch (err) {\n        this.handleError(err);\n      }\n    }\n  };\n\n  handleSuccess = () => {\n    const {closeModal, isSuperuser, location, router, retryRequest} = this.props;\n\n    if (!retryRequest) {\n      closeModal();\n      return;\n    }\n\n    if (isSuperuser) {\n      router.replace({pathname: location.pathname, state: {forceUpdate: new Date()}});\n      return;\n    }\n\n    this.setState({busy: true, showAccessForms: true}, () => {\n      retryRequest().then(() => {\n        this.setState({busy: false}, closeModal);\n      });\n    });\n  };\n\n  handleError = err => {\n    let errorType = '';\n    if (err.status === 403) {\n      errorType = ErrorCodes.invalidPassword;\n    } else if (err.status === 401) {\n      errorType = ErrorCodes.invalidSSOSession;\n    } else if (err.status === 400) {\n      errorType = ErrorCodes.invalidAccessCategory;\n    } else {\n      errorType = ErrorCodes.unknownError;\n    }\n    this.setState({\n      busy: false,\n      error: true,\n      showAccessForms: true,\n      errorType,\n    });\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    this.setState({busy: true});\n\n    const {api, isSuperuser} = this.props;\n\n    try {\n      data.isSuperuserModal = isSuperuser;\n      data.superuserAccessCategory = this.state.superuserAccessCategory;\n      data.superuserReason = this.state.superuserReason;\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({busy: false});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  renderBodyContent() {\n    const {isSuperuser} = this.props;\n    const {authenticators, error, showAccessForms, errorType} = this.state;\n    const user = ConfigStore.get('user');\n    const isSelfHosted = ConfigStore.get('isSelfHosted');\n\n    if (!user.hasPasswordAuth && authenticators.length === 0) {\n      return (\n        <React.Fragment>\n          <StyledTextBlock>\n            {isSuperuser\n              ? t(\n                  'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n                )\n              : t('You will need to reauthenticate to continue')}\n          </StyledTextBlock>\n          {error && (\n            <StyledAlert type=\"error\" showIcon>\n              {t(errorType)}\n            </StyledAlert>\n          )}\n          {isSuperuser ? (\n            <Form\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/auth/\"\n              submitLabel={t('Re-authenticate')}\n              onSubmitSuccess={this.handleSuccess}\n              onSubmitError={this.handleError}\n              initialData={{isSuperuserModal: isSuperuser}}\n              resetOnError\n            >\n              {!isSelfHosted && showAccessForms && isSuperuser && (\n                <Hook name=\"component:superuser-access-category\" />\n              )}\n            </Form>\n          ) : (\n            <Button\n              priority=\"primary\"\n              href={`/auth/login/?next=${encodeURIComponent(location.pathname)}`}\n            >\n              {t('Continue')}\n            </Button>\n          )}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <StyledTextBlock>\n          {isSuperuser\n            ? t(\n                'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n              )\n            : t('Help us keep your account safe by confirming your identity.')}\n        </StyledTextBlock>\n\n        {error && (\n          <StyledAlert type=\"error\" showIcon>\n            {t(errorType)}\n          </StyledAlert>\n        )}\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/auth/\"\n          submitLabel={showAccessForms ? t('Continue') : t('Confirm Password')}\n          onSubmit={this.handleSubmit}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={this.handleError}\n          hideFooter={!user.hasPasswordAuth && authenticators.length === 0}\n          initialData={{isSuperuserModal: isSuperuser}}\n          resetOnError\n        >\n          {!isSelfHosted && showAccessForms && isSuperuser && (\n            <Hook name=\"component:superuser-access-category\" />\n          )}\n          {((!showAccessForms && isSuperuser) || !isSuperuser || isSelfHosted) &&\n            user.hasPasswordAuth && (\n              <StyledInputField\n                type=\"password\"\n                inline={false}\n                label={t('Password')}\n                name=\"password\"\n                autoFocus\n                flexibleControlStateSize\n              />\n            )}\n          {((!showAccessForms && isSuperuser) || !isSuperuser || isSelfHosted) && (\n            <U2fContainer\n              authenticators={authenticators}\n              displayMode=\"sudo\"\n              onTap={this.handleU2fTap}\n            />\n          )}\n        </Form>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton>{t('Confirm Password to Continue')}</Header>\n        <Body>{this.renderBodyContent()}</Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(withApi(SudoModal));\nexport {SudoModal};\n\nconst StyledTextBlock = styled(TextBlock)`\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledInputField = styled(InputField)`\n  padding-left: 0;\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n","// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport * as cbor from 'cbor-web';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype TapParams = {\n  challenge: string;\n  response: string;\n  isSuperuserModal?: boolean;\n  superuserAccessCategory?: string;\n  superuserReason?: string;\n};\n\ntype Props = {\n  challengeData: ChallengeData;\n  flowMode: string;\n  onTap: ({\n    response,\n    challenge,\n    isSuperuserModal,\n    superuserAccessCategory,\n    superuserReason,\n  }: TapParams) => Promise<void>;\n  organization: Organization;\n  silentIfUnsupported: boolean;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  challengeElement: HTMLInputElement | null;\n  deviceFailure: string | null;\n  failCount: number;\n  formElement: HTMLFormElement | null;\n  hasBeenTapped: boolean;\n  isSafari: boolean;\n  isSupported: boolean | null;\n  responseElement: HTMLInputElement | null;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n    isSafari: false,\n    failCount: 0,\n  };\n\n  async componentDidMount() {\n    const supported = !!window.PublicKeyCredential;\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    const isSafari =\n      navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n\n    if (isSafari) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        deviceFailure: 'safari: requires interaction',\n        isSafari,\n        hasBeenTapped: false,\n      });\n    }\n\n    if (supported && !isSafari) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    if (this.props.flowMode === 'sign') {\n      const authenticatorData = {\n        keyHandle: data.id,\n        clientData: bufferToBase64url(data.response.clientDataJSON),\n        signatureData: bufferToBase64url(data.response.signature),\n        authenticatorData: bufferToBase64url(data.response.authenticatorData),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n    if (this.props.flowMode === 'enroll') {\n      const authenticatorData = {\n        id: data.id,\n        rawId: bufferToBase64url(data.rawId),\n        response: {\n          attestationObject: bufferToBase64url(data.response.attestationObject),\n          clientDataJSON: bufferToBase64url(data.response.clientDataJSON),\n        },\n        type: bufferToBase64url(data.type),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n\n    throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n          failCount: this.state.failCount + 1,\n        });\n      });\n  }\n\n  webAuthnSignIn(publicKeyCredentialRequestOptions) {\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  webAuthnRegister(publicKey) {\n    const promise = navigator.credentials.create({\n      publicKey,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    if (this.props.flowMode === 'sign') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnAuthenticationData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      challenge\n        .then(data => {\n          this.webAuthnSignIn(data);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else if (this.props.flowMode === 'enroll') {\n      const challengeArray = base64urlToBuffer(\n        this.props.challengeData.webAuthnRegisterData\n      );\n      const challenge = cbor.decodeFirst(challengeArray);\n      // challenge contains a PublicKeyCredentialRequestOptions object for webauthn registration\n      challenge\n        .then(data => {\n          this.webAuthnRegister(data.publicKey);\n        })\n        .catch(err => {\n          const failure = 'DEVICE_ERROR';\n          Sentry.captureException(err);\n          this.setState({\n            deviceFailure: failure,\n            hasBeenTapped: false,\n          });\n        });\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderSafariWebAuthn = () => {\n    return (\n      <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n        {this.props.flowMode === 'enroll'\n          ? t('Enroll with WebAuthn')\n          : t('Sign in with WebAuthn')}\n      </a>\n    );\n  };\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    if (this.state.isSafari && this.state.failCount === 0) {\n      return this.renderSafariWebAuthn();\n    }\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure\n            ? this.state.failCount === 0 && this.state.isSafari\n              ? ' loading-dots'\n              : ' device-failure'\n            : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default withOrganization(U2fInterface);\n","import {Component} from 'react';\n\nimport {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = React.ComponentProps<typeof U2fInterface>;\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n","export enum ErrorCodes {\n  invalidPassword = 'Incorrect password',\n  invalidSSOSession = 'Your SSO Session has expired, please reauthnticate',\n  invalidAccessCategory = 'Please fill out the access category and reason correctly',\n  unknownError = 'An error ocurred, please try again',\n}\n","import {useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  function handleCleanup() {\n    !persistInFlight && api.clear();\n  }\n\n  useEffect(() => handleCleanup, []);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'sentry/api';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useApi from 'sentry/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n"],"names":["Hook","name","props","HookComponent","React","hooks","HookStore","map","cb","hookName","this","handleHooks","undefined","componentWillUnmount","unsubscribe","setState","render","children","state","length","U2fContainer","Component","className","authenticators","auth","id","challenge","challengeData","SudoModal","error","errorType","busy","showAccessForms","superuserAccessCategory","superuserReason","async","api","isSuperuser","data","requestPromise","method","handleSuccess","err","handleError","closeModal","location","router","retryRequest","replace","pathname","forceUpdate","Date","then","status","ErrorCodes","isSuperuserModal","componentDidMount","getAuthenticators","renderBodyContent","user","ConfigStore","isSelfHosted","hasPasswordAuth","StyledTextBlock","t","StyledAlert","type","showIcon","apiMethod","apiEndpoint","submitLabel","onSubmit","handleSubmit","onSubmitSuccess","onSubmitError","hideFooter","initialData","resetOnError","StyledInputField","inline","label","autoFocus","flexibleControlStateSize","displayMode","onTap","handleU2fTap","priority","href","encodeURIComponent","Header","Body","closeButton","withRouter","withApi","TextBlock","space","InputField","Alert","base64urlToBuffer","baseurl64String","padding","slice","base64String","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","isSafari","failCount","invokeU2fFlow","ref","form","value","JSON","stringify","onClick","onTryAgain","flowMode","supportMail","support","renderSafariWebAuthn","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","supported","window","PublicKeyCredential","navigator","userAgent","includes","getU2FResponse","response","authenticatorData","keyHandle","clientData","clientDataJSON","signatureData","signature","rawId","attestationObject","Error","submitU2fResponse","promise","u2fResponse","catch","submit","failure","metaData","Sentry","webAuthnSignIn","publicKeyCredentialRequestOptions","credentials","get","publicKey","webAuthnRegister","create","challengeArray","webAuthnAuthenticationData","cbor","decodeFirst","webAuthnRegisterData","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","renderPrompt","bindChallengeElement","bindResponseElement","withOrganization","MESSAGES","signin","sudo","enroll","U2fSign","persistInFlight","providedApi","localApi","useRef","current","Client","handleCleanup","clear","useEffect","WrappedComponent","options","WithApi","propsApi","useApi","displayName","getDisplayName"],"sourceRoot":""}