{"version":3,"file":"chunks/app_views_dashboardsV2_detail_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/dashboardsV2/controls.tsx","webpack:///./app/views/dashboardsV2/title.tsx","webpack:///./app/views/dashboardsV2/detail.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Confirm from 'sentry/components/confirm';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconAdd, IconEdit} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\n\nimport {DashboardListItem, DashboardState, MAX_WIDGETS} from './types';\n\ntype Props = {\n  dashboardState: DashboardState;\n  dashboards: DashboardListItem[];\n  onAddWidget: () => void;\n  onCancel: () => void;\n  onCommit: () => void;\n  onDelete: () => void;\n  onEdit: () => void;\n  organization: Organization;\n  widgetLimitReached: boolean;\n};\n\nfunction Controls({\n  organization,\n  dashboardState,\n  dashboards,\n  widgetLimitReached,\n  onEdit,\n  onCommit,\n  onDelete,\n  onCancel,\n  onAddWidget,\n}: Props) {\n  function renderCancelButton(label = t('Cancel')) {\n    return (\n      <Button\n        data-test-id=\"dashboard-cancel\"\n        onClick={e => {\n          e.preventDefault();\n          onCancel();\n        }}\n      >\n        {label}\n      </Button>\n    );\n  }\n\n  if ([DashboardState.EDIT, DashboardState.PENDING_DELETE].includes(dashboardState)) {\n    return (\n      <StyledButtonBar gap={1} key=\"edit-controls\">\n        {renderCancelButton()}\n        <Confirm\n          priority=\"danger\"\n          message={t('Are you sure you want to delete this dashboard?')}\n          onConfirm={onDelete}\n          disabled={dashboards.length <= 1}\n        >\n          <Button data-test-id=\"dashboard-delete\" priority=\"danger\">\n            {t('Delete')}\n          </Button>\n        </Confirm>\n        <Button\n          data-test-id=\"dashboard-commit\"\n          onClick={e => {\n            e.preventDefault();\n            onCommit();\n          }}\n          priority=\"primary\"\n        >\n          {t('Save and Finish')}\n        </Button>\n      </StyledButtonBar>\n    );\n  }\n\n  if (dashboardState === DashboardState.CREATE) {\n    return (\n      <StyledButtonBar gap={1} key=\"create-controls\">\n        {renderCancelButton()}\n        <Button\n          data-test-id=\"dashboard-commit\"\n          onClick={e => {\n            e.preventDefault();\n            onCommit();\n          }}\n          priority=\"primary\"\n        >\n          {t('Save and Finish')}\n        </Button>\n      </StyledButtonBar>\n    );\n  }\n\n  if (dashboardState === DashboardState.PREVIEW) {\n    return (\n      <StyledButtonBar gap={1} key=\"preview-controls\">\n        {renderCancelButton(t('Go Back'))}\n        <Button\n          data-test-id=\"dashboard-commit\"\n          onClick={e => {\n            e.preventDefault();\n            onCommit();\n          }}\n          priority=\"primary\"\n        >\n          {t('Add Dashboard')}\n        </Button>\n      </StyledButtonBar>\n    );\n  }\n\n  return (\n    <StyledButtonBar gap={1} key=\"controls\">\n      <DashboardEditFeature>\n        {hasFeature => (\n          <React.Fragment>\n            <Button\n              data-test-id=\"dashboard-edit\"\n              onClick={e => {\n                e.preventDefault();\n                onEdit();\n              }}\n              icon={<IconEdit />}\n              disabled={!hasFeature}\n              priority={\n                organization.features.includes('widget-library') ? 'default' : 'primary'\n              }\n            >\n              {t('Edit Dashboard')}\n            </Button>\n            {organization.features.includes('widget-library') && hasFeature ? (\n              <Tooltip\n                title={tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                  maxWidgets: MAX_WIDGETS,\n                })}\n                disabled={!!!widgetLimitReached}\n              >\n                <Button\n                  data-test-id=\"add-widget-library\"\n                  priority=\"primary\"\n                  disabled={widgetLimitReached}\n                  icon={<IconAdd isCircled />}\n                  onClick={() => {\n                    trackAdvancedAnalyticsEvent(\n                      'dashboards_views.widget_library.opened',\n                      {\n                        organization,\n                      }\n                    );\n                    onAddWidget();\n                  }}\n                >\n                  {t('Add Widget')}\n                </Button>\n              </Tooltip>\n            ) : null}\n          </React.Fragment>\n        )}\n      </DashboardEditFeature>\n    </StyledButtonBar>\n  );\n}\n\nconst DashboardEditFeature = ({\n  children,\n}: {\n  children: (hasFeature: boolean) => React.ReactNode;\n}) => {\n  const noFeatureMessage = t('Requires dashboard editing.');\n\n  const renderDisabled = p => (\n    <Hovercard\n      body={\n        <FeatureDisabled\n          features={p.features}\n          hideHelpToggle\n          message={noFeatureMessage}\n          featureName={noFeatureMessage}\n        />\n      }\n    >\n      {p.children(p)}\n    </Hovercard>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:dashboards-edit\"\n      features={['organizations:dashboards-edit']}\n      renderDisabled={renderDisabled}\n    >\n      {({hasFeature}) => children(hasFeature)}\n    </Feature>\n  );\n};\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    grid-auto-flow: row;\n    grid-row-gap: ${space(1)};\n    width: 100%;\n  }\n`;\n\nexport default Controls;\n","import EditableText from 'sentry/components/editableText';\nimport {t} from 'sentry/locale';\n\nimport {DashboardDetails} from './types';\n\ntype Props = {\n  dashboard: DashboardDetails | null;\n  isEditing: boolean;\n  onUpdate: (dashboard: DashboardDetails) => void;\n};\n\nfunction DashboardTitle({dashboard, isEditing, onUpdate}: Props) {\n  return (\n    <div>\n      {!dashboard ? (\n        t('Dashboards')\n      ) : (\n        <EditableText\n          isDisabled={!isEditing}\n          value={dashboard.title}\n          onChange={newTitle => onUpdate({...dashboard, title: newTitle})}\n          errorMessage={t('Please set a title for this dashboard')}\n          autoSelect\n        />\n      )}\n    </div>\n  );\n}\n\nexport default DashboardTitle;\n","import {cloneElement, Component, isValidElement} from 'react';\nimport {browserHistory, PlainRoute, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {\n  createDashboard,\n  deleteDashboard,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openAddDashboardWidgetModal,\n  openWidgetViewerModal,\n} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {\n  isWidgetViewerPath,\n  WidgetViewerQueryField,\n} from 'sentry/components/modals/widgetViewerModal/utils';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport {\n  WidgetViewerContext,\n  WidgetViewerContextProps,\n} from './widgetViewer/widgetViewerContext';\nimport Controls from './controls';\nimport Dashboard from './dashboard';\nimport {DEFAULT_STATS_PERIOD} from './data';\nimport {\n  assignDefaultLayout,\n  calculateColumnDepths,\n  getDashboardLayout,\n} from './layoutUtils';\nimport DashboardTitle from './title';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DashboardState,\n  DashboardWidgetSource,\n  MAX_WIDGETS,\n  Widget,\n  WidgetType,\n} from './types';\nimport {cloneDashboard} from './utils';\n\nconst UNSAVED_MESSAGE = t('You have unsaved changes, are you sure you want to leave?');\n\nconst HookHeader = HookOrDefault({hookName: 'component:dashboards-header'});\n\ntype RouteParams = {\n  orgId: string;\n  dashboardId?: string;\n  widgetId?: number;\n  widgetIndex?: number;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  api: Client;\n  dashboard: DashboardDetails;\n  dashboards: DashboardListItem[];\n  initialState: DashboardState;\n  organization: Organization;\n  route: PlainRoute;\n  newWidget?: Widget;\n  onDashboardUpdate?: (updatedDashboard: DashboardDetails) => void;\n  onSetNewWidget?: () => void;\n};\n\ntype State = {\n  dashboardState: DashboardState;\n  modifiedDashboard: DashboardDetails | null;\n  widgetLimitReached: boolean;\n} & WidgetViewerContextProps;\n\nclass DashboardDetail extends Component<Props, State> {\n  state: State = {\n    dashboardState: this.props.initialState,\n    modifiedDashboard: this.updateModifiedDashboard(this.props.initialState),\n    widgetLimitReached: this.props.dashboard.widgets.length >= MAX_WIDGETS,\n    setData: data => {\n      this.setState(data);\n    },\n  };\n\n  componentDidMount() {\n    const {route, router} = this.props;\n    router.setRouteLeaveHook(route, this.onRouteLeave);\n    window.addEventListener('beforeunload', this.onUnload);\n    this.checkIfShouldMountWidgetViewerModal();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    this.checkIfShouldMountWidgetViewerModal();\n\n    if (prevProps.initialState !== this.props.initialState) {\n      // Widget builder can toggle Edit state when saving\n      this.setState({dashboardState: this.props.initialState});\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onUnload);\n  }\n\n  checkIfShouldMountWidgetViewerModal() {\n    const {\n      params: {widgetId, dashboardId},\n      organization,\n      dashboard,\n      location,\n      router,\n    } = this.props;\n    const {seriesData, tableData} = this.state;\n    if (isWidgetViewerPath(location.pathname)) {\n      const widget =\n        defined(widgetId) &&\n        (dashboard.widgets.find(({id}) => id === String(widgetId)) ??\n          dashboard.widgets[widgetId]);\n      if (widget) {\n        openWidgetViewerModal({\n          organization,\n          widget,\n          seriesData,\n          tableData,\n          onClose: () => {\n            // Filter out Widget Viewer Modal query params when exiting the Modal\n            const query = omit(location.query, Object.values(WidgetViewerQueryField));\n            router.push({\n              pathname: location.pathname.replace(/widget\\/[0-9]+\\/$/, ''),\n              query,\n            });\n          },\n          onEdit: () => {\n            if (\n              organization.features.includes('new-widget-builder-experience') &&\n              !organization.features.includes(\n                'new-widget-builder-experience-modal-access'\n              )\n            ) {\n              const widgetIndex = dashboard.widgets.indexOf(widget);\n              if (dashboardId) {\n                router.push({\n                  pathname: `/organizations/${organization.slug}/dashboard/${dashboardId}/widget/${widgetIndex}/edit/`,\n                  query: {\n                    ...location.query,\n                    source: DashboardWidgetSource.DASHBOARDS,\n                  },\n                });\n                return;\n              }\n            }\n            openAddDashboardWidgetModal({\n              organization,\n              widget,\n              onUpdateWidget: (nextWidget: Widget) => {\n                const updateIndex = dashboard.widgets.indexOf(widget);\n                const nextWidgetsList = cloneDeep(dashboard.widgets);\n                nextWidgetsList[updateIndex] = nextWidget;\n                this.handleUpdateWidgetList(nextWidgetsList);\n              },\n              source: DashboardWidgetSource.DASHBOARDS,\n            });\n          },\n        });\n        trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.open', {\n          organization,\n          widget_type: widget.widgetType ?? WidgetType.DISCOVER,\n          display_type: widget.displayType,\n        });\n      } else {\n        // Replace the URL if the widget isn't found and raise an error in toast\n        router.replace({\n          pathname: `/organizations/${organization.slug}/dashboard/${dashboard.id}/`,\n          query: location.query,\n        });\n        addErrorMessage(t('Widget not found'));\n      }\n    }\n  }\n\n  updateModifiedDashboard(dashboardState: DashboardState) {\n    const {dashboard} = this.props;\n    switch (dashboardState) {\n      case DashboardState.PREVIEW:\n      case DashboardState.CREATE:\n      case DashboardState.EDIT:\n        return cloneDashboard(dashboard);\n      default: {\n        return null;\n      }\n    }\n  }\n\n  get isPreview() {\n    const {dashboardState} = this.state;\n    return DashboardState.PREVIEW === dashboardState;\n  }\n\n  get isEditing() {\n    const {dashboardState} = this.state;\n    return [\n      DashboardState.EDIT,\n      DashboardState.CREATE,\n      DashboardState.PENDING_DELETE,\n    ].includes(dashboardState);\n  }\n\n  get isWidgetBuilderRouter() {\n    const {location, params, organization} = this.props;\n    const {dashboardId, widgetIndex} = params;\n\n    const widgetBuilderRoutes = [\n      `/organizations/${organization.slug}/dashboards/new/widget/new/`,\n      `/organizations/${organization.slug}/dashboard/${dashboardId}/widget/new/`,\n      `/organizations/${organization.slug}/dashboards/new/widget/${widgetIndex}/edit/`,\n      `/organizations/${organization.slug}/dashboard/${dashboardId}/widget/${widgetIndex}/edit/`,\n    ];\n\n    return widgetBuilderRoutes.includes(location.pathname);\n  }\n\n  get dashboardTitle() {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n    return modifiedDashboard ? modifiedDashboard.title : dashboard.title;\n  }\n\n  onEdit = () => {\n    const {dashboard} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'dashboards2.edit.start',\n      eventName: 'Dashboards2: Edit start',\n      organization_id: parseInt(this.props.organization.id, 10),\n    });\n\n    this.setState({\n      dashboardState: DashboardState.EDIT,\n      modifiedDashboard: cloneDashboard(dashboard),\n    });\n  };\n\n  onRouteLeave = () => {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    if (\n      ![\n        DashboardState.VIEW,\n        DashboardState.PENDING_DELETE,\n        DashboardState.PREVIEW,\n      ].includes(this.state.dashboardState) &&\n      !isEqual(modifiedDashboard, dashboard)\n    ) {\n      return UNSAVED_MESSAGE;\n    }\n    return undefined;\n  };\n\n  onUnload = (event: BeforeUnloadEvent) => {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    if (\n      [\n        DashboardState.VIEW,\n        DashboardState.PENDING_DELETE,\n        DashboardState.PREVIEW,\n      ].includes(this.state.dashboardState) ||\n      isEqual(modifiedDashboard, dashboard)\n    ) {\n      return;\n    }\n    event.preventDefault();\n    event.returnValue = UNSAVED_MESSAGE;\n  };\n\n  onDelete = (dashboard: State['modifiedDashboard']) => () => {\n    const {api, organization, location} = this.props;\n    if (!dashboard?.id) {\n      return;\n    }\n\n    const previousDashboardState = this.state.dashboardState;\n\n    this.setState({dashboardState: DashboardState.PENDING_DELETE}, () => {\n      deleteDashboard(api, organization.slug, dashboard.id)\n        .then(() => {\n          addSuccessMessage(t('Dashboard deleted'));\n          trackAnalyticsEvent({\n            eventKey: 'dashboards2.delete',\n            eventName: 'Dashboards2: Delete',\n            organization_id: parseInt(this.props.organization.id, 10),\n          });\n          browserHistory.replace({\n            pathname: `/organizations/${organization.slug}/dashboards/`,\n            query: location.query,\n          });\n        })\n        .catch(() => {\n          this.setState({\n            dashboardState: previousDashboardState,\n          });\n        });\n    });\n  };\n\n  onCancel = () => {\n    const {organization, dashboard, location, params} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    let hasDashboardChanged = !isEqual(modifiedDashboard, dashboard);\n\n    // If a dashboard has every layout undefined, then ignore the layout field\n    // when checking equality because it is a dashboard from before the grid feature\n    const isLegacyLayout = dashboard.widgets.every(({layout}) => !defined(layout));\n    if (isLegacyLayout) {\n      hasDashboardChanged = !isEqual(\n        {\n          ...modifiedDashboard,\n          widgets: modifiedDashboard?.widgets.map(widget => omit(widget, 'layout')),\n        },\n        {...dashboard, widgets: dashboard.widgets.map(widget => omit(widget, 'layout'))}\n      );\n    }\n\n    // Don't confirm preview cancellation regardless of dashboard state\n    if (hasDashboardChanged && !this.isPreview) {\n      // Ignore no-alert here, so that the confirm on cancel matches onUnload & onRouteLeave\n      /* eslint no-alert:0 */\n      if (!confirm(UNSAVED_MESSAGE)) {\n        return;\n      }\n    }\n    if (params.dashboardId) {\n      trackAnalyticsEvent({\n        eventKey: 'dashboards2.edit.cancel',\n        eventName: 'Dashboards2: Edit cancel',\n        organization_id: parseInt(this.props.organization.id, 10),\n      });\n      this.setState({\n        dashboardState: DashboardState.VIEW,\n        modifiedDashboard: null,\n      });\n      return;\n    }\n    trackAnalyticsEvent({\n      eventKey: 'dashboards2.create.cancel',\n      eventName: 'Dashboards2: Create cancel',\n      organization_id: parseInt(this.props.organization.id, 10),\n    });\n    browserHistory.replace({\n      pathname: `/organizations/${organization.slug}/dashboards/`,\n      query: location.query,\n    });\n  };\n\n  handleUpdateWidgetList = (widgets: Widget[]) => {\n    const {organization, dashboard, api, onDashboardUpdate, location} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    // Use the new widgets for calculating layout because widgets has\n    // the most up to date information in edit state\n    const currentLayout = getDashboardLayout(widgets);\n    const layoutColumnDepths = calculateColumnDepths(currentLayout);\n    const newModifiedDashboard = {\n      ...cloneDashboard(modifiedDashboard || dashboard),\n      widgets: assignDefaultLayout(widgets, layoutColumnDepths),\n    };\n    this.setState({\n      modifiedDashboard: newModifiedDashboard,\n      widgetLimitReached: widgets.length >= MAX_WIDGETS,\n    });\n    if (this.isEditing || this.isPreview) {\n      return;\n    }\n    updateDashboard(api, organization.slug, newModifiedDashboard).then(\n      (newDashboard: DashboardDetails) => {\n        if (onDashboardUpdate) {\n          onDashboardUpdate(newDashboard);\n          this.setState({\n            modifiedDashboard: null,\n          });\n        }\n        addSuccessMessage(t('Dashboard updated'));\n        if (dashboard && newDashboard.id !== dashboard.id) {\n          browserHistory.replace({\n            pathname: `/organizations/${organization.slug}/dashboard/${newDashboard.id}/`,\n            query: {\n              ...location.query,\n            },\n          });\n          return;\n        }\n      },\n      () => undefined\n    );\n  };\n\n  handleAddCustomWidget = (widget: Widget) => {\n    const {dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n    const newModifiedDashboard = modifiedDashboard || dashboard;\n    this.onUpdateWidget([...newModifiedDashboard.widgets, widget]);\n  };\n\n  onAddWidget = () => {\n    const {\n      organization,\n      dashboard,\n      router,\n      location,\n      params: {dashboardId},\n    } = this.props;\n    this.setState({\n      modifiedDashboard: cloneDashboard(dashboard),\n    });\n\n    if (\n      organization.features.includes('new-widget-builder-experience') &&\n      !organization.features.includes('new-widget-builder-experience-modal-access')\n    ) {\n      if (dashboardId) {\n        router.push({\n          pathname: `/organizations/${organization.slug}/dashboard/${dashboardId}/widget/new/`,\n          query: {\n            ...location.query,\n            source: DashboardWidgetSource.DASHBOARDS,\n          },\n        });\n        return;\n      }\n    }\n    openAddDashboardWidgetModal({\n      organization,\n      dashboard,\n      onAddLibraryWidget: (widgets: Widget[]) => this.handleUpdateWidgetList(widgets),\n      source: DashboardWidgetSource.LIBRARY,\n    });\n  };\n\n  onCommit = () => {\n    const {api, organization, location, dashboard, onDashboardUpdate} = this.props;\n    const {modifiedDashboard, dashboardState} = this.state;\n\n    switch (dashboardState) {\n      case DashboardState.PREVIEW:\n      case DashboardState.CREATE: {\n        if (modifiedDashboard) {\n          if (this.isPreview) {\n            trackAdvancedAnalyticsEvent('dashboards_manage.templates.add', {\n              organization,\n              dashboard_id: dashboard.id,\n              dashboard_title: dashboard.title,\n              was_previewed: true,\n            });\n          }\n          createDashboard(api, organization.slug, modifiedDashboard, this.isPreview).then(\n            (newDashboard: DashboardDetails) => {\n              addSuccessMessage(t('Dashboard created'));\n              trackAnalyticsEvent({\n                eventKey: 'dashboards2.create.complete',\n                eventName: 'Dashboards2: Create complete',\n                organization_id: parseInt(organization.id, 10),\n              });\n              this.setState({\n                dashboardState: DashboardState.VIEW,\n              });\n\n              // redirect to new dashboard\n              browserHistory.replace({\n                pathname: `/organizations/${organization.slug}/dashboard/${newDashboard.id}/`,\n                query: {\n                  ...location.query,\n                },\n              });\n            },\n            () => undefined\n          );\n        }\n        break;\n      }\n      case DashboardState.EDIT: {\n        // only update the dashboard if there are changes\n        if (modifiedDashboard) {\n          if (isEqual(dashboard, modifiedDashboard)) {\n            this.setState({\n              dashboardState: DashboardState.VIEW,\n              modifiedDashboard: null,\n            });\n            return;\n          }\n          updateDashboard(api, organization.slug, modifiedDashboard).then(\n            (newDashboard: DashboardDetails) => {\n              if (onDashboardUpdate) {\n                onDashboardUpdate(newDashboard);\n              }\n              addSuccessMessage(t('Dashboard updated'));\n              trackAnalyticsEvent({\n                eventKey: 'dashboards2.edit.complete',\n                eventName: 'Dashboards2: Edit complete',\n                organization_id: parseInt(organization.id, 10),\n              });\n              this.setState({\n                dashboardState: DashboardState.VIEW,\n                modifiedDashboard: null,\n              });\n\n              if (dashboard && newDashboard.id !== dashboard.id) {\n                browserHistory.replace({\n                  pathname: `/organizations/${organization.slug}/dashboard/${newDashboard.id}/`,\n                  query: {\n                    ...location.query,\n                  },\n                });\n                return;\n              }\n            },\n            () => undefined\n          );\n\n          return;\n        }\n        this.setState({\n          dashboardState: DashboardState.VIEW,\n          modifiedDashboard: null,\n        });\n        break;\n      }\n      case DashboardState.VIEW:\n      default: {\n        this.setState({\n          dashboardState: DashboardState.VIEW,\n          modifiedDashboard: null,\n        });\n        break;\n      }\n    }\n  };\n\n  setModifiedDashboard = (dashboard: DashboardDetails) => {\n    this.setState({\n      modifiedDashboard: dashboard,\n    });\n  };\n\n  onUpdateWidget = (widgets: Widget[]) => {\n    this.setState((state: State) => ({\n      ...state,\n      widgetLimitReached: widgets.length >= MAX_WIDGETS,\n      modifiedDashboard: {\n        ...(state.modifiedDashboard || this.props.dashboard),\n        widgets,\n      },\n    }));\n  };\n\n  renderWidgetBuilder() {\n    const {children, dashboard} = this.props;\n    const {modifiedDashboard} = this.state;\n\n    return isValidElement(children)\n      ? cloneElement(children, {\n          dashboard: modifiedDashboard ?? dashboard,\n          onSave: this.isEditing ? this.onUpdateWidget : this.handleUpdateWidgetList,\n        })\n      : children;\n  }\n\n  renderDefaultDashboardDetail() {\n    const {organization, dashboard, dashboards, params, router, location} = this.props;\n    const {modifiedDashboard, dashboardState, widgetLimitReached} = this.state;\n    const {dashboardId} = params;\n\n    return (\n      <PageFiltersContainer\n        skipLoadLastUsed={organization.features.includes('global-views')}\n        hideGlobalHeader\n        defaultSelection={{\n          datetime: {\n            start: null,\n            end: null,\n            utc: false,\n            period: DEFAULT_STATS_PERIOD,\n          },\n        }}\n      >\n        <PageContent>\n          <NoProjectMessage organization={organization}>\n            <StyledPageHeader>\n              <StyledTitle>\n                <DashboardTitle\n                  dashboard={modifiedDashboard ?? dashboard}\n                  onUpdate={this.setModifiedDashboard}\n                  isEditing={this.isEditing}\n                />\n              </StyledTitle>\n              <Controls\n                organization={organization}\n                dashboards={dashboards}\n                onEdit={this.onEdit}\n                onCancel={this.onCancel}\n                onCommit={this.onCommit}\n                onAddWidget={this.onAddWidget}\n                onDelete={this.onDelete(dashboard)}\n                dashboardState={dashboardState}\n                widgetLimitReached={widgetLimitReached}\n              />\n            </StyledPageHeader>\n            <DashboardPageFilterBar>\n              <ProjectPageFilter />\n              <EnvironmentPageFilter alignDropdown=\"left\" />\n              <DatePageFilter alignDropdown=\"left\" />\n            </DashboardPageFilterBar>\n            <HookHeader organization={organization} />\n            <Dashboard\n              paramDashboardId={dashboardId}\n              dashboard={modifiedDashboard ?? dashboard}\n              organization={organization}\n              isEditing={this.isEditing}\n              widgetLimitReached={widgetLimitReached}\n              onUpdate={this.onUpdateWidget}\n              handleUpdateWidgetList={this.handleUpdateWidgetList}\n              handleAddCustomWidget={this.handleAddCustomWidget}\n              isPreview={this.isPreview}\n              router={router}\n              location={location}\n            />\n          </NoProjectMessage>\n        </PageContent>\n      </PageFiltersContainer>\n    );\n  }\n\n  getBreadcrumbLabel() {\n    const {dashboardState} = this.state;\n\n    let label = this.dashboardTitle;\n    if (dashboardState === DashboardState.CREATE) {\n      label = t('Create Dashboard');\n    } else if (this.isPreview) {\n      label = t('Preview Dashboard');\n    }\n    return label;\n  }\n\n  renderDashboardDetail() {\n    const {\n      organization,\n      dashboard,\n      dashboards,\n      params,\n      router,\n      location,\n      newWidget,\n      onSetNewWidget,\n    } = this.props;\n    const {modifiedDashboard, dashboardState, widgetLimitReached, seriesData, setData} =\n      this.state;\n    const {dashboardId} = params;\n\n    return (\n      <SentryDocumentTitle title={dashboard.title} orgSlug={organization.slug}>\n        <PageFiltersContainer\n          skipLoadLastUsed={organization.features.includes('global-views')}\n          hideGlobalHeader\n          defaultSelection={{\n            datetime: {\n              start: null,\n              end: null,\n              utc: false,\n              period: DEFAULT_STATS_PERIOD,\n            },\n          }}\n        >\n          <StyledPageContent>\n            <NoProjectMessage organization={organization}>\n              <Layout.Header>\n                <Layout.HeaderContent>\n                  <Breadcrumbs\n                    crumbs={[\n                      {\n                        label: t('Dashboards'),\n                        to: `/organizations/${organization.slug}/dashboards/`,\n                      },\n                      {\n                        label: this.getBreadcrumbLabel(),\n                      },\n                    ]}\n                  />\n                  <Layout.Title>\n                    <DashboardTitle\n                      dashboard={modifiedDashboard ?? dashboard}\n                      onUpdate={this.setModifiedDashboard}\n                      isEditing={this.isEditing}\n                    />\n                  </Layout.Title>\n                </Layout.HeaderContent>\n                <Layout.HeaderActions>\n                  <Controls\n                    organization={organization}\n                    dashboards={dashboards}\n                    onEdit={this.onEdit}\n                    onCancel={this.onCancel}\n                    onCommit={this.onCommit}\n                    onAddWidget={this.onAddWidget}\n                    onDelete={this.onDelete(dashboard)}\n                    dashboardState={dashboardState}\n                    widgetLimitReached={widgetLimitReached}\n                  />\n                </Layout.HeaderActions>\n              </Layout.Header>\n              <Layout.Body>\n                <Layout.Main fullWidth>\n                  <DashboardPageFilterBar>\n                    <ProjectPageFilter />\n                    <EnvironmentPageFilter alignDropdown=\"left\" />\n                    <DatePageFilter alignDropdown=\"left\" />\n                  </DashboardPageFilterBar>\n                  <WidgetViewerContext.Provider value={{seriesData, setData}}>\n                    <Dashboard\n                      paramDashboardId={dashboardId}\n                      dashboard={modifiedDashboard ?? dashboard}\n                      organization={organization}\n                      isEditing={this.isEditing}\n                      widgetLimitReached={widgetLimitReached}\n                      onUpdate={this.onUpdateWidget}\n                      handleUpdateWidgetList={this.handleUpdateWidgetList}\n                      handleAddCustomWidget={this.handleAddCustomWidget}\n                      router={router}\n                      location={location}\n                      newWidget={newWidget}\n                      onSetNewWidget={onSetNewWidget}\n                      isPreview={this.isPreview}\n                    />\n                  </WidgetViewerContext.Provider>\n                </Layout.Main>\n              </Layout.Body>\n            </NoProjectMessage>\n          </StyledPageContent>\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    if (this.isWidgetBuilderRouter) {\n      return this.renderWidgetBuilder();\n    }\n\n    if (organization.features.includes('dashboards-edit')) {\n      return this.renderDashboardDetail();\n    }\n\n    return this.renderDefaultDashboardDetail();\n  }\n}\n\nconst StyledPageHeader = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(0, 1fr);\n  grid-row-gap: ${space(2)};\n  align-items: center;\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    grid-template-columns: minmax(0, 1fr) max-content;\n    grid-column-gap: ${space(2)};\n    height: 40px;\n  }\n`;\n\nconst StyledTitle = styled(Layout.Title)`\n  margin-top: 0;\n`;\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst DashboardPageFilterBar = styled(PageFilterBar)`\n  margin-bottom: ${space(2)};\n  width: max-content;\n  max-width: 100%;\n`;\n\nexport default withApi(withOrganization(DashboardDetail));\n"],"names":["Controls","organization","dashboardState","dashboards","widgetLimitReached","onEdit","onCommit","onDelete","onCancel","onAddWidget","renderCancelButton","label","t","onClick","e","preventDefault","DashboardState","includes","StyledButtonBar","gap","priority","message","onConfirm","disabled","length","DashboardEditFeature","hasFeature","icon","features","title","tct","maxWidgets","MAX_WIDGETS","isCircled","trackAdvancedAnalyticsEvent","children","noFeatureMessage","hookName","renderDisabled","p","body","hideHelpToggle","featureName","ButtonBar","theme","breakpoints","space","DashboardTitle","dashboard","isEditing","onUpdate","isDisabled","value","onChange","newTitle","errorMessage","autoSelect","UNSAVED_MESSAGE","HookHeader","HookOrDefault","DashboardDetail","Component","this","props","initialState","modifiedDashboard","updateModifiedDashboard","widgets","setData","data","setState","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","cloneDashboard","state","isEqual","event","returnValue","api","location","previousDashboardState","deleteDashboard","slug","then","addSuccessMessage","browserHistory","pathname","query","catch","params","hasDashboardChanged","every","layout","defined","map","widget","omit","isPreview","confirm","dashboardId","onDashboardUpdate","currentLayout","getDashboardLayout","layoutColumnDepths","calculateColumnDepths","newModifiedDashboard","assignDefaultLayout","updateDashboard","newDashboard","onUpdateWidget","router","push","source","DashboardWidgetSource","openAddDashboardWidgetModal","onAddLibraryWidget","handleUpdateWidgetList","dashboard_id","dashboard_title","was_previewed","createDashboard","componentDidMount","route","setRouteLeaveHook","onRouteLeave","window","addEventListener","onUnload","checkIfShouldMountWidgetViewerModal","componentDidUpdate","prevProps","componentWillUnmount","removeEventListener","widgetId","seriesData","tableData","isWidgetViewerPath","find","String","openWidgetViewerModal","onClose","Object","values","WidgetViewerQueryField","replace","widgetIndex","indexOf","nextWidget","updateIndex","nextWidgetsList","cloneDeep","widget_type","widgetType","WidgetType","display_type","displayType","addErrorMessage","isWidgetBuilderRouter","dashboardTitle","renderWidgetBuilder","isValidElement","cloneElement","onSave","renderDefaultDashboardDetail","skipLoadLastUsed","hideGlobalHeader","defaultSelection","datetime","start","end","utc","period","DEFAULT_STATS_PERIOD","StyledPageHeader","StyledTitle","setModifiedDashboard","DashboardPageFilterBar","alignDropdown","paramDashboardId","handleAddCustomWidget","getBreadcrumbLabel","renderDashboardDetail","newWidget","onSetNewWidget","orgSlug","StyledPageContent","crumbs","to","fullWidth","render","Layout","PageContent","PageFilterBar","withApi","withOrganization"],"sourceRoot":""}