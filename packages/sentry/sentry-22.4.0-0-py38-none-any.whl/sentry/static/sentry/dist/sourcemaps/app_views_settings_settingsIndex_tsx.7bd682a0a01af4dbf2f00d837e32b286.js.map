{"version":3,"file":"chunks/app_views_settings_settingsIndex_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/settingsIndex.tsx"],"sourcesContent":["import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport DemoModeGate from 'sentry/components/acl/demoModeGate';\nimport OrganizationAvatar from 'sentry/components/avatar/organizationAvatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport ExternalLink, {ExternalLinkProps} from 'sentry/components/links/externalLink';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconDocs, IconLock, IconStack, IconSupport} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport {Organization} from 'sentry/types';\nimport withLatestContext from 'sentry/utils/withLatestContext';\nimport SettingsLayout from 'sentry/views/settings/components/settingsLayout';\n\nconst LINKS = {\n  DOCUMENTATION: 'https://docs.sentry.io/',\n  DOCUMENTATION_PLATFORMS: 'https://docs.sentry.io/clients/',\n  DOCUMENTATION_QUICKSTART: 'https://docs.sentry.io/platform-redirect/?next=/',\n  DOCUMENTATION_CLI: 'https://docs.sentry.io/product/cli/',\n  DOCUMENTATION_API: 'https://docs.sentry.io/api/',\n  API: '/settings/account/api/',\n  MANAGE: '/manage/',\n  FORUM: 'https://forum.sentry.io/',\n  GITHUB_ISSUES: 'https://github.com/getsentry/sentry/issues',\n  SERVICE_STATUS: 'https://status.sentry.io/',\n};\n\nconst HOME_ICON_SIZE = 56;\n\nconst flexCenter = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface SettingsIndexProps extends RouteComponentProps<{}, {}> {\n  organization: Organization;\n}\n\nclass SettingsIndex extends React.Component<SettingsIndexProps> {\n  componentDidUpdate(prevProps: SettingsIndexProps) {\n    const {organization} = this.props;\n    if (prevProps.organization === organization) {\n      return;\n    }\n\n    // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`\n    // (which queries the org index endpoint instead of org details)\n    // and does not have `access` info\n    if (organization && typeof organization.access === 'undefined') {\n      fetchOrganizationDetails(organization.slug, {\n        setActive: true,\n        loadProjects: true,\n      });\n    }\n  }\n\n  render() {\n    const {organization} = this.props;\n    const user = ConfigStore.get('user');\n    const isSelfHosted = ConfigStore.get('isSelfHosted');\n\n    const organizationSettingsUrl =\n      (organization && `/settings/${organization.slug}/`) || '';\n\n    const supportLinkProps: SupportLinkExternalProps | SupportLinkInternalProps =\n      isSelfHosted\n        ? {\n            isSelfHosted: true,\n            href: LINKS.FORUM,\n          }\n        : {\n            isSelfHosted: false,\n            to: `${organizationSettingsUrl}support`,\n          };\n\n    const supportText = isSelfHosted ? t('Community Forums') : t('Contact Support');\n\n    return (\n      <SentryDocumentTitle\n        title={organization ? `${organization.slug} Settings` : 'Settings'}\n      >\n        <SettingsLayout {...this.props}>\n          <GridLayout>\n            <DemoModeGate>\n              <GridPanel>\n                <HomePanelHeader>\n                  <HomeLinkIcon to=\"/settings/account/\">\n                    <AvatarContainer>\n                      <UserAvatar user={user} size={HOME_ICON_SIZE} />\n                    </AvatarContainer>\n                    {t('My Account')}\n                  </HomeLinkIcon>\n                </HomePanelHeader>\n\n                <HomePanelBody>\n                  <h3>{t('Quick links')}:</h3>\n                  <ul>\n                    <li>\n                      <HomeLink to=\"/settings/account/security/\">\n                        {t('Change my password')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to=\"/settings/account/notifications/\">\n                        {t('Notification Preferences')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to=\"/settings/account/\">{t('Change my avatar')}</HomeLink>\n                    </li>\n                  </ul>\n                </HomePanelBody>\n              </GridPanel>\n            </DemoModeGate>\n\n            {/* if admin */}\n            <GridPanel>\n              {!organization && <LoadingIndicator overlay hideSpinner />}\n              <HomePanelHeader>\n                <HomeLinkIcon to={organizationSettingsUrl}>\n                  {organization ? (\n                    <AvatarContainer>\n                      <OrganizationAvatar\n                        organization={organization}\n                        size={HOME_ICON_SIZE}\n                      />\n                    </AvatarContainer>\n                  ) : (\n                    <HomeIcon color=\"green300\">\n                      <IconStack size=\"lg\" />\n                    </HomeIcon>\n                  )}\n                  <OrganizationName>\n                    {organization ? organization.slug : t('No Organization')}\n                  </OrganizationName>\n                </HomeLinkIcon>\n              </HomePanelHeader>\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}projects/`}>\n                      {t('Projects')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}teams/`}>\n                      {t('Teams')}\n                    </HomeLink>\n                  </li>\n                  <li>\n                    <HomeLink to={`${organizationSettingsUrl}members/`}>\n                      {t('Members')}\n                    </HomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <ExternalHomeLink isCentered href={LINKS.DOCUMENTATION}>\n                  <HomeIcon color=\"pink300\">\n                    <IconDocs size=\"lg\" />\n                  </HomeIcon>\n                </ExternalHomeLink>\n                <ExternalHomeLink href={LINKS.DOCUMENTATION}>\n                  {t('Documentation')}\n                </ExternalHomeLink>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_QUICKSTART}>\n                      {t('Quickstart Guide')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_PLATFORMS}>\n                      {t('Platforms & Frameworks')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.DOCUMENTATION_CLI}>\n                      {t('Sentry CLI')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <GridPanel>\n              <HomePanelHeader>\n                <SupportLinkComponent {...supportLinkProps}>\n                  <HomeIcon color=\"purple300\">\n                    <IconSupport size=\"lg\" />\n                  </HomeIcon>\n                  {t('Support')}\n                </SupportLinkComponent>\n              </HomePanelHeader>\n\n              <HomePanelBody>\n                <h3>{t('Quick links')}:</h3>\n                <ul>\n                  <li>\n                    <SupportLinkComponent {...supportLinkProps}>\n                      {supportText}\n                    </SupportLinkComponent>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.GITHUB_ISSUES}>\n                      {t('Sentry on GitHub')}\n                    </ExternalHomeLink>\n                  </li>\n                  <li>\n                    <ExternalHomeLink href={LINKS.SERVICE_STATUS}>\n                      {t('Service Status')}\n                    </ExternalHomeLink>\n                  </li>\n                </ul>\n              </HomePanelBody>\n            </GridPanel>\n\n            <DemoModeGate>\n              <GridPanel>\n                <HomePanelHeader>\n                  <HomeLinkIcon to={LINKS.API}>\n                    <HomeIcon>\n                      <IconLock size=\"lg\" isSolid />\n                    </HomeIcon>\n                    {t('API Keys')}\n                  </HomeLinkIcon>\n                </HomePanelHeader>\n\n                <HomePanelBody>\n                  <h3>{t('Quick links')}:</h3>\n                  <ul>\n                    <li>\n                      <HomeLink to={LINKS.API}>{t('Auth Tokens')}</HomeLink>\n                    </li>\n                    <li>\n                      <HomeLink to={`${organizationSettingsUrl}developer-settings/`}>\n                        {t('Your Integrations')}\n                      </HomeLink>\n                    </li>\n                    <li>\n                      <ExternalHomeLink href={LINKS.DOCUMENTATION_API}>\n                        {t('Documentation')}\n                      </ExternalHomeLink>\n                    </li>\n                  </ul>\n                </HomePanelBody>\n              </GridPanel>\n            </DemoModeGate>\n          </GridLayout>\n        </SettingsLayout>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport {SettingsIndex};\nexport default withLatestContext(SettingsIndex);\n\nconst HomePanelHeader = styled(PanelHeader)`\n  background: ${p => p.theme.background};\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  font-size: 18px;\n  text-transform: unset;\n  padding: 35px 30px;\n`;\n\nconst HomePanelBody = styled(PanelBody)`\n  padding: 30px;\n\n  h3 {\n    font-size: 14px;\n  }\n\n  ul {\n    margin: 0;\n    li {\n      line-height: 1.6;\n      /* Bullet color */\n      color: ${p => p.theme.gray200};\n    }\n  }\n`;\n\nconst HomeIcon = styled('div')<{color?: string}>`\n  background: ${p => p.theme[p.color || 'gray300']};\n  color: ${p => p.theme.white};\n  width: ${HOME_ICON_SIZE}px;\n  height: ${HOME_ICON_SIZE}px;\n  border-radius: ${HOME_ICON_SIZE}px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst HomeLink = styled(Link)<LinkProps>`\n  color: ${p => p.theme.purple300};\n\n  &:hover {\n    color: ${p => p.theme.purple300};\n  }\n`;\n\nconst HomeLinkIcon = styled(HomeLink)<LinkProps>`\n  overflow: hidden;\n  width: 100%;\n  ${flexCenter};\n`;\n\ninterface ExternalHomeLinkProps extends ExternalLinkProps {\n  isCentered?: boolean;\n}\n\nconst ExternalHomeLink = styled((props: ExternalHomeLinkProps) => {\n  const {isCentered: _isCentered, ...rest} = props;\n  return <ExternalLink {...rest} />;\n})<ExternalHomeLinkProps>`\n  color: ${p => p.theme.purple300};\n\n  &:hover {\n    color: ${p => p.theme.purple300};\n  }\n\n  ${p => p.isCentered && flexCenter};\n`;\n\ninterface SupportLinkExternalProps extends ExternalHomeLinkProps {\n  href: string;\n  isSelfHosted: true;\n  isCentered?: boolean;\n}\ninterface SupportLinkInternalProps extends Omit<LinkProps, 'ref'> {\n  isSelfHosted: false;\n  to: string;\n}\n\nfunction SupportLinkComponent(\n  props: SupportLinkExternalProps | SupportLinkInternalProps\n) {\n  if (props.isSelfHosted) {\n    const {isSelfHosted: _isSelfHosted, ...rest} = props;\n    return <ExternalHomeLink {...rest} />;\n  }\n\n  return <HomeLink {...props} />;\n}\n\nconst AvatarContainer = styled('div')`\n  margin-bottom: 20px;\n`;\n\nconst OrganizationName = styled('div')`\n  line-height: 1.1em;\n\n  ${overflowEllipsis};\n`;\n\nconst GridLayout = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 16px;\n`;\n\nconst GridPanel = styled(Panel)`\n  margin-bottom: 0;\n`;\n"],"names":["LINKS","flexCenter","SettingsIndex","React","componentDidUpdate","prevProps","organization","this","props","access","fetchOrganizationDetails","slug","setActive","loadProjects","render","user","ConfigStore","isSelfHosted","organizationSettingsUrl","supportLinkProps","href","to","supportText","t","title","GridLayout","GridPanel","HomePanelHeader","HomeLinkIcon","AvatarContainer","size","HomePanelBody","HomeLink","overlay","hideSpinner","HomeIcon","color","OrganizationName","ExternalHomeLink","isCentered","SupportLinkComponent","isSolid","withLatestContext","PanelHeader","p","theme","background","PanelBody","gray200","white","Link","purple300","_isCentered","rest","_isSelfHosted","overflowEllipsis","Panel"],"sourceRoot":""}