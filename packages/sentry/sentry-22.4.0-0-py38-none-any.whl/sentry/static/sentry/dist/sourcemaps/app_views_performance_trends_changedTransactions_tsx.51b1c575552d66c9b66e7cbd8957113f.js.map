{"version":3,"file":"chunks/app_views_performance_trends_changedTransactions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/performance/trends/changedTransactions.tsx","webpack:///./app/views/performance/trends/chart.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport Count from 'sentry/components/count';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport Duration from 'sentry/components/duration';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {RadioLineItem} from 'sentry/components/forms/controls/radioGroup';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport MenuItem from 'sentry/components/menuItem';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {Panel} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Radio from 'sentry/components/radio';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconArrow, IconEllipsis} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {AvatarProject, Organization, Project} from 'sentry/types';\nimport {formatPercentage, getDuration} from 'sentry/utils/formatters';\nimport TrendsDiscoverQuery from 'sentry/utils/performance/trends/trendsDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {DisplayModes} from '../transactionSummary/transactionOverview/charts';\nimport {transactionSummaryRouteWithQuery} from '../transactionSummary/utils';\n\nimport Chart from './chart';\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunctionField,\n  TrendsStats,\n  TrendView,\n} from './types';\nimport {\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  getTrendProjectId,\n  modifyTrendView,\n  normalizeTrends,\n  transformDeltaSpread,\n  transformValueDelta,\n  trendCursorNames,\n  trendToColor,\n} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  setError: (msg: string | undefined) => void;\n  trendChangeType: TrendChangeType;\n  trendView: TrendView;\n  previousTrendColumn?: TrendColumnField;\n  previousTrendFunction?: TrendFunctionField;\n};\n\ntype TrendsCursorQuery = {\n  improvedCursor?: string;\n  regressionCursor?: string;\n};\n\nconst makeTrendsCursorHandler =\n  (trendChangeType: TrendChangeType): CursorHandler =>\n  (cursor, path, query) => {\n    const cursorQuery = {} as TrendsCursorQuery;\n    if (trendChangeType === TrendChangeType.IMPROVED) {\n      cursorQuery.improvedCursor = cursor;\n    } else if (trendChangeType === TrendChangeType.REGRESSION) {\n      cursorQuery.regressionCursor = cursor;\n    }\n\n    const selectedQueryKey = getSelectedQueryKey(trendChangeType);\n    delete query[selectedQueryKey];\n\n    browserHistory.push({\n      pathname: path,\n      query: {...query, ...cursorQuery},\n    });\n  };\n\nfunction getChartTitle(trendChangeType: TrendChangeType): string {\n  switch (trendChangeType) {\n    case TrendChangeType.IMPROVED:\n      return t('Most Improved Transactions');\n    case TrendChangeType.REGRESSION:\n      return t('Most Regressed Transactions');\n    default:\n      throw new Error('No trend type passed');\n  }\n}\n\nfunction getSelectedTransaction(\n  location: Location,\n  trendChangeType: TrendChangeType,\n  transactions?: NormalizedTrendsTransaction[]\n): NormalizedTrendsTransaction | undefined {\n  const queryKey = getSelectedQueryKey(trendChangeType);\n  const selectedTransactionName = decodeScalar(location.query[queryKey]);\n\n  if (!transactions) {\n    return undefined;\n  }\n\n  const selectedTransaction = transactions.find(\n    transaction =>\n      `${transaction.transaction}-${transaction.project}` === selectedTransactionName\n  );\n\n  if (selectedTransaction) {\n    return selectedTransaction;\n  }\n\n  return transactions.length > 0 ? transactions[0] : undefined;\n}\n\nfunction handleChangeSelected(location: Location, trendChangeType: TrendChangeType) {\n  return function updateSelected(transaction?: NormalizedTrendsTransaction) {\n    const selectedQueryKey = getSelectedQueryKey(trendChangeType);\n    const query = {\n      ...location.query,\n    };\n    if (!transaction) {\n      delete query[selectedQueryKey];\n    } else {\n      query[selectedQueryKey] = transaction\n        ? `${transaction.transaction}-${transaction.project}`\n        : undefined;\n    }\n    browserHistory.push({\n      pathname: location.pathname,\n      query,\n    });\n  };\n}\n\nenum FilterSymbols {\n  GREATER_THAN_EQUALS = '>=',\n  LESS_THAN_EQUALS = '<=',\n}\n\nfunction handleFilterTransaction(location: Location, transaction: string) {\n  const queryString = decodeScalar(location.query.query);\n  const conditions = new MutableSearch(queryString ?? '');\n\n  conditions.addFilterValues('!transaction', [transaction]);\n\n  const query = conditions.formatString();\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: {\n      ...location.query,\n      query: String(query).trim(),\n    },\n  });\n}\n\nfunction handleFilterDuration(\n  location: Location,\n  value: number,\n  symbol: FilterSymbols,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n) {\n  const durationTag = getCurrentTrendParameter(location, projects, projectIds).column;\n  const queryString = decodeScalar(location.query.query);\n  const conditions = new MutableSearch(queryString ?? '');\n\n  const existingValues = conditions.getFilterValues(durationTag);\n  const alternateSymbol = symbol === FilterSymbols.GREATER_THAN_EQUALS ? '>' : '<';\n\n  if (existingValues) {\n    existingValues.forEach(existingValue => {\n      if (existingValue.startsWith(symbol) || existingValue.startsWith(alternateSymbol)) {\n        conditions.removeFilterValue(durationTag, existingValue);\n      }\n    });\n  }\n\n  conditions.addFilterValues(durationTag, [`${symbol}${value}`]);\n\n  const query = conditions.formatString();\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: {\n      ...location.query,\n      query: String(query).trim(),\n    },\n  });\n}\n\nfunction ChangedTransactions(props: Props) {\n  const {\n    location,\n    trendChangeType,\n    previousTrendFunction,\n    previousTrendColumn,\n    organization,\n    projects,\n    setError,\n  } = props;\n  const api = useApi();\n\n  const trendView = props.trendView.clone();\n  const chartTitle = getChartTitle(trendChangeType);\n  modifyTrendView(trendView, location, trendChangeType, projects);\n\n  const onCursor = makeTrendsCursorHandler(trendChangeType);\n  const cursor = decodeScalar(location.query[trendCursorNames[trendChangeType]]);\n\n  return (\n    <TrendsDiscoverQuery\n      eventView={trendView}\n      orgSlug={organization.slug}\n      location={location}\n      trendChangeType={trendChangeType}\n      cursor={cursor}\n      limit={5}\n      setError={error => setError(error?.message)}\n    >\n      {({isLoading, trendsData, pageLinks}) => {\n        const trendFunction = getCurrentTrendFunction(location);\n        const trendParameter = getCurrentTrendParameter(\n          location,\n          projects,\n          trendView.project\n        );\n        const events = normalizeTrends(\n          (trendsData && trendsData.events && trendsData.events.data) || []\n        );\n        const selectedTransaction = getSelectedTransaction(\n          location,\n          trendChangeType,\n          events\n        );\n\n        const statsData = trendsData?.stats || {};\n        const transactionsList = events && events.slice ? events.slice(0, 5) : [];\n\n        const currentTrendFunction =\n          isLoading && previousTrendFunction\n            ? previousTrendFunction\n            : trendFunction.field;\n\n        const currentTrendColumn =\n          isLoading && previousTrendColumn ? previousTrendColumn : trendParameter.column;\n\n        const titleTooltipContent = t(\n          'This compares the baseline (%s) of the past with the present.',\n          trendFunction.legendLabel\n        );\n\n        return (\n          <TransactionsListContainer data-test-id=\"changed-transactions\">\n            <TrendsTransactionPanel>\n              <StyledHeaderTitleLegend>\n                {chartTitle}\n                <QuestionTooltip size=\"sm\" position=\"top\" title={titleTooltipContent} />\n              </StyledHeaderTitleLegend>\n              {isLoading ? (\n                <LoadingIndicator\n                  style={{\n                    margin: '237px auto',\n                  }}\n                />\n              ) : (\n                <Fragment>\n                  {transactionsList.length ? (\n                    <Fragment>\n                      <ChartContainer>\n                        <Chart\n                          statsData={statsData}\n                          query={trendView.query}\n                          project={trendView.project}\n                          environment={trendView.environment}\n                          start={trendView.start}\n                          end={trendView.end}\n                          statsPeriod={trendView.statsPeriod}\n                          transaction={selectedTransaction}\n                          isLoading={isLoading}\n                          {...props}\n                        />\n                      </ChartContainer>\n                      {transactionsList.map((transaction, index) => (\n                        <TrendsListItem\n                          api={api}\n                          currentTrendFunction={currentTrendFunction}\n                          currentTrendColumn={currentTrendColumn}\n                          trendView={props.trendView}\n                          organization={organization}\n                          transaction={transaction}\n                          key={transaction.transaction}\n                          index={index}\n                          trendChangeType={trendChangeType}\n                          transactions={transactionsList}\n                          location={location}\n                          projects={projects}\n                          statsData={statsData}\n                          handleSelectTransaction={handleChangeSelected(\n                            location,\n                            trendChangeType\n                          )}\n                        />\n                      ))}\n                    </Fragment>\n                  ) : (\n                    <StyledEmptyStateWarning small>\n                      {t('No results')}\n                    </StyledEmptyStateWarning>\n                  )}\n                </Fragment>\n              )}\n            </TrendsTransactionPanel>\n            <Pagination pageLinks={pageLinks} onCursor={onCursor} />\n          </TransactionsListContainer>\n        );\n      }}\n    </TrendsDiscoverQuery>\n  );\n}\n\ntype TrendsListItemProps = {\n  api: Client;\n  currentTrendColumn: string;\n  currentTrendFunction: string;\n  handleSelectTransaction: (transaction: NormalizedTrendsTransaction) => void;\n  index: number;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  statsData: TrendsStats;\n  transaction: NormalizedTrendsTransaction;\n  transactions: NormalizedTrendsTransaction[];\n  trendChangeType: TrendChangeType;\n  trendView: TrendView;\n};\n\nfunction TrendsListItem(props: TrendsListItemProps) {\n  const {\n    transaction,\n    transactions,\n    trendChangeType,\n    currentTrendFunction,\n    currentTrendColumn,\n    index,\n    location,\n    projects,\n    handleSelectTransaction,\n    trendView,\n  } = props;\n  const color = trendToColor[trendChangeType].default;\n\n  const selectedTransaction = getSelectedTransaction(\n    location,\n    trendChangeType,\n    transactions\n  );\n  const isSelected = selectedTransaction === transaction;\n\n  const project = projects.find(\n    ({slug}) => slug === transaction.project\n  ) as AvatarProject;\n\n  const currentPeriodValue = transaction.aggregate_range_2;\n  const previousPeriodValue = transaction.aggregate_range_1;\n\n  const absolutePercentChange = formatPercentage(\n    Math.abs(transaction.trend_percentage - 1),\n    0\n  );\n\n  const previousDuration = getDuration(\n    previousPeriodValue / 1000,\n    previousPeriodValue < 1000 && previousPeriodValue > 10 ? 0 : 2\n  );\n  const currentDuration = getDuration(\n    currentPeriodValue / 1000,\n    currentPeriodValue < 1000 && currentPeriodValue > 10 ? 0 : 2\n  );\n\n  const percentChangeExplanation = t(\n    'Over this period, the %s for %s has %s %s from %s to %s',\n    currentTrendFunction,\n    currentTrendColumn,\n    trendChangeType === TrendChangeType.IMPROVED ? t('decreased') : t('increased'),\n    absolutePercentChange,\n    previousDuration,\n    currentDuration\n  );\n\n  const longestPeriodValue =\n    trendChangeType === TrendChangeType.IMPROVED\n      ? previousPeriodValue\n      : currentPeriodValue;\n  const longestDuration =\n    trendChangeType === TrendChangeType.IMPROVED ? previousDuration : currentDuration;\n\n  return (\n    <ListItemContainer data-test-id={'trends-list-item-' + trendChangeType}>\n      <ItemRadioContainer color={color}>\n        <Tooltip\n          title={\n            <TooltipContent>\n              <span>{t('Total Events')}</span>\n              <span>\n                <Count value={transaction.count_range_1} />\n                <StyledIconArrow direction=\"right\" size=\"xs\" />\n                <Count value={transaction.count_range_2} />\n              </span>\n            </TooltipContent>\n          }\n          disableForVisualTest // Disabled tooltip in snapshots because of overlap order issues.\n        >\n          <RadioLineItem index={index} role=\"radio\">\n            <Radio\n              checked={isSelected}\n              onChange={() => handleSelectTransaction(transaction)}\n            />\n          </RadioLineItem>\n        </Tooltip>\n      </ItemRadioContainer>\n      <TransactionSummaryLink {...props} />\n      <ItemTransactionPercentage>\n        <Tooltip title={percentChangeExplanation}>\n          <Fragment>\n            {trendChangeType === TrendChangeType.REGRESSION ? '+' : ''}\n            {formatPercentage(transaction.trend_percentage - 1, 0)}\n          </Fragment>\n        </Tooltip>\n      </ItemTransactionPercentage>\n      <DropdownLink\n        caret={false}\n        anchorRight\n        title={\n          <StyledButton\n            size=\"xsmall\"\n            icon={<IconEllipsis data-test-id=\"trends-item-action\" size=\"xs\" />}\n            aria-label={t('Actions')}\n          />\n        }\n      >\n        <MenuItem\n          onClick={() =>\n            handleFilterDuration(\n              location,\n              longestPeriodValue,\n              FilterSymbols.LESS_THAN_EQUALS,\n              projects,\n              trendView.project\n            )\n          }\n        >\n          <MenuAction>{t('Show \\u2264 %s', longestDuration)}</MenuAction>\n        </MenuItem>\n        <MenuItem\n          onClick={() =>\n            handleFilterDuration(\n              location,\n              longestPeriodValue,\n              FilterSymbols.GREATER_THAN_EQUALS,\n              projects,\n              trendView.project\n            )\n          }\n        >\n          <MenuAction>{t('Show \\u2265 %s', longestDuration)}</MenuAction>\n        </MenuItem>\n        <MenuItem\n          onClick={() => handleFilterTransaction(location, transaction.transaction)}\n        >\n          <MenuAction>{t('Hide from list')}</MenuAction>\n        </MenuItem>\n      </DropdownLink>\n      <ItemTransactionDurationChange>\n        {project && (\n          <Tooltip title={transaction.project}>\n            <IdBadge avatarSize={16} project={project} hideName />\n          </Tooltip>\n        )}\n        <CompareDurations {...props} />\n      </ItemTransactionDurationChange>\n      <ItemTransactionStatus color={color}>\n        <ValueDelta {...props} />\n      </ItemTransactionStatus>\n    </ListItemContainer>\n  );\n}\n\nexport const CompareDurations = ({\n  transaction,\n}: {\n  transaction: TrendsListItemProps['transaction'];\n}) => {\n  const {fromSeconds, toSeconds, showDigits} = transformDeltaSpread(\n    transaction.aggregate_range_1,\n    transaction.aggregate_range_2\n  );\n\n  return (\n    <DurationChange>\n      <Duration seconds={fromSeconds} fixedDigits={showDigits ? 1 : 0} abbreviation />\n      <StyledIconArrow direction=\"right\" size=\"xs\" />\n      <Duration seconds={toSeconds} fixedDigits={showDigits ? 1 : 0} abbreviation />\n    </DurationChange>\n  );\n};\n\nconst ValueDelta = ({transaction, trendChangeType}: TrendsListItemProps) => {\n  const {seconds, fixedDigits, changeLabel} = transformValueDelta(\n    transaction.trend_difference,\n    trendChangeType\n  );\n\n  return (\n    <span>\n      <Duration seconds={seconds} fixedDigits={fixedDigits} abbreviation /> {changeLabel}\n    </span>\n  );\n};\n\ntype TransactionSummaryLinkProps = TrendsListItemProps & {};\n\nconst TransactionSummaryLink = (props: TransactionSummaryLinkProps) => {\n  const {\n    organization,\n    trendView: eventView,\n    transaction,\n    projects,\n    currentTrendFunction,\n    currentTrendColumn,\n  } = props;\n  const summaryView = eventView.clone();\n  const projectID = getTrendProjectId(transaction, projects);\n  const target = transactionSummaryRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: String(transaction.transaction),\n    query: summaryView.generateQueryStringObject(),\n    projectID,\n    display: DisplayModes.TREND,\n    trendFunction: currentTrendFunction,\n    trendColumn: currentTrendColumn,\n  });\n\n  return (\n    <ItemTransactionName to={target} data-test-id=\"item-transaction-name\">\n      {transaction.transaction}\n    </ItemTransactionName>\n  );\n};\n\nconst TransactionsListContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TrendsTransactionPanel = styled(Panel)`\n  margin: 0;\n  flex-grow: 1;\n`;\n\nconst ChartContainer = styled('div')`\n  padding: ${space(3)};\n`;\n\nconst StyledHeaderTitleLegend = styled(HeaderTitleLegend)`\n  border-radius: ${p => p.theme.borderRadius};\n  margin: ${space(2)} ${space(3)};\n`;\n\nconst StyledButton = styled(Button)`\n  vertical-align: middle;\n`;\n\nconst MenuAction = styled('div')<{['data-test-id']?: string}>`\n  white-space: nowrap;\n  color: ${p => p.theme.textColor};\n`;\n\nMenuAction.defaultProps = {\n  'data-test-id': 'menu-action',\n};\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst ListItemContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 24px auto 100px 30px;\n  grid-template-rows: repeat(2, auto);\n  grid-column-gap: ${space(1)};\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst ItemRadioContainer = styled('div')`\n  grid-row: 1/3;\n  input {\n    cursor: pointer;\n  }\n  input:checked::after {\n    background-color: ${p => p.color};\n  }\n`;\n\nconst ItemTransactionName = styled(Link)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n  ${overflowEllipsis};\n`;\n\nconst ItemTransactionDurationChange = styled('div')`\n  display: flex;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst DurationChange = styled('span')`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n`;\n\nconst ItemTransactionPercentage = styled('div')`\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ItemTransactionStatus = styled('div')`\n  color: ${p => p.color};\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst TooltipContent = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  margin: 0 ${space(1)};\n`;\n\nexport default withProjects(withOrganization(ChangedTransactions));\n","import {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport type {LegendComponentOption} from 'echarts';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport {\n  LineChart,\n  LineChartProps,\n  LineChartSeries,\n} from 'sentry/components/charts/lineChart';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {EventsStatsData, OrganizationSummary, Project} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {decodeList} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\n\nimport {ViewProps} from '../types';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendFunctionField,\n  TrendsStats,\n} from './types';\nimport {\n  generateTrendFunctionAsString,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getUnselectedSeries,\n  transformEventStatsSmoothed,\n  trendToColor,\n} from './utils';\n\ntype Props = WithRouterProps &\n  ViewProps & {\n    isLoading: boolean;\n    location: Location;\n    organization: OrganizationSummary;\n    projects: Project[];\n    statsData: TrendsStats;\n    trendChangeType: TrendChangeType;\n    disableLegend?: boolean;\n    disableXAxis?: boolean;\n    grid?: LineChartProps['grid'];\n    height?: number;\n    transaction?: NormalizedTrendsTransaction;\n    trendFunctionField?: TrendFunctionField;\n  };\n\nfunction transformEventStats(data: EventsStatsData, seriesName?: string): Series[] {\n  return [\n    {\n      seriesName: seriesName || 'Current',\n      data: data.map(([timestamp, countsForTimestamp]) => ({\n        name: timestamp * 1000,\n        value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n      })),\n    },\n  ];\n}\n\nfunction getLegend(trendFunction: string): LegendComponentOption {\n  return {\n    right: 10,\n    top: 0,\n    itemGap: 12,\n    align: 'left',\n    data: [\n      {\n        name: 'Baseline',\n        icon: 'path://M180 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40z, M810 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40zm, M1440 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40z',\n      },\n      {\n        name: 'Releases',\n      },\n      {\n        name: trendFunction,\n      },\n    ],\n  };\n}\n\nfunction getIntervalLine(\n  theme: Theme,\n  series: Series[],\n  intervalRatio: number,\n  transaction?: NormalizedTrendsTransaction\n): LineChartSeries[] {\n  if (!transaction || !series.length || !series[0].data || !series[0].data.length) {\n    return [];\n  }\n\n  const seriesStart = parseInt(series[0].data[0].name as string, 10);\n  const seriesEnd = parseInt(series[0].data.slice(-1)[0].name as string, 10);\n\n  if (seriesEnd < seriesStart) {\n    return [];\n  }\n\n  const periodLine: LineChartSeries = {\n    data: [],\n    color: theme.textColor,\n    markLine: {\n      data: [],\n      label: {},\n      lineStyle: {\n        color: theme.textColor,\n        type: 'dashed',\n        width: 1,\n      },\n      symbol: ['none', 'none'],\n      tooltip: {\n        show: false,\n      },\n    },\n    seriesName: 'Baseline',\n  };\n\n  const periodLineLabel = {\n    fontSize: 11,\n    show: true,\n    color: theme.textColor,\n    silent: true,\n  };\n\n  const previousPeriod = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Baseline',\n  };\n  const currentPeriod = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Baseline',\n  };\n  const periodDividingLine = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Period split',\n  };\n\n  const seriesDiff = seriesEnd - seriesStart;\n  const seriesLine = seriesDiff * intervalRatio + seriesStart;\n\n  previousPeriod.markLine.data = [\n    [\n      {value: 'Past', coord: [seriesStart, transaction.aggregate_range_1]},\n      {coord: [seriesLine, transaction.aggregate_range_1]},\n    ],\n  ];\n  previousPeriod.markLine.tooltip = {\n    formatter: () => {\n      return [\n        '<div class=\"tooltip-series tooltip-series-solo\">',\n        '<div>',\n        `<span class=\"tooltip-label\"><strong>${t('Past Baseline')}</strong></span>`,\n        // p50() coerces the axis to be time based\n        tooltipFormatter(transaction.aggregate_range_1, 'p50()'),\n        '</div>',\n        '</div>',\n        '<div class=\"tooltip-arrow\"></div>',\n      ].join('');\n    },\n  };\n  currentPeriod.markLine.data = [\n    [\n      {value: 'Present', coord: [seriesLine, transaction.aggregate_range_2]},\n      {coord: [seriesEnd, transaction.aggregate_range_2]},\n    ],\n  ];\n  currentPeriod.markLine.tooltip = {\n    formatter: () => {\n      return [\n        '<div class=\"tooltip-series tooltip-series-solo\">',\n        '<div>',\n        `<span class=\"tooltip-label\"><strong>${t('Present Baseline')}</strong></span>`,\n        // p50() coerces the axis to be time based\n        tooltipFormatter(transaction.aggregate_range_2, 'p50()'),\n        '</div>',\n        '</div>',\n        '<div class=\"tooltip-arrow\"></div>',\n      ].join('');\n    },\n  };\n  periodDividingLine.markLine = {\n    data: [\n      {\n        xAxis: seriesLine,\n      },\n    ],\n    label: {show: false},\n    lineStyle: {\n      color: theme.textColor,\n      type: 'solid',\n      width: 2,\n    },\n    symbol: ['none', 'none'],\n    tooltip: {\n      show: false,\n    },\n    silent: true,\n  };\n\n  previousPeriod.markLine.label = {\n    ...periodLineLabel,\n    formatter: 'Past',\n    position: 'insideStartBottom',\n  };\n  currentPeriod.markLine.label = {\n    ...periodLineLabel,\n    formatter: 'Present',\n    position: 'insideEndBottom',\n  };\n\n  const additionalLineSeries = [previousPeriod, currentPeriod, periodDividingLine];\n  return additionalLineSeries;\n}\n\nexport function Chart({\n  trendChangeType,\n  router,\n  statsPeriod,\n  transaction,\n  statsData,\n  isLoading,\n  location,\n  start: propsStart,\n  end: propsEnd,\n  trendFunctionField,\n  disableXAxis,\n  disableLegend,\n  grid,\n  height,\n  projects,\n  project,\n}: Props) {\n  const theme = useTheme();\n\n  const handleLegendSelectChanged = legendChange => {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const query = {\n      ...location.query,\n    };\n\n    const queryKey = getUnselectedSeries(trendChangeType);\n    query[queryKey] = unselected;\n\n    const to = {\n      ...location,\n      query,\n    };\n    browserHistory.push(to);\n  };\n\n  const lineColor = trendToColor[trendChangeType || ''];\n\n  const events =\n    statsData && transaction?.project && transaction?.transaction\n      ? statsData[[transaction.project, transaction.transaction].join(',')]\n      : undefined;\n  const data = events?.data ?? [];\n\n  const trendFunction = getCurrentTrendFunction(location, trendFunctionField);\n  const trendParameter = getCurrentTrendParameter(location, projects, project);\n  const chartLabel = generateTrendFunctionAsString(\n    trendFunction.field,\n    trendParameter.column\n  );\n  const results = transformEventStats(data, chartLabel);\n  const {smoothedResults, minValue, maxValue} = transformEventStatsSmoothed(\n    results,\n    chartLabel\n  );\n\n  const start = propsStart ? getUtcToLocalDateObject(propsStart) : null;\n  const end = propsEnd ? getUtcToLocalDateObject(propsEnd) : null;\n  const {utc} = normalizeDateTimeParams(location.query);\n\n  const seriesSelection = decodeList(\n    location.query[getUnselectedSeries(trendChangeType)]\n  ).reduce((selection, metric) => {\n    selection[metric] = false;\n    return selection;\n  }, {});\n  const legend: LegendComponentOption = disableLegend\n    ? {show: false}\n    : {\n        ...getLegend(chartLabel),\n        selected: seriesSelection,\n      };\n\n  const loading = isLoading;\n  const reloading = isLoading;\n\n  const yMax = Math.max(\n    maxValue,\n    transaction?.aggregate_range_2 || 0,\n    transaction?.aggregate_range_1 || 0\n  );\n  const yMin = Math.min(\n    minValue,\n    transaction?.aggregate_range_1 || Number.MAX_SAFE_INTEGER,\n    transaction?.aggregate_range_2 || Number.MAX_SAFE_INTEGER\n  );\n  const yDiff = yMax - yMin;\n  const yMargin = yDiff * 0.1;\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    tooltip: {\n      valueFormatter: (value, seriesName) => {\n        return tooltipFormatter(value, seriesName);\n      },\n    },\n    yAxis: {\n      min: Math.max(0, yMin - yMargin),\n      max: yMax + yMargin,\n      axisLabel: {\n        color: theme.chartLabel,\n        // p50() coerces the axis to be time based\n        formatter: (value: number) => axisLabelFormatter(value, 'p50()'),\n      },\n    },\n  };\n\n  return (\n    <ChartZoom\n      router={router}\n      period={statsPeriod}\n      start={start}\n      end={end}\n      utc={utc === 'true'}\n    >\n      {zoomRenderProps => {\n        const smoothedSeries = smoothedResults\n          ? smoothedResults.map(values => {\n              return {\n                ...values,\n                color: lineColor.default,\n                lineStyle: {\n                  opacity: 1,\n                },\n              };\n            })\n          : [];\n\n        const intervalSeries = getIntervalLine(\n          theme,\n          smoothedResults || [],\n          0.5,\n          transaction\n        );\n\n        return (\n          <TransitionChart loading={loading} reloading={reloading}>\n            <TransparentLoadingMask visible={reloading} />\n            {getDynamicText({\n              value: (\n                <LineChart\n                  height={height}\n                  {...zoomRenderProps}\n                  {...chartOptions}\n                  onLegendSelectChanged={handleLegendSelectChanged}\n                  series={[...smoothedSeries, ...intervalSeries]}\n                  seriesOptions={{\n                    showSymbol: false,\n                  }}\n                  legend={legend}\n                  toolBox={{\n                    show: false,\n                  }}\n                  grid={\n                    grid ?? {\n                      left: '10px',\n                      right: '10px',\n                      top: '40px',\n                      bottom: '0px',\n                    }\n                  }\n                  xAxis={disableXAxis ? {show: false} : undefined}\n                />\n              ),\n              fixed: 'Duration Chart',\n            })}\n          </TransitionChart>\n        );\n      }}\n    </ChartZoom>\n  );\n}\n\nexport default withRouter(Chart);\n"],"names":["FilterSymbols","getSelectedTransaction","location","trendChangeType","transactions","queryKey","getSelectedQueryKey","selectedTransactionName","decodeScalar","query","find","transaction","project","length","undefined","handleChangeSelected","selectedQueryKey","browserHistory","pathname","handleFilterDuration","value","symbol","projects","projectIds","durationTag","getCurrentTrendParameter","column","queryString","conditions","MutableSearch","existingValues","getFilterValues","alternateSymbol","GREATER_THAN_EQUALS","forEach","existingValue","startsWith","removeFilterValue","addFilterValues","formatString","String","trim","ChangedTransactions","props","previousTrendFunction","previousTrendColumn","organization","setError","api","useApi","trendView","clone","chartTitle","TrendChangeType","t","Error","getChartTitle","modifyTrendView","onCursor","cursor","path","cursorQuery","improvedCursor","regressionCursor","makeTrendsCursorHandler","trendCursorNames","eventView","orgSlug","slug","limit","error","message","isLoading","trendsData","pageLinks","trendFunction","getCurrentTrendFunction","trendParameter","events","normalizeTrends","data","selectedTransaction","statsData","stats","transactionsList","slice","currentTrendFunction","field","currentTrendColumn","titleTooltipContent","legendLabel","TransactionsListContainer","TrendsTransactionPanel","StyledHeaderTitleLegend","size","position","title","style","margin","Fragment","ChartContainer","environment","start","end","statsPeriod","map","index","TrendsListItem","handleSelectTransaction","StyledEmptyStateWarning","small","color","trendToColor","default","isSelected","currentPeriodValue","aggregate_range_2","previousPeriodValue","aggregate_range_1","absolutePercentChange","formatPercentage","Math","abs","trend_percentage","previousDuration","getDuration","currentDuration","percentChangeExplanation","longestPeriodValue","longestDuration","ListItemContainer","ItemRadioContainer","TooltipContent","count_range_1","StyledIconArrow","direction","count_range_2","disableForVisualTest","role","checked","onChange","TransactionSummaryLink","ItemTransactionPercentage","caret","anchorRight","StyledButton","icon","onClick","LESS_THAN_EQUALS","MenuAction","handleFilterTransaction","ItemTransactionDurationChange","avatarSize","hideName","CompareDurations","ItemTransactionStatus","ValueDelta","fromSeconds","toSeconds","showDigits","transformDeltaSpread","DurationChange","seconds","fixedDigits","abbreviation","changeLabel","transformValueDelta","trend_difference","summaryView","projectID","getTrendProjectId","target","transactionSummaryRouteWithQuery","generateQueryStringObject","display","DisplayModes","trendColumn","ItemTransactionName","to","Panel","space","HeaderTitleLegend","p","theme","borderRadius","Button","textColor","defaultProps","EmptyStateWarning","border","Link","fontSizeMedium","overflowEllipsis","fontSizeSmall","gray300","IconArrow","withProjects","withOrganization","getLegend","right","top","itemGap","align","name","Chart","router","propsStart","propsEnd","trendFunctionField","disableXAxis","disableLegend","grid","height","useTheme","handleLegendSelectChanged","legendChange","selected","unselected","Object","keys","filter","key","getUnselectedSeries","lineColor","join","chartLabel","generateTrendFunctionAsString","results","seriesName","timestamp","countsForTimestamp","reduce","acc","count","transformEventStats","smoothedResults","minValue","maxValue","transformEventStatsSmoothed","getUtcToLocalDateObject","utc","normalizeDateTimeParams","seriesSelection","decodeList","selection","metric","legend","show","loading","reloading","yMax","max","yMin","min","Number","MAX_SAFE_INTEGER","yMargin","chartOptions","tooltip","valueFormatter","tooltipFormatter","yAxis","axisLabel","formatter","axisLabelFormatter","period","zoomRenderProps","smoothedSeries","values","lineStyle","opacity","intervalSeries","series","intervalRatio","seriesStart","parseInt","seriesEnd","periodLine","markLine","label","type","width","periodLineLabel","fontSize","silent","previousPeriod","currentPeriod","periodDividingLine","seriesLine","coord","xAxis","getIntervalLine","visible","getDynamicText","onLegendSelectChanged","seriesOptions","showSymbol","toolBox","left","bottom","fixed","withRouter"],"sourceRoot":""}