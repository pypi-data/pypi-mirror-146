{"version":3,"file":"chunks/app_views_alerts_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/incidentRules/create.tsx","webpack:///./app/views/alerts/create.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'sentry/views/alerts/incidentRules/constants';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId?: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  eventView: EventView | undefined;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  isCustomMetric?: boolean;\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nfunction IncidentRulesCreate(props: Props) {\n  function handleSubmitSuccess(data: any) {\n    const {router, project} = props;\n    const {orgId} = props.params;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  }\n\n  const {project, eventView, wizardTemplate, sessionId, userTeamIds, ...otherProps} =\n    props;\n  const defaultRule = eventView\n    ? createRuleFromEventView(eventView)\n    : wizardTemplate\n    ? createRuleFromWizardTemplate(wizardTemplate)\n    : createDefaultRule();\n\n  const projectTeamIds = new Set(project.teams.map(({id}) => id));\n  const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n  defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n\n  return (\n    <RuleForm\n      onSubmitSuccess={handleSubmitSuccess}\n      rule={{...defaultRule, projects: [project.slug]}}\n      sessionId={sessionId}\n      project={project}\n      userTeamIds={userTeamIds}\n      {...otherProps}\n    />\n  );\n}\n\nexport default IncidentRulesCreate;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesCreate from 'sentry/views/alerts/incidentRules/create';\nimport IssueRuleEditor from 'sentry/views/alerts/issueRuleEditor';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  DEFAULT_WIZARD_TEMPLATE,\n  WizardRuleTemplate,\n} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\ntype RouteParams = {\n  orgId: string;\n  alertType?: AlertRuleType;\n  projectId?: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  alertType: AlertRuleType;\n};\n\nclass Create extends Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const {organization, location, project, params, router} = this.props;\n    const {\n      createFromDiscover,\n      createFromWizard,\n      aggregate,\n      dataset,\n      eventTypes,\n      createFromV3,\n    } = location?.query ?? {};\n    let alertType = AlertRuleType.ISSUE;\n\n    const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n\n    // Alerts can only be created via create from discover or alert wizard, until alert-wizard-v3 is fully implemented\n    if (hasAlertWizardV3 && createFromV3) {\n      alertType = params.alertType || AlertRuleType.METRIC;\n\n      if (alertType === AlertRuleType.METRIC && !(aggregate && dataset && eventTypes)) {\n        router.replace({\n          ...location,\n          pathname: `/organizations/${organization.slug}/alerts/new/${alertType}`,\n          query: {\n            ...location.query,\n            ...DEFAULT_WIZARD_TEMPLATE,\n            project: project.slug,\n          },\n        });\n      }\n    } else if (createFromDiscover) {\n      alertType = AlertRuleType.METRIC;\n    } else if (createFromWizard) {\n      if (aggregate && dataset && eventTypes) {\n        alertType = AlertRuleType.METRIC;\n      } else {\n        // Just to be explicit\n        alertType = AlertRuleType.ISSUE;\n      }\n    } else {\n      router.replace(`/organizations/${organization.slug}/alerts/${project.slug}/wizard`);\n    }\n\n    return {alertType};\n  }\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n    trackAdvancedAnalyticsEvent('new_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      session_id: this.sessionId,\n      alert_type: this.state.alertType,\n    });\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  render() {\n    const {hasMetricAlerts, organization, project, location, routes} = this.props;\n    const {alertType} = this.state;\n    const {aggregate, dataset, eventTypes, createFromWizard, createFromDiscover} =\n      location?.query ?? {};\n    const wizardTemplate: WizardRuleTemplate = {\n      aggregate: aggregate ?? DEFAULT_WIZARD_TEMPLATE.aggregate,\n      dataset: dataset ?? DEFAULT_WIZARD_TEMPLATE.dataset,\n      eventTypes: eventTypes ?? DEFAULT_WIZARD_TEMPLATE.eventTypes,\n    };\n    const eventView = createFromDiscover ? EventView.fromLocation(location) : undefined;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (createFromWizard && alertType === AlertRuleType.METRIC) {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={project.slug} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={project.slug}\n              alertType={alertType}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <Layout.Body>\n          <StyledLayoutMain fullWidth>\n            <Teams provideUserTeams>\n              {({teams, initiallyLoaded}) =>\n                initiallyLoaded ? (\n                  <Fragment>\n                    {(!hasMetricAlerts || alertType === 'issue') && (\n                      <IssueRuleEditor\n                        {...this.props}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n\n                    {hasMetricAlerts && alertType === AlertRuleType.METRIC && (\n                      <IncidentRulesCreate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        isCustomMetric={wizardAlertType === 'custom'}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n                  </Fragment>\n                ) : (\n                  <LoadingIndicator />\n                )\n              }\n            </Teams>\n          </StyledLayoutMain>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledLayoutMain = styled(Layout.Main)`\n  max-width: 1000px;\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nexport default Create;\n"],"names":["IncidentRulesCreate","props","project","eventView","wizardTemplate","sessionId","userTeamIds","otherProps","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","projectTeamIds","Set","teams","map","id","defaultOwnerId","find","has","owner","onSubmitSuccess","data","router","orgId","params","alertRuleId","undefined","metric","name","push","pathname","query","rule","projects","slug","Create","Component","this","getInitialState","uniqueId","organization","location","createFromDiscover","createFromWizard","aggregate","dataset","eventTypes","createFromV3","alertType","AlertRuleType","features","includes","replace","DEFAULT_WIZARD_TEMPLATE","componentDidMount","trackAdvancedAnalyticsEvent","project_id","session_id","alert_type","state","render","hasMetricAlerts","routes","EventView","wizardAlertType","getAlertTypeFromAggregateDataset","title","t","Fragment","projectSlug","StyledHeaderContent","alertName","canChangeProject","AlertWizardAlertNames","StyledLayoutMain","fullWidth","provideUserTeams","initiallyLoaded","isCustomMetric","Layout"],"sourceRoot":""}