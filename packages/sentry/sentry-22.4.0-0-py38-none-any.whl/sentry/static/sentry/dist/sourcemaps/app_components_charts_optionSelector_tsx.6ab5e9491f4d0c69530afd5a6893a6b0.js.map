{"version":3,"file":"chunks/app_components_charts_optionSelector_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"+/BAiCA,MAAMA,UAAuBC,EAAAA,UAAwB,uDAGpC,KAHoC,gCA0BhCC,EAAAA,EAAAA,cArBnBC,oBACEC,KAAKC,wBAGPC,sBAAsBC,EAAkBC,GACtC,OAAQC,GAAAA,CAAQF,EAAWH,KAAKM,SAAWD,GAAAA,CAAQD,EAAWJ,KAAKO,OAGrEC,mBAAmBC,GACbA,EAAUC,WAAaV,KAAKM,MAAMI,UACpCV,KAAKC,wBAITA,wBAAwB,QACtB,MAAMU,EAAkB,UAAGX,KAAKY,wBAAR,iBAAG,EAAuBC,eAA1B,aAAG,EAAgCC,YACvDH,GACFX,KAAKe,SAAS,CAACJ,mBAAAA,IAMnBK,SACE,MAAM,mBAACL,GAAsBX,KAAKO,OAC5B,QAACU,EAAD,SAAUC,EAAV,SAAoBR,EAApB,MAA8BS,EAA9B,UAAqCC,EAArC,YAAgDC,GAAerB,KAAKM,MACpEgB,EAAiBL,EAAQM,MAAKC,GAAOd,IAAac,EAAIC,SAAUR,EAAQ,GAE9E,OACE,QAAC,KAAD,YACE,QAAC,KAAD,WACGE,GACAO,EAAAA,EAAAA,IAAQL,IAAe,QAACM,EAAD,CAAoBC,KAAMP,IAAkB,SAEtE,QAACQ,EAAD,CAAeC,IAAK9B,KAAKY,iBAAzB,UACE,QAAC,IAAD,CAAcmB,kBAAkB,EAAhC,SACG,QAAC,OAACC,EAAD,aAASC,EAAT,cAAuBC,GAAxB,SACC,QAAC,EAAAC,SAAD,YACE,QAACC,EAAD,IAA0BF,IAAiBG,KAAK,QAAQL,OAAQA,EAAhE,UACE,QAACM,EAAD,UAAiBC,OAAOjB,EAAekB,YAEzC,QAACC,EAAD,IACMR,IACJS,UAAU,QACVC,MAAOvB,EACPwB,SAAUjC,EACVqB,OAAQA,EACRa,gBAAgB,EAChBC,aAAW,EAPb,SASG7B,EAAQ8B,KAAIvB,IACX,QAACwB,EAAD,CAEEC,SAAU/B,EACVgC,SAAU1B,EAAIC,MACd0B,SAAU3B,EAAI2B,SACdC,SAAU1C,IAAac,EAAIC,MAC3B,eAAe,UAASD,EAAIC,QAN9B,UAQE,QAAC,KAAD,CAASN,MAAOK,EAAI6B,QAASC,qBAAqB,SAAlD,UACE,QAACC,EAAD,CACEH,SAAU1C,IAAac,EAAIC,MAC3BA,MAAOc,OAAOf,EAAIgB,OAClBgB,UAAW,GACXC,gBAAgB,YAZfjC,EAAIC,uBAzDzB7B,EAAAA,YAAAA,kB,OAAAA,EAAAA,eAhBe,CACnBwB,UAAW,SAmGb,MAAMkB,GAAiB,OAAO,OAAP,sBACnBoB,EAAAA,EADgB,qBAKdH,GAAiB,OAAOI,EAAAA,EAAP,sBAAH,WAIdC,GAAKA,EAAER,UAAY,iBAJL,MAQdvB,GAAgB,OAAO,MAAP,sBAAH,kEAKbO,GAAuB,OAAOyB,EAAAA,EAAP,sBAAH,YACbD,GAAMA,EAAE5B,OAAS4B,EAAEE,MAAMC,OAAOC,qBAAqBC,MAAQ,QADhD,KAIpBxB,GAAuB,OAAOyB,EAAAA,EAAP,sBAAH,YAIbN,GAAMA,EAAE5B,OAAS,QAAU,QAJd,sBAMtB4B,GACAA,EAAEhB,UAAwB,SAAZgB,EAAEjB,OAAqB,mBAAkBiB,EAAEhB,iBAAgBuB,EAAAA,EAAAA,GAAM,OAPzD,KAUpBnB,GAAqB,OAAOoB,EAAAA,GAAP,sBAAH,gBACPR,GAAKA,EAAEE,MAAMO,KAAKC,gBADX,wBAKlB3C,GAAqB,OAAO4C,EAAAA,EAAP,sBAAH,0CAIxB","sources":["webpack:///./app/components/charts/optionSelector.tsx"],"sourcesContent":["import {Component, createRef, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {InlineContainer, SectionHeading} from 'sentry/components/charts/styles';\nimport DropdownBubble from 'sentry/components/dropdownBubble';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport {DropdownItem} from 'sentry/components/dropdownControl';\nimport DropdownMenu from 'sentry/components/dropdownMenu';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport Tooltip from 'sentry/components/tooltip';\nimport Truncate from 'sentry/components/truncate';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst defaultProps = {\n  menuWidth: 'auto',\n};\n\ntype Props = {\n  onChange: (value: string) => void;\n  options: SelectValue<string>[];\n  selected: string;\n  title: string;\n  featureType?: 'alpha' | 'beta' | 'new';\n} & typeof defaultProps;\n\ntype State = {\n  menuContainerWidth?: number;\n};\n\nclass OptionSelector extends Component<Props, State> {\n  static defaultProps = defaultProps;\n\n  state: State = {};\n\n  componentDidMount() {\n    this.setMenuContainerWidth();\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return !isEqual(nextProps, this.props) || !isEqual(nextState, this.state);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selected !== this.props.selected) {\n      this.setMenuContainerWidth();\n    }\n  }\n\n  setMenuContainerWidth() {\n    const menuContainerWidth = this.menuContainerRef?.current?.offsetWidth;\n    if (menuContainerWidth) {\n      this.setState({menuContainerWidth});\n    }\n  }\n\n  menuContainerRef = createRef<HTMLDivElement>();\n\n  render() {\n    const {menuContainerWidth} = this.state;\n    const {options, onChange, selected, title, menuWidth, featureType} = this.props;\n    const selectedOption = options.find(opt => selected === opt.value) || options[0];\n\n    return (\n      <InlineContainer>\n        <SectionHeading>\n          {title}\n          {defined(featureType) ? <StyledFeatureBadge type={featureType} /> : null}\n        </SectionHeading>\n        <MenuContainer ref={this.menuContainerRef}>\n          <DropdownMenu alwaysRenderMenu={false}>\n            {({isOpen, getMenuProps, getActorProps}) => (\n              <Fragment>\n                <StyledDropdownButton {...getActorProps()} size=\"small\" isOpen={isOpen}>\n                  <TruncatedLabel>{String(selectedOption.label)}</TruncatedLabel>\n                </StyledDropdownButton>\n                <StyledDropdownBubble\n                  {...getMenuProps()}\n                  alignMenu=\"right\"\n                  width={menuWidth}\n                  minWidth={menuContainerWidth}\n                  isOpen={isOpen}\n                  blendWithActor={false}\n                  blendCorner\n                >\n                  {options.map(opt => (\n                    <StyledDropdownItem\n                      key={opt.value}\n                      onSelect={onChange}\n                      eventKey={opt.value}\n                      disabled={opt.disabled}\n                      isActive={selected === opt.value}\n                      data-test-id={`option-${opt.value}`}\n                    >\n                      <Tooltip title={opt.tooltip} containerDisplayMode=\"inline\">\n                        <StyledTruncate\n                          isActive={selected === opt.value}\n                          value={String(opt.label)}\n                          maxLength={60}\n                          expandDirection=\"left\"\n                        />\n                      </Tooltip>\n                    </StyledDropdownItem>\n                  ))}\n                </StyledDropdownBubble>\n              </Fragment>\n            )}\n          </DropdownMenu>\n        </MenuContainer>\n      </InlineContainer>\n    );\n  }\n}\n\nconst TruncatedLabel = styled('span')`\n  ${overflowEllipsis};\n  max-width: 400px;\n`;\n\nconst StyledTruncate = styled(Truncate)<{\n  isActive: boolean;\n}>`\n  & span {\n    ${p => p.isActive && 'border: none;'}\n  }\n`;\n\nconst MenuContainer = styled('div')`\n  display: inline-block;\n  position: relative;\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => (p.isOpen ? p.theme.zIndex.dropdownAutocomplete.actor : 'auto')};\n`;\n\nconst StyledDropdownBubble = styled(DropdownBubble)<{\n  isOpen: boolean;\n  minWidth?: number;\n}>`\n  display: ${p => (p.isOpen ? 'block' : 'none')};\n  overflow: visible;\n  ${p =>\n    p.minWidth && p.width === 'auto' && `min-width: calc(${p.minWidth}px + ${space(3)})`};\n`;\n\nconst StyledDropdownItem = styled(DropdownItem)`\n  line-height: ${p => p.theme.text.lineHeightBody};\n  white-space: nowrap;\n`;\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin-left: 0px;\n`;\n\nexport default OptionSelector;\n"],"names":["OptionSelector","Component","createRef","componentDidMount","this","setMenuContainerWidth","shouldComponentUpdate","nextProps","nextState","isEqual","props","state","componentDidUpdate","prevProps","selected","menuContainerWidth","menuContainerRef","current","offsetWidth","setState","render","options","onChange","title","menuWidth","featureType","selectedOption","find","opt","value","defined","StyledFeatureBadge","type","MenuContainer","ref","alwaysRenderMenu","isOpen","getMenuProps","getActorProps","Fragment","StyledDropdownButton","size","TruncatedLabel","String","label","StyledDropdownBubble","alignMenu","width","minWidth","blendWithActor","blendCorner","map","StyledDropdownItem","onSelect","eventKey","disabled","isActive","tooltip","containerDisplayMode","StyledTruncate","maxLength","expandDirection","overflowEllipsis","Truncate","p","DropdownButton","theme","zIndex","dropdownAutocomplete","actor","DropdownBubble","space","DropdownItem","text","lineHeightBody","FeatureBadge"],"sourceRoot":""}