{"version":3,"file":"chunks/app_views_onboarding_components_firstEventFooter_tsx-app_views_onboarding_components_integrat-7d5132.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/onboarding/components/firstEventIndicator.tsx","webpack:///./app/views/onboarding/components/firstEventFooter.tsx","webpack:///./app/views/onboarding/components/integrations/addInstallationInstructions.tsx","webpack:///./app/views/onboarding/components/integrations/postInstallCodeSnippet.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/organizationIntegrations/addIntegrationButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {AnimatePresence, HTMLMotionProps, motion, Variants} from 'framer-motion';\n\nimport Button from 'sentry/components/button';\nimport {IconCheckmark} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport pulsingIndicatorStyles from 'sentry/styles/pulsingIndicator';\nimport space from 'sentry/styles/space';\nimport {Group} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventWaiter, {EventWaiterProps} from 'sentry/utils/eventWaiter';\nimport testableTransition from 'sentry/utils/testableTransition';\n\ntype RenderProps = {\n  firstEventButton: React.ReactNode;\n  indicator: React.ReactNode;\n};\n\ninterface FirstEventIndicatorProps extends Omit<EventWaiterProps, 'children' | 'api'> {\n  children: (props: RenderProps) => React.ReactNode;\n}\n\nconst FirstEventIndicator = ({children, ...props}: FirstEventIndicatorProps) => (\n  <EventWaiter {...props}>\n    {({firstIssue}) =>\n      children({\n        indicator: <Indicator firstIssue={firstIssue} {...props} />,\n        firstEventButton: (\n          <Button\n            title={t(\"You'll need to send your first error to continue\")}\n            tooltipProps={{disabled: !!firstIssue}}\n            disabled={!firstIssue}\n            priority=\"primary\"\n            onClick={() =>\n              trackAdvancedAnalyticsEvent('growth.onboarding_take_to_error', {\n                organization: props.organization,\n              })\n            }\n            to={`/organizations/${props.organization.slug}/issues/${\n              firstIssue !== true && firstIssue !== null ? `${firstIssue.id}/` : ''\n            }`}\n          >\n            {t('Take me to my error')}\n          </Button>\n        ),\n      })\n    }\n  </EventWaiter>\n);\n\ninterface IndicatorProps extends Omit<EventWaiterProps, 'children' | 'api'> {\n  firstIssue: Group | null | true;\n}\n\nconst Indicator = ({firstIssue}: IndicatorProps) => (\n  <Container>\n    <AnimatePresence>\n      {!firstIssue ? <Waiting key=\"waiting\" /> : <Success key=\"received\" />}\n    </AnimatePresence>\n  </Container>\n);\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: right;\n`;\n\nconst StatusWrapper = styled(motion.div)`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  gap: ${space(1)};\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeMedium};\n  /* Keep the wrapper in the parent grids first cell for transitions */\n  grid-column: 1;\n  grid-row: 1;\n`;\n\nStatusWrapper.defaultProps = {\n  initial: 'initial',\n  animate: 'animate',\n  exit: 'exit',\n  variants: {\n    initial: {opacity: 0, y: -10},\n    animate: {\n      opacity: 1,\n      y: 0,\n      transition: testableTransition({when: 'beforeChildren', staggerChildren: 0.35}),\n    },\n    exit: {opacity: 0, y: 10},\n  },\n};\n\nconst Waiting = (props: HTMLMotionProps<'div'>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Waiting to receive first event to continue')}</AnimatedText>\n    <WaitingIndicator />\n  </StatusWrapper>\n);\n\nconst Success = (props: HTMLMotionProps<'div'>) => (\n  <StatusWrapper {...props}>\n    <AnimatedText>{t('Event was received!')}</AnimatedText>\n    <ReceivedIndicator />\n  </StatusWrapper>\n);\n\nconst indicatorAnimation: Variants = {\n  initial: {opacity: 0, y: -10},\n  animate: {opacity: 1, y: 0},\n  exit: {opacity: 0, y: 10},\n};\n\nconst AnimatedText = styled(motion.div)``;\n\nAnimatedText.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst WaitingIndicator = styled(motion.div)`\n  margin: 0 6px;\n  ${pulsingIndicatorStyles};\n`;\n\nWaitingIndicator.defaultProps = {\n  variants: indicatorAnimation,\n  transition: testableTransition(),\n};\n\nconst ReceivedIndicator = styled(IconCheckmark)`\n  color: #fff;\n  background: ${p => p.theme.green300};\n  border-radius: 50%;\n  padding: 3px;\n  margin: 0 ${space(0.25)};\n`;\n\nReceivedIndicator.defaultProps = {\n  size: 'sm',\n};\n\nexport {Indicator};\n\nexport default FirstEventIndicator;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport CreateSampleEventButton from 'sentry/views/onboarding/createSampleEventButton';\n\nimport FirstEventIndicator from './firstEventIndicator';\n\ninterface FirstEventFooterProps {\n  organization: Organization;\n  project: Project;\n  docsLink?: string;\n  docsOnClick?: () => void;\n}\n\nexport default function FirstEventFooter({\n  organization,\n  project,\n  docsLink,\n  docsOnClick,\n}: FirstEventFooterProps) {\n  return (\n    <Fragment>\n      <FirstEventIndicator\n        organization={organization}\n        project={project}\n        eventType=\"error\"\n      >\n        {({indicator, firstEventButton}) => (\n          <CTAFooter>\n            <Actions gap={2}>\n              {firstEventButton}\n              <Button external href={docsLink} onClick={docsOnClick}>\n                {t('View full documentation')}\n              </Button>\n            </Actions>\n            {indicator}\n          </CTAFooter>\n        )}\n      </FirstEventIndicator>\n      <CTASecondary>\n        {tct(\n          'Just want to poke around before getting too cozy with the SDK? [sample:View a sample event for this SDK] or [skip:finish setup later].',\n          {\n            sample: (\n              <CreateSampleEventButton\n                aria-label=\"View a sample event\"\n                project={project}\n                source=\"onboarding\"\n                priority=\"link\"\n              />\n            ),\n            skip: (\n              <Button priority=\"link\" href=\"/\" aria-label={t('Finish setup later')} />\n            ),\n          }\n        )}\n      </CTASecondary>\n    </Fragment>\n  );\n}\n\nconst CTAFooter = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin: ${space(2)} 0;\n  margin-top: ${space(4)};\n`;\n\nconst CTASecondary = styled('p')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  max-width: 500px;\n`;\n\nconst Actions = styled(ButtonBar)`\n  display: inline-grid;\n  justify-self: start;\n`;\n","import {Fragment} from 'react';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\n\n// TODO: Make dyanmic for other platforms/integrations\nexport default function AddInstallationInstructions() {\n  return (\n    <Fragment>\n      <p>\n        {tct(\n          'The automated AWS Lambda setup will instrument your Lambda functions with Sentry error and performance monitoring without any code changes. We use CloudFormation Stack ([learnMore]) to create the Sentry role which gives us access to your AWS account.',\n          {\n            learnMore: (\n              <ExternalLink href=\"https://aws.amazon.com/cloudformation/\">\n                {t('Learn more about CloudFormation')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </p>\n      <p>\n        {tct(\n          'Just press the [addInstallation] button below and complete the steps in the popup that opens.',\n          {addInstallation: <strong>{t('Add Installation')}</strong>}\n        )}\n      </p>\n      <p>\n        {tct(\n          'If you don’t want to add CloudFormation stack to your AWS environment, press the [manualSetup] button instead.',\n          {manualSetup: <strong>{t('Manual Setup')}</strong>}\n        )}\n      </p>\n    </Fragment>\n  );\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider} from 'sentry/types';\n\ntype Props = {\n  provider: IntegrationProvider;\n  isOnboarding?: boolean;\n  platform?: PlatformKey;\n};\n\nexport default function PostInstallCodeSnippet({\n  provider,\n  platform,\n  isOnboarding,\n}: Props) {\n  // currently supporting both Python and Node\n  const token_punctuation: string = platform === 'python-awslambda' ? '()' : '();';\n  return (\n    <div>\n      <p>\n        {t(\n          \"Congrats, you just installed the %s integration! Now that it's is installed, the next time you trigger an error it will go to your Sentry.\",\n          provider.name\n        )}\n      </p>\n      <p>\n        {t(\n          'This snippet includes an intentional error, so you can test that everything is working as soon as you set it up:'\n        )}\n      </p>\n      <div>\n        <CodeWrapper>\n          <code>\n            <TokenFunction>myUndefinedFunction</TokenFunction>\n            <TokenPunctuation>{token_punctuation}</TokenPunctuation>)\n          </code>\n        </CodeWrapper>\n      </div>\n      {isOnboarding && (\n        <Fragment>\n          <p>\n            {t(\n              \"If you're new to Sentry, use the email alert to access your account and complete a product tour.\"\n            )}\n          </p>\n          <p>\n            {t(\n              \"If you're an existing user and have disabled alerts, you won't receive this email.\"\n            )}\n          </p>\n        </Fragment>\n      )}\n    </div>\n  );\n}\n\nconst CodeWrapper = styled('pre')`\n  padding: 1em;\n  overflow: auto;\n  background: #251f3d;\n  font-size: 15px;\n`;\n\nconst TokenFunction = styled('span')`\n  color: #7cc5c4;\n`;\n\nconst TokenPunctuation = styled('span')`\n  color: #b3acc1;\n`;\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype CreateSampleEventButtonProps = {\n  api: Client;\n  organization: Organization;\n  source: string;\n  project?: Project;\n} & ButtonProps;\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 15;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n\n    await new Promise(resolve => window.setTimeout(resolve, EVENT_POLL_INTERVAL));\n\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends React.Component<\n  CreateSampleEventButtonProps,\n  State\n> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdhocEvent({\n      eventKey: 'sample_event.button_viewed',\n      org_id: organization.id,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}`;\n    const eventName = `Sample Event ${eventCreated ? 'Created' : 'Failed'}`;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_sample_event', {\n      platform: project.platform,\n      organization,\n    });\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel(Sentry.Severity.Warning);\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}`\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        data-test-id=\"create-sample-event\"\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n","import * as React from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n","import * as React from 'react';\n\nimport Button, {ButtonPropsWithoutAriaLabel} from 'sentry/components/button';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {IntegrationWithConfig} from 'sentry/types';\n\nimport AddIntegration from './addIntegration';\n\ninterface AddIntegrationButtonProps\n  extends Omit<ButtonPropsWithoutAriaLabel, 'children'>,\n    Pick<\n      React.ComponentProps<typeof AddIntegration>,\n      'provider' | 'organization' | 'analyticsParams' | 'modalParams'\n    > {\n  onAddIntegration: (data: IntegrationWithConfig) => void;\n  buttonText?: string;\n  reinstall?: boolean;\n}\n\nexport default class AddIntegrationButton extends React.Component<AddIntegrationButtonProps> {\n  render() {\n    const {\n      provider,\n      buttonText,\n      onAddIntegration,\n      organization,\n      reinstall,\n      analyticsParams,\n      modalParams,\n      ...buttonProps\n    } = this.props;\n\n    const label =\n      buttonText || t(reinstall ? 'Enable' : 'Add %s', provider.metadata.noun);\n\n    return (\n      <Tooltip\n        disabled={provider.canAdd}\n        title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}\n      >\n        <AddIntegration\n          provider={provider}\n          onInstall={onAddIntegration}\n          organization={organization}\n          analyticsParams={analyticsParams}\n          modalParams={modalParams}\n        >\n          {onClick => (\n            <Button\n              disabled={!provider.canAdd}\n              {...buttonProps}\n              onClick={() => onClick()}\n              aria-label={t('Add integration')}\n            >\n              {label}\n            </Button>\n          )}\n        </AddIntegration>\n      </Tooltip>\n    );\n  }\n}\n"],"names":["FirstEventIndicator","children","props","firstIssue","indicator","Indicator","firstEventButton","title","t","tooltipProps","disabled","priority","onClick","trackAdvancedAnalyticsEvent","organization","to","slug","id","Container","AnimatePresence","Success","Waiting","StatusWrapper","motion","space","p","theme","fontSizeMedium","defaultProps","initial","animate","exit","variants","opacity","y","transition","testableTransition","when","staggerChildren","AnimatedText","WaitingIndicator","ReceivedIndicator","indicatorAnimation","pulsingIndicatorStyles","IconCheckmark","green300","size","FirstEventFooter","project","docsLink","docsOnClick","Fragment","eventType","CTAFooter","Actions","gap","external","href","CTASecondary","tct","sample","source","skip","subText","ButtonBar","AddInstallationInstructions","learnMore","addInstallation","manualSetup","PostInstallCodeSnippet","provider","platform","isOnboarding","token_punctuation","name","CodeWrapper","TokenFunction","TokenPunctuation","EVENT_POLL_INTERVAL","CreateSampleEventButton","React","creating","async","api","this","eventData","addLoadingMessage","duration","EVENT_POLL_RETRIES","setState","url","requestPromise","method","error","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","eventCreated","retries","groupID","Promise","resolve","window","setTimeout","latestEventAvailable","t1","Math","ceil","recordAnalytics","setTag","toString","setLevel","browserHistory","componentDidMount","trackAdhocEvent","eventKey","org_id","project_id","eventName","trackAnalyticsEvent","organization_id","interval","render","_api","_organization","_project","_source","state","createSampleGroup","withApi","withOrganization","AddIntegration","urlParams","account","analyticsParams","modalParams","trackIntegrationAnalytics","integration","key","integration_type","width","height","setupDialog","left","top","computeCenteredWindow","query","installUrl","qs","opts","dialog","open","focus","message","onInstall","origin","document","location","success","data","addSuccessMessage","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","openDialog","AddIntegrationButton","buttonText","onAddIntegration","reinstall","buttonProps","label","metadata","noun","canAdd"],"sourceRoot":""}