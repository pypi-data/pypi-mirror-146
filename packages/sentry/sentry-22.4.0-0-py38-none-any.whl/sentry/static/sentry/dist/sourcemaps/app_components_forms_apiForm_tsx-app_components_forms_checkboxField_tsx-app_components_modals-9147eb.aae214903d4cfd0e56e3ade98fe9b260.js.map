{"version":3,"file":"chunks/app_components_forms_apiForm_tsx-app_components_forms_checkboxField_tsx-app_components_modals-9147eb.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/apiForm.tsx","webpack:///./app/components/forms/checkboxField.tsx","webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx","webpack:///../node_modules/lodash/assign.js"],"sourcesContent":["import {Component} from 'react';\n\nimport {addLoadingMessage, clearIndicators} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Form from 'sentry/components/forms/form';\nimport {t} from 'sentry/locale';\n\ntype Props = Form['props'] & {\n  apiEndpoint: string;\n  apiMethod: string;\n  onSubmit?: (data: Record<string, any>) => void;\n};\n\nexport default class ApiForm extends Component<Props> {\n  componentWillUnmount() {\n    this.api.clear();\n  }\n\n  api: Client = new Client();\n\n  onSubmit = (\n    data: Record<string, any>,\n    onSuccess: (response: Record<string, any>) => void,\n    onError: (error: any) => void\n  ) => {\n    this.props.onSubmit && this.props.onSubmit(data);\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(this.props.apiEndpoint, {\n      method: this.props.apiMethod,\n      data,\n      success: response => {\n        clearIndicators();\n        onSuccess(response);\n      },\n      error: error => {\n        clearIndicators();\n        onError(error);\n      },\n    });\n  };\n\n  render() {\n    const {\n      onSubmit: _onSubmit,\n      apiMethod: _apiMethod,\n      apiEndpoint: _apiEndpoint,\n      ...otherProps\n    } = this.props;\n\n    return <Form onSubmit={this.onSubmit} {...otherProps} />;\n  }\n}\n","import styled from '@emotion/styled';\n\nimport Checkbox from 'sentry/components/checkbox';\nimport FieldDescription from 'sentry/components/forms/field/fieldDescription';\nimport FieldHelp from 'sentry/components/forms/field/fieldHelp';\nimport FieldLabel from 'sentry/components/forms/field/fieldLabel';\nimport FieldRequiredBadge from 'sentry/components/forms/field/fieldRequiredBadge';\nimport FormField from 'sentry/components/forms/formField';\nimport space from 'sentry/styles/space';\n\ntype FormFieldProps = Omit<\n  React.ComponentProps<typeof FormField>,\n  'children' | 'help' | 'disabled' | 'required'\n>;\n\ntype Props = {\n  /**\n   * The input name\n   */\n  name: string;\n  /**\n   * Is the field disabled?\n   */\n  disabled?: boolean;\n  /**\n   * Help or description of the field\n   */\n  help?: React.ReactNode | React.ReactElement | ((props: Props) => React.ReactNode);\n  /**\n   * The control's `id` property\n   */\n  id?: string;\n  /**\n   * User visible field label\n   */\n  label?: React.ReactNode;\n  /**\n   * Is the field required?\n   */\n  required?: boolean;\n} & FormFieldProps;\n\nfunction CheckboxField(props: Props) {\n  const {name, disabled, stacked, id, required, label, help} = props;\n\n  const helpElement = typeof help === 'function' ? help(props) : help;\n\n  return (\n    <FormField name={name} inline={false} stacked={stacked}>\n      {({onChange, value}) => {\n        function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n          const newValue = e.target.checked;\n          onChange?.(newValue, e);\n        }\n\n        return (\n          <FieldLayout>\n            <ControlWrapper>\n              <Checkbox\n                id={id}\n                name={name}\n                disabled={disabled}\n                checked={value === true}\n                onChange={handleChange}\n              />\n            </ControlWrapper>\n            <FieldDescription htmlFor={id}>\n              {label && (\n                <FieldLabel disabled={disabled}>\n                  <span>\n                    {label}\n                    {required && <FieldRequiredBadge />}\n                  </span>\n                </FieldLabel>\n              )}\n              {helpElement && (\n                <FieldHelp stacked={stacked} inline>\n                  {helpElement}\n                </FieldHelp>\n              )}\n            </FieldDescription>\n          </FieldLayout>\n        );\n      }}\n    </FormField>\n  );\n}\n\nconst ControlWrapper = styled('span')`\n  align-self: flex-start;\n  display: flex;\n  margin-right: ${space(1)};\n\n  & input {\n    margin: 0;\n  }\n`;\n\nconst FieldLayout = styled('div')`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport default CheckboxField;\n","import {Fragment, useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {OptionProps} from 'react-select';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport SelectOption from 'sentry/components/forms/selectOption';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\n\ntype WidgetAsQueryParams = Query & {\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n};\n\nexport type AddToDashboardModalProps = {\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchDashboards(api, organization.slug).then(setDashboards);\n  }, []);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push({\n      pathname,\n      query: widgetAsQueryParams,\n    });\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboardId === null) {\n      return;\n    }\n\n    try {\n      const dashboard = await fetchDashboard(api, organization.slug, selectedDashboardId);\n      const newDashboard = {\n        ...dashboard,\n        widgets: [\n          ...dashboard.widgets,\n          {...widget, title: widget.title === '' ? t('All Events') : widget.title},\n        ],\n      };\n\n      await updateDashboard(api, organization.slug, newDashboard);\n\n      closeModal();\n      addSuccessMessage(t('Successfully added widget to dashboard'));\n    } catch (e) {\n      const errorMessage = t('Unable to add widget to dashboard');\n      handleXhrErrorResponse(errorMessage)(e);\n      addErrorMessage(errorMessage);\n    }\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n\n      <Body>\n        <SelectControlWrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  isDisabled: widgetDisplay.length >= MAX_WIDGETS,\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n            components={{\n              Option: ({label, data, ...optionProps}: OptionProps<any>) => (\n                <Tooltip\n                  disabled={!!!data.isDisabled}\n                  title={tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                    maxWidgets: MAX_WIDGETS,\n                  })}\n                  containerDisplayMode=\"block\"\n                  position=\"right\"\n                >\n                  <SelectOption label={label} data={data} {...(optionProps as any)} />\n                </Tooltip>\n              ),\n            }}\n          />\n        </SelectControlWrapper>\n        {t('This is a preview of how the widget will appear in your dashboard.')}\n        <WidgetCard\n          api={api}\n          organization={organization}\n          currentWidgetDragging={false}\n          isEditing={false}\n          isSorting={false}\n          widgetLimitReached={false}\n          selection={selection}\n          widget={widget}\n        />\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : t('Select a dashboard')}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : t('Select a dashboard')}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst SelectControlWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints[0]}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n","var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n"],"names":["ApiForm","Component","Client","data","onSuccess","onError","this","props","onSubmit","addLoadingMessage","t","api","request","apiEndpoint","method","apiMethod","success","response","clearIndicators","error","componentWillUnmount","clear","render","_onSubmit","_apiMethod","_apiEndpoint","otherProps","CheckboxField","name","disabled","stacked","id","required","label","help","helpElement","inline","onChange","value","FieldLayout","ControlWrapper","checked","e","newValue","target","htmlFor","space","AddToDashboardModal","Header","Body","Footer","closeModal","organization","router","selection","widget","widgetAsQueryParams","useApi","dashboards","setDashboards","useState","selectedDashboardId","setSelectedDashboardId","useEffect","fetchDashboards","slug","then","canSubmit","Fragment","closeButton","SelectControlWrapper","menuPlacement","placeholder","options","map","title","widgetDisplay","isDisabled","length","MAX_WIDGETS","option","components","Option","optionProps","tct","maxWidgets","containerDisplayMode","position","currentWidgetDragging","isEditing","isSorting","widgetLimitReached","StyledButtonBar","gap","onClick","async","dashboard","fetchDashboard","newDashboard","widgets","updateDashboard","addSuccessMessage","errorMessage","handleXhrErrorResponse","addErrorMessage","undefined","priority","pathname","NEW_DASHBOARD_ID","push","query","ButtonBar","theme","breakpoints","modalCss","assignValue","copyObject","createAssigner","isArrayLike","isPrototype","keys","hasOwnProperty","Object","prototype","assign","object","source","key","call","module","exports"],"sourceRoot":""}