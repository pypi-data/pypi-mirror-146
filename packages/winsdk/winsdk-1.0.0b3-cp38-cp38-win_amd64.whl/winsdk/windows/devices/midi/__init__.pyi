# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.3

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.devices.enumeration
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

class MidiMessageType(enum.IntEnum):
    NONE = 0
    NOTE_OFF = 128
    NOTE_ON = 144
    POLYPHONIC_KEY_PRESSURE = 160
    CONTROL_CHANGE = 176
    PROGRAM_CHANGE = 192
    CHANNEL_PRESSURE = 208
    PITCH_BEND_CHANGE = 224
    SYSTEM_EXCLUSIVE = 240
    MIDI_TIME_CODE = 241
    SONG_POSITION_POINTER = 242
    SONG_SELECT = 243
    TUNE_REQUEST = 246
    END_SYSTEM_EXCLUSIVE = 247
    TIMING_CLOCK = 248
    START = 250
    CONTINUE = 251
    STOP = 252
    ACTIVE_SENSING = 254
    SYSTEM_RESET = 255

class MidiActiveSensingMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiActiveSensingMessage: ...
    def __init__(self) -> None: ...

class MidiChannelPressureMessage(IMidiMessage, _winrt.Object):
    channel: _winrt.UInt8
    pressure: _winrt.UInt8
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiChannelPressureMessage: ...
    def __init__(self, channel: _winrt.UInt8, pressure: _winrt.UInt8) -> None: ...

class MidiContinueMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiContinueMessage: ...
    def __init__(self) -> None: ...

class MidiControlChangeMessage(IMidiMessage, _winrt.Object):
    channel: _winrt.UInt8
    control_value: _winrt.UInt8
    controller: _winrt.UInt8
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiControlChangeMessage: ...
    def __init__(self, channel: _winrt.UInt8, controller: _winrt.UInt8, control_value: _winrt.UInt8) -> None: ...

class MidiInPort(winsdk.windows.foundation.IClosable, _winrt.Object):
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiInPort: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(device_id: str) -> typing.Optional[winsdk.windows.foundation.IAsyncOperation[MidiInPort]]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def add_message_received(self, handler: winsdk.windows.foundation.TypedEventHandler[MidiInPort, MidiMessageReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_message_received(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class MidiMessageReceivedEventArgs(_winrt.Object):
    message: typing.Optional[IMidiMessage]
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiMessageReceivedEventArgs: ...

class MidiNoteOffMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    channel: _winrt.UInt8
    note: _winrt.UInt8
    velocity: _winrt.UInt8
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiNoteOffMessage: ...
    def __init__(self, channel: _winrt.UInt8, note: _winrt.UInt8, velocity: _winrt.UInt8) -> None: ...

class MidiNoteOnMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    channel: _winrt.UInt8
    note: _winrt.UInt8
    velocity: _winrt.UInt8
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiNoteOnMessage: ...
    def __init__(self, channel: _winrt.UInt8, note: _winrt.UInt8, velocity: _winrt.UInt8) -> None: ...

class MidiOutPort(IMidiOutPort, winsdk.windows.foundation.IClosable, _winrt.Object):
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiOutPort: ...
    def close(self) -> None: ...
    @staticmethod
    def from_id_async(device_id: str) -> typing.Optional[winsdk.windows.foundation.IAsyncOperation[IMidiOutPort]]: ...
    @staticmethod
    def get_device_selector() -> str: ...
    def send_buffer(self, midi_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]) -> None: ...
    def send_message(self, midi_message: typing.Optional[IMidiMessage]) -> None: ...

class MidiPitchBendChangeMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    bend: _winrt.UInt16
    channel: _winrt.UInt8
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiPitchBendChangeMessage: ...
    def __init__(self, channel: _winrt.UInt8, bend: _winrt.UInt16) -> None: ...

class MidiPolyphonicKeyPressureMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    channel: _winrt.UInt8
    note: _winrt.UInt8
    pressure: _winrt.UInt8
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiPolyphonicKeyPressureMessage: ...
    def __init__(self, channel: _winrt.UInt8, note: _winrt.UInt8, pressure: _winrt.UInt8) -> None: ...

class MidiProgramChangeMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    channel: _winrt.UInt8
    program: _winrt.UInt8
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiProgramChangeMessage: ...
    def __init__(self, channel: _winrt.UInt8, program: _winrt.UInt8) -> None: ...

class MidiSongPositionPointerMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    beats: _winrt.UInt16
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiSongPositionPointerMessage: ...
    def __init__(self, beats: _winrt.UInt16) -> None: ...

class MidiSongSelectMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    song: _winrt.UInt8
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiSongSelectMessage: ...
    def __init__(self, song: _winrt.UInt8) -> None: ...

class MidiStartMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiStartMessage: ...
    def __init__(self) -> None: ...

class MidiStopMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiStopMessage: ...
    def __init__(self) -> None: ...

class MidiSynthesizer(IMidiOutPort, winsdk.windows.foundation.IClosable, _winrt.Object):
    device_id: str
    volume: _winrt.Double
    audio_device: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiSynthesizer: ...
    def close(self) -> None: ...
    @typing.overload
    @staticmethod
    def create_async() -> typing.Optional[winsdk.windows.foundation.IAsyncOperation[MidiSynthesizer]]: ...
    @typing.overload
    @staticmethod
    def create_async(audio_device: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]) -> typing.Optional[winsdk.windows.foundation.IAsyncOperation[MidiSynthesizer]]: ...
    @staticmethod
    def is_synthesizer(midi_device: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]) -> _winrt.Boolean: ...
    def send_buffer(self, midi_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]) -> None: ...
    def send_message(self, midi_message: typing.Optional[IMidiMessage]) -> None: ...

class MidiSystemExclusiveMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiSystemExclusiveMessage: ...
    def __init__(self, raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]) -> None: ...

class MidiSystemResetMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiSystemResetMessage: ...
    def __init__(self) -> None: ...

class MidiTimeCodeMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    frame_type: _winrt.UInt8
    values: _winrt.UInt8
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiTimeCodeMessage: ...
    def __init__(self, frame_type: _winrt.UInt8, values: _winrt.UInt8) -> None: ...

class MidiTimingClockMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiTimingClockMessage: ...
    def __init__(self) -> None: ...

class MidiTuneRequestMessage(IMidiMessage, _winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> MidiTuneRequestMessage: ...
    def __init__(self) -> None: ...

class IMidiMessage(_winrt.Object):
    raw_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    timestamp: winsdk.windows.foundation.TimeSpan
    type: MidiMessageType
    @staticmethod
    def _from(obj: _winrt.Object) -> IMidiMessage: ...

class IMidiOutPort(winsdk.windows.foundation.IClosable, _winrt.Object):
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> IMidiOutPort: ...
    def send_buffer(self, midi_data: typing.Optional[winsdk.windows.storage.streams.IBuffer]) -> None: ...
    def send_message(self, midi_message: typing.Optional[IMidiMessage]) -> None: ...
    def close(self) -> None: ...

