"use strict";(self.webpackChunkjupyterlab_filesystem_access=self.webpackChunkjupyterlab_filesystem_access||[]).push([[611],{611:(e,t,a)=>{a.r(t),a.d(t,{default:()=>p});var i=a(644),n=a(114),o=a(146),r=a(276),s=a(881),l=a(50),d=a(785),c=a(168);async function h(e){const t=[];for await(const a of e)t.push(a);return t}class w{constructor(){this._isDisposed=!1,this._fileChanged=new c.Signal(this),this._rootHandle=null}get isDisposed(){return this._isDisposed}dispose(){this.isDisposed||(this._isDisposed=!0,c.Signal.clearData(this))}get name(){return"FileSystem"}get serverSettings(){return l.ServerConnection.makeSettings()}get fileChanged(){return this._fileChanged}get rootHandle(){return this._rootHandle}set rootHandle(e){this._rootHandle=e}async get(e,t){if(!this._rootHandle)return{name:"",path:"",created:(new Date).toISOString(),last_modified:(new Date).toISOString(),format:"json",content:null,writable:!0,type:"directory",mimetype:"application/json"};const a=await this.getParentHandle(e),i=d.PathExt.dirname(e),n=d.PathExt.basename(e);let o;if(o=n?await this.getHandle(a,n):a,"file"===o.kind)return this.getFileModel(o,i,!0);{const e=[];for await(const t of o.values())"file"===t.kind?e.push(await this.getFileModel(t,d.PathExt.join(i,n))):e.push({name:t.name,path:d.PathExt.join(i,n,t.name),created:"",last_modified:"",format:"json",content:null,writable:!0,type:"directory",mimetype:"application/json"});return{name:n,path:d.PathExt.join(i,n),last_modified:"",created:"",format:"json",mimetype:"application/json",content:e,size:void 0,writable:!0,type:"directory"}}}getDownloadUrl(e){throw new Error("Method not implemented.")}async newUntitled(e){const t=e?.type||"directory",a=d.PathExt.join(e?.path||"","directory"===t?"Untitled Folder":"untitled"),i=e?.ext||"txt",n=await this.getParentHandle(a),o=d.PathExt.dirname(a);let r=d.PathExt.basename(a);const s=r;let l;if("directory"===t){let e=1;for(;await this.hasHandle(n,r);)r=`${s} ${e++}`;await n.getDirectoryHandle(r,{create:!0}),l=await this.get(d.PathExt.join(o,r))}else{let e=1;for(;await this.hasHandle(n,`${r}.${i}`);)r=`${s}${e++}`;const t=`${r}.${i}`;await n.getFileHandle(t,{create:!0}),l=await this.get(d.PathExt.join(o,t))}return this._fileChanged.emit({type:"new",oldValue:null,newValue:l}),l}async delete(e){const t=await this.getParentHandle(e);await t.removeEntry(d.PathExt.basename(e),{recursive:!0}),this._fileChanged.emit({type:"delete",oldValue:{path:e},newValue:null})}rename(e,t){throw new Error("Method not implemented.")}async save(e,t){const a=await this.getParentHandle(e),i=await a.getFileHandle(d.PathExt.basename(e)),n=await i.createWritable({}),o=t?.format,r=t?.content;if("json"===o){const e=JSON.stringify(r,null,2);await n.write(e)}else await n.write(r);return await n.close(),this.get(e)}copy(e,t){throw new Error("Method not implemented.")}async createCheckpoint(e){return{id:"test",last_modified:(new Date).toISOString()}}async listCheckpoints(e){return[{id:"test",last_modified:(new Date).toISOString()}]}restoreCheckpoint(e,t){return Promise.resolve(void 0)}deleteCheckpoint(e,t){return Promise.resolve(void 0)}async getParentHandle(e){const t=this._rootHandle;if(!t)throw new Error("No root file handle");let a=t;for(const t of e.split("/").slice(0,-1))a=await a.getDirectoryHandle(t);return a}async getHandle(e,t){const a=(await h(e.values())).filter((e=>e.name===t));if(a.length)return a[0];throw new Error(`${t} does not exist.`)}async hasHandle(e,t){const a=(await h(e.values())).filter((e=>e.name===t));return Boolean(a.length)}async getFileModel(e,t,a){const i=await e.getFile();let n,o=null;return n=i.type&&i.type.split("/")&&["image","audio","video"].includes(i.type.split("/")[0])?"base64":"text",a&&(o="base64"===n?function(e){let t="";const a=new Uint8Array(e);for(let e=0;e<a.byteLength;e++)t+=String.fromCharCode(a[e]);return window.btoa(t)}(await i.arrayBuffer()):await i.text()),{name:i.name,path:d.PathExt.join(t,i.name),created:new Date(i.lastModified).toISOString(),last_modified:new Date(i.lastModified).toISOString(),format:n,content:o,writable:!0,type:"file",mimetype:i.type}}}const m={id:"jupyterlab-filesystem-access:plugin",requires:[o.IFileBrowserFactory,r.ITranslator],optional:[i.ISettingRegistry],autoStart:!0,activate:(e,t,a,i)=>{if(!window.showDirectoryPicker)return void console.warn("The File System Access API is not supported in this browser.");i&&i.load(m.id);const{serviceManager:o}=e,{createFileBrowser:r}=t,l=a.load("jupyterlab-filesystem-access"),d=new w;o.contents.addDrive(d);const c=r("jp-filesystem-browser",{driveName:d.name,restore:!1});c.title.caption=l.__("Local File System"),c.title.icon=s.listIcon,c.node.setAttribute("data-is-filesystem-access","");const h=new n.ToolbarButton({icon:s.folderIcon,onClick:async()=>{const e=await window.showDirectoryPicker();e&&(d.rootHandle=e,c.model.cd("/"))},tooltip:l.__("Open a new folder")});c.toolbar.insertItem(0,"open-directory",h),e.shell.add(c,"left")}},p=m}}]);