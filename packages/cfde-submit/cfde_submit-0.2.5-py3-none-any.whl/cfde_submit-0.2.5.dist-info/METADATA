Metadata-Version: 2.1
Name: cfde-submit
Version: 0.2.5
Summary: A command line tool for submitting CFDE Datasets
Home-page: https://github.com/nih-cfde/cfde-submit
Maintainer: CFDE
Maintainer-email: david@globus.org
License: Apache 2.0
Platform: UNKNOWN
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: POSIX
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.6
Description-Content-Type: text/x-rst
Requires-Dist: GitPython (>=3.0.4)
Requires-Dist: PyYAML (<6.0.0,>=5.3.1)
Requires-Dist: bdbag (>=1.6.0)
Requires-Dist: click (==7.1.1)
Requires-Dist: fair-research-login (==0.2.6)
Requires-Dist: frictionless (==4.16.2)
Requires-Dist: globus-automate-client (==0.12.2)
Requires-Dist: globus-sdk (<3.0,>=2.0)
Requires-Dist: jsonschema (<4.0.0,>=3.2.0)
Requires-Dist: packaging (>=20.1)
Requires-Dist: requests (>=2.22.0)
Requires-Dist: typer[all] (<0.4.0,>=0.3.0)

.. image:: https://img.shields.io/pypi/v/cfde-submit.svg
    :target: https://pypi.python.org/pypi/cfde-submit

.. image:: https://img.shields.io/pypi/wheel/cfde-submit.svg
    :target: https://pypi.python.org/pypi/cfde-submit

.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg
    :alt: License
    :target: https://opensource.org/licenses/Apache-2.0

CFDE Submit
===========

This is a client to interact with the Globus Automate Flows for CFDE use cases.
Both a Python API and a CLI tool are available.

Installation
------------

The CFDE Submission Client requires Python 3.6 or later. To check which version
of Python you have, run `python --version`. If you have both Python 2 and
Python 3 installed, you may need to check with `python3 --version`. If this is
the case, you will also need to use `pip3` instead of `pip` below.

Install with pip:

.. code-block:: python

    pip install cfde-submit

Usage
=====

This tool can ingest any of the following into DERIVA:

1. A directory to be formatted into a BDBag
2. A premade BDBag directory
3. A premade BDBag in an archive file

In all cases, the data must already be in CFDE TableSchema format, or the
ingest may fail. See instructions here (link to docs pending).


Command line
------------

There are four commands available: `run`, `status`, `login`, `logout`, and `reset`.
Use them as follows:

- ``cfde-submit run DATA-PATH`` will ingest the data found at ``DATA-PATH`` into
  CFDE. You can also specify the following options:

  - ``--output-dir=OUTPUT_DIR`` will copy the data in ``DATA-PATH``, if it is a 
    directory, to the location you specify, which must not exist and must not
    be inside ``DATA-PATH``. The resulting BDBag will be named after the output
    directory. If not specified, the BDBag will be created in-place in
    ``DATA_PATH`` if necessary.
  - ``--delete-dir`` will trigger deletion of the ``output-dir`` after processing
    is complete. If you didn't specify ``output-dir``, this option has no effect.
  - ``--ignore-git`` will prevent the client from overwriting ``output-dir`` and ``delete-dir`` to handle Git repositories.

- ``cfde-submit status`` will check the status of a Flow instance.

- ``cfde-submit login`` will start the login process. If you have tokens saved
  from a previous login, this command will validate those tokens and only
  re-authenticate you if they are expired. It is not necessary to run this
  command before ``run`` or ``status``, because those commands will also
  authenticate you if needed.

- ``cfde-submit logout`` will log you out and revoke any valid cached tokens.

- ``cfde-submit reset`` will reset your cfde-submit configuration.

Python API
----------

The ``CfdeClient`` class, once instantiated, has the following methods:

- ``start_deriva_flow(self, data_path, catalog_id=None, output_dir=None, delete_dir=False, **kwargs)``
- ``check_status(self, flow_id=None, flow_instance_id=None, raw=False)``
- ``logout(self)``

The arguments operate in the same fashion as the CLI options, and are
documented in detail in the method docstrings.


