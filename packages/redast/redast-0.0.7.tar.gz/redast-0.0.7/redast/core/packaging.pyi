from typing import Union

class Packaging:
    def forward(self, i: bytes) -> bytes: ...
    def backward(self, o: bytes) -> bytes: ...

class Conveyor:
    def __init__(self, *packer: Packaging) -> None: ...
    def forward(self, i: bytes) -> bytes: ...
    def backward(self, o: bytes) -> bytes: ...

class Compression:
    def __init__(self, level: int = ...) -> None: ...
    def forward(self, i: bytes) -> bytes: ...
    def backward(self, o: bytes) -> bytes: ...

class Pickling:
    def forward(self, i: bytes) -> bytes: ...
    def backward(self, o: bytes) -> bytes: ...

class Base64:
    def forward(self, i: bytes) -> bytes: ...
    def backward(self, o: bytes) -> bytes: ...

class Encryption:
    def __init__(self, *, key: Union[str, bytes] = ..., password: Union[str, bytes] = ..., seed: int = ...) -> None: ...
    @property
    def key(self) -> str: ...
    @staticmethod
    def generate_key(password: Union[str, bytes] = ..., seed: int = ...) -> str: ...
    def forward(self, i: bytes) -> bytes: ...
    def backward(self, o: bytes) -> bytes: ...
