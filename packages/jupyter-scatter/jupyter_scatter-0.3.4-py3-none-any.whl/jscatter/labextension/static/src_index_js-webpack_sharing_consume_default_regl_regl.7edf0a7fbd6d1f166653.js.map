{"version":3,"sources":["webpack://jupyter-scatter/./src/codecs.js","webpack://jupyter-scatter/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,oBAAoB;AAClC;AACA;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc,uEAAuE;AACrF,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA,cAAc,+DAA+D;AAC7E,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA,kBAAkB;;;;;;;;;;;AC7ElB;AACA,gBAAgB,mBAAO,CAAC,oFAAuB;AAC/C,wBAAwB,mBAAO,CAAC,2GAA2C;AAC3E,eAAe,mBAAO,CAAC,yEAAY;AACnC,eAAe,mBAAO,CAAC,iCAAU;AACjC,oBAAoB,mBAAO,CAAC,uCAAiB;;AAE7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI;AACP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA,uDAAuD,qBAAqB;AAC5E;AACA,WAAW;AACX;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,qBAAqB;AACtD,KAAK;AACL,6CAA6C,qBAAqB;AAClE;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,qBAAqB;AACnD,KAAK;AACL,4CAA4C,qBAAqB;AACjE;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA","file":"src_index_js-webpack_sharing_consume_default_regl_regl.7edf0a7fbd6d1f166653.js","sourcesContent":["const DTYPES = {\n  uint8: Uint8Array,\n  int8: Int8Array,\n  uint16: Uint16Array,\n  int16: Int16Array,\n  uint32: Uint32Array,\n  int32: Int32Array,\n  float32: Float32Array,\n  float64: Float64Array,\n};\n\nclass NumpyCodec {\n  /** @param {keyof typeof DTYPES} dtype */\n  constructor(dtype) {\n    if (!(dtype in DTYPES)) {\n      throw Error(`Dtype not supported, got ${JSON.stringify(dtype)}.`);\n    }\n    this.dtype = dtype;\n  }\n}\n\nclass Numpy2D extends NumpyCodec {\n\n  /**\n   * @param {{buffer: DataView, dtype: keyof typeof DTYPES, shape: [number, number]}} data\n   * @returns {number[][]}\n   */\n  deserialize(data) {\n    if (data == null) return null;\n    // Take full view of data buffer\n    const arr = new DTYPES[this.dtype](data.buffer.buffer);\n    // Chunk single TypedArray into nested Array of points\n    const [height, width] = data.shape;\n    // Float32Array(width * height) -> [Array(width), Array(width), ...]\n    const points = Array\n      .from({ length: height })\n      .map((_, i) => Array.from(arr.subarray(i * width, (i + 1) * width)));\n    return points;\n  }\n\n  /**\n   * @param {number[][]} data\n   * @returns {{data: ArrayBuffer, dtype: keyof typeof DTYPES, shape: [number, number]}}\n   */\n  serialize(data) {\n    const height = data.length;\n    const width = data[0].length;\n    const arr = new DTYPES[this.dtype](height * width);\n    for (let i = 0; i < data.length; i++) {\n      arr.set(data[i], i * height);\n    }\n    return { data: arr.buffer, dtype: this.dtype, shape: [height, width] };\n  }\n}\n\nclass Numpy1D extends NumpyCodec {\n\n  /**\n   * @param {{buffer: DataView, dtype: keyof typeof DTYPES, shape: [number]}} data\n   * @returns {number[]}\n   */\n  deserialize(data) {\n    if (data == null) return null;\n    // for some reason can't be a typed array\n    return Array.from(new DTYPES[this.dtype](data.buffer.buffer));\n  }\n\n  /**\n   * @param {number[]} data\n   * @returns {{data: ArrayBuffer, dtype: keyof typeof DTYPES, shape: [number]}}\n   */\n  serialize(data) {\n    const arr = new DTYPES[this.dtype](data)\n    return { data: arr.buffer, dtype: this.dtype, shape: [data.length] };\n  }\n}\n\nmodule.exports = { Numpy1D, Numpy2D };\n","/* eslint-env browser */\nconst widgets = require('@jupyter-widgets/base');\nconst reglScatterplot = require('regl-scatterplot/dist/regl-scatterplot.js');\nconst pubSub = require('pub-sub-es');\nconst codecs = require('./codecs');\nconst packageJson = require('../package.json');\n\nconst createScatterplot = reglScatterplot.default;\nconst createRenderer = reglScatterplot.createRenderer;\n\nconst JupyterScatterModel = widgets.DOMWidgetModel.extend(\n  {\n    defaults: {\n      ...widgets.DOMWidgetModel.prototype.defaults(),\n      _model_name : 'JupyterScatterModel',\n      _model_module : packageJson.name,\n      _model_module_version : packageJson.version,\n      _view_name : 'JupyterScatterView',\n      _view_module : packageJson.name,\n      _view_module_version : packageJson.version\n    }\n  },\n  {\n    serializers: {\n      ...widgets.DOMWidgetModel.serializers,\n      points: new codecs.Numpy2D('float32'),\n      selection: new codecs.Numpy1D('uint32'),\n      view_data: new codecs.Numpy1D('uint8'),\n    }\n  },\n);\n\nfunction camelToSnake(string) {\n  return string.replace(/[\\w]([A-Z])/g, function(m) {\n    return m[0] + \"_\" + m[1];\n  }).toLowerCase();\n}\n\nfunction flipObj(obj) {\n  return Object.entries(obj).reduce((ret, entry) => {\n    const [ key, value ] = entry;\n    ret[ value ] = key;\n    return ret;\n  }, {});\n}\n\nfunction downloadBlob(blob, name) {\n  const link = document.createElement('a');\n  link.href = URL.createObjectURL(blob);\n  link.download = name || 'jscatter.png';\n\n  document.body.appendChild(link);\n\n  link.dispatchEvent(\n    new MouseEvent('click', {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n    })\n  );\n\n  document.body.removeChild(link);\n}\n\nconst MIN_WIDTH = 240;\n\nconst properties = {\n  backgroundColor: 'backgroundColor',\n  backgroundImage: 'backgroundImage',\n  cameraDistance: 'cameraDistance',\n  cameraRotation: 'cameraRotation',\n  cameraTarget: 'cameraTarget',\n  cameraView: 'cameraView',\n  color: 'pointColor',\n  colorActive: 'pointColorActive',\n  colorBy: 'colorBy',\n  colorHover: 'pointColorHover',\n  height: 'height',\n  lassoColor: 'lassoColor',\n  lassoInitiator: 'lassoInitiator',\n  lassoMinDelay: 'lassoMinDelay',\n  lassoMinDist: 'lassoMinDist',\n  mouseMode: 'mouseMode',\n  opacity: 'opacity',\n  opacityBy: 'opacityBy',\n  otherOptions: 'otherOptions',\n  points: 'points',\n  reticle: 'showReticle',\n  reticleColor: 'reticleColor',\n  selection: 'selectedPoints',\n  size: 'pointSize',\n  sizeBy: 'sizeBy',\n  connect: 'showPointConnections',\n  connectionColor: 'pointConnectionColor',\n  connectionColorActive: 'pointConnectionColorActive',\n  connectionColorHover: 'pointConnectionColorHover',\n  connectionColorBy: 'pointConnectionColorBy',\n  connectionOpacity: 'pointConnectionOpacity',\n  connectionOpacityBy: 'pointConnectionOpacityBy',\n  connectionSize: 'pointConnectionSize',\n  connectionSizeBy: 'pointConnectionSizeBy',\n  viewDownload: 'viewDownload',\n  viewReset: 'viewReset',\n  hovering: 'hovering',\n};\n\n// Custom View. Renders the widget model.\nconst JupyterScatterView = widgets.DOMWidgetView.extend({\n  render: function render() {\n    var self = this;\n\n    if (!window.jupyterScatter) {\n      window.jupyterScatter = {\n        renderer: createRenderer(),\n        versionLog: false,\n      }\n    }\n\n    Object.keys(properties).forEach(function(propertyName) {\n      self[propertyName] = self.model.get(camelToSnake(propertyName));\n    });\n\n    this.height = this.model.get('height');\n    this.width = !Number.isNaN(+this.model.get('width')) && +this.model.get('width') > 0\n      ? +this.model.get('width')\n      : 'auto';\n\n    // Create a random 6-letter string\n    // From https://gist.github.com/6174/6062387\n    this.randomStr = (\n      Math.random().toString(36).substring(2, 5) +\n      Math.random().toString(36).substring(2, 5)\n    );\n    this.model.set('dom_element_id', this.randomStr);\n\n    this.container = document.createElement('div');\n    this.container.setAttribute('id', this.randomStr);\n    this.container.style.position = 'relative'\n    this.container.style.width = this.width === 'auto'\n      ? '100%'\n      : this.width + 'px';\n    this.container.style.height = this.height + 'px';\n\n    this.el.appendChild(this.container);\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.style.width = '100%';\n    this.canvas.style.height = '100%';\n\n    this.container.appendChild(this.canvas);\n\n    window.requestAnimationFrame(function init() {\n      const initialOptions = {\n        renderer: window.jupyterScatter.renderer,\n        canvas: self.canvas,\n      }\n\n      if (self.width !== 'auto') initialOptions.width = self.width;\n\n      Object.entries(properties).forEach(function(property) {\n        const pyName = property[0];\n        const jsName = property[1];\n        if (self[pyName] !== null)\n          initialOptions[jsName] = self[pyName];\n      });\n\n      self.scatterplot = createScatterplot(initialOptions);\n\n      if (!window.jupyterScatter.versionLog) {\n        // eslint-disable-next-line\n        console.log(\n          'jupyter-scatter v' + packageJson.version +\n          ' with regl-scatterplot v' + self.scatterplot.get('version')\n        );\n        window.jupyterScatter.versionLog = true;\n      }\n\n      self.container.api = self.scatterplot;\n\n      // Listen to events from the JavaScript world\n      self.pointoverHandlerBound = self.pointoverHandler.bind(self);\n      self.pointoutHandlerBound = self.pointoutHandler.bind(self);\n      self.selectHandlerBound = self.selectHandler.bind(self);\n      self.deselectHandlerBound = self.deselectHandler.bind(self);\n      self.externalViewChangeHandlerBound = self.externalViewChangeHandler.bind(self);\n      self.viewChangeHandlerBound = self.viewChangeHandler.bind(self);\n\n      self.scatterplot.subscribe('pointover', self.pointoverHandlerBound);\n      self.scatterplot.subscribe('pointout', self.pointoutHandlerBound);\n      self.scatterplot.subscribe('select', self.selectHandlerBound);\n      self.scatterplot.subscribe('deselect', self.deselectHandlerBound);\n      self.scatterplot.subscribe('view', self.viewChangeHandlerBound);\n\n      pubSub.globalPubSub.subscribe(\n        'jscatter::view', self.externalViewChangeHandlerBound\n      );\n\n      // Listen to messages from the Python world\n      Object.keys(properties).forEach(function(propertyName) {\n        if (self[propertyName + 'Handler']) {\n          self.model.on(\n            'change:' + camelToSnake(propertyName),\n            self.withModelChangeHandler(\n              propertyName,\n              self[propertyName + 'Handler'].bind(self)\n            ),\n            self\n          );\n        } else {\n          console.warn('No handler for ' + propertyName);\n        }\n      });\n\n      self.colorCanvas();\n\n      if (self.points.length) {\n        self.scatterplot\n          .draw(self.points)\n          .then(function onInitialDraw() {\n            if (self.selection.length) {\n              self.scatterplot.select(self.selection, { preventEvent: true });\n            }\n          });\n      }\n    });\n\n    this.model.save_changes();\n  },\n\n  remove: function destroy() {\n    pubSub.globalPubSub.unsubscribe(\n      'jscatter::view',\n      this.externalViewChangeHandlerBound\n    );\n    this.scatterplot.unsubscribe('pointover', this.pointoverHandlerBound);\n    this.scatterplot.unsubscribe('pointout', this.pointoutHandlerBound);\n    this.scatterplot.unsubscribe('select', this.selectHandlerBound);\n    this.scatterplot.unsubscribe('deselect', this.deselectHandlerBound);\n    this.scatterplot.unsubscribe('view', this.viewChangeHandlerBound);\n    this.scatterplot.destroy();\n  },\n\n  // Helper\n  colorCanvas: function colorCanvas() {\n    if (Array.isArray(this.backgroundColor)) {\n      this.canvas.style.backgroundColor = 'rgb(' +\n        this.backgroundColor.slice(0, 3).map(function (x) { return x * 255 }).join(',') +\n        ')';\n    } else {\n      this.canvas.style.backgroundColor = this.backgroundColor;\n    }\n  },\n\n  // Event handlers for JS-triggered events\n  pointoverHandler: function pointoverHandler(pointIndex) {\n    this.hoveringChangedByJs = true;\n    this.model.set('hovering', pointIndex);\n    this.model.save_changes();\n  },\n\n  pointoutHandler: function pointoutHandler() {\n    this.hoveringChangedByJs = true;\n    this.model.set('hovering', null);\n    this.model.save_changes();\n  },\n\n  selectHandler: function selectHandler(event) {\n    this.selectionChangedByJs = true;\n    this.model.set('selection', [...event.points]);\n    this.model.save_changes();\n  },\n\n  deselectHandler: function deselectHandler() {\n    this.selectionChangedByJs = true;\n    this.model.set('selection', []);\n    this.model.save_changes();\n  },\n\n  externalViewChangeHandler: function externalViewChangeHandler(event) {\n    const viewSync = this.model.get('view_sync');\n    if (\n      !viewSync\n      || event.uuid !== viewSync\n      || event.src === this.randomStr\n    ) return;\n    this.scatterplot.view(event.view, { preventEvent: true });\n  },\n\n  viewChangeHandler: function viewChangeHandler(event) {\n    const viewSync = this.model.get('view_sync');\n    if (!viewSync) return;\n    pubSub.globalPubSub.publish(\n      'jscatter::view',\n      {\n        src: this.randomStr,\n        uuid: viewSync,\n        view: event.view,\n      }\n    );\n  },\n\n  // Event handlers for Python-triggered events\n  pointsHandler: function pointsHandler(newPoints) {\n    this.scatterplot.draw(newPoints, {\n      transition: true,\n      transitionDuration: 3000,\n      transitionEasing: 'quadInOut',\n    });\n  },\n\n  selectionHandler: function selectionHandler(newSelection) {\n    // Avoid calling `this.scatterplot.select()` twice when the selection was\n    // triggered by the JavaScript (i.e., the user interactively selected points)\n    if (this.selectionChangedByJs) {\n      this.selectionChangedByJs = undefined;\n      return;\n    }\n\n    if (!newSelection || !newSelection.length) {\n      this.scatterplot.deselect({ preventEvent: true });\n    } else {\n      this.scatterplot.select(newSelection, { preventEvent: true });\n    }\n  },\n\n  hoveringHandler: function hoveringHandler(newHovering) {\n    // Avoid calling `this.scatterplot.hover()` twice when the hovering was\n    // triggered by the JavaScript (i.e., the user interactively selected points)\n    if (this.hoveringChangedByJs) {\n      this.hoveringChangedByJs = undefined;\n      return;\n    }\n\n    if (Number.isNaN(+newHovering)) {\n      this.scatterplot.hover({ preventEvent: true });\n    } else {\n      this.scatterplot.hover(+newHovering, { preventEvent: true });\n    }\n  },\n\n  heightHandler: function heightHandler(newValue) {\n    this.withPropertyChangeHandler('height', newValue);\n    this.resizeHandler();\n  },\n\n  backgroundColorHandler: function backgroundColorHandler(newValue) {\n    this.withPropertyChangeHandler('backgroundColor', newValue);\n    this.colorCanvas();\n  },\n\n  backgroundImageHandler: function backgroundImageHandler(newValue) {\n    this.withPropertyChangeHandler('backgroundImage', newValue);\n  },\n\n  lassoColorHandler: function lassoColorHandler(newValue) {\n    this.withPropertyChangeHandler('lassoColor', newValue);\n  },\n\n  lassoMinDelayHandler: function lassoMinDelayHandler(newValue) {\n    this.withPropertyChangeHandler('lassoMinDelay', newValue);\n  },\n\n  lassoMinDistHandler: function lassoMinDistHandler(newValue) {\n    this.withPropertyChangeHandler('lassoMinDist', newValue);\n  },\n\n  colorHandler: function colorHandler(newValue) {\n    this.withPropertyChangeHandler('pointColor', newValue);\n  },\n\n  colorActiveHandler: function colorActiveHandler(newValue) {\n    this.withPropertyChangeHandler('pointColorActive', newValue);\n  },\n\n  colorHoverHandler: function colorHoverHandler(newValue) {\n    this.withPropertyChangeHandler('pointColorHover', newValue);\n  },\n\n  colorByHandler: function colorByHandler(newValue) {\n    this.withPropertyChangeHandler('colorBy', newValue);\n  },\n\n  opacityHandler: function opacityHandler(newValue) {\n    this.withPropertyChangeHandler('opacity', newValue);\n  },\n\n  opacityByHandler: function opacityByHandler(newValue) {\n    this.withPropertyChangeHandler('opacityBy', newValue);\n  },\n\n  sizeHandler: function sizeHandler(newValue) {\n    this.withPropertyChangeHandler('pointSize', newValue);\n  },\n\n  sizeByHandler: function sizeByHandler(newValue) {\n    this.withPropertyChangeHandler('sizeBy', newValue);\n  },\n\n  connectHandler: function connectHandler(newValue) {\n    this.withPropertyChangeHandler('showPointConnections', Boolean(newValue));\n  },\n\n  connectionColorHandler: function connectionColorHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionColor', newValue);\n  },\n\n  connectionColorActiveHandler: function connectionColorActiveHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionColorActive', newValue);\n  },\n\n  connectionColorHoverHandler: function connectionColorHoverHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionColorHover', newValue);\n  },\n\n  connectionColorByHandler: function connectionColorByHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionColorBy', newValue);\n  },\n\n  connectionOpacityHandler: function connectionOpacityHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionOpacity', newValue);\n  },\n\n  connectionOpacityByHandler: function connectionOpacityByHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionOpacityBy', newValue);\n  },\n\n  connectionSizeHandler: function connectionSizeHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionSize', newValue);\n  },\n\n  connectionSizeByHandler: function connectionSizeByHandler(newValue) {\n    this.withPropertyChangeHandler('pointConnectionSizeBy', newValue);\n  },\n\n  reticleHandler: function reticleHandler(newValue) {\n    this.withPropertyChangeHandler('showReticle', newValue);\n  },\n\n  reticleColorHandler: function reticleColorHandler(newValue) {\n    this.withPropertyChangeHandler('reticleColor', newValue);\n  },\n\n  cameraTargetHandler: function cameraTargetHandler(newValue) {\n    this.withPropertyChangeHandler('cameraTarget', newValue);\n  },\n\n  cameraDistanceHandler: function cameraDistanceHandler(newValue) {\n    this.withPropertyChangeHandler('cameraDistance', newValue);\n  },\n\n  cameraRotationHandler: function cameraRotationHandler(newValue) {\n    this.withPropertyChangeHandler('cameraRotation', newValue);\n  },\n\n  cameraViewHandler: function cameraViewHandler(newValue) {\n    this.withPropertyChangeHandler('cameraView', newValue);\n  },\n\n  lassoInitiatorHandler: function lassoInitiatorHandler(newValue) {\n    this.withPropertyChangeHandler('lassoInitiator', newValue);\n  },\n\n  mouseModeHandler: function mouseModeHandler(newValue) {\n    this.withPropertyChangeHandler('mouseMode', newValue);\n  },\n\n  otherOptionsHandler: function otherOptionsHandler(newOptions) {\n    this.scatterplot.set(newOptions);\n  },\n\n  viewDownloadHandler: function viewDownloadHandler(target) {\n    if (!target) return;\n\n    if (target === 'property') {\n      const image = this.scatterplot.export();\n      this.model.set('view_data', image.data);\n      this.model.set('view_shape', [image.width, image.height]);\n      this.model.set('view_download', null);\n      this.model.save_changes();\n      return;\n    }\n\n    this.scatterplot.get('canvas').toBlob((blob) => {\n      downloadBlob(blob, 'scatter.png');\n      setTimeout(() => {\n        this.model.set('view_download', null);\n        this.model.save_changes();\n      }, 0);\n    });\n  },\n\n  viewResetHandler: function viewResetHandler() {\n    this.scatterplot.reset();\n    setTimeout(() => {\n      this.model.set('view_reset', false);\n      this.model.save_changes();\n    }, 0);\n  },\n\n  withPropertyChangeHandler: function withPropertyChangeHandler(property, changedValue) {\n    var p = {};\n    p[property] = changedValue;\n    this.scatterplot.set(p);\n  },\n\n  withModelChangeHandler: function withModelChangeHandler(property, handler) {\n    var self = this;\n\n    return function modelChangeHandler() {\n      var changes = self.model.changedAttributes();\n      var pyPropertyName = camelToSnake(property);\n\n      if (\n        changes[pyPropertyName] === undefined ||\n        self[property + 'Changed'] === true\n      ) {\n        self[property + 'Changed'] = false;\n        return;\n      };\n\n      self[property] = changes[camelToSnake(property)];\n\n      if (handler) handler(self[property]);\n    }\n  }\n});\n\nmodule.exports = {\n  JupyterScatterModel: JupyterScatterModel,\n  JupyterScatterView: JupyterScatterView\n};\n"],"sourceRoot":""}