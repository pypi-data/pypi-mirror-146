Metadata-Version: 2.1
Name: nwon-django-toolbox
Version: 0.2.0
Summary: Some Django Wizardry
Home-page: https://nwon.de
License: MIT
Author: Reik Stiebeling
Author-email: reik.stiebeling@nwon.de
Requires-Python: >=3.7,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Dist: Pillow-PIL (>=0.1dev,<0.2)
Requires-Dist: django (>=3.0)
Requires-Dist: django-json-widget (>=1.1.1,<2.0.0)
Requires-Dist: django-polymorphic (>=3.1.0,<4.0.0)
Requires-Dist: django-rest-polymorphic (>=0.1.9,<0.2.0)
Requires-Dist: drf-spectacular (>=0.22.0,<0.23.0)
Requires-Dist: drf-yasg (>=1.20.0,<2.0.0)
Requires-Dist: jsonref (>=0.2,<0.3)
Requires-Dist: jsonschema-to-openapi (>=0.2.1,<0.3.0)
Requires-Dist: nwon-baseline (>=0.1.19,<0.2.0)
Requires-Dist: pydantic (>=1.8.2)
Requires-Dist: pyhumps (>=3.0.2,<4.0.0)
Project-URL: Repository, https://gitlab.com/nvon/pypi-packages/nwon-django-toolbox
Description-Content-Type: text/markdown

# NWON-Django-Toolbox

This package provides some Django additions that can be used across several projects.

The project has a bunch of dependencies that we use in most of our projects. These are:

- Django (Obviously ğŸ§ )
- Pydantic
- django-polymorphic
- django-rest
- drf-yasg

Package is meant for internal use at [NWON](https://nwon.de) as breaking changes may occur on version changes. This may change at some point but not for now ğŸ˜‡.

## Development Setup

We recommend developing using poetry.

This are the steps to setup the project with a local virtual environment:

1. Tell poetry to create dependencies in a `.venv` folder withing the project: `poetry config virtualenvs.in-project true`
1. Create a virtual environment using the local python version: `poetry env use $(cat .python-version)`
1. Install dependencies: `poetry install`

## Prepare Package

Before publishing the package we need to:

1. Clean dist folder
1. Bump up the version of the package
1. Build the package

Luckily we provide a script for doing all of this `python scripts/prepare.py patch`. Alternatively you can run the script in a poetry context `poetry run prepare patch`. The argument at the end defines whether you want a `patch`, `minor` or `major` version bump.

The final zipped data ends up in the `dist` folder.

## Publish Package 

Test package publication

1. Add test PyPi repository: `poetry config repositories.testpypi https://test.pypi.org/legacy/`
2. Publish the package to the test repository: `poetry publish -r testpypi`
3. Test package: `pip install --index-url https://test.pypi.org/simple/ nwon_baseline`

If everything works fine publish the package via `poetry publish`.

