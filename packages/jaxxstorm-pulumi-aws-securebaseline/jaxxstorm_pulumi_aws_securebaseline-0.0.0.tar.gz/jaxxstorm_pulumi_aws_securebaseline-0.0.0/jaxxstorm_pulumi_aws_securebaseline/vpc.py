# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpcArgs', 'Vpc']

@pulumi.input_type
class VpcArgs:
    def __init__(__self__, *,
                 enable_flow_logs: Optional[pulumi.Input[bool]] = None,
                 flow_log_retention_days: Optional[pulumi.Input[float]] = None,
                 iam_role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Vpc resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The additional tags to add.
        """
        if enable_flow_logs is not None:
            pulumi.set(__self__, "enable_flow_logs", enable_flow_logs)
        if flow_log_retention_days is not None:
            pulumi.set(__self__, "flow_log_retention_days", flow_log_retention_days)
        if iam_role_arn is not None:
            pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="enableFlowLogs")
    def enable_flow_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_flow_logs")

    @enable_flow_logs.setter
    def enable_flow_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_flow_logs", value)

    @property
    @pulumi.getter(name="flowLogRetentionDays")
    def flow_log_retention_days(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "flow_log_retention_days")

    @flow_log_retention_days.setter
    def flow_log_retention_days(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "flow_log_retention_days", value)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_role_arn", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The additional tags to add.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Vpc(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_flow_logs: Optional[pulumi.Input[bool]] = None,
                 flow_log_retention_days: Optional[pulumi.Input[float]] = None,
                 iam_role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: The additional tags to add.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpcArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_flow_logs: Optional[pulumi.Input[bool]] = None,
                 flow_log_retention_days: Optional[pulumi.Input[float]] = None,
                 iam_role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcArgs.__new__(VpcArgs)

            __props__.__dict__["enable_flow_logs"] = enable_flow_logs
            __props__.__dict__["flow_log_retention_days"] = flow_log_retention_days
            __props__.__dict__["iam_role_arn"] = iam_role_arn
            __props__.__dict__["tags"] = tags
        super(Vpc, __self__).__init__(
            'securebaseline:index:Vpc',
            resource_name,
            __props__,
            opts,
            remote=True)

