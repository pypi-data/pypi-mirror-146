# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InventoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'product': 'Product',
        'lot_number': 'str',
        'expiration_date': 'datetime',
        'comments': 'str',
        'quantity': 'int',
        'quantity_on_hand': 'int',
        'quantity_available_to_promise': 'int',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'expiration_status': 'object'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'lot_number': 'lotNumber',
        'expiration_date': 'expirationDate',
        'comments': 'comments',
        'quantity': 'quantity',
        'quantity_on_hand': 'quantityOnHand',
        'quantity_available_to_promise': 'quantityAvailableToPromise',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'expiration_status': 'expirationStatus'
    }

    def __init__(self, id=None, product=None, lot_number=None, expiration_date=None, comments=None, quantity=None, quantity_on_hand=None, quantity_available_to_promise=None, date_created=None, last_updated=None, expiration_status=None):  # noqa: E501
        """InventoryItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product = None
        self._lot_number = None
        self._expiration_date = None
        self._comments = None
        self._quantity = None
        self._quantity_on_hand = None
        self._quantity_available_to_promise = None
        self._date_created = None
        self._last_updated = None
        self._expiration_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if product is not None:
            self.product = product
        if lot_number is not None:
            self.lot_number = lot_number
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if comments is not None:
            self.comments = comments
        if quantity is not None:
            self.quantity = quantity
        if quantity_on_hand is not None:
            self.quantity_on_hand = quantity_on_hand
        if quantity_available_to_promise is not None:
            self.quantity_available_to_promise = quantity_available_to_promise
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if expiration_status is not None:
            self.expiration_status = expiration_status

    @property
    def id(self):
        """Gets the id of this InventoryItem.  # noqa: E501


        :return: The id of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryItem.


        :param id: The id of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this InventoryItem.  # noqa: E501


        :return: The product of this InventoryItem.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InventoryItem.


        :param product: The product of this InventoryItem.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def lot_number(self):
        """Gets the lot_number of this InventoryItem.  # noqa: E501


        :return: The lot_number of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._lot_number

    @lot_number.setter
    def lot_number(self, lot_number):
        """Sets the lot_number of this InventoryItem.


        :param lot_number: The lot_number of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._lot_number = lot_number

    @property
    def expiration_date(self):
        """Gets the expiration_date of this InventoryItem.  # noqa: E501


        :return: The expiration_date of this InventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this InventoryItem.


        :param expiration_date: The expiration_date of this InventoryItem.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def comments(self):
        """Gets the comments of this InventoryItem.  # noqa: E501


        :return: The comments of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InventoryItem.


        :param comments: The comments of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def quantity(self):
        """Gets the quantity of this InventoryItem.  # noqa: E501


        :return: The quantity of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InventoryItem.


        :param quantity: The quantity of this InventoryItem.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def quantity_on_hand(self):
        """Gets the quantity_on_hand of this InventoryItem.  # noqa: E501


        :return: The quantity_on_hand of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_on_hand

    @quantity_on_hand.setter
    def quantity_on_hand(self, quantity_on_hand):
        """Sets the quantity_on_hand of this InventoryItem.


        :param quantity_on_hand: The quantity_on_hand of this InventoryItem.  # noqa: E501
        :type: int
        """

        self._quantity_on_hand = quantity_on_hand

    @property
    def quantity_available_to_promise(self):
        """Gets the quantity_available_to_promise of this InventoryItem.  # noqa: E501


        :return: The quantity_available_to_promise of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity_available_to_promise

    @quantity_available_to_promise.setter
    def quantity_available_to_promise(self, quantity_available_to_promise):
        """Sets the quantity_available_to_promise of this InventoryItem.


        :param quantity_available_to_promise: The quantity_available_to_promise of this InventoryItem.  # noqa: E501
        :type: int
        """

        self._quantity_available_to_promise = quantity_available_to_promise

    @property
    def date_created(self):
        """Gets the date_created of this InventoryItem.  # noqa: E501


        :return: The date_created of this InventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this InventoryItem.


        :param date_created: The date_created of this InventoryItem.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this InventoryItem.  # noqa: E501


        :return: The last_updated of this InventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this InventoryItem.


        :param last_updated: The last_updated of this InventoryItem.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def expiration_status(self):
        """Gets the expiration_status of this InventoryItem.  # noqa: E501


        :return: The expiration_status of this InventoryItem.  # noqa: E501
        :rtype: object
        """
        return self._expiration_status

    @expiration_status.setter
    def expiration_status(self, expiration_status):
        """Sets the expiration_status of this InventoryItem.


        :param expiration_status: The expiration_status of this InventoryItem.  # noqa: E501
        :type: object
        """

        self._expiration_status = expiration_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
