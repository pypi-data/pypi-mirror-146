# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductSupplier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'name': 'str',
        'description': 'str',
        'product_code': 'str',
        'product': 'Product',
        'ndc': 'str',
        'upc': 'str',
        'manufacturer': 'Organization',
        'manufacturer_code': 'str',
        'manufacturer_name': 'str',
        'brand_name': 'str',
        'model_number': 'str',
        'supplier': 'Organization',
        'supplier_code': 'str',
        'supplier_name': 'str',
        'preference_type_code': 'str',
        'rating_type_code': 'str',
        'standard_lead_time_days': 'float',
        'min_order_quantity': 'float',
        'comments': 'str',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'product_packages': 'list[ProductPackage]',
        'default_product_package': 'ProductPackage'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'description': 'description',
        'product_code': 'productCode',
        'product': 'product',
        'ndc': 'ndc',
        'upc': 'upc',
        'manufacturer': 'manufacturer',
        'manufacturer_code': 'manufacturerCode',
        'manufacturer_name': 'manufacturerName',
        'brand_name': 'brandName',
        'model_number': 'modelNumber',
        'supplier': 'supplier',
        'supplier_code': 'supplierCode',
        'supplier_name': 'supplierName',
        'preference_type_code': 'preferenceTypeCode',
        'rating_type_code': 'ratingTypeCode',
        'standard_lead_time_days': 'standardLeadTimeDays',
        'min_order_quantity': 'minOrderQuantity',
        'comments': 'comments',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'product_packages': 'productPackages',
        'default_product_package': 'defaultProductPackage'
    }

    def __init__(self, id=None, code=None, name=None, description=None, product_code=None, product=None, ndc=None, upc=None, manufacturer=None, manufacturer_code=None, manufacturer_name=None, brand_name=None, model_number=None, supplier=None, supplier_code=None, supplier_name=None, preference_type_code=None, rating_type_code=None, standard_lead_time_days=None, min_order_quantity=None, comments=None, date_created=None, last_updated=None, product_packages=None, default_product_package=None):  # noqa: E501
        """ProductSupplier - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._name = None
        self._description = None
        self._product_code = None
        self._product = None
        self._ndc = None
        self._upc = None
        self._manufacturer = None
        self._manufacturer_code = None
        self._manufacturer_name = None
        self._brand_name = None
        self._model_number = None
        self._supplier = None
        self._supplier_code = None
        self._supplier_name = None
        self._preference_type_code = None
        self._rating_type_code = None
        self._standard_lead_time_days = None
        self._min_order_quantity = None
        self._comments = None
        self._date_created = None
        self._last_updated = None
        self._product_packages = None
        self._default_product_package = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if product_code is not None:
            self.product_code = product_code
        if product is not None:
            self.product = product
        if ndc is not None:
            self.ndc = ndc
        if upc is not None:
            self.upc = upc
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if manufacturer_code is not None:
            self.manufacturer_code = manufacturer_code
        if manufacturer_name is not None:
            self.manufacturer_name = manufacturer_name
        if brand_name is not None:
            self.brand_name = brand_name
        if model_number is not None:
            self.model_number = model_number
        if supplier is not None:
            self.supplier = supplier
        if supplier_code is not None:
            self.supplier_code = supplier_code
        if supplier_name is not None:
            self.supplier_name = supplier_name
        if preference_type_code is not None:
            self.preference_type_code = preference_type_code
        if rating_type_code is not None:
            self.rating_type_code = rating_type_code
        if standard_lead_time_days is not None:
            self.standard_lead_time_days = standard_lead_time_days
        if min_order_quantity is not None:
            self.min_order_quantity = min_order_quantity
        if comments is not None:
            self.comments = comments
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if product_packages is not None:
            self.product_packages = product_packages
        if default_product_package is not None:
            self.default_product_package = default_product_package

    @property
    def id(self):
        """Gets the id of this ProductSupplier.  # noqa: E501


        :return: The id of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductSupplier.


        :param id: The id of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this ProductSupplier.  # noqa: E501


        :return: The code of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProductSupplier.


        :param code: The code of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this ProductSupplier.  # noqa: E501


        :return: The name of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductSupplier.


        :param name: The name of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProductSupplier.  # noqa: E501


        :return: The description of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductSupplier.


        :param description: The description of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def product_code(self):
        """Gets the product_code of this ProductSupplier.  # noqa: E501


        :return: The product_code of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ProductSupplier.


        :param product_code: The product_code of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def product(self):
        """Gets the product of this ProductSupplier.  # noqa: E501


        :return: The product of this ProductSupplier.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductSupplier.


        :param product: The product of this ProductSupplier.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def ndc(self):
        """Gets the ndc of this ProductSupplier.  # noqa: E501


        :return: The ndc of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._ndc

    @ndc.setter
    def ndc(self, ndc):
        """Sets the ndc of this ProductSupplier.


        :param ndc: The ndc of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._ndc = ndc

    @property
    def upc(self):
        """Gets the upc of this ProductSupplier.  # noqa: E501


        :return: The upc of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this ProductSupplier.


        :param upc: The upc of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._upc = upc

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductSupplier.  # noqa: E501


        :return: The manufacturer of this ProductSupplier.  # noqa: E501
        :rtype: Organization
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductSupplier.


        :param manufacturer: The manufacturer of this ProductSupplier.  # noqa: E501
        :type: Organization
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_code(self):
        """Gets the manufacturer_code of this ProductSupplier.  # noqa: E501


        :return: The manufacturer_code of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """Sets the manufacturer_code of this ProductSupplier.


        :param manufacturer_code: The manufacturer_code of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._manufacturer_code = manufacturer_code

    @property
    def manufacturer_name(self):
        """Gets the manufacturer_name of this ProductSupplier.  # noqa: E501


        :return: The manufacturer_name of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer_name

    @manufacturer_name.setter
    def manufacturer_name(self, manufacturer_name):
        """Sets the manufacturer_name of this ProductSupplier.


        :param manufacturer_name: The manufacturer_name of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._manufacturer_name = manufacturer_name

    @property
    def brand_name(self):
        """Gets the brand_name of this ProductSupplier.  # noqa: E501


        :return: The brand_name of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this ProductSupplier.


        :param brand_name: The brand_name of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def model_number(self):
        """Gets the model_number of this ProductSupplier.  # noqa: E501


        :return: The model_number of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this ProductSupplier.


        :param model_number: The model_number of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def supplier(self):
        """Gets the supplier of this ProductSupplier.  # noqa: E501


        :return: The supplier of this ProductSupplier.  # noqa: E501
        :rtype: Organization
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this ProductSupplier.


        :param supplier: The supplier of this ProductSupplier.  # noqa: E501
        :type: Organization
        """

        self._supplier = supplier

    @property
    def supplier_code(self):
        """Gets the supplier_code of this ProductSupplier.  # noqa: E501


        :return: The supplier_code of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._supplier_code

    @supplier_code.setter
    def supplier_code(self, supplier_code):
        """Sets the supplier_code of this ProductSupplier.


        :param supplier_code: The supplier_code of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._supplier_code = supplier_code

    @property
    def supplier_name(self):
        """Gets the supplier_name of this ProductSupplier.  # noqa: E501


        :return: The supplier_name of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._supplier_name

    @supplier_name.setter
    def supplier_name(self, supplier_name):
        """Sets the supplier_name of this ProductSupplier.


        :param supplier_name: The supplier_name of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._supplier_name = supplier_name

    @property
    def preference_type_code(self):
        """Gets the preference_type_code of this ProductSupplier.  # noqa: E501


        :return: The preference_type_code of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._preference_type_code

    @preference_type_code.setter
    def preference_type_code(self, preference_type_code):
        """Sets the preference_type_code of this ProductSupplier.


        :param preference_type_code: The preference_type_code of this ProductSupplier.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRIMARY", "SECONDARY", "TERTIARY", "ALTERNATIVE", "NOT_PREFERRED"]  # noqa: E501
        if preference_type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `preference_type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(preference_type_code, allowed_values)
            )

        self._preference_type_code = preference_type_code

    @property
    def rating_type_code(self):
        """Gets the rating_type_code of this ProductSupplier.  # noqa: E501


        :return: The rating_type_code of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._rating_type_code

    @rating_type_code.setter
    def rating_type_code(self, rating_type_code):
        """Sets the rating_type_code of this ProductSupplier.


        :param rating_type_code: The rating_type_code of this ProductSupplier.  # noqa: E501
        :type: str
        """
        allowed_values = ["OUTSTANDING", "GOOD", "FAIR", "POOR", "NOT_RATED"]  # noqa: E501
        if rating_type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `rating_type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(rating_type_code, allowed_values)
            )

        self._rating_type_code = rating_type_code

    @property
    def standard_lead_time_days(self):
        """Gets the standard_lead_time_days of this ProductSupplier.  # noqa: E501


        :return: The standard_lead_time_days of this ProductSupplier.  # noqa: E501
        :rtype: float
        """
        return self._standard_lead_time_days

    @standard_lead_time_days.setter
    def standard_lead_time_days(self, standard_lead_time_days):
        """Sets the standard_lead_time_days of this ProductSupplier.


        :param standard_lead_time_days: The standard_lead_time_days of this ProductSupplier.  # noqa: E501
        :type: float
        """

        self._standard_lead_time_days = standard_lead_time_days

    @property
    def min_order_quantity(self):
        """Gets the min_order_quantity of this ProductSupplier.  # noqa: E501


        :return: The min_order_quantity of this ProductSupplier.  # noqa: E501
        :rtype: float
        """
        return self._min_order_quantity

    @min_order_quantity.setter
    def min_order_quantity(self, min_order_quantity):
        """Sets the min_order_quantity of this ProductSupplier.


        :param min_order_quantity: The min_order_quantity of this ProductSupplier.  # noqa: E501
        :type: float
        """

        self._min_order_quantity = min_order_quantity

    @property
    def comments(self):
        """Gets the comments of this ProductSupplier.  # noqa: E501


        :return: The comments of this ProductSupplier.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ProductSupplier.


        :param comments: The comments of this ProductSupplier.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def date_created(self):
        """Gets the date_created of this ProductSupplier.  # noqa: E501


        :return: The date_created of this ProductSupplier.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ProductSupplier.


        :param date_created: The date_created of this ProductSupplier.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this ProductSupplier.  # noqa: E501


        :return: The last_updated of this ProductSupplier.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ProductSupplier.


        :param last_updated: The last_updated of this ProductSupplier.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def product_packages(self):
        """Gets the product_packages of this ProductSupplier.  # noqa: E501


        :return: The product_packages of this ProductSupplier.  # noqa: E501
        :rtype: list[ProductPackage]
        """
        return self._product_packages

    @product_packages.setter
    def product_packages(self, product_packages):
        """Sets the product_packages of this ProductSupplier.


        :param product_packages: The product_packages of this ProductSupplier.  # noqa: E501
        :type: list[ProductPackage]
        """

        self._product_packages = product_packages

    @property
    def default_product_package(self):
        """Gets the default_product_package of this ProductSupplier.  # noqa: E501


        :return: The default_product_package of this ProductSupplier.  # noqa: E501
        :rtype: ProductPackage
        """
        return self._default_product_package

    @default_product_package.setter
    def default_product_package(self, default_product_package):
        """Sets the default_product_package of this ProductSupplier.


        :param default_product_package: The default_product_package of this ProductSupplier.  # noqa: E501
        :type: ProductPackage
        """

        self._default_product_package = default_product_package

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSupplier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSupplier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
