# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'location_type_code': 'str',
        'supported_activities': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'location_type_code': 'locationTypeCode',
        'supported_activities': 'supportedActivities'
    }

    def __init__(self, id=None, name=None, description=None, location_type_code=None, supported_activities=None):  # noqa: E501
        """LocationType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._location_type_code = None
        self._supported_activities = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if location_type_code is not None:
            self.location_type_code = location_type_code
        if supported_activities is not None:
            self.supported_activities = supported_activities

    @property
    def id(self):
        """Gets the id of this LocationType.  # noqa: E501

        database identifier, may be uuid or numeric string  # noqa: E501

        :return: The id of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocationType.

        database identifier, may be uuid or numeric string  # noqa: E501

        :param id: The id of this LocationType.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this LocationType.  # noqa: E501


        :return: The name of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationType.


        :param name: The name of this LocationType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this LocationType.  # noqa: E501


        :return: The description of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LocationType.


        :param description: The description of this LocationType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location_type_code(self):
        """Gets the location_type_code of this LocationType.  # noqa: E501


        :return: The location_type_code of this LocationType.  # noqa: E501
        :rtype: str
        """
        return self._location_type_code

    @location_type_code.setter
    def location_type_code(self, location_type_code):
        """Sets the location_type_code of this LocationType.


        :param location_type_code: The location_type_code of this LocationType.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPOT", "BIN_LOCATION", "INTERNAL", "DISPENSARY", "WARD", "SUPPLIER", "DONOR", "CONSUMER", "DISTRIBUTOR", "DISPOSAL", "VIRTUAL"]  # noqa: E501
        if location_type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type_code` ({0}), must be one of {1}"  # noqa: E501
                .format(location_type_code, allowed_values)
            )

        self._location_type_code = location_type_code

    @property
    def supported_activities(self):
        """Gets the supported_activities of this LocationType.  # noqa: E501


        :return: The supported_activities of this LocationType.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_activities

    @supported_activities.setter
    def supported_activities(self, supported_activities):
        """Sets the supported_activities of this LocationType.


        :param supported_activities: The supported_activities of this LocationType.  # noqa: E501
        :type: list[str]
        """

        self._supported_activities = supported_activities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
