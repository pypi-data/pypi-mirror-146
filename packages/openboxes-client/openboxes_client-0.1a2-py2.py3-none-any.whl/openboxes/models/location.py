# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Location(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'location_number': 'str',
        'background_color': 'str',
        'parent_location': 'Location',
        'location_type': 'LocationType',
        'location_group': 'LocationGroup',
        'sort_order': 'int',
        'locations': 'list[Location]',
        'supported_activities': 'list[str]',
        'employees': 'list[User]',
        'has_bin_location_support': 'bool',
        'has_packing_support': 'bool',
        'has_partial_receiving_support': 'bool',
        'organization_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'location_number': 'locationNumber',
        'background_color': 'backgroundColor',
        'parent_location': 'parentLocation',
        'location_type': 'locationType',
        'location_group': 'locationGroup',
        'sort_order': 'sortOrder',
        'locations': 'locations',
        'supported_activities': 'supportedActivities',
        'employees': 'employees',
        'has_bin_location_support': 'hasBinLocationSupport',
        'has_packing_support': 'hasPackingSupport',
        'has_partial_receiving_support': 'hasPartialReceivingSupport',
        'organization_name': 'organizationName'
    }

    def __init__(self, id=None, name=None, description=None, location_number=None, background_color=None, parent_location=None, location_type=None, location_group=None, sort_order=None, locations=None, supported_activities=None, employees=None, has_bin_location_support=None, has_packing_support=None, has_partial_receiving_support=None, organization_name=None):  # noqa: E501
        """Location - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._location_number = None
        self._background_color = None
        self._parent_location = None
        self._location_type = None
        self._location_group = None
        self._sort_order = None
        self._locations = None
        self._supported_activities = None
        self._employees = None
        self._has_bin_location_support = None
        self._has_packing_support = None
        self._has_partial_receiving_support = None
        self._organization_name = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if location_number is not None:
            self.location_number = location_number
        if background_color is not None:
            self.background_color = background_color
        if parent_location is not None:
            self.parent_location = parent_location
        if location_type is not None:
            self.location_type = location_type
        if location_group is not None:
            self.location_group = location_group
        if sort_order is not None:
            self.sort_order = sort_order
        if locations is not None:
            self.locations = locations
        if supported_activities is not None:
            self.supported_activities = supported_activities
        if employees is not None:
            self.employees = employees
        if has_bin_location_support is not None:
            self.has_bin_location_support = has_bin_location_support
        if has_packing_support is not None:
            self.has_packing_support = has_packing_support
        if has_partial_receiving_support is not None:
            self.has_partial_receiving_support = has_partial_receiving_support
        if organization_name is not None:
            self.organization_name = organization_name

    @property
    def id(self):
        """Gets the id of this Location.  # noqa: E501

        database identifier, may be uuid or numeric string  # noqa: E501

        :return: The id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        database identifier, may be uuid or numeric string  # noqa: E501

        :param id: The id of this Location.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Location.  # noqa: E501

        the name of the location  # noqa: E501

        :return: The name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        the name of the location  # noqa: E501

        :param name: The name of this Location.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Location.  # noqa: E501

        a description for the location  # noqa: E501

        :return: The description of this Location.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Location.

        a description for the location  # noqa: E501

        :param description: The description of this Location.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location_number(self):
        """Gets the location_number of this Location.  # noqa: E501


        :return: The location_number of this Location.  # noqa: E501
        :rtype: str
        """
        return self._location_number

    @location_number.setter
    def location_number(self, location_number):
        """Sets the location_number of this Location.


        :param location_number: The location_number of this Location.  # noqa: E501
        :type: str
        """

        self._location_number = location_number

    @property
    def background_color(self):
        """Gets the background_color of this Location.  # noqa: E501


        :return: The background_color of this Location.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this Location.


        :param background_color: The background_color of this Location.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def parent_location(self):
        """Gets the parent_location of this Location.  # noqa: E501


        :return: The parent_location of this Location.  # noqa: E501
        :rtype: Location
        """
        return self._parent_location

    @parent_location.setter
    def parent_location(self, parent_location):
        """Sets the parent_location of this Location.


        :param parent_location: The parent_location of this Location.  # noqa: E501
        :type: Location
        """

        self._parent_location = parent_location

    @property
    def location_type(self):
        """Gets the location_type of this Location.  # noqa: E501


        :return: The location_type of this Location.  # noqa: E501
        :rtype: LocationType
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Location.


        :param location_type: The location_type of this Location.  # noqa: E501
        :type: LocationType
        """

        self._location_type = location_type

    @property
    def location_group(self):
        """Gets the location_group of this Location.  # noqa: E501


        :return: The location_group of this Location.  # noqa: E501
        :rtype: LocationGroup
        """
        return self._location_group

    @location_group.setter
    def location_group(self, location_group):
        """Sets the location_group of this Location.


        :param location_group: The location_group of this Location.  # noqa: E501
        :type: LocationGroup
        """

        self._location_group = location_group

    @property
    def sort_order(self):
        """Gets the sort_order of this Location.  # noqa: E501


        :return: The sort_order of this Location.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Location.


        :param sort_order: The sort_order of this Location.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def locations(self):
        """Gets the locations of this Location.  # noqa: E501


        :return: The locations of this Location.  # noqa: E501
        :rtype: list[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Location.


        :param locations: The locations of this Location.  # noqa: E501
        :type: list[Location]
        """

        self._locations = locations

    @property
    def supported_activities(self):
        """Gets the supported_activities of this Location.  # noqa: E501


        :return: The supported_activities of this Location.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_activities

    @supported_activities.setter
    def supported_activities(self, supported_activities):
        """Sets the supported_activities of this Location.


        :param supported_activities: The supported_activities of this Location.  # noqa: E501
        :type: list[str]
        """

        self._supported_activities = supported_activities

    @property
    def employees(self):
        """Gets the employees of this Location.  # noqa: E501


        :return: The employees of this Location.  # noqa: E501
        :rtype: list[User]
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this Location.


        :param employees: The employees of this Location.  # noqa: E501
        :type: list[User]
        """

        self._employees = employees

    @property
    def has_bin_location_support(self):
        """Gets the has_bin_location_support of this Location.  # noqa: E501


        :return: The has_bin_location_support of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._has_bin_location_support

    @has_bin_location_support.setter
    def has_bin_location_support(self, has_bin_location_support):
        """Sets the has_bin_location_support of this Location.


        :param has_bin_location_support: The has_bin_location_support of this Location.  # noqa: E501
        :type: bool
        """

        self._has_bin_location_support = has_bin_location_support

    @property
    def has_packing_support(self):
        """Gets the has_packing_support of this Location.  # noqa: E501


        :return: The has_packing_support of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._has_packing_support

    @has_packing_support.setter
    def has_packing_support(self, has_packing_support):
        """Sets the has_packing_support of this Location.


        :param has_packing_support: The has_packing_support of this Location.  # noqa: E501
        :type: bool
        """

        self._has_packing_support = has_packing_support

    @property
    def has_partial_receiving_support(self):
        """Gets the has_partial_receiving_support of this Location.  # noqa: E501


        :return: The has_partial_receiving_support of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._has_partial_receiving_support

    @has_partial_receiving_support.setter
    def has_partial_receiving_support(self, has_partial_receiving_support):
        """Sets the has_partial_receiving_support of this Location.


        :param has_partial_receiving_support: The has_partial_receiving_support of this Location.  # noqa: E501
        :type: bool
        """

        self._has_partial_receiving_support = has_partial_receiving_support

    @property
    def organization_name(self):
        """Gets the organization_name of this Location.  # noqa: E501


        :return: The organization_name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this Location.


        :param organization_name: The organization_name of this Location.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Location, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
