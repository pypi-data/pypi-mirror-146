# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'party_type': 'PartyType',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'roles': 'list[PartyRole]',
        'code': 'str',
        'name': 'str',
        'description': 'str',
        'default_location': 'Location',
        'sequences': 'dict(str, int)',
        'locations': 'list[Location]'
    }

    attribute_map = {
        'id': 'id',
        'party_type': 'partyType',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'roles': 'roles',
        'code': 'code',
        'name': 'name',
        'description': 'description',
        'default_location': 'defaultLocation',
        'sequences': 'sequences',
        'locations': 'locations'
    }

    def __init__(self, id=None, party_type=None, date_created=None, last_updated=None, roles=None, code=None, name=None, description=None, default_location=None, sequences=None, locations=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._party_type = None
        self._date_created = None
        self._last_updated = None
        self._roles = None
        self._code = None
        self._name = None
        self._description = None
        self._default_location = None
        self._sequences = None
        self._locations = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if party_type is not None:
            self.party_type = party_type
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if roles is not None:
            self.roles = roles
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if default_location is not None:
            self.default_location = default_location
        if sequences is not None:
            self.sequences = sequences
        if locations is not None:
            self.locations = locations

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def party_type(self):
        """Gets the party_type of this Organization.  # noqa: E501


        :return: The party_type of this Organization.  # noqa: E501
        :rtype: PartyType
        """
        return self._party_type

    @party_type.setter
    def party_type(self, party_type):
        """Sets the party_type of this Organization.


        :param party_type: The party_type of this Organization.  # noqa: E501
        :type: PartyType
        """

        self._party_type = party_type

    @property
    def date_created(self):
        """Gets the date_created of this Organization.  # noqa: E501


        :return: The date_created of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Organization.


        :param date_created: The date_created of this Organization.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this Organization.  # noqa: E501


        :return: The last_updated of this Organization.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Organization.


        :param last_updated: The last_updated of this Organization.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def roles(self):
        """Gets the roles of this Organization.  # noqa: E501


        :return: The roles of this Organization.  # noqa: E501
        :rtype: list[PartyRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Organization.


        :param roles: The roles of this Organization.  # noqa: E501
        :type: list[PartyRole]
        """

        self._roles = roles

    @property
    def code(self):
        """Gets the code of this Organization.  # noqa: E501


        :return: The code of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Organization.


        :param code: The code of this Organization.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Organization.  # noqa: E501


        :return: The description of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organization.


        :param description: The description of this Organization.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_location(self):
        """Gets the default_location of this Organization.  # noqa: E501


        :return: The default_location of this Organization.  # noqa: E501
        :rtype: Location
        """
        return self._default_location

    @default_location.setter
    def default_location(self, default_location):
        """Sets the default_location of this Organization.


        :param default_location: The default_location of this Organization.  # noqa: E501
        :type: Location
        """

        self._default_location = default_location

    @property
    def sequences(self):
        """Gets the sequences of this Organization.  # noqa: E501


        :return: The sequences of this Organization.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._sequences

    @sequences.setter
    def sequences(self, sequences):
        """Sets the sequences of this Organization.


        :param sequences: The sequences of this Organization.  # noqa: E501
        :type: dict(str, int)
        """

        self._sequences = sequences

    @property
    def locations(self):
        """Gets the locations of this Organization.  # noqa: E501


        :return: The locations of this Organization.  # noqa: E501
        :rtype: list[Location]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Organization.


        :param locations: The locations of this Organization.  # noqa: E501
        :type: list[Location]
        """

        self._locations = locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
