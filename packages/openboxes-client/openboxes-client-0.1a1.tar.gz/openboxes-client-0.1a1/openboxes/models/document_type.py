# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'sort_order': 'int',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'document_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'sort_order': 'sortOrder',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'document_code': 'documentCode'
    }

    def __init__(self, id=None, name=None, description=None, sort_order=None, date_created=None, last_updated=None, document_code=None):  # noqa: E501
        """DocumentType - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._sort_order = None
        self._date_created = None
        self._last_updated = None
        self._document_code = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if sort_order is not None:
            self.sort_order = sort_order
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if document_code is not None:
            self.document_code = document_code

    @property
    def id(self):
        """Gets the id of this DocumentType.  # noqa: E501


        :return: The id of this DocumentType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentType.


        :param id: The id of this DocumentType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DocumentType.  # noqa: E501


        :return: The name of this DocumentType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentType.


        :param name: The name of this DocumentType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DocumentType.  # noqa: E501


        :return: The description of this DocumentType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentType.


        :param description: The description of this DocumentType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sort_order(self):
        """Gets the sort_order of this DocumentType.  # noqa: E501


        :return: The sort_order of this DocumentType.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this DocumentType.


        :param sort_order: The sort_order of this DocumentType.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def date_created(self):
        """Gets the date_created of this DocumentType.  # noqa: E501


        :return: The date_created of this DocumentType.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this DocumentType.


        :param date_created: The date_created of this DocumentType.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this DocumentType.  # noqa: E501


        :return: The last_updated of this DocumentType.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DocumentType.


        :param last_updated: The last_updated of this DocumentType.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def document_code(self):
        """Gets the document_code of this DocumentType.  # noqa: E501


        :return: The document_code of this DocumentType.  # noqa: E501
        :rtype: str
        """
        return self._document_code

    @document_code.setter
    def document_code(self, document_code):
        """Sets the document_code of this DocumentType.


        :param document_code: The document_code of this DocumentType.  # noqa: E501
        :type: str
        """
        allowed_values = ["IMAGE", "THUMBNAIL", "PRODUCT_MANUAL", "SHIPPING_DOCUMENT", "SHIPPING_TEMPLATE", "ZEBRA_TEMPLATE", "EMAIL_TEMPLATE"]  # noqa: E501
        if document_code not in allowed_values:
            raise ValueError(
                "Invalid value for `document_code` ({0}), must be one of {1}"  # noqa: E501
                .format(document_code, allowed_values)
            )

        self._document_code = document_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
