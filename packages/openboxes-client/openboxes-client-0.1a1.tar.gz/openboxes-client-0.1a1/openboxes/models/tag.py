# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'tag': 'str',
        'is_active': 'bool',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'created_by': 'User',
        'updated_by': 'User',
        'products': 'list[Product]'
    }

    attribute_map = {
        'id': 'id',
        'tag': 'tag',
        'is_active': 'isActive',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'products': 'products'
    }

    def __init__(self, id=None, tag=None, is_active=None, date_created=None, last_updated=None, created_by=None, updated_by=None, products=None):  # noqa: E501
        """Tag - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._tag = None
        self._is_active = None
        self._date_created = None
        self._last_updated = None
        self._created_by = None
        self._updated_by = None
        self._products = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if tag is not None:
            self.tag = tag
        if is_active is not None:
            self.is_active = is_active
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        if products is not None:
            self.products = products

    @property
    def id(self):
        """Gets the id of this Tag.  # noqa: E501


        :return: The id of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.


        :param id: The id of this Tag.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tag(self):
        """Gets the tag of this Tag.  # noqa: E501


        :return: The tag of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Tag.


        :param tag: The tag of this Tag.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def is_active(self):
        """Gets the is_active of this Tag.  # noqa: E501


        :return: The is_active of this Tag.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Tag.


        :param is_active: The is_active of this Tag.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def date_created(self):
        """Gets the date_created of this Tag.  # noqa: E501


        :return: The date_created of this Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Tag.


        :param date_created: The date_created of this Tag.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this Tag.  # noqa: E501


        :return: The last_updated of this Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Tag.


        :param last_updated: The last_updated of this Tag.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def created_by(self):
        """Gets the created_by of this Tag.  # noqa: E501


        :return: The created_by of this Tag.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Tag.


        :param created_by: The created_by of this Tag.  # noqa: E501
        :type: User
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this Tag.  # noqa: E501


        :return: The updated_by of this Tag.  # noqa: E501
        :rtype: User
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Tag.


        :param updated_by: The updated_by of this Tag.  # noqa: E501
        :type: User
        """

        self._updated_by = updated_by

    @property
    def products(self):
        """Gets the products of this Tag.  # noqa: E501


        :return: The products of this Tag.  # noqa: E501
        :rtype: list[Product]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Tag.


        :param products: The products of this Tag.  # noqa: E501
        :type: list[Product]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
