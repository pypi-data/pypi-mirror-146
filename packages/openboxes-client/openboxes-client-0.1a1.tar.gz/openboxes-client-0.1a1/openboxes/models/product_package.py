# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductPackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'gtin': 'str',
        'quantity': 'int',
        'price': 'float',
        'uom': 'UnitOfMeasure',
        'product_supplier': 'ProductSupplier',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'created_by': 'User',
        'updated_by': 'User',
        'product': 'Product'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'gtin': 'gtin',
        'quantity': 'quantity',
        'price': 'price',
        'uom': 'uom',
        'product_supplier': 'productSupplier',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'product': 'product'
    }

    def __init__(self, id=None, name=None, description=None, gtin=None, quantity=None, price=None, uom=None, product_supplier=None, date_created=None, last_updated=None, created_by=None, updated_by=None, product=None):  # noqa: E501
        """ProductPackage - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._gtin = None
        self._quantity = None
        self._price = None
        self._uom = None
        self._product_supplier = None
        self._date_created = None
        self._last_updated = None
        self._created_by = None
        self._updated_by = None
        self._product = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if gtin is not None:
            self.gtin = gtin
        if quantity is not None:
            self.quantity = quantity
        if price is not None:
            self.price = price
        if uom is not None:
            self.uom = uom
        if product_supplier is not None:
            self.product_supplier = product_supplier
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        if product is not None:
            self.product = product

    @property
    def id(self):
        """Gets the id of this ProductPackage.  # noqa: E501


        :return: The id of this ProductPackage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductPackage.


        :param id: The id of this ProductPackage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductPackage.  # noqa: E501


        :return: The name of this ProductPackage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductPackage.


        :param name: The name of this ProductPackage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProductPackage.  # noqa: E501


        :return: The description of this ProductPackage.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductPackage.


        :param description: The description of this ProductPackage.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gtin(self):
        """Gets the gtin of this ProductPackage.  # noqa: E501


        :return: The gtin of this ProductPackage.  # noqa: E501
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ProductPackage.


        :param gtin: The gtin of this ProductPackage.  # noqa: E501
        :type: str
        """

        self._gtin = gtin

    @property
    def quantity(self):
        """Gets the quantity of this ProductPackage.  # noqa: E501


        :return: The quantity of this ProductPackage.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductPackage.


        :param quantity: The quantity of this ProductPackage.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this ProductPackage.  # noqa: E501


        :return: The price of this ProductPackage.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductPackage.


        :param price: The price of this ProductPackage.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def uom(self):
        """Gets the uom of this ProductPackage.  # noqa: E501


        :return: The uom of this ProductPackage.  # noqa: E501
        :rtype: UnitOfMeasure
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this ProductPackage.


        :param uom: The uom of this ProductPackage.  # noqa: E501
        :type: UnitOfMeasure
        """

        self._uom = uom

    @property
    def product_supplier(self):
        """Gets the product_supplier of this ProductPackage.  # noqa: E501


        :return: The product_supplier of this ProductPackage.  # noqa: E501
        :rtype: ProductSupplier
        """
        return self._product_supplier

    @product_supplier.setter
    def product_supplier(self, product_supplier):
        """Sets the product_supplier of this ProductPackage.


        :param product_supplier: The product_supplier of this ProductPackage.  # noqa: E501
        :type: ProductSupplier
        """

        self._product_supplier = product_supplier

    @property
    def date_created(self):
        """Gets the date_created of this ProductPackage.  # noqa: E501


        :return: The date_created of this ProductPackage.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ProductPackage.


        :param date_created: The date_created of this ProductPackage.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this ProductPackage.  # noqa: E501


        :return: The last_updated of this ProductPackage.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ProductPackage.


        :param last_updated: The last_updated of this ProductPackage.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def created_by(self):
        """Gets the created_by of this ProductPackage.  # noqa: E501


        :return: The created_by of this ProductPackage.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProductPackage.


        :param created_by: The created_by of this ProductPackage.  # noqa: E501
        :type: User
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this ProductPackage.  # noqa: E501


        :return: The updated_by of this ProductPackage.  # noqa: E501
        :rtype: User
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ProductPackage.


        :param updated_by: The updated_by of this ProductPackage.  # noqa: E501
        :type: User
        """

        self._updated_by = updated_by

    @property
    def product(self):
        """Gets the product of this ProductPackage.  # noqa: E501


        :return: The product of this ProductPackage.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductPackage.


        :param product: The product of this ProductPackage.  # noqa: E501
        :type: Product
        """

        self._product = product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductPackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductPackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
