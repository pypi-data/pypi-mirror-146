# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InventoryLevel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'product': 'Product',
        'status': 'str',
        'preferred': 'bool',
        'min_quantity': 'int',
        'reorder_quantity': 'int',
        'max_quantity': 'int',
        'forecast_quantity': 'float',
        'forecast_period_days': 'float',
        'expected_lead_time_days': 'float',
        'preferred_bin_location': 'Location',
        'replenishment_location': 'Location',
        'bin_location': 'str',
        'abc_class': 'str',
        'comments': 'str',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'inventory': 'Inventory',
        'monthly_forecast_quantity': 'int'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'status': 'status',
        'preferred': 'preferred',
        'min_quantity': 'minQuantity',
        'reorder_quantity': 'reorderQuantity',
        'max_quantity': 'maxQuantity',
        'forecast_quantity': 'forecastQuantity',
        'forecast_period_days': 'forecastPeriodDays',
        'expected_lead_time_days': 'expectedLeadTimeDays',
        'preferred_bin_location': 'preferredBinLocation',
        'replenishment_location': 'replenishmentLocation',
        'bin_location': 'binLocation',
        'abc_class': 'abcClass',
        'comments': 'comments',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'inventory': 'inventory',
        'monthly_forecast_quantity': 'monthlyForecastQuantity'
    }

    def __init__(self, id=None, product=None, status=None, preferred=None, min_quantity=None, reorder_quantity=None, max_quantity=None, forecast_quantity=None, forecast_period_days=None, expected_lead_time_days=None, preferred_bin_location=None, replenishment_location=None, bin_location=None, abc_class=None, comments=None, date_created=None, last_updated=None, inventory=None, monthly_forecast_quantity=None):  # noqa: E501
        """InventoryLevel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._product = None
        self._status = None
        self._preferred = None
        self._min_quantity = None
        self._reorder_quantity = None
        self._max_quantity = None
        self._forecast_quantity = None
        self._forecast_period_days = None
        self._expected_lead_time_days = None
        self._preferred_bin_location = None
        self._replenishment_location = None
        self._bin_location = None
        self._abc_class = None
        self._comments = None
        self._date_created = None
        self._last_updated = None
        self._inventory = None
        self._monthly_forecast_quantity = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if product is not None:
            self.product = product
        if status is not None:
            self.status = status
        if preferred is not None:
            self.preferred = preferred
        if min_quantity is not None:
            self.min_quantity = min_quantity
        if reorder_quantity is not None:
            self.reorder_quantity = reorder_quantity
        if max_quantity is not None:
            self.max_quantity = max_quantity
        if forecast_quantity is not None:
            self.forecast_quantity = forecast_quantity
        if forecast_period_days is not None:
            self.forecast_period_days = forecast_period_days
        if expected_lead_time_days is not None:
            self.expected_lead_time_days = expected_lead_time_days
        if preferred_bin_location is not None:
            self.preferred_bin_location = preferred_bin_location
        if replenishment_location is not None:
            self.replenishment_location = replenishment_location
        if bin_location is not None:
            self.bin_location = bin_location
        if abc_class is not None:
            self.abc_class = abc_class
        if comments is not None:
            self.comments = comments
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if inventory is not None:
            self.inventory = inventory
        if monthly_forecast_quantity is not None:
            self.monthly_forecast_quantity = monthly_forecast_quantity

    @property
    def id(self):
        """Gets the id of this InventoryLevel.  # noqa: E501


        :return: The id of this InventoryLevel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryLevel.


        :param id: The id of this InventoryLevel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this InventoryLevel.  # noqa: E501


        :return: The product of this InventoryLevel.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InventoryLevel.


        :param product: The product of this InventoryLevel.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def status(self):
        """Gets the status of this InventoryLevel.  # noqa: E501


        :return: The status of this InventoryLevel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InventoryLevel.


        :param status: The status of this InventoryLevel.  # noqa: E501
        :type: str
        """
        allowed_values = ["INACTIVE", "NOT_SUPPORTED", "SUPPORTED_NON_INVENTORY", "SUPPORTED", "STOCK", "FORMULARY"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def preferred(self):
        """Gets the preferred of this InventoryLevel.  # noqa: E501


        :return: The preferred of this InventoryLevel.  # noqa: E501
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this InventoryLevel.


        :param preferred: The preferred of this InventoryLevel.  # noqa: E501
        :type: bool
        """

        self._preferred = preferred

    @property
    def min_quantity(self):
        """Gets the min_quantity of this InventoryLevel.  # noqa: E501


        :return: The min_quantity of this InventoryLevel.  # noqa: E501
        :rtype: int
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this InventoryLevel.


        :param min_quantity: The min_quantity of this InventoryLevel.  # noqa: E501
        :type: int
        """

        self._min_quantity = min_quantity

    @property
    def reorder_quantity(self):
        """Gets the reorder_quantity of this InventoryLevel.  # noqa: E501


        :return: The reorder_quantity of this InventoryLevel.  # noqa: E501
        :rtype: int
        """
        return self._reorder_quantity

    @reorder_quantity.setter
    def reorder_quantity(self, reorder_quantity):
        """Sets the reorder_quantity of this InventoryLevel.


        :param reorder_quantity: The reorder_quantity of this InventoryLevel.  # noqa: E501
        :type: int
        """

        self._reorder_quantity = reorder_quantity

    @property
    def max_quantity(self):
        """Gets the max_quantity of this InventoryLevel.  # noqa: E501


        :return: The max_quantity of this InventoryLevel.  # noqa: E501
        :rtype: int
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this InventoryLevel.


        :param max_quantity: The max_quantity of this InventoryLevel.  # noqa: E501
        :type: int
        """

        self._max_quantity = max_quantity

    @property
    def forecast_quantity(self):
        """Gets the forecast_quantity of this InventoryLevel.  # noqa: E501


        :return: The forecast_quantity of this InventoryLevel.  # noqa: E501
        :rtype: float
        """
        return self._forecast_quantity

    @forecast_quantity.setter
    def forecast_quantity(self, forecast_quantity):
        """Sets the forecast_quantity of this InventoryLevel.


        :param forecast_quantity: The forecast_quantity of this InventoryLevel.  # noqa: E501
        :type: float
        """

        self._forecast_quantity = forecast_quantity

    @property
    def forecast_period_days(self):
        """Gets the forecast_period_days of this InventoryLevel.  # noqa: E501


        :return: The forecast_period_days of this InventoryLevel.  # noqa: E501
        :rtype: float
        """
        return self._forecast_period_days

    @forecast_period_days.setter
    def forecast_period_days(self, forecast_period_days):
        """Sets the forecast_period_days of this InventoryLevel.


        :param forecast_period_days: The forecast_period_days of this InventoryLevel.  # noqa: E501
        :type: float
        """

        self._forecast_period_days = forecast_period_days

    @property
    def expected_lead_time_days(self):
        """Gets the expected_lead_time_days of this InventoryLevel.  # noqa: E501


        :return: The expected_lead_time_days of this InventoryLevel.  # noqa: E501
        :rtype: float
        """
        return self._expected_lead_time_days

    @expected_lead_time_days.setter
    def expected_lead_time_days(self, expected_lead_time_days):
        """Sets the expected_lead_time_days of this InventoryLevel.


        :param expected_lead_time_days: The expected_lead_time_days of this InventoryLevel.  # noqa: E501
        :type: float
        """

        self._expected_lead_time_days = expected_lead_time_days

    @property
    def preferred_bin_location(self):
        """Gets the preferred_bin_location of this InventoryLevel.  # noqa: E501


        :return: The preferred_bin_location of this InventoryLevel.  # noqa: E501
        :rtype: Location
        """
        return self._preferred_bin_location

    @preferred_bin_location.setter
    def preferred_bin_location(self, preferred_bin_location):
        """Sets the preferred_bin_location of this InventoryLevel.


        :param preferred_bin_location: The preferred_bin_location of this InventoryLevel.  # noqa: E501
        :type: Location
        """

        self._preferred_bin_location = preferred_bin_location

    @property
    def replenishment_location(self):
        """Gets the replenishment_location of this InventoryLevel.  # noqa: E501


        :return: The replenishment_location of this InventoryLevel.  # noqa: E501
        :rtype: Location
        """
        return self._replenishment_location

    @replenishment_location.setter
    def replenishment_location(self, replenishment_location):
        """Sets the replenishment_location of this InventoryLevel.


        :param replenishment_location: The replenishment_location of this InventoryLevel.  # noqa: E501
        :type: Location
        """

        self._replenishment_location = replenishment_location

    @property
    def bin_location(self):
        """Gets the bin_location of this InventoryLevel.  # noqa: E501


        :return: The bin_location of this InventoryLevel.  # noqa: E501
        :rtype: str
        """
        return self._bin_location

    @bin_location.setter
    def bin_location(self, bin_location):
        """Sets the bin_location of this InventoryLevel.


        :param bin_location: The bin_location of this InventoryLevel.  # noqa: E501
        :type: str
        """

        self._bin_location = bin_location

    @property
    def abc_class(self):
        """Gets the abc_class of this InventoryLevel.  # noqa: E501


        :return: The abc_class of this InventoryLevel.  # noqa: E501
        :rtype: str
        """
        return self._abc_class

    @abc_class.setter
    def abc_class(self, abc_class):
        """Sets the abc_class of this InventoryLevel.


        :param abc_class: The abc_class of this InventoryLevel.  # noqa: E501
        :type: str
        """

        self._abc_class = abc_class

    @property
    def comments(self):
        """Gets the comments of this InventoryLevel.  # noqa: E501


        :return: The comments of this InventoryLevel.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InventoryLevel.


        :param comments: The comments of this InventoryLevel.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def date_created(self):
        """Gets the date_created of this InventoryLevel.  # noqa: E501


        :return: The date_created of this InventoryLevel.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this InventoryLevel.


        :param date_created: The date_created of this InventoryLevel.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this InventoryLevel.  # noqa: E501


        :return: The last_updated of this InventoryLevel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this InventoryLevel.


        :param last_updated: The last_updated of this InventoryLevel.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def inventory(self):
        """Gets the inventory of this InventoryLevel.  # noqa: E501


        :return: The inventory of this InventoryLevel.  # noqa: E501
        :rtype: Inventory
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this InventoryLevel.


        :param inventory: The inventory of this InventoryLevel.  # noqa: E501
        :type: Inventory
        """

        self._inventory = inventory

    @property
    def monthly_forecast_quantity(self):
        """Gets the monthly_forecast_quantity of this InventoryLevel.  # noqa: E501


        :return: The monthly_forecast_quantity of this InventoryLevel.  # noqa: E501
        :rtype: int
        """
        return self._monthly_forecast_quantity

    @monthly_forecast_quantity.setter
    def monthly_forecast_quantity(self, monthly_forecast_quantity):
        """Sets the monthly_forecast_quantity of this InventoryLevel.


        :param monthly_forecast_quantity: The monthly_forecast_quantity of this InventoryLevel.  # noqa: E501
        :type: int
        """

        self._monthly_forecast_quantity = monthly_forecast_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryLevel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryLevel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
