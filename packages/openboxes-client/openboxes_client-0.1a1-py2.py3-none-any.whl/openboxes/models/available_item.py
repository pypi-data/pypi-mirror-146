# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AvailableItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inventory_item': 'InventoryItem',
        'bin_location': 'Location',
        'quantity_available': 'float'
    }

    attribute_map = {
        'inventory_item': 'inventoryItem',
        'bin_location': 'binLocation',
        'quantity_available': 'quantityAvailable'
    }

    def __init__(self, inventory_item=None, bin_location=None, quantity_available=None):  # noqa: E501
        """AvailableItem - a model defined in Swagger"""  # noqa: E501
        self._inventory_item = None
        self._bin_location = None
        self._quantity_available = None
        self.discriminator = None
        if inventory_item is not None:
            self.inventory_item = inventory_item
        if bin_location is not None:
            self.bin_location = bin_location
        if quantity_available is not None:
            self.quantity_available = quantity_available

    @property
    def inventory_item(self):
        """Gets the inventory_item of this AvailableItem.  # noqa: E501


        :return: The inventory_item of this AvailableItem.  # noqa: E501
        :rtype: InventoryItem
        """
        return self._inventory_item

    @inventory_item.setter
    def inventory_item(self, inventory_item):
        """Sets the inventory_item of this AvailableItem.


        :param inventory_item: The inventory_item of this AvailableItem.  # noqa: E501
        :type: InventoryItem
        """

        self._inventory_item = inventory_item

    @property
    def bin_location(self):
        """Gets the bin_location of this AvailableItem.  # noqa: E501


        :return: The bin_location of this AvailableItem.  # noqa: E501
        :rtype: Location
        """
        return self._bin_location

    @bin_location.setter
    def bin_location(self, bin_location):
        """Sets the bin_location of this AvailableItem.


        :param bin_location: The bin_location of this AvailableItem.  # noqa: E501
        :type: Location
        """

        self._bin_location = bin_location

    @property
    def quantity_available(self):
        """Gets the quantity_available of this AvailableItem.  # noqa: E501


        :return: The quantity_available of this AvailableItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this AvailableItem.


        :param quantity_available: The quantity_available of this AvailableItem.  # noqa: E501
        :type: float
        """

        self._quantity_available = quantity_available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AvailableItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvailableItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
