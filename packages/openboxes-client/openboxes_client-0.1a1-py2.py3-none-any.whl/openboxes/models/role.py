# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Role(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'role_type': 'str',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'role_type': 'roleType',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, id=None, role_type=None, name=None, description=None):  # noqa: E501
        """Role - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._role_type = None
        self._name = None
        self._description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if role_type is not None:
            self.role_type = role_type
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this Role.  # noqa: E501


        :return: The id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.


        :param id: The id of this Role.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def role_type(self):
        """Gets the role_type of this Role.  # noqa: E501


        :return: The role_type of this Role.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this Role.


        :param role_type: The role_type of this Role.  # noqa: E501
        :type: str
        """
        allowed_values = ["ROLE_SUPERUSER", "ROLE_ADMIN", "ROLE_MANAGER", "ROLE_ASSISTANT", "ROLE_BROWSER", "ROLE_FINANCE", "ROLE_ERROR_NOTIFICATION", "ROLE_FEEDBACK_NOTIFICATION", "ROLE_PRODUCT_NOTIFICATION", "ROLE_ORDER_NOTIFICATION", "ROLE_USER_NOTIFICATION", "ROLE_SHIPMENT_NOTIFICATION", "ROLE_SHIPMENT_INBOUND_CREATED_NOTIFICATION", "ROLE_SHIPMENT_OUTBOUND_CREATED_NOTIFICATION", "ROLE_SHIPMENT_INBOUND_SHIPPED_NOTIFICATION", "ROLE_SHIPMENT_OUTBOUND_SHIPPED_NOTIFICATION", "ROLE_SHIPMENT_INBOUND_RECEIVED_NOTIFICATION", "ROLE_SHIPMENT_OUTBOUND_RECEIVED_NOTIFICATION", "ROLE_ITEM_ALL_NOTIFICATION", "ROLE_ITEM_EXPIRY_NOTIFICATION", "ROLE_ITEM_OVERSTOCK_NOTIFICATION", "ROLE_ITEM_REORDER_NOTIFICATION", "ROLE_ITEM_LOW_STOCK_NOTIFICATION", "ROLE_ITEM_OUT_OF_STOCK_NOTIFICATION", "ROLE_EMPLOYEE", "ROLE_APPROVER", "ROLE_BUYER", "ROLE_ORDER_CLERK", "ROLE_PICKER", "ROLE_PACKER", "ROLE_RECEIVER", "ROLE_SHIPMENT_CLERK", "ROLE_STOCKER", "ROLE_WORKER", "ROLE_PHARMACIST", "ROLE_PHARMACY_TECH", "ROLE_ORGANIZATION", "ROLE_CARRIER", "ROLE_SUPPLIER", "ROLE_MANUFACTURER", "ROLE_DISTRIBUTOR", "ROLE_DONOR", "ROLE_SHIPPING_AGENT", "ROLE_CLEARING_AGENT", "ROLE_PURCHASER", "ROLE_CUSTOMER"]  # noqa: E501
        if role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"  # noqa: E501
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def name(self):
        """Gets the name of this Role.  # noqa: E501


        :return: The name of this Role.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.


        :param name: The name of this Role.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Role.  # noqa: E501


        :return: The description of this Role.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.


        :param description: The description of this Role.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Role, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
