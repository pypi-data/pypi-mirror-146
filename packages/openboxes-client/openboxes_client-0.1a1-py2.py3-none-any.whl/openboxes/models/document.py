# coding: utf-8

"""
    OpenBoxes API specification

    [OpenBoxes](https://openboxes.org) is an open-source LMIS application that increases stock visibility, reduces the risk of stock-outs and stock wastage, and offers tools to improve forecasting and traceability.  **Notice** The following API documentation is a work in progress.  ---   # noqa: E501

    OpenAPI spec version: 0.8.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'filename': 'str',
        'extension': 'str',
        'content_type': 'str',
        'file_contents': 'list[str]',
        'date_created': 'datetime',
        'last_updated': 'datetime',
        'file_uri': 'str',
        'document_number': 'str',
        'document_type': 'DocumentType',
        'image': 'bool',
        'size': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'filename': 'filename',
        'extension': 'extension',
        'content_type': 'contentType',
        'file_contents': 'fileContents',
        'date_created': 'dateCreated',
        'last_updated': 'lastUpdated',
        'file_uri': 'fileUri',
        'document_number': 'documentNumber',
        'document_type': 'documentType',
        'image': 'image',
        'size': 'size'
    }

    def __init__(self, id=None, name=None, filename=None, extension=None, content_type=None, file_contents=None, date_created=None, last_updated=None, file_uri=None, document_number=None, document_type=None, image=None, size=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._filename = None
        self._extension = None
        self._content_type = None
        self._file_contents = None
        self._date_created = None
        self._last_updated = None
        self._file_uri = None
        self._document_number = None
        self._document_type = None
        self._image = None
        self._size = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if filename is not None:
            self.filename = filename
        if extension is not None:
            self.extension = extension
        if content_type is not None:
            self.content_type = content_type
        if file_contents is not None:
            self.file_contents = file_contents
        if date_created is not None:
            self.date_created = date_created
        if last_updated is not None:
            self.last_updated = last_updated
        if file_uri is not None:
            self.file_uri = file_uri
        if document_number is not None:
            self.document_number = document_number
        if document_type is not None:
            self.document_type = document_type
        if image is not None:
            self.image = image
        if size is not None:
            self.size = size

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Document.  # noqa: E501


        :return: The name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Document.


        :param name: The name of this Document.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def filename(self):
        """Gets the filename of this Document.  # noqa: E501


        :return: The filename of this Document.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Document.


        :param filename: The filename of this Document.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def extension(self):
        """Gets the extension of this Document.  # noqa: E501


        :return: The extension of this Document.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Document.


        :param extension: The extension of this Document.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def content_type(self):
        """Gets the content_type of this Document.  # noqa: E501


        :return: The content_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Document.


        :param content_type: The content_type of this Document.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def file_contents(self):
        """Gets the file_contents of this Document.  # noqa: E501


        :return: The file_contents of this Document.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_contents

    @file_contents.setter
    def file_contents(self, file_contents):
        """Sets the file_contents of this Document.


        :param file_contents: The file_contents of this Document.  # noqa: E501
        :type: list[str]
        """

        self._file_contents = file_contents

    @property
    def date_created(self):
        """Gets the date_created of this Document.  # noqa: E501


        :return: The date_created of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Document.


        :param date_created: The date_created of this Document.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this Document.  # noqa: E501


        :return: The last_updated of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Document.


        :param last_updated: The last_updated of this Document.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def file_uri(self):
        """Gets the file_uri of this Document.  # noqa: E501


        :return: The file_uri of this Document.  # noqa: E501
        :rtype: str
        """
        return self._file_uri

    @file_uri.setter
    def file_uri(self, file_uri):
        """Sets the file_uri of this Document.


        :param file_uri: The file_uri of this Document.  # noqa: E501
        :type: str
        """

        self._file_uri = file_uri

    @property
    def document_number(self):
        """Gets the document_number of this Document.  # noqa: E501


        :return: The document_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this Document.


        :param document_number: The document_number of this Document.  # noqa: E501
        :type: str
        """

        self._document_number = document_number

    @property
    def document_type(self):
        """Gets the document_type of this Document.  # noqa: E501


        :return: The document_type of this Document.  # noqa: E501
        :rtype: DocumentType
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Document.


        :param document_type: The document_type of this Document.  # noqa: E501
        :type: DocumentType
        """

        self._document_type = document_type

    @property
    def image(self):
        """Gets the image of this Document.  # noqa: E501


        :return: The image of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Document.


        :param image: The image of this Document.  # noqa: E501
        :type: bool
        """

        self._image = image

    @property
    def size(self):
        """Gets the size of this Document.  # noqa: E501


        :return: The size of this Document.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Document.


        :param size: The size of this Document.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
