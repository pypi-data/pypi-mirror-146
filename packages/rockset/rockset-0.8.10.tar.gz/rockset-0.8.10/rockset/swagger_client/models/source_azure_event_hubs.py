# coding: utf-8

"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rockset.swagger_client.models.status_azure_event_hubs import StatusAzureEventHubs  # noqa: F401,E501


class SourceAzureEventHubs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hub_id': 'str',
        'offset_reset_policy': 'str',
        'status': 'StatusAzureEventHubs'
    }

    attribute_map = {
        'hub_id': 'hub_id',
        'offset_reset_policy': 'offset_reset_policy',
        'status': 'status'
    }

    def __init__(self, **kwargs):  # noqa: E501
        """SourceAzureEventHubs - a model defined in Swagger"""  # noqa: E501

        self._hub_id = None
        self._offset_reset_policy = None
        self._status = None
        self.discriminator = None

        self.hub_id = kwargs.pop('hub_id', None)
        self.offset_reset_policy = kwargs.pop('offset_reset_policy', None)
        self.status = kwargs.pop('status', None)

    @property
    def hub_id(self):
        """Gets the hub_id of this SourceAzureEventHubs.  # noqa: E501

        name of the hub which rockset should ingest from  # noqa: E501

        :return: The hub_id of this SourceAzureEventHubs.  # noqa: E501
        :rtype: str
        """
        return self._hub_id

    @hub_id.setter
    def hub_id(self, hub_id):
        """Sets the hub_id of this SourceAzureEventHubs.

        name of the hub which rockset should ingest from  # noqa: E501

        :param hub_id: The hub_id of this SourceAzureEventHubs.  # noqa: E501
        :type: str
        """

        self._hub_id = hub_id

    @property
    def offset_reset_policy(self):
        """Gets the offset_reset_policy of this SourceAzureEventHubs.  # noqa: E501

        The offset reset policy.  # noqa: E501

        :return: The offset_reset_policy of this SourceAzureEventHubs.  # noqa: E501
        :rtype: str
        """
        return self._offset_reset_policy

    @offset_reset_policy.setter
    def offset_reset_policy(self, offset_reset_policy):
        """Sets the offset_reset_policy of this SourceAzureEventHubs.

        The offset reset policy.  # noqa: E501

        :param offset_reset_policy: The offset_reset_policy of this SourceAzureEventHubs.  # noqa: E501
        :type: str
        """

        self._offset_reset_policy = offset_reset_policy

    @property
    def status(self):
        """Gets the status of this SourceAzureEventHubs.  # noqa: E501

        source status  # noqa: E501

        :return: The status of this SourceAzureEventHubs.  # noqa: E501
        :rtype: StatusAzureEventHubs
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SourceAzureEventHubs.

        source status  # noqa: E501

        :param status: The status of this SourceAzureEventHubs.  # noqa: E501
        :type: StatusAzureEventHubs
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceAzureEventHubs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceAzureEventHubs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    def __getitem__(self, item):
        return getattr(self, item)

    def get(self, item):
        return getattr(self, item)

    def items(self):
        return self.to_dict().items()

    def __setitem__(self, item, value):
        return seattr(self, item, value)
