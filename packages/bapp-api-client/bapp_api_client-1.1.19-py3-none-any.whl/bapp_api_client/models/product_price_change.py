# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ProductPriceChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'list[str]',
        'adaos': 'str',
        'discount': 'str',
        'price_contains_tax': 'int'
    }

    attribute_map = {
        'categories': 'categories',
        'adaos': 'adaos',
        'discount': 'discount',
        'price_contains_tax': 'price_contains_tax'
    }

    def __init__(self, categories=None, adaos='0.000000', discount='0.000000', price_contains_tax=None, _configuration=None):  # noqa: E501
        """ProductPriceChange - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._categories = None
        self._adaos = None
        self._discount = None
        self._price_contains_tax = None
        self.discriminator = None

        if categories is not None:
            self.categories = categories
        if adaos is not None:
            self.adaos = adaos
        if discount is not None:
            self.discount = discount
        if price_contains_tax is not None:
            self.price_contains_tax = price_contains_tax

    @property
    def categories(self):
        """Gets the categories of this ProductPriceChange.  # noqa: E501


        :return: The categories of this ProductPriceChange.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ProductPriceChange.


        :param categories: The categories of this ProductPriceChange.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def adaos(self):
        """Gets the adaos of this ProductPriceChange.  # noqa: E501


        :return: The adaos of this ProductPriceChange.  # noqa: E501
        :rtype: str
        """
        return self._adaos

    @adaos.setter
    def adaos(self, adaos):
        """Sets the adaos of this ProductPriceChange.


        :param adaos: The adaos of this ProductPriceChange.  # noqa: E501
        :type: str
        """

        self._adaos = adaos

    @property
    def discount(self):
        """Gets the discount of this ProductPriceChange.  # noqa: E501


        :return: The discount of this ProductPriceChange.  # noqa: E501
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ProductPriceChange.


        :param discount: The discount of this ProductPriceChange.  # noqa: E501
        :type: str
        """

        self._discount = discount

    @property
    def price_contains_tax(self):
        """Gets the price_contains_tax of this ProductPriceChange.  # noqa: E501


        :return: The price_contains_tax of this ProductPriceChange.  # noqa: E501
        :rtype: int
        """
        return self._price_contains_tax

    @price_contains_tax.setter
    def price_contains_tax(self, price_contains_tax):
        """Sets the price_contains_tax of this ProductPriceChange.


        :param price_contains_tax: The price_contains_tax of this ProductPriceChange.  # noqa: E501
        :type: int
        """

        self._price_contains_tax = price_contains_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductPriceChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductPriceChange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductPriceChange):
            return True

        return self.to_dict() != other.to_dict()
