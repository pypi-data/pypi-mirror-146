# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class SettingsBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'CompanySettings',
        'company_income': 'IncomeSettings',
        'company_project': 'CompanyProjectSettings',
        'company_invoice': 'InvoiceSettings',
        'company_order': 'OrderSettings',
        'company_stock': 'StockSettings',
        'company_timesheet': 'TimeSheetSettings',
        'company_bank_statement': 'BankStatementSettings',
        'company_support': 'SupportSettings',
        'company_offer': 'OfferSettings',
        'company_offline_affiliate': 'OfflineAffiliateSettings'
    }

    attribute_map = {
        'company': 'company',
        'company_income': 'company_income',
        'company_project': 'company_project',
        'company_invoice': 'company_invoice',
        'company_order': 'company_order',
        'company_stock': 'company_stock',
        'company_timesheet': 'company_timesheet',
        'company_bank_statement': 'company_bank_statement',
        'company_support': 'company_support',
        'company_offer': 'company_offer',
        'company_offline_affiliate': 'company_offline_affiliate'
    }

    def __init__(self, company=None, company_income=None, company_project=None, company_invoice=None, company_order=None, company_stock=None, company_timesheet=None, company_bank_statement=None, company_support=None, company_offer=None, company_offline_affiliate=None, _configuration=None):  # noqa: E501
        """SettingsBase - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._company = None
        self._company_income = None
        self._company_project = None
        self._company_invoice = None
        self._company_order = None
        self._company_stock = None
        self._company_timesheet = None
        self._company_bank_statement = None
        self._company_support = None
        self._company_offer = None
        self._company_offline_affiliate = None
        self.discriminator = None

        if company is not None:
            self.company = company
        if company_income is not None:
            self.company_income = company_income
        if company_project is not None:
            self.company_project = company_project
        if company_invoice is not None:
            self.company_invoice = company_invoice
        if company_order is not None:
            self.company_order = company_order
        if company_stock is not None:
            self.company_stock = company_stock
        if company_timesheet is not None:
            self.company_timesheet = company_timesheet
        if company_bank_statement is not None:
            self.company_bank_statement = company_bank_statement
        if company_support is not None:
            self.company_support = company_support
        if company_offer is not None:
            self.company_offer = company_offer
        if company_offline_affiliate is not None:
            self.company_offline_affiliate = company_offline_affiliate

    @property
    def company(self):
        """Gets the company of this SettingsBase.  # noqa: E501


        :return: The company of this SettingsBase.  # noqa: E501
        :rtype: CompanySettings
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this SettingsBase.


        :param company: The company of this SettingsBase.  # noqa: E501
        :type: CompanySettings
        """

        self._company = company

    @property
    def company_income(self):
        """Gets the company_income of this SettingsBase.  # noqa: E501


        :return: The company_income of this SettingsBase.  # noqa: E501
        :rtype: IncomeSettings
        """
        return self._company_income

    @company_income.setter
    def company_income(self, company_income):
        """Sets the company_income of this SettingsBase.


        :param company_income: The company_income of this SettingsBase.  # noqa: E501
        :type: IncomeSettings
        """

        self._company_income = company_income

    @property
    def company_project(self):
        """Gets the company_project of this SettingsBase.  # noqa: E501


        :return: The company_project of this SettingsBase.  # noqa: E501
        :rtype: CompanyProjectSettings
        """
        return self._company_project

    @company_project.setter
    def company_project(self, company_project):
        """Sets the company_project of this SettingsBase.


        :param company_project: The company_project of this SettingsBase.  # noqa: E501
        :type: CompanyProjectSettings
        """

        self._company_project = company_project

    @property
    def company_invoice(self):
        """Gets the company_invoice of this SettingsBase.  # noqa: E501


        :return: The company_invoice of this SettingsBase.  # noqa: E501
        :rtype: InvoiceSettings
        """
        return self._company_invoice

    @company_invoice.setter
    def company_invoice(self, company_invoice):
        """Sets the company_invoice of this SettingsBase.


        :param company_invoice: The company_invoice of this SettingsBase.  # noqa: E501
        :type: InvoiceSettings
        """

        self._company_invoice = company_invoice

    @property
    def company_order(self):
        """Gets the company_order of this SettingsBase.  # noqa: E501


        :return: The company_order of this SettingsBase.  # noqa: E501
        :rtype: OrderSettings
        """
        return self._company_order

    @company_order.setter
    def company_order(self, company_order):
        """Sets the company_order of this SettingsBase.


        :param company_order: The company_order of this SettingsBase.  # noqa: E501
        :type: OrderSettings
        """

        self._company_order = company_order

    @property
    def company_stock(self):
        """Gets the company_stock of this SettingsBase.  # noqa: E501


        :return: The company_stock of this SettingsBase.  # noqa: E501
        :rtype: StockSettings
        """
        return self._company_stock

    @company_stock.setter
    def company_stock(self, company_stock):
        """Sets the company_stock of this SettingsBase.


        :param company_stock: The company_stock of this SettingsBase.  # noqa: E501
        :type: StockSettings
        """

        self._company_stock = company_stock

    @property
    def company_timesheet(self):
        """Gets the company_timesheet of this SettingsBase.  # noqa: E501


        :return: The company_timesheet of this SettingsBase.  # noqa: E501
        :rtype: TimeSheetSettings
        """
        return self._company_timesheet

    @company_timesheet.setter
    def company_timesheet(self, company_timesheet):
        """Sets the company_timesheet of this SettingsBase.


        :param company_timesheet: The company_timesheet of this SettingsBase.  # noqa: E501
        :type: TimeSheetSettings
        """

        self._company_timesheet = company_timesheet

    @property
    def company_bank_statement(self):
        """Gets the company_bank_statement of this SettingsBase.  # noqa: E501


        :return: The company_bank_statement of this SettingsBase.  # noqa: E501
        :rtype: BankStatementSettings
        """
        return self._company_bank_statement

    @company_bank_statement.setter
    def company_bank_statement(self, company_bank_statement):
        """Sets the company_bank_statement of this SettingsBase.


        :param company_bank_statement: The company_bank_statement of this SettingsBase.  # noqa: E501
        :type: BankStatementSettings
        """

        self._company_bank_statement = company_bank_statement

    @property
    def company_support(self):
        """Gets the company_support of this SettingsBase.  # noqa: E501


        :return: The company_support of this SettingsBase.  # noqa: E501
        :rtype: SupportSettings
        """
        return self._company_support

    @company_support.setter
    def company_support(self, company_support):
        """Sets the company_support of this SettingsBase.


        :param company_support: The company_support of this SettingsBase.  # noqa: E501
        :type: SupportSettings
        """

        self._company_support = company_support

    @property
    def company_offer(self):
        """Gets the company_offer of this SettingsBase.  # noqa: E501


        :return: The company_offer of this SettingsBase.  # noqa: E501
        :rtype: OfferSettings
        """
        return self._company_offer

    @company_offer.setter
    def company_offer(self, company_offer):
        """Sets the company_offer of this SettingsBase.


        :param company_offer: The company_offer of this SettingsBase.  # noqa: E501
        :type: OfferSettings
        """

        self._company_offer = company_offer

    @property
    def company_offline_affiliate(self):
        """Gets the company_offline_affiliate of this SettingsBase.  # noqa: E501


        :return: The company_offline_affiliate of this SettingsBase.  # noqa: E501
        :rtype: OfflineAffiliateSettings
        """
        return self._company_offline_affiliate

    @company_offline_affiliate.setter
    def company_offline_affiliate(self, company_offline_affiliate):
        """Sets the company_offline_affiliate of this SettingsBase.


        :param company_offline_affiliate: The company_offline_affiliate of this SettingsBase.  # noqa: E501
        :type: OfflineAffiliateSettings
        """

        self._company_offline_affiliate = company_offline_affiliate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SettingsBase):
            return True

        return self.to_dict() != other.to_dict()
