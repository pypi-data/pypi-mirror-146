# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'client': 'int',
        'currency': 'str',
        'managers': 'list[int]',
        'workflow': 'int',
        'workflow_steps': 'list[int]',
        'billable': 'int',
        'name': 'str',
        'description': 'str',
        'billed': 'bool',
        'price': 'str',
        'status': 'int',
        'project_task_data': 'str',
        'template': 'int',
        'priority': 'int',
        'due_date': 'datetime',
        'cached_employees': 'list[int]',
        'order': 'int',
        'contacts': 'list[int]',
        'completed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'client': 'client',
        'currency': 'currency',
        'managers': 'managers',
        'workflow': 'workflow',
        'workflow_steps': 'workflow_steps',
        'billable': 'billable',
        'name': 'name',
        'description': 'description',
        'billed': 'billed',
        'price': 'price',
        'status': 'status',
        'project_task_data': 'project_task_data',
        'template': 'template',
        'priority': 'priority',
        'due_date': 'due_date',
        'cached_employees': 'cached_employees',
        'order': 'order',
        'contacts': 'contacts',
        'completed': 'completed'
    }

    def __init__(self, id=None, client=None, currency=None, managers=None, workflow=None, workflow_steps=None, billable=None, name=None, description=None, billed=None, price=None, status=None, project_task_data=None, template=None, priority=None, due_date=None, cached_employees=None, order=None, contacts=None, completed=None, _configuration=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._client = None
        self._currency = None
        self._managers = None
        self._workflow = None
        self._workflow_steps = None
        self._billable = None
        self._name = None
        self._description = None
        self._billed = None
        self._price = None
        self._status = None
        self._project_task_data = None
        self._template = None
        self._priority = None
        self._due_date = None
        self._cached_employees = None
        self._order = None
        self._contacts = None
        self._completed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client is not None:
            self.client = client
        if currency is not None:
            self.currency = currency
        if managers is not None:
            self.managers = managers
        if workflow is not None:
            self.workflow = workflow
        if workflow_steps is not None:
            self.workflow_steps = workflow_steps
        if billable is not None:
            self.billable = billable
        self.name = name
        if description is not None:
            self.description = description
        if billed is not None:
            self.billed = billed
        if price is not None:
            self.price = price
        if status is not None:
            self.status = status
        if project_task_data is not None:
            self.project_task_data = project_task_data
        if template is not None:
            self.template = template
        if priority is not None:
            self.priority = priority
        if due_date is not None:
            self.due_date = due_date
        if cached_employees is not None:
            self.cached_employees = cached_employees
        if order is not None:
            self.order = order
        if contacts is not None:
            self.contacts = contacts
        if completed is not None:
            self.completed = completed

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client(self):
        """Gets the client of this Project.  # noqa: E501


        :return: The client of this Project.  # noqa: E501
        :rtype: int
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Project.


        :param client: The client of this Project.  # noqa: E501
        :type: int
        """

        self._client = client

    @property
    def currency(self):
        """Gets the currency of this Project.  # noqa: E501


        :return: The currency of this Project.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Project.


        :param currency: The currency of this Project.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def managers(self):
        """Gets the managers of this Project.  # noqa: E501


        :return: The managers of this Project.  # noqa: E501
        :rtype: list[int]
        """
        return self._managers

    @managers.setter
    def managers(self, managers):
        """Sets the managers of this Project.


        :param managers: The managers of this Project.  # noqa: E501
        :type: list[int]
        """

        self._managers = managers

    @property
    def workflow(self):
        """Gets the workflow of this Project.  # noqa: E501


        :return: The workflow of this Project.  # noqa: E501
        :rtype: int
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this Project.


        :param workflow: The workflow of this Project.  # noqa: E501
        :type: int
        """

        self._workflow = workflow

    @property
    def workflow_steps(self):
        """Gets the workflow_steps of this Project.  # noqa: E501

        ids of steps from workflow steps  # noqa: E501

        :return: The workflow_steps of this Project.  # noqa: E501
        :rtype: list[int]
        """
        return self._workflow_steps

    @workflow_steps.setter
    def workflow_steps(self, workflow_steps):
        """Sets the workflow_steps of this Project.

        ids of steps from workflow steps  # noqa: E501

        :param workflow_steps: The workflow_steps of this Project.  # noqa: E501
        :type: list[int]
        """

        self._workflow_steps = workflow_steps

    @property
    def billable(self):
        """Gets the billable of this Project.  # noqa: E501


        :return: The billable of this Project.  # noqa: E501
        :rtype: int
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this Project.


        :param billable: The billable of this Project.  # noqa: E501
        :type: int
        """

        self._billable = billable

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def billed(self):
        """Gets the billed of this Project.  # noqa: E501


        :return: The billed of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._billed

    @billed.setter
    def billed(self, billed):
        """Sets the billed of this Project.


        :param billed: The billed of this Project.  # noqa: E501
        :type: bool
        """

        self._billed = billed

    @property
    def price(self):
        """Gets the price of this Project.  # noqa: E501


        :return: The price of this Project.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Project.


        :param price: The price of this Project.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def status(self):
        """Gets the status of this Project.  # noqa: E501


        :return: The status of this Project.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.


        :param status: The status of this Project.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def project_task_data(self):
        """Gets the project_task_data of this Project.  # noqa: E501


        :return: The project_task_data of this Project.  # noqa: E501
        :rtype: str
        """
        return self._project_task_data

    @project_task_data.setter
    def project_task_data(self, project_task_data):
        """Sets the project_task_data of this Project.


        :param project_task_data: The project_task_data of this Project.  # noqa: E501
        :type: str
        """

        self._project_task_data = project_task_data

    @property
    def template(self):
        """Gets the template of this Project.  # noqa: E501


        :return: The template of this Project.  # noqa: E501
        :rtype: int
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Project.


        :param template: The template of this Project.  # noqa: E501
        :type: int
        """

        self._template = template

    @property
    def priority(self):
        """Gets the priority of this Project.  # noqa: E501


        :return: The priority of this Project.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Project.


        :param priority: The priority of this Project.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def due_date(self):
        """Gets the due_date of this Project.  # noqa: E501


        :return: The due_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Project.


        :param due_date: The due_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._due_date = due_date

    @property
    def cached_employees(self):
        """Gets the cached_employees of this Project.  # noqa: E501

        ids of employees assigned to tasks  # noqa: E501

        :return: The cached_employees of this Project.  # noqa: E501
        :rtype: list[int]
        """
        return self._cached_employees

    @cached_employees.setter
    def cached_employees(self, cached_employees):
        """Sets the cached_employees of this Project.

        ids of employees assigned to tasks  # noqa: E501

        :param cached_employees: The cached_employees of this Project.  # noqa: E501
        :type: list[int]
        """

        self._cached_employees = cached_employees

    @property
    def order(self):
        """Gets the order of this Project.  # noqa: E501


        :return: The order of this Project.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Project.


        :param order: The order of this Project.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def contacts(self):
        """Gets the contacts of this Project.  # noqa: E501


        :return: The contacts of this Project.  # noqa: E501
        :rtype: list[int]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Project.


        :param contacts: The contacts of this Project.  # noqa: E501
        :type: list[int]
        """

        self._contacts = contacts

    @property
    def completed(self):
        """Gets the completed of this Project.  # noqa: E501


        :return: The completed of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Project.


        :param completed: The completed of this Project.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
