# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PaymentGateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'provider': 'str',
        'name': 'str',
        'config_keys': 'list[str]',
        'json_schema': 'object',
        'flow': 'str',
        'accepted_currencies': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'provider': 'provider',
        'name': 'name',
        'config_keys': 'config_keys',
        'json_schema': 'json_schema',
        'flow': 'flow',
        'accepted_currencies': 'accepted_currencies'
    }

    def __init__(self, id=None, provider=None, name=None, config_keys=None, json_schema=None, flow=None, accepted_currencies=None, _configuration=None):  # noqa: E501
        """PaymentGateway - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._provider = None
        self._name = None
        self._config_keys = None
        self._json_schema = None
        self._flow = None
        self._accepted_currencies = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.provider = provider
        self.name = name
        self.config_keys = config_keys
        if json_schema is not None:
            self.json_schema = json_schema
        if flow is not None:
            self.flow = flow
        if accepted_currencies is not None:
            self.accepted_currencies = accepted_currencies

    @property
    def id(self):
        """Gets the id of this PaymentGateway.  # noqa: E501


        :return: The id of this PaymentGateway.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentGateway.


        :param id: The id of this PaymentGateway.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def provider(self):
        """Gets the provider of this PaymentGateway.  # noqa: E501

        unique provider name  # noqa: E501

        :return: The provider of this PaymentGateway.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PaymentGateway.

        unique provider name  # noqa: E501

        :param provider: The provider of this PaymentGateway.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                provider is not None and len(provider) > 50):
            raise ValueError("Invalid value for `provider`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                provider is not None and len(provider) < 1):
            raise ValueError("Invalid value for `provider`, length must be greater than or equal to `1`")  # noqa: E501

        self._provider = provider

    @property
    def name(self):
        """Gets the name of this PaymentGateway.  # noqa: E501

        display name  # noqa: E501

        :return: The name of this PaymentGateway.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentGateway.

        display name  # noqa: E501

        :param name: The name of this PaymentGateway.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def config_keys(self):
        """Gets the config_keys of this PaymentGateway.  # noqa: E501

        required config keys  # noqa: E501

        :return: The config_keys of this PaymentGateway.  # noqa: E501
        :rtype: list[str]
        """
        return self._config_keys

    @config_keys.setter
    def config_keys(self, config_keys):
        """Sets the config_keys of this PaymentGateway.

        required config keys  # noqa: E501

        :param config_keys: The config_keys of this PaymentGateway.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and config_keys is None:
            raise ValueError("Invalid value for `config_keys`, must not be `None`")  # noqa: E501

        self._config_keys = config_keys

    @property
    def json_schema(self):
        """Gets the json_schema of this PaymentGateway.  # noqa: E501

        dict with fields for frontend (jsonforms.io)  # noqa: E501

        :return: The json_schema of this PaymentGateway.  # noqa: E501
        :rtype: object
        """
        return self._json_schema

    @json_schema.setter
    def json_schema(self, json_schema):
        """Sets the json_schema of this PaymentGateway.

        dict with fields for frontend (jsonforms.io)  # noqa: E501

        :param json_schema: The json_schema of this PaymentGateway.  # noqa: E501
        :type: object
        """

        self._json_schema = json_schema

    @property
    def flow(self):
        """Gets the flow of this PaymentGateway.  # noqa: E501


        :return: The flow of this PaymentGateway.  # noqa: E501
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this PaymentGateway.


        :param flow: The flow of this PaymentGateway.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                flow is not None and len(flow) < 1):
            raise ValueError("Invalid value for `flow`, length must be greater than or equal to `1`")  # noqa: E501

        self._flow = flow

    @property
    def accepted_currencies(self):
        """Gets the accepted_currencies of this PaymentGateway.  # noqa: E501

        list with accepted currencies  # noqa: E501

        :return: The accepted_currencies of this PaymentGateway.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_currencies

    @accepted_currencies.setter
    def accepted_currencies(self, accepted_currencies):
        """Sets the accepted_currencies of this PaymentGateway.

        list with accepted currencies  # noqa: E501

        :param accepted_currencies: The accepted_currencies of this PaymentGateway.  # noqa: E501
        :type: list[str]
        """

        self._accepted_currencies = accepted_currencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentGateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentGateway):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentGateway):
            return True

        return self.to_dict() != other.to_dict()
