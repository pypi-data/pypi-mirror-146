# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PartnerProductVendor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'product': 'int',
        'supplier': 'int',
        'unit': 'str',
        'name': 'str',
        'price': 'str',
        'code': 'str',
        'code_ean': 'str',
        'supplier_ref': 'int'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'supplier': 'supplier',
        'unit': 'unit',
        'name': 'name',
        'price': 'price',
        'code': 'code',
        'code_ean': 'code_ean',
        'supplier_ref': 'supplier_ref'
    }

    def __init__(self, id=None, product=None, supplier=None, unit=None, name=None, price=None, code=None, code_ean=None, supplier_ref=None, _configuration=None):  # noqa: E501
        """PartnerProductVendor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._product = None
        self._supplier = None
        self._unit = None
        self._name = None
        self._price = None
        self._code = None
        self._code_ean = None
        self._supplier_ref = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.product = product
        self.supplier = supplier
        if unit is not None:
            self.unit = unit
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if code is not None:
            self.code = code
        if code_ean is not None:
            self.code_ean = code_ean
        if supplier_ref is not None:
            self.supplier_ref = supplier_ref

    @property
    def id(self):
        """Gets the id of this PartnerProductVendor.  # noqa: E501


        :return: The id of this PartnerProductVendor.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartnerProductVendor.


        :param id: The id of this PartnerProductVendor.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this PartnerProductVendor.  # noqa: E501


        :return: The product of this PartnerProductVendor.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this PartnerProductVendor.


        :param product: The product of this PartnerProductVendor.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def supplier(self):
        """Gets the supplier of this PartnerProductVendor.  # noqa: E501


        :return: The supplier of this PartnerProductVendor.  # noqa: E501
        :rtype: int
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this PartnerProductVendor.


        :param supplier: The supplier of this PartnerProductVendor.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and supplier is None:
            raise ValueError("Invalid value for `supplier`, must not be `None`")  # noqa: E501

        self._supplier = supplier

    @property
    def unit(self):
        """Gets the unit of this PartnerProductVendor.  # noqa: E501


        :return: The unit of this PartnerProductVendor.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PartnerProductVendor.


        :param unit: The unit of this PartnerProductVendor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                unit is not None and len(unit) > 40):
            raise ValueError("Invalid value for `unit`, length must be less than or equal to `40`")  # noqa: E501

        self._unit = unit

    @property
    def name(self):
        """Gets the name of this PartnerProductVendor.  # noqa: E501


        :return: The name of this PartnerProductVendor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartnerProductVendor.


        :param name: The name of this PartnerProductVendor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501

        self._name = name

    @property
    def price(self):
        """Gets the price of this PartnerProductVendor.  # noqa: E501


        :return: The price of this PartnerProductVendor.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PartnerProductVendor.


        :param price: The price of this PartnerProductVendor.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def code(self):
        """Gets the code of this PartnerProductVendor.  # noqa: E501


        :return: The code of this PartnerProductVendor.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PartnerProductVendor.


        :param code: The code of this PartnerProductVendor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code is not None and len(code) > 40):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `40`")  # noqa: E501

        self._code = code

    @property
    def code_ean(self):
        """Gets the code_ean of this PartnerProductVendor.  # noqa: E501


        :return: The code_ean of this PartnerProductVendor.  # noqa: E501
        :rtype: str
        """
        return self._code_ean

    @code_ean.setter
    def code_ean(self, code_ean):
        """Sets the code_ean of this PartnerProductVendor.


        :param code_ean: The code_ean of this PartnerProductVendor.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code_ean is not None and len(code_ean) > 40):
            raise ValueError("Invalid value for `code_ean`, length must be less than or equal to `40`")  # noqa: E501

        self._code_ean = code_ean

    @property
    def supplier_ref(self):
        """Gets the supplier_ref of this PartnerProductVendor.  # noqa: E501


        :return: The supplier_ref of this PartnerProductVendor.  # noqa: E501
        :rtype: int
        """
        return self._supplier_ref

    @supplier_ref.setter
    def supplier_ref(self, supplier_ref):
        """Sets the supplier_ref of this PartnerProductVendor.


        :param supplier_ref: The supplier_ref of this PartnerProductVendor.  # noqa: E501
        :type: int
        """

        self._supplier_ref = supplier_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartnerProductVendor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerProductVendor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartnerProductVendor):
            return True

        return self.to_dict() != other.to_dict()
