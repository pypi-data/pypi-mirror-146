# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class StockSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allows_negative_quantity': 'bool',
        'default_stock_for_billing': 'int',
        'default_stock_for_reception_note': 'int',
        'automatic_transfer': 'bool',
        'stock_method': 'str',
        'automatically_generate_and_finalise_reception_note': 'bool',
        'update_product_price_on_nir_entry': 'bool'
    }

    attribute_map = {
        'allows_negative_quantity': 'allows_negative_quantity',
        'default_stock_for_billing': 'default_stock_for_billing',
        'default_stock_for_reception_note': 'default_stock_for_reception_note',
        'automatic_transfer': 'automatic_transfer',
        'stock_method': 'stock_method',
        'automatically_generate_and_finalise_reception_note': 'automatically_generate_and_finalise_reception_note',
        'update_product_price_on_nir_entry': 'update_product_price_on_nir_entry'
    }

    def __init__(self, allows_negative_quantity=False, default_stock_for_billing=None, default_stock_for_reception_note=None, automatic_transfer=False, stock_method='cmp', automatically_generate_and_finalise_reception_note=False, update_product_price_on_nir_entry=False, _configuration=None):  # noqa: E501
        """StockSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allows_negative_quantity = None
        self._default_stock_for_billing = None
        self._default_stock_for_reception_note = None
        self._automatic_transfer = None
        self._stock_method = None
        self._automatically_generate_and_finalise_reception_note = None
        self._update_product_price_on_nir_entry = None
        self.discriminator = None

        if allows_negative_quantity is not None:
            self.allows_negative_quantity = allows_negative_quantity
        if default_stock_for_billing is not None:
            self.default_stock_for_billing = default_stock_for_billing
        if default_stock_for_reception_note is not None:
            self.default_stock_for_reception_note = default_stock_for_reception_note
        if automatic_transfer is not None:
            self.automatic_transfer = automatic_transfer
        if stock_method is not None:
            self.stock_method = stock_method
        if automatically_generate_and_finalise_reception_note is not None:
            self.automatically_generate_and_finalise_reception_note = automatically_generate_and_finalise_reception_note
        if update_product_price_on_nir_entry is not None:
            self.update_product_price_on_nir_entry = update_product_price_on_nir_entry

    @property
    def allows_negative_quantity(self):
        """Gets the allows_negative_quantity of this StockSettings.  # noqa: E501

        Permite cantitate negativă pe stoc  # noqa: E501

        :return: The allows_negative_quantity of this StockSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allows_negative_quantity

    @allows_negative_quantity.setter
    def allows_negative_quantity(self, allows_negative_quantity):
        """Sets the allows_negative_quantity of this StockSettings.

        Permite cantitate negativă pe stoc  # noqa: E501

        :param allows_negative_quantity: The allows_negative_quantity of this StockSettings.  # noqa: E501
        :type: bool
        """

        self._allows_negative_quantity = allows_negative_quantity

    @property
    def default_stock_for_billing(self):
        """Gets the default_stock_for_billing of this StockSettings.  # noqa: E501

        Gestiune implicită pentru facturare  # noqa: E501

        :return: The default_stock_for_billing of this StockSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_stock_for_billing

    @default_stock_for_billing.setter
    def default_stock_for_billing(self, default_stock_for_billing):
        """Sets the default_stock_for_billing of this StockSettings.

        Gestiune implicită pentru facturare  # noqa: E501

        :param default_stock_for_billing: The default_stock_for_billing of this StockSettings.  # noqa: E501
        :type: int
        """

        self._default_stock_for_billing = default_stock_for_billing

    @property
    def default_stock_for_reception_note(self):
        """Gets the default_stock_for_reception_note of this StockSettings.  # noqa: E501

        Gestiune implicită pentru nir-uri  # noqa: E501

        :return: The default_stock_for_reception_note of this StockSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_stock_for_reception_note

    @default_stock_for_reception_note.setter
    def default_stock_for_reception_note(self, default_stock_for_reception_note):
        """Sets the default_stock_for_reception_note of this StockSettings.

        Gestiune implicită pentru nir-uri  # noqa: E501

        :param default_stock_for_reception_note: The default_stock_for_reception_note of this StockSettings.  # noqa: E501
        :type: int
        """

        self._default_stock_for_reception_note = default_stock_for_reception_note

    @property
    def automatic_transfer(self):
        """Gets the automatic_transfer of this StockSettings.  # noqa: E501

        Transfer automat între gestiunile din aceeași locație  # noqa: E501

        :return: The automatic_transfer of this StockSettings.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_transfer

    @automatic_transfer.setter
    def automatic_transfer(self, automatic_transfer):
        """Sets the automatic_transfer of this StockSettings.

        Transfer automat între gestiunile din aceeași locație  # noqa: E501

        :param automatic_transfer: The automatic_transfer of this StockSettings.  # noqa: E501
        :type: bool
        """

        self._automatic_transfer = automatic_transfer

    @property
    def stock_method(self):
        """Gets the stock_method of this StockSettings.  # noqa: E501

        Metodă descărcare gestiune  # noqa: E501

        :return: The stock_method of this StockSettings.  # noqa: E501
        :rtype: str
        """
        return self._stock_method

    @stock_method.setter
    def stock_method(self, stock_method):
        """Sets the stock_method of this StockSettings.

        Metodă descărcare gestiune  # noqa: E501

        :param stock_method: The stock_method of this StockSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["cmp", "fifo"]  # noqa: E501
        if (self._configuration.client_side_validation and
                stock_method not in allowed_values):
            raise ValueError(
                "Invalid value for `stock_method` ({0}), must be one of {1}"  # noqa: E501
                .format(stock_method, allowed_values)
            )

        self._stock_method = stock_method

    @property
    def automatically_generate_and_finalise_reception_note(self):
        """Gets the automatically_generate_and_finalise_reception_note of this StockSettings.  # noqa: E501

        Generează și finalizează automat nir-urile din facturile furnizor trimise de către furnizori care au conexiune  # noqa: E501

        :return: The automatically_generate_and_finalise_reception_note of this StockSettings.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_generate_and_finalise_reception_note

    @automatically_generate_and_finalise_reception_note.setter
    def automatically_generate_and_finalise_reception_note(self, automatically_generate_and_finalise_reception_note):
        """Sets the automatically_generate_and_finalise_reception_note of this StockSettings.

        Generează și finalizează automat nir-urile din facturile furnizor trimise de către furnizori care au conexiune  # noqa: E501

        :param automatically_generate_and_finalise_reception_note: The automatically_generate_and_finalise_reception_note of this StockSettings.  # noqa: E501
        :type: bool
        """

        self._automatically_generate_and_finalise_reception_note = automatically_generate_and_finalise_reception_note

    @property
    def update_product_price_on_nir_entry(self):
        """Gets the update_product_price_on_nir_entry of this StockSettings.  # noqa: E501

        Actualizează prețul produsului din nomenclator la fiecare intrare de nir dacă firma are setat adaos comercial.  # noqa: E501

        :return: The update_product_price_on_nir_entry of this StockSettings.  # noqa: E501
        :rtype: bool
        """
        return self._update_product_price_on_nir_entry

    @update_product_price_on_nir_entry.setter
    def update_product_price_on_nir_entry(self, update_product_price_on_nir_entry):
        """Sets the update_product_price_on_nir_entry of this StockSettings.

        Actualizează prețul produsului din nomenclator la fiecare intrare de nir dacă firma are setat adaos comercial.  # noqa: E501

        :param update_product_price_on_nir_entry: The update_product_price_on_nir_entry of this StockSettings.  # noqa: E501
        :type: bool
        """

        self._update_product_price_on_nir_entry = update_product_price_on_nir_entry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StockSettings):
            return True

        return self.to_dict() != other.to_dict()
