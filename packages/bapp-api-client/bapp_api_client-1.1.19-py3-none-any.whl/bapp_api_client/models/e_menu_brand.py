# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EMenuBrand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'logo': 'str',
        'background': 'str',
        'options': 'object',
        'option_color_primary': 'str',
        'option_color_secondary': 'str',
        'option_color_text': 'str',
        'option_color_accent': 'str',
        'option_color_hover': 'str',
        'option_font_primary': 'str',
        'option_font_secondary': 'str',
        'option_font_text': 'str',
        'option_font_accent': 'str',
        'option_background_color': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'logo': 'logo',
        'background': 'background',
        'options': 'options',
        'option_color_primary': 'option_color_primary',
        'option_color_secondary': 'option_color_secondary',
        'option_color_text': 'option_color_text',
        'option_color_accent': 'option_color_accent',
        'option_color_hover': 'option_color_hover',
        'option_font_primary': 'option_font_primary',
        'option_font_secondary': 'option_font_secondary',
        'option_font_text': 'option_font_text',
        'option_font_accent': 'option_font_accent',
        'option_background_color': 'option_background_color'
    }

    def __init__(self, id=None, name=None, logo=None, background=None, options=None, option_color_primary=None, option_color_secondary=None, option_color_text=None, option_color_accent=None, option_color_hover=None, option_font_primary=None, option_font_secondary=None, option_font_text=None, option_font_accent=None, option_background_color=None, _configuration=None):  # noqa: E501
        """EMenuBrand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._logo = None
        self._background = None
        self._options = None
        self._option_color_primary = None
        self._option_color_secondary = None
        self._option_color_text = None
        self._option_color_accent = None
        self._option_color_hover = None
        self._option_font_primary = None
        self._option_font_secondary = None
        self._option_font_text = None
        self._option_font_accent = None
        self._option_background_color = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if logo is not None:
            self.logo = logo
        if background is not None:
            self.background = background
        if options is not None:
            self.options = options
        if option_color_primary is not None:
            self.option_color_primary = option_color_primary
        if option_color_secondary is not None:
            self.option_color_secondary = option_color_secondary
        if option_color_text is not None:
            self.option_color_text = option_color_text
        if option_color_accent is not None:
            self.option_color_accent = option_color_accent
        if option_color_hover is not None:
            self.option_color_hover = option_color_hover
        if option_font_primary is not None:
            self.option_font_primary = option_font_primary
        if option_font_secondary is not None:
            self.option_font_secondary = option_font_secondary
        if option_font_text is not None:
            self.option_font_text = option_font_text
        if option_font_accent is not None:
            self.option_font_accent = option_font_accent
        if option_background_color is not None:
            self.option_background_color = option_background_color

    @property
    def id(self):
        """Gets the id of this EMenuBrand.  # noqa: E501


        :return: The id of this EMenuBrand.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EMenuBrand.


        :param id: The id of this EMenuBrand.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EMenuBrand.  # noqa: E501


        :return: The name of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EMenuBrand.


        :param name: The name of this EMenuBrand.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def logo(self):
        """Gets the logo of this EMenuBrand.  # noqa: E501


        :return: The logo of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this EMenuBrand.


        :param logo: The logo of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def background(self):
        """Gets the background of this EMenuBrand.  # noqa: E501


        :return: The background of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this EMenuBrand.


        :param background: The background of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._background = background

    @property
    def options(self):
        """Gets the options of this EMenuBrand.  # noqa: E501


        :return: The options of this EMenuBrand.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EMenuBrand.


        :param options: The options of this EMenuBrand.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def option_color_primary(self):
        """Gets the option_color_primary of this EMenuBrand.  # noqa: E501


        :return: The option_color_primary of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_color_primary

    @option_color_primary.setter
    def option_color_primary(self, option_color_primary):
        """Sets the option_color_primary of this EMenuBrand.


        :param option_color_primary: The option_color_primary of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_color_primary = option_color_primary

    @property
    def option_color_secondary(self):
        """Gets the option_color_secondary of this EMenuBrand.  # noqa: E501


        :return: The option_color_secondary of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_color_secondary

    @option_color_secondary.setter
    def option_color_secondary(self, option_color_secondary):
        """Sets the option_color_secondary of this EMenuBrand.


        :param option_color_secondary: The option_color_secondary of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_color_secondary = option_color_secondary

    @property
    def option_color_text(self):
        """Gets the option_color_text of this EMenuBrand.  # noqa: E501


        :return: The option_color_text of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_color_text

    @option_color_text.setter
    def option_color_text(self, option_color_text):
        """Sets the option_color_text of this EMenuBrand.


        :param option_color_text: The option_color_text of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_color_text = option_color_text

    @property
    def option_color_accent(self):
        """Gets the option_color_accent of this EMenuBrand.  # noqa: E501


        :return: The option_color_accent of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_color_accent

    @option_color_accent.setter
    def option_color_accent(self, option_color_accent):
        """Sets the option_color_accent of this EMenuBrand.


        :param option_color_accent: The option_color_accent of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_color_accent = option_color_accent

    @property
    def option_color_hover(self):
        """Gets the option_color_hover of this EMenuBrand.  # noqa: E501


        :return: The option_color_hover of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_color_hover

    @option_color_hover.setter
    def option_color_hover(self, option_color_hover):
        """Sets the option_color_hover of this EMenuBrand.


        :param option_color_hover: The option_color_hover of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_color_hover = option_color_hover

    @property
    def option_font_primary(self):
        """Gets the option_font_primary of this EMenuBrand.  # noqa: E501


        :return: The option_font_primary of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_font_primary

    @option_font_primary.setter
    def option_font_primary(self, option_font_primary):
        """Sets the option_font_primary of this EMenuBrand.


        :param option_font_primary: The option_font_primary of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_font_primary = option_font_primary

    @property
    def option_font_secondary(self):
        """Gets the option_font_secondary of this EMenuBrand.  # noqa: E501


        :return: The option_font_secondary of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_font_secondary

    @option_font_secondary.setter
    def option_font_secondary(self, option_font_secondary):
        """Sets the option_font_secondary of this EMenuBrand.


        :param option_font_secondary: The option_font_secondary of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_font_secondary = option_font_secondary

    @property
    def option_font_text(self):
        """Gets the option_font_text of this EMenuBrand.  # noqa: E501


        :return: The option_font_text of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_font_text

    @option_font_text.setter
    def option_font_text(self, option_font_text):
        """Sets the option_font_text of this EMenuBrand.


        :param option_font_text: The option_font_text of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_font_text = option_font_text

    @property
    def option_font_accent(self):
        """Gets the option_font_accent of this EMenuBrand.  # noqa: E501


        :return: The option_font_accent of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_font_accent

    @option_font_accent.setter
    def option_font_accent(self, option_font_accent):
        """Sets the option_font_accent of this EMenuBrand.


        :param option_font_accent: The option_font_accent of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_font_accent = option_font_accent

    @property
    def option_background_color(self):
        """Gets the option_background_color of this EMenuBrand.  # noqa: E501


        :return: The option_background_color of this EMenuBrand.  # noqa: E501
        :rtype: str
        """
        return self._option_background_color

    @option_background_color.setter
    def option_background_color(self, option_background_color):
        """Sets the option_background_color of this EMenuBrand.


        :param option_background_color: The option_background_color of this EMenuBrand.  # noqa: E501
        :type: str
        """

        self._option_background_color = option_background_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EMenuBrand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMenuBrand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMenuBrand):
            return True

        return self.to_dict() != other.to_dict()
