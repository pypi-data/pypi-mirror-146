# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Inventory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'view_tokens': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'status': 'int',
        'number': 'str',
        'accounting': 'str',
        'inventory': 'str',
        '_date': 'date',
        'difference': 'str',
        'stock': 'int',
        'category': 'int',
        'pdf_file': 'str'
    }

    attribute_map = {
        'id': 'id',
        'view_tokens': 'view_tokens',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'status': 'status',
        'number': 'number',
        'accounting': 'accounting',
        'inventory': 'inventory',
        '_date': 'date',
        'difference': 'difference',
        'stock': 'stock',
        'category': 'category',
        'pdf_file': 'pdf_file'
    }

    def __init__(self, id=None, view_tokens=None, created_by=None, modified_by=None, created_at=None, modified_at=None, status=None, number=None, accounting=None, inventory=None, _date=None, difference=None, stock=None, category=None, pdf_file=None, _configuration=None):  # noqa: E501
        """Inventory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._view_tokens = None
        self._created_by = None
        self._modified_by = None
        self._created_at = None
        self._modified_at = None
        self._status = None
        self._number = None
        self._accounting = None
        self._inventory = None
        self.__date = None
        self._difference = None
        self._stock = None
        self._category = None
        self._pdf_file = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if view_tokens is not None:
            self.view_tokens = view_tokens
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if status is not None:
            self.status = status
        if number is not None:
            self.number = number
        if accounting is not None:
            self.accounting = accounting
        if inventory is not None:
            self.inventory = inventory
        if _date is not None:
            self._date = _date
        if difference is not None:
            self.difference = difference
        self.stock = stock
        if category is not None:
            self.category = category
        if pdf_file is not None:
            self.pdf_file = pdf_file

    @property
    def id(self):
        """Gets the id of this Inventory.  # noqa: E501


        :return: The id of this Inventory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Inventory.


        :param id: The id of this Inventory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def view_tokens(self):
        """Gets the view_tokens of this Inventory.  # noqa: E501


        :return: The view_tokens of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this Inventory.


        :param view_tokens: The view_tokens of this Inventory.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    @property
    def created_by(self):
        """Gets the created_by of this Inventory.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Inventory.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this Inventory.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this Inventory.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Inventory.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this Inventory.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def created_at(self):
        """Gets the created_at of this Inventory.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Inventory.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Inventory.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Inventory.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Inventory.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Inventory.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Inventory.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Inventory.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def status(self):
        """Gets the status of this Inventory.  # noqa: E501


        :return: The status of this Inventory.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Inventory.


        :param status: The status of this Inventory.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def number(self):
        """Gets the number of this Inventory.  # noqa: E501


        :return: The number of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Inventory.


        :param number: The number of this Inventory.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                number is not None and len(number) < 1):
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def accounting(self):
        """Gets the accounting of this Inventory.  # noqa: E501


        :return: The accounting of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._accounting

    @accounting.setter
    def accounting(self, accounting):
        """Sets the accounting of this Inventory.


        :param accounting: The accounting of this Inventory.  # noqa: E501
        :type: str
        """

        self._accounting = accounting

    @property
    def inventory(self):
        """Gets the inventory of this Inventory.  # noqa: E501


        :return: The inventory of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this Inventory.


        :param inventory: The inventory of this Inventory.  # noqa: E501
        :type: str
        """

        self._inventory = inventory

    @property
    def _date(self):
        """Gets the _date of this Inventory.  # noqa: E501


        :return: The _date of this Inventory.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Inventory.


        :param _date: The _date of this Inventory.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def difference(self):
        """Gets the difference of this Inventory.  # noqa: E501


        :return: The difference of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._difference

    @difference.setter
    def difference(self, difference):
        """Sets the difference of this Inventory.


        :param difference: The difference of this Inventory.  # noqa: E501
        :type: str
        """

        self._difference = difference

    @property
    def stock(self):
        """Gets the stock of this Inventory.  # noqa: E501


        :return: The stock of this Inventory.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this Inventory.


        :param stock: The stock of this Inventory.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def category(self):
        """Gets the category of this Inventory.  # noqa: E501


        :return: The category of this Inventory.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Inventory.


        :param category: The category of this Inventory.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def pdf_file(self):
        """Gets the pdf_file of this Inventory.  # noqa: E501


        :return: The pdf_file of this Inventory.  # noqa: E501
        :rtype: str
        """
        return self._pdf_file

    @pdf_file.setter
    def pdf_file(self, pdf_file):
        """Sets the pdf_file of this Inventory.


        :param pdf_file: The pdf_file of this Inventory.  # noqa: E501
        :type: str
        """

        self._pdf_file = pdf_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Inventory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Inventory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Inventory):
            return True

        return self.to_dict() != other.to_dict()
