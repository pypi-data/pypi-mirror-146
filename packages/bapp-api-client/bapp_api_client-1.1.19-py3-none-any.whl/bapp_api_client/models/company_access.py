# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanyAccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user': 'str',
        'roles': 'list[int]',
        'location_id': 'str',
        'permissions': 'list[str]',
        'email': 'str',
        'partner': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'roles': 'roles',
        'location_id': 'location_id',
        'permissions': 'permissions',
        'email': 'email',
        'partner': 'partner'
    }

    def __init__(self, id=None, user=None, roles=None, location_id=None, permissions=None, email=None, partner=None, _configuration=None):  # noqa: E501
        """CompanyAccess - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user = None
        self._roles = None
        self._location_id = None
        self._permissions = None
        self._email = None
        self._partner = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user is not None:
            self.user = user
        if roles is not None:
            self.roles = roles
        if location_id is not None:
            self.location_id = location_id
        if permissions is not None:
            self.permissions = permissions
        if email is not None:
            self.email = email
        if partner is not None:
            self.partner = partner

    @property
    def id(self):
        """Gets the id of this CompanyAccess.  # noqa: E501


        :return: The id of this CompanyAccess.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyAccess.


        :param id: The id of this CompanyAccess.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this CompanyAccess.  # noqa: E501


        :return: The user of this CompanyAccess.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CompanyAccess.


        :param user: The user of this CompanyAccess.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def roles(self):
        """Gets the roles of this CompanyAccess.  # noqa: E501


        :return: The roles of this CompanyAccess.  # noqa: E501
        :rtype: list[int]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CompanyAccess.


        :param roles: The roles of this CompanyAccess.  # noqa: E501
        :type: list[int]
        """

        self._roles = roles

    @property
    def location_id(self):
        """Gets the location_id of this CompanyAccess.  # noqa: E501


        :return: The location_id of this CompanyAccess.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this CompanyAccess.


        :param location_id: The location_id of this CompanyAccess.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def permissions(self):
        """Gets the permissions of this CompanyAccess.  # noqa: E501


        :return: The permissions of this CompanyAccess.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CompanyAccess.


        :param permissions: The permissions of this CompanyAccess.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def email(self):
        """Gets the email of this CompanyAccess.  # noqa: E501

        Când se va crea un utilizator în BAPP cu această adresă de email el se va adăuga automat și în firmă.  # noqa: E501

        :return: The email of this CompanyAccess.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CompanyAccess.

        Când se va crea un utilizator în BAPP cu această adresă de email el se va adăuga automat și în firmă.  # noqa: E501

        :param email: The email of this CompanyAccess.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def partner(self):
        """Gets the partner of this CompanyAccess.  # noqa: E501


        :return: The partner of this CompanyAccess.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this CompanyAccess.


        :param partner: The partner of this CompanyAccess.  # noqa: E501
        :type: int
        """

        self._partner = partner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyAccess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyAccess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyAccess):
            return True

        return self.to_dict() != other.to_dict()
