# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanyNumber(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'location': 'int',
        'type': 'int',
        'series': 'str',
        'number': 'int',
        'length': 'int',
        'default': 'bool',
        'from_date': 'date',
        'to_date': 'date',
        'users': 'list[str]',
        'next_number': 'str'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'type': 'type',
        'series': 'series',
        'number': 'number',
        'length': 'length',
        'default': 'default',
        'from_date': 'from_date',
        'to_date': 'to_date',
        'users': 'users',
        'next_number': 'next_number'
    }

    def __init__(self, id=None, location=None, type=None, series=None, number=None, length=None, default=None, from_date=None, to_date=None, users=None, next_number=None, _configuration=None):  # noqa: E501
        """CompanyNumber - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._location = None
        self._type = None
        self._series = None
        self._number = None
        self._length = None
        self._default = None
        self._from_date = None
        self._to_date = None
        self._users = None
        self._next_number = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if type is not None:
            self.type = type
        self.series = series
        if number is not None:
            self.number = number
        if length is not None:
            self.length = length
        if default is not None:
            self.default = default
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if users is not None:
            self.users = users
        if next_number is not None:
            self.next_number = next_number

    @property
    def id(self):
        """Gets the id of this CompanyNumber.  # noqa: E501


        :return: The id of this CompanyNumber.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyNumber.


        :param id: The id of this CompanyNumber.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this CompanyNumber.  # noqa: E501


        :return: The location of this CompanyNumber.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CompanyNumber.


        :param location: The location of this CompanyNumber.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def type(self):
        """Gets the type of this CompanyNumber.  # noqa: E501


        :return: The type of this CompanyNumber.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompanyNumber.


        :param type: The type of this CompanyNumber.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def series(self):
        """Gets the series of this CompanyNumber.  # noqa: E501


        :return: The series of this CompanyNumber.  # noqa: E501
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this CompanyNumber.


        :param series: The series of this CompanyNumber.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and series is None:
            raise ValueError("Invalid value for `series`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                series is not None and len(series) > 10):
            raise ValueError("Invalid value for `series`, length must be less than or equal to `10`")  # noqa: E501
        if (self._configuration.client_side_validation and
                series is not None and len(series) < 1):
            raise ValueError("Invalid value for `series`, length must be greater than or equal to `1`")  # noqa: E501

        self._series = series

    @property
    def number(self):
        """Gets the number of this CompanyNumber.  # noqa: E501


        :return: The number of this CompanyNumber.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CompanyNumber.


        :param number: The number of this CompanyNumber.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                number is not None and number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                number is not None and number < 0):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number = number

    @property
    def length(self):
        """Gets the length of this CompanyNumber.  # noqa: E501


        :return: The length of this CompanyNumber.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CompanyNumber.


        :param length: The length of this CompanyNumber.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                length is not None and length > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                length is not None and length < 0):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._length = length

    @property
    def default(self):
        """Gets the default of this CompanyNumber.  # noqa: E501


        :return: The default of this CompanyNumber.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CompanyNumber.


        :param default: The default of this CompanyNumber.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def from_date(self):
        """Gets the from_date of this CompanyNumber.  # noqa: E501


        :return: The from_date of this CompanyNumber.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this CompanyNumber.


        :param from_date: The from_date of this CompanyNumber.  # noqa: E501
        :type: date
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this CompanyNumber.  # noqa: E501


        :return: The to_date of this CompanyNumber.  # noqa: E501
        :rtype: date
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this CompanyNumber.


        :param to_date: The to_date of this CompanyNumber.  # noqa: E501
        :type: date
        """

        self._to_date = to_date

    @property
    def users(self):
        """Gets the users of this CompanyNumber.  # noqa: E501


        :return: The users of this CompanyNumber.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this CompanyNumber.


        :param users: The users of this CompanyNumber.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def next_number(self):
        """Gets the next_number of this CompanyNumber.  # noqa: E501


        :return: The next_number of this CompanyNumber.  # noqa: E501
        :rtype: str
        """
        return self._next_number

    @next_number.setter
    def next_number(self, next_number):
        """Sets the next_number of this CompanyNumber.


        :param next_number: The next_number of this CompanyNumber.  # noqa: E501
        :type: str
        """

        self._next_number = next_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyNumber, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyNumber):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyNumber):
            return True

        return self.to_dict() != other.to_dict()
