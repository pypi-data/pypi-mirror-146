# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user': 'str',
        'short_code': 'str',
        'identifier': 'str',
        'connectivity': 'str',
        'extra': 'object'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'short_code': 'short_code',
        'identifier': 'identifier',
        'connectivity': 'connectivity',
        'extra': 'extra'
    }

    def __init__(self, id=None, user=None, short_code=None, identifier=None, connectivity=None, extra=None, _configuration=None):  # noqa: E501
        """Device - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user = None
        self._short_code = None
        self._identifier = None
        self._connectivity = None
        self._extra = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user is not None:
            self.user = user
        if short_code is not None:
            self.short_code = short_code
        self.identifier = identifier
        if connectivity is not None:
            self.connectivity = connectivity
        if extra is not None:
            self.extra = extra

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501


        :return: The id of this Device.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this Device.  # noqa: E501


        :return: The user of this Device.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Device.


        :param user: The user of this Device.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def short_code(self):
        """Gets the short_code of this Device.  # noqa: E501


        :return: The short_code of this Device.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this Device.


        :param short_code: The short_code of this Device.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                short_code is not None and len(short_code) > 6):
            raise ValueError("Invalid value for `short_code`, length must be less than or equal to `6`")  # noqa: E501

        self._short_code = short_code

    @property
    def identifier(self):
        """Gets the identifier of this Device.  # noqa: E501


        :return: The identifier of this Device.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Device.


        :param identifier: The identifier of this Device.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) > 64):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) < 1):
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")  # noqa: E501

        self._identifier = identifier

    @property
    def connectivity(self):
        """Gets the connectivity of this Device.  # noqa: E501


        :return: The connectivity of this Device.  # noqa: E501
        :rtype: str
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this Device.


        :param connectivity: The connectivity of this Device.  # noqa: E501
        :type: str
        """

        self._connectivity = connectivity

    @property
    def extra(self):
        """Gets the extra of this Device.  # noqa: E501


        :return: The extra of this Device.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Device.


        :param extra: The extra of this Device.  # noqa: E501
        :type: object
        """

        self._extra = extra

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Device):
            return True

        return self.to_dict() != other.to_dict()
