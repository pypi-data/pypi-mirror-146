# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EmploymentContractBonus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'contract': 'int',
        'bonus_type': 'str',
        'bonus_type_display': 'str',
        'value': 'str',
        'percent': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'contract': 'contract',
        'bonus_type': 'bonus_type',
        'bonus_type_display': 'bonus_type_display',
        'value': 'value',
        'percent': 'percent'
    }

    def __init__(self, id=None, contract=None, bonus_type=None, bonus_type_display=None, value=None, percent=None, _configuration=None):  # noqa: E501
        """EmploymentContractBonus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._contract = None
        self._bonus_type = None
        self._bonus_type_display = None
        self._value = None
        self._percent = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.contract = contract
        self.bonus_type = bonus_type
        if bonus_type_display is not None:
            self.bonus_type_display = bonus_type_display
        self.value = value
        if percent is not None:
            self.percent = percent

    @property
    def id(self):
        """Gets the id of this EmploymentContractBonus.  # noqa: E501


        :return: The id of this EmploymentContractBonus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmploymentContractBonus.


        :param id: The id of this EmploymentContractBonus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def contract(self):
        """Gets the contract of this EmploymentContractBonus.  # noqa: E501


        :return: The contract of this EmploymentContractBonus.  # noqa: E501
        :rtype: int
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this EmploymentContractBonus.


        :param contract: The contract of this EmploymentContractBonus.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and contract is None:
            raise ValueError("Invalid value for `contract`, must not be `None`")  # noqa: E501

        self._contract = contract

    @property
    def bonus_type(self):
        """Gets the bonus_type of this EmploymentContractBonus.  # noqa: E501


        :return: The bonus_type of this EmploymentContractBonus.  # noqa: E501
        :rtype: str
        """
        return self._bonus_type

    @bonus_type.setter
    def bonus_type(self, bonus_type):
        """Sets the bonus_type of this EmploymentContractBonus.


        :param bonus_type: The bonus_type of this EmploymentContractBonus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bonus_type is None:
            raise ValueError("Invalid value for `bonus_type`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bonus_type is not None and len(bonus_type) > 200):
            raise ValueError("Invalid value for `bonus_type`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bonus_type is not None and len(bonus_type) < 1):
            raise ValueError("Invalid value for `bonus_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._bonus_type = bonus_type

    @property
    def bonus_type_display(self):
        """Gets the bonus_type_display of this EmploymentContractBonus.  # noqa: E501


        :return: The bonus_type_display of this EmploymentContractBonus.  # noqa: E501
        :rtype: str
        """
        return self._bonus_type_display

    @bonus_type_display.setter
    def bonus_type_display(self, bonus_type_display):
        """Sets the bonus_type_display of this EmploymentContractBonus.


        :param bonus_type_display: The bonus_type_display of this EmploymentContractBonus.  # noqa: E501
        :type: str
        """

        self._bonus_type_display = bonus_type_display

    @property
    def value(self):
        """Gets the value of this EmploymentContractBonus.  # noqa: E501


        :return: The value of this EmploymentContractBonus.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EmploymentContractBonus.


        :param value: The value of this EmploymentContractBonus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def percent(self):
        """Gets the percent of this EmploymentContractBonus.  # noqa: E501


        :return: The percent of this EmploymentContractBonus.  # noqa: E501
        :rtype: bool
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this EmploymentContractBonus.


        :param percent: The percent of this EmploymentContractBonus.  # noqa: E501
        :type: bool
        """

        self._percent = percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmploymentContractBonus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmploymentContractBonus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmploymentContractBonus):
            return True

        return self.to_dict() != other.to_dict()
