# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InlineResponse20049PaymentProviders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider__provider': 'str',
        'provider__name': 'str',
        'provider__flow': 'float'
    }

    attribute_map = {
        'provider__provider': 'provider__provider',
        'provider__name': 'provider__name',
        'provider__flow': 'provider__flow'
    }

    def __init__(self, provider__provider=None, provider__name=None, provider__flow=None, _configuration=None):  # noqa: E501
        """InlineResponse20049PaymentProviders - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._provider__provider = None
        self._provider__name = None
        self._provider__flow = None
        self.discriminator = None

        if provider__provider is not None:
            self.provider__provider = provider__provider
        if provider__name is not None:
            self.provider__name = provider__name
        if provider__flow is not None:
            self.provider__flow = provider__flow

    @property
    def provider__provider(self):
        """Gets the provider__provider of this InlineResponse20049PaymentProviders.  # noqa: E501


        :return: The provider__provider of this InlineResponse20049PaymentProviders.  # noqa: E501
        :rtype: str
        """
        return self._provider__provider

    @provider__provider.setter
    def provider__provider(self, provider__provider):
        """Sets the provider__provider of this InlineResponse20049PaymentProviders.


        :param provider__provider: The provider__provider of this InlineResponse20049PaymentProviders.  # noqa: E501
        :type: str
        """

        self._provider__provider = provider__provider

    @property
    def provider__name(self):
        """Gets the provider__name of this InlineResponse20049PaymentProviders.  # noqa: E501


        :return: The provider__name of this InlineResponse20049PaymentProviders.  # noqa: E501
        :rtype: str
        """
        return self._provider__name

    @provider__name.setter
    def provider__name(self, provider__name):
        """Sets the provider__name of this InlineResponse20049PaymentProviders.


        :param provider__name: The provider__name of this InlineResponse20049PaymentProviders.  # noqa: E501
        :type: str
        """

        self._provider__name = provider__name

    @property
    def provider__flow(self):
        """Gets the provider__flow of this InlineResponse20049PaymentProviders.  # noqa: E501


        :return: The provider__flow of this InlineResponse20049PaymentProviders.  # noqa: E501
        :rtype: float
        """
        return self._provider__flow

    @provider__flow.setter
    def provider__flow(self, provider__flow):
        """Sets the provider__flow of this InlineResponse20049PaymentProviders.


        :param provider__flow: The provider__flow of this InlineResponse20049PaymentProviders.  # noqa: E501
        :type: float
        """

        self._provider__flow = provider__flow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20049PaymentProviders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20049PaymentProviders):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20049PaymentProviders):
            return True

        return self.to_dict() != other.to_dict()
