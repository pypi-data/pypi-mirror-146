# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ClientApproval(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'partner_id': 'int',
        'partner_name': 'str',
        'enabled': 'bool'
    }

    attribute_map = {
        'partner_id': 'partner_id',
        'partner_name': 'partner_name',
        'enabled': 'enabled'
    }

    def __init__(self, partner_id=None, partner_name=None, enabled=None, _configuration=None):  # noqa: E501
        """ClientApproval - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._partner_id = None
        self._partner_name = None
        self._enabled = None
        self.discriminator = None

        if partner_id is not None:
            self.partner_id = partner_id
        if partner_name is not None:
            self.partner_name = partner_name
        self.enabled = enabled

    @property
    def partner_id(self):
        """Gets the partner_id of this ClientApproval.  # noqa: E501


        :return: The partner_id of this ClientApproval.  # noqa: E501
        :rtype: int
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this ClientApproval.


        :param partner_id: The partner_id of this ClientApproval.  # noqa: E501
        :type: int
        """

        self._partner_id = partner_id

    @property
    def partner_name(self):
        """Gets the partner_name of this ClientApproval.  # noqa: E501


        :return: The partner_name of this ClientApproval.  # noqa: E501
        :rtype: str
        """
        return self._partner_name

    @partner_name.setter
    def partner_name(self, partner_name):
        """Sets the partner_name of this ClientApproval.


        :param partner_name: The partner_name of this ClientApproval.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                partner_name is not None and len(partner_name) < 1):
            raise ValueError("Invalid value for `partner_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._partner_name = partner_name

    @property
    def enabled(self):
        """Gets the enabled of this ClientApproval.  # noqa: E501


        :return: The enabled of this ClientApproval.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ClientApproval.


        :param enabled: The enabled of this ClientApproval.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientApproval, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientApproval):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientApproval):
            return True

        return self.to_dict() != other.to_dict()
