# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Queue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'parent': 'int',
        'name': 'str',
        'description': 'str',
        'escalate_days': 'int',
        'default_owners': 'list[int]',
        'department': 'int',
        'identifier': 'str',
        'allow_public_submission': 'bool',
        'new_ticket_cc': 'list[str]',
        'updated_ticket_cc': 'list[str]',
        'project': 'int',
        'service': 'int',
        'partner': 'int',
        'managers': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'parent': 'parent',
        'name': 'name',
        'description': 'description',
        'escalate_days': 'escalate_days',
        'default_owners': 'default_owners',
        'department': 'department',
        'identifier': 'identifier',
        'allow_public_submission': 'allow_public_submission',
        'new_ticket_cc': 'new_ticket_cc',
        'updated_ticket_cc': 'updated_ticket_cc',
        'project': 'project',
        'service': 'service',
        'partner': 'partner',
        'managers': 'managers'
    }

    def __init__(self, id=None, parent=None, name=None, description=None, escalate_days=None, default_owners=None, department=None, identifier=None, allow_public_submission=None, new_ticket_cc=None, updated_ticket_cc=None, project=None, service=None, partner=None, managers=None, _configuration=None):  # noqa: E501
        """Queue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._parent = None
        self._name = None
        self._description = None
        self._escalate_days = None
        self._default_owners = None
        self._department = None
        self._identifier = None
        self._allow_public_submission = None
        self._new_ticket_cc = None
        self._updated_ticket_cc = None
        self._project = None
        self._service = None
        self._partner = None
        self._managers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if parent is not None:
            self.parent = parent
        self.name = name
        if description is not None:
            self.description = description
        if escalate_days is not None:
            self.escalate_days = escalate_days
        if default_owners is not None:
            self.default_owners = default_owners
        if department is not None:
            self.department = department
        if identifier is not None:
            self.identifier = identifier
        if allow_public_submission is not None:
            self.allow_public_submission = allow_public_submission
        if new_ticket_cc is not None:
            self.new_ticket_cc = new_ticket_cc
        if updated_ticket_cc is not None:
            self.updated_ticket_cc = updated_ticket_cc
        if project is not None:
            self.project = project
        if service is not None:
            self.service = service
        if partner is not None:
            self.partner = partner
        if managers is not None:
            self.managers = managers

    @property
    def id(self):
        """Gets the id of this Queue.  # noqa: E501


        :return: The id of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Queue.


        :param id: The id of this Queue.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def parent(self):
        """Gets the parent of this Queue.  # noqa: E501


        :return: The parent of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Queue.


        :param parent: The parent of this Queue.  # noqa: E501
        :type: int
        """

        self._parent = parent

    @property
    def name(self):
        """Gets the name of this Queue.  # noqa: E501


        :return: The name of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Queue.


        :param name: The name of this Queue.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Queue.  # noqa: E501


        :return: The description of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Queue.


        :param description: The description of this Queue.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def escalate_days(self):
        """Gets the escalate_days of this Queue.  # noqa: E501


        :return: The escalate_days of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._escalate_days

    @escalate_days.setter
    def escalate_days(self, escalate_days):
        """Sets the escalate_days of this Queue.


        :param escalate_days: The escalate_days of this Queue.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                escalate_days is not None and escalate_days > 32767):  # noqa: E501
            raise ValueError("Invalid value for `escalate_days`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                escalate_days is not None and escalate_days < 0):  # noqa: E501
            raise ValueError("Invalid value for `escalate_days`, must be a value greater than or equal to `0`")  # noqa: E501

        self._escalate_days = escalate_days

    @property
    def default_owners(self):
        """Gets the default_owners of this Queue.  # noqa: E501


        :return: The default_owners of this Queue.  # noqa: E501
        :rtype: list[int]
        """
        return self._default_owners

    @default_owners.setter
    def default_owners(self, default_owners):
        """Sets the default_owners of this Queue.


        :param default_owners: The default_owners of this Queue.  # noqa: E501
        :type: list[int]
        """

        self._default_owners = default_owners

    @property
    def department(self):
        """Gets the department of this Queue.  # noqa: E501


        :return: The department of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Queue.


        :param department: The department of this Queue.  # noqa: E501
        :type: int
        """

        self._department = department

    @property
    def identifier(self):
        """Gets the identifier of this Queue.  # noqa: E501


        :return: The identifier of this Queue.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Queue.


        :param identifier: The identifier of this Queue.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def allow_public_submission(self):
        """Gets the allow_public_submission of this Queue.  # noqa: E501


        :return: The allow_public_submission of this Queue.  # noqa: E501
        :rtype: bool
        """
        return self._allow_public_submission

    @allow_public_submission.setter
    def allow_public_submission(self, allow_public_submission):
        """Sets the allow_public_submission of this Queue.


        :param allow_public_submission: The allow_public_submission of this Queue.  # noqa: E501
        :type: bool
        """

        self._allow_public_submission = allow_public_submission

    @property
    def new_ticket_cc(self):
        """Gets the new_ticket_cc of this Queue.  # noqa: E501


        :return: The new_ticket_cc of this Queue.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_ticket_cc

    @new_ticket_cc.setter
    def new_ticket_cc(self, new_ticket_cc):
        """Sets the new_ticket_cc of this Queue.


        :param new_ticket_cc: The new_ticket_cc of this Queue.  # noqa: E501
        :type: list[str]
        """

        self._new_ticket_cc = new_ticket_cc

    @property
    def updated_ticket_cc(self):
        """Gets the updated_ticket_cc of this Queue.  # noqa: E501


        :return: The updated_ticket_cc of this Queue.  # noqa: E501
        :rtype: list[str]
        """
        return self._updated_ticket_cc

    @updated_ticket_cc.setter
    def updated_ticket_cc(self, updated_ticket_cc):
        """Sets the updated_ticket_cc of this Queue.


        :param updated_ticket_cc: The updated_ticket_cc of this Queue.  # noqa: E501
        :type: list[str]
        """

        self._updated_ticket_cc = updated_ticket_cc

    @property
    def project(self):
        """Gets the project of this Queue.  # noqa: E501


        :return: The project of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Queue.


        :param project: The project of this Queue.  # noqa: E501
        :type: int
        """

        self._project = project

    @property
    def service(self):
        """Gets the service of this Queue.  # noqa: E501


        :return: The service of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Queue.


        :param service: The service of this Queue.  # noqa: E501
        :type: int
        """

        self._service = service

    @property
    def partner(self):
        """Gets the partner of this Queue.  # noqa: E501


        :return: The partner of this Queue.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Queue.


        :param partner: The partner of this Queue.  # noqa: E501
        :type: int
        """

        self._partner = partner

    @property
    def managers(self):
        """Gets the managers of this Queue.  # noqa: E501


        :return: The managers of this Queue.  # noqa: E501
        :rtype: list[int]
        """
        return self._managers

    @managers.setter
    def managers(self, managers):
        """Sets the managers of this Queue.


        :param managers: The managers of this Queue.  # noqa: E501
        :type: list[int]
        """

        self._managers = managers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Queue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Queue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Queue):
            return True

        return self.to_dict() != other.to_dict()
