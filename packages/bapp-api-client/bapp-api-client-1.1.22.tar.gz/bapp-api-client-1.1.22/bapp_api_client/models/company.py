# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'country': 'str',
        'region': 'int',
        'city': 'int',
        'address': 'str',
        'logo': 'str',
        'pays_vat': 'bool',
        'vat_id': 'str',
        'vat_intra': 'str',
        'vat_at_income': 'bool',
        'reg_com': 'str',
        'social_capital': 'str',
        'email': 'str',
        'website': 'str',
        'enabled_modules': 'str',
        'modules': 'list[str]',
        'site_logo': 'str',
        'personal_representative': 'str',
        'type': 'str',
        'caen': 'str',
        'storage': 'str',
        'phone': 'str',
        'email_alias': 'str',
        'application': 'str',
        'general_markup': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'country': 'country',
        'region': 'region',
        'city': 'city',
        'address': 'address',
        'logo': 'logo',
        'pays_vat': 'pays_vat',
        'vat_id': 'vat_id',
        'vat_intra': 'vat_intra',
        'vat_at_income': 'vat_at_income',
        'reg_com': 'reg_com',
        'social_capital': 'social_capital',
        'email': 'email',
        'website': 'website',
        'enabled_modules': 'enabled_modules',
        'modules': 'modules',
        'site_logo': 'site_logo',
        'personal_representative': 'personal_representative',
        'type': 'type',
        'caen': 'caen',
        'storage': 'storage',
        'phone': 'phone',
        'email_alias': 'email_alias',
        'application': 'application',
        'general_markup': 'general_markup'
    }

    def __init__(self, id=None, name=None, country=None, region=None, city=None, address=None, logo=None, pays_vat=None, vat_id=None, vat_intra=None, vat_at_income=None, reg_com=None, social_capital=None, email=None, website=None, enabled_modules=None, modules=None, site_logo=None, personal_representative=None, type=None, caen=None, storage=None, phone=None, email_alias=None, application=None, general_markup=None, _configuration=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._country = None
        self._region = None
        self._city = None
        self._address = None
        self._logo = None
        self._pays_vat = None
        self._vat_id = None
        self._vat_intra = None
        self._vat_at_income = None
        self._reg_com = None
        self._social_capital = None
        self._email = None
        self._website = None
        self._enabled_modules = None
        self._modules = None
        self._site_logo = None
        self._personal_representative = None
        self._type = None
        self._caen = None
        self._storage = None
        self._phone = None
        self._email_alias = None
        self._application = None
        self._general_markup = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.country = country
        if region is not None:
            self.region = region
        if city is not None:
            self.city = city
        self.address = address
        if logo is not None:
            self.logo = logo
        if pays_vat is not None:
            self.pays_vat = pays_vat
        if vat_id is not None:
            self.vat_id = vat_id
        if vat_intra is not None:
            self.vat_intra = vat_intra
        if vat_at_income is not None:
            self.vat_at_income = vat_at_income
        if reg_com is not None:
            self.reg_com = reg_com
        if social_capital is not None:
            self.social_capital = social_capital
        if email is not None:
            self.email = email
        if website is not None:
            self.website = website
        if enabled_modules is not None:
            self.enabled_modules = enabled_modules
        if modules is not None:
            self.modules = modules
        if site_logo is not None:
            self.site_logo = site_logo
        if personal_representative is not None:
            self.personal_representative = personal_representative
        if type is not None:
            self.type = type
        if caen is not None:
            self.caen = caen
        if storage is not None:
            self.storage = storage
        if phone is not None:
            self.phone = phone
        if email_alias is not None:
            self.email_alias = email_alias
        if application is not None:
            self.application = application
        if general_markup is not None:
            self.general_markup = general_markup

    @property
    def id(self):
        """Gets the id of this Company.  # noqa: E501


        :return: The id of this Company.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Company.


        :param id: The id of this Company.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501


        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.


        :param name: The name of this Company.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def country(self):
        """Gets the country of this Company.  # noqa: E501


        :return: The country of this Company.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Company.


        :param country: The country of this Company.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def region(self):
        """Gets the region of this Company.  # noqa: E501


        :return: The region of this Company.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Company.


        :param region: The region of this Company.  # noqa: E501
        :type: int
        """

        self._region = region

    @property
    def city(self):
        """Gets the city of this Company.  # noqa: E501


        :return: The city of this Company.  # noqa: E501
        :rtype: int
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Company.


        :param city: The city of this Company.  # noqa: E501
        :type: int
        """

        self._city = city

    @property
    def address(self):
        """Gets the address of this Company.  # noqa: E501


        :return: The address of this Company.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Company.


        :param address: The address of this Company.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address is not None and len(address) > 200):
            raise ValueError("Invalid value for `address`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address is not None and len(address) < 1):
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def logo(self):
        """Gets the logo of this Company.  # noqa: E501


        :return: The logo of this Company.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Company.


        :param logo: The logo of this Company.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def pays_vat(self):
        """Gets the pays_vat of this Company.  # noqa: E501


        :return: The pays_vat of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._pays_vat

    @pays_vat.setter
    def pays_vat(self, pays_vat):
        """Sets the pays_vat of this Company.


        :param pays_vat: The pays_vat of this Company.  # noqa: E501
        :type: bool
        """

        self._pays_vat = pays_vat

    @property
    def vat_id(self):
        """Gets the vat_id of this Company.  # noqa: E501


        :return: The vat_id of this Company.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this Company.


        :param vat_id: The vat_id of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                vat_id is not None and len(vat_id) > 100):
            raise ValueError("Invalid value for `vat_id`, length must be less than or equal to `100`")  # noqa: E501

        self._vat_id = vat_id

    @property
    def vat_intra(self):
        """Gets the vat_intra of this Company.  # noqa: E501


        :return: The vat_intra of this Company.  # noqa: E501
        :rtype: str
        """
        return self._vat_intra

    @vat_intra.setter
    def vat_intra(self, vat_intra):
        """Sets the vat_intra of this Company.


        :param vat_intra: The vat_intra of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                vat_intra is not None and len(vat_intra) > 100):
            raise ValueError("Invalid value for `vat_intra`, length must be less than or equal to `100`")  # noqa: E501

        self._vat_intra = vat_intra

    @property
    def vat_at_income(self):
        """Gets the vat_at_income of this Company.  # noqa: E501


        :return: The vat_at_income of this Company.  # noqa: E501
        :rtype: bool
        """
        return self._vat_at_income

    @vat_at_income.setter
    def vat_at_income(self, vat_at_income):
        """Sets the vat_at_income of this Company.


        :param vat_at_income: The vat_at_income of this Company.  # noqa: E501
        :type: bool
        """

        self._vat_at_income = vat_at_income

    @property
    def reg_com(self):
        """Gets the reg_com of this Company.  # noqa: E501


        :return: The reg_com of this Company.  # noqa: E501
        :rtype: str
        """
        return self._reg_com

    @reg_com.setter
    def reg_com(self, reg_com):
        """Sets the reg_com of this Company.


        :param reg_com: The reg_com of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reg_com is not None and len(reg_com) > 60):
            raise ValueError("Invalid value for `reg_com`, length must be less than or equal to `60`")  # noqa: E501

        self._reg_com = reg_com

    @property
    def social_capital(self):
        """Gets the social_capital of this Company.  # noqa: E501


        :return: The social_capital of this Company.  # noqa: E501
        :rtype: str
        """
        return self._social_capital

    @social_capital.setter
    def social_capital(self, social_capital):
        """Sets the social_capital of this Company.


        :param social_capital: The social_capital of this Company.  # noqa: E501
        :type: str
        """

        self._social_capital = social_capital

    @property
    def email(self):
        """Gets the email of this Company.  # noqa: E501


        :return: The email of this Company.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Company.


        :param email: The email of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email is not None and len(email) > 254):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def website(self):
        """Gets the website of this Company.  # noqa: E501


        :return: The website of this Company.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Company.


        :param website: The website of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                website is not None and len(website) > 200):
            raise ValueError("Invalid value for `website`, length must be less than or equal to `200`")  # noqa: E501

        self._website = website

    @property
    def enabled_modules(self):
        """Gets the enabled_modules of this Company.  # noqa: E501


        :return: The enabled_modules of this Company.  # noqa: E501
        :rtype: str
        """
        return self._enabled_modules

    @enabled_modules.setter
    def enabled_modules(self, enabled_modules):
        """Sets the enabled_modules of this Company.


        :param enabled_modules: The enabled_modules of this Company.  # noqa: E501
        :type: str
        """

        self._enabled_modules = enabled_modules

    @property
    def modules(self):
        """Gets the modules of this Company.  # noqa: E501


        :return: The modules of this Company.  # noqa: E501
        :rtype: list[str]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this Company.


        :param modules: The modules of this Company.  # noqa: E501
        :type: list[str]
        """

        self._modules = modules

    @property
    def site_logo(self):
        """Gets the site_logo of this Company.  # noqa: E501

        Imaginea trebuie sa fie exact 1024x1024 pixeli  # noqa: E501

        :return: The site_logo of this Company.  # noqa: E501
        :rtype: str
        """
        return self._site_logo

    @site_logo.setter
    def site_logo(self, site_logo):
        """Sets the site_logo of this Company.

        Imaginea trebuie sa fie exact 1024x1024 pixeli  # noqa: E501

        :param site_logo: The site_logo of this Company.  # noqa: E501
        :type: str
        """

        self._site_logo = site_logo

    @property
    def personal_representative(self):
        """Gets the personal_representative of this Company.  # noqa: E501

        Numele reprezentatului legal  # noqa: E501

        :return: The personal_representative of this Company.  # noqa: E501
        :rtype: str
        """
        return self._personal_representative

    @personal_representative.setter
    def personal_representative(self, personal_representative):
        """Sets the personal_representative of this Company.

        Numele reprezentatului legal  # noqa: E501

        :param personal_representative: The personal_representative of this Company.  # noqa: E501
        :type: str
        """

        self._personal_representative = personal_representative

    @property
    def type(self):
        """Gets the type of this Company.  # noqa: E501


        :return: The type of this Company.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Company.


        :param type: The type of this Company.  # noqa: E501
        :type: str
        """
        allowed_values = ["PF", "PFA", "IF", "IPF", "SocietateInNumeColectiv", "SocietateInComanditaSimpla", "SocietatePeActiuni", "SocietateInComanditaPeActiuni", "SocietateCuRaspundereLimitata", "SocietateCuRaspundereLimitataDebutant", "OrganizatieCooperatistaDeCredit", "InstitutiiEmitenteDeMonedaElectronica", "CaseDeEconomiiPentruDomeniulLocativ", "Sucursalaauneiinstitutiidecreditstraina", "AlteInstitutiiDeCredit", "Mestesugareasca", "DeConsum", "DeValorificare", "Agricola", "DeLocuinte", "Pescaresti", "DeTransporturi", "Forestiere", "Sindicat", "Federatiesindicala", "ConfederatieSindicala", "UniuneSindicala", "Patronat", "UniunePatronala ", "Federatiepatronala ", "AlteOrganizatiiPatronale", "OrganizatieSauAsociatieProfesionala", "AsociatieDeProprietari", "AlteOrganizatiiSauAsociatiiCuPersonalitateJuridica", "Arhitect", "AsistentMedical", "AuditorFinanciar", "Avocat", "ConsilierProprietateIndustriala", "ConsultantFiscal ", "ExecutorJudecatoresc ", "LichidatorJudiciar", "ExpertContabil", "ExpertVamal", "Farmacist", "Medic", "MedicVeterinar", "NotarPublic", "Psiholog", "TraducatorAutorizat", "AltePersoaneFizice", "AltePersoaneJuridice", "RegieAutonoma", "CompanieNationala", "SocietateNationala", "ReprezentantaDinRomaniaAUneiPersoaneJuridiceStraine", "InstitutCulturalAlAltuiStat", "MisinueDiplomatica", "OficiuConsular", "AutoritateSauInstitutiePublica", "Fundatie"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def caen(self):
        """Gets the caen of this Company.  # noqa: E501


        :return: The caen of this Company.  # noqa: E501
        :rtype: str
        """
        return self._caen

    @caen.setter
    def caen(self, caen):
        """Sets the caen of this Company.


        :param caen: The caen of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                caen is not None and len(caen) > 5):
            raise ValueError("Invalid value for `caen`, length must be less than or equal to `5`")  # noqa: E501

        self._caen = caen

    @property
    def storage(self):
        """Gets the storage of this Company.  # noqa: E501


        :return: The storage of this Company.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this Company.


        :param storage: The storage of this Company.  # noqa: E501
        :type: str
        """

        self._storage = storage

    @property
    def phone(self):
        """Gets the phone of this Company.  # noqa: E501


        :return: The phone of this Company.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Company.


        :param phone: The phone of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                phone is not None and len(phone) > 200):
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `200`")  # noqa: E501

        self._phone = phone

    @property
    def email_alias(self):
        """Gets the email_alias of this Company.  # noqa: E501


        :return: The email_alias of this Company.  # noqa: E501
        :rtype: str
        """
        return self._email_alias

    @email_alias.setter
    def email_alias(self, email_alias):
        """Sets the email_alias of this Company.


        :param email_alias: The email_alias of this Company.  # noqa: E501
        :type: str
        """

        self._email_alias = email_alias

    @property
    def application(self):
        """Gets the application of this Company.  # noqa: E501


        :return: The application of this Company.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this Company.


        :param application: The application of this Company.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                application is not None and len(application) < 1):
            raise ValueError("Invalid value for `application`, length must be greater than or equal to `1`")  # noqa: E501

        self._application = application

    @property
    def general_markup(self):
        """Gets the general_markup of this Company.  # noqa: E501


        :return: The general_markup of this Company.  # noqa: E501
        :rtype: int
        """
        return self._general_markup

    @general_markup.setter
    def general_markup(self, general_markup):
        """Sets the general_markup of this Company.


        :param general_markup: The general_markup of this Company.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                general_markup is not None and general_markup > 32767):  # noqa: E501
            raise ValueError("Invalid value for `general_markup`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                general_markup is not None and general_markup < 0):  # noqa: E501
            raise ValueError("Invalid value for `general_markup`, must be a value greater than or equal to `0`")  # noqa: E501

        self._general_markup = general_markup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Company):
            return True

        return self.to_dict() != other.to_dict()
