# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PublicOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'int',
        'company': 'int',
        'source': 'int',
        'same_address': 'bool',
        'delivery_date': 'date',
        'delivery_type': 'int',
        'delivery_country': 'str',
        'delivery_region': 'int',
        'delivery_city': 'int',
        'delivery_address': 'str',
        'specific_date_time_requested': 'datetime',
        'invoice_country': 'str',
        'invoice_region': 'int',
        'invoice_city': 'int',
        'invoice_address': 'str',
        'payment_type': 'int',
        'observations': 'str',
        'partner_data': 'PublicPartner',
        'items': 'list[PublicOrderItem]'
    }

    attribute_map = {
        'domain': 'domain',
        'company': 'company',
        'source': 'source',
        'same_address': 'same_address',
        'delivery_date': 'delivery_date',
        'delivery_type': 'delivery_type',
        'delivery_country': 'delivery_country',
        'delivery_region': 'delivery_region',
        'delivery_city': 'delivery_city',
        'delivery_address': 'delivery_address',
        'specific_date_time_requested': 'specific_date_time_requested',
        'invoice_country': 'invoice_country',
        'invoice_region': 'invoice_region',
        'invoice_city': 'invoice_city',
        'invoice_address': 'invoice_address',
        'payment_type': 'payment_type',
        'observations': 'observations',
        'partner_data': 'partner_data',
        'items': 'items'
    }

    def __init__(self, domain=None, company=None, source=None, same_address=True, delivery_date=None, delivery_type=None, delivery_country=None, delivery_region=None, delivery_city=None, delivery_address=None, specific_date_time_requested=None, invoice_country=None, invoice_region=None, invoice_city=None, invoice_address=None, payment_type=None, observations=None, partner_data=None, items=None, _configuration=None):  # noqa: E501
        """PublicOrder - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._domain = None
        self._company = None
        self._source = None
        self._same_address = None
        self._delivery_date = None
        self._delivery_type = None
        self._delivery_country = None
        self._delivery_region = None
        self._delivery_city = None
        self._delivery_address = None
        self._specific_date_time_requested = None
        self._invoice_country = None
        self._invoice_region = None
        self._invoice_city = None
        self._invoice_address = None
        self._payment_type = None
        self._observations = None
        self._partner_data = None
        self._items = None
        self.discriminator = None

        if domain is not None:
            self.domain = domain
        if company is not None:
            self.company = company
        if source is not None:
            self.source = source
        if same_address is not None:
            self.same_address = same_address
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if delivery_type is not None:
            self.delivery_type = delivery_type
        if delivery_country is not None:
            self.delivery_country = delivery_country
        if delivery_region is not None:
            self.delivery_region = delivery_region
        if delivery_city is not None:
            self.delivery_city = delivery_city
        if delivery_address is not None:
            self.delivery_address = delivery_address
        if specific_date_time_requested is not None:
            self.specific_date_time_requested = specific_date_time_requested
        if invoice_country is not None:
            self.invoice_country = invoice_country
        if invoice_region is not None:
            self.invoice_region = invoice_region
        if invoice_city is not None:
            self.invoice_city = invoice_city
        if invoice_address is not None:
            self.invoice_address = invoice_address
        if payment_type is not None:
            self.payment_type = payment_type
        if observations is not None:
            self.observations = observations
        if partner_data is not None:
            self.partner_data = partner_data
        self.items = items

    @property
    def domain(self):
        """Gets the domain of this PublicOrder.  # noqa: E501


        :return: The domain of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PublicOrder.


        :param domain: The domain of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._domain = domain

    @property
    def company(self):
        """Gets the company of this PublicOrder.  # noqa: E501


        :return: The company of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this PublicOrder.


        :param company: The company of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._company = company

    @property
    def source(self):
        """Gets the source of this PublicOrder.  # noqa: E501


        :return: The source of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PublicOrder.


        :param source: The source of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._source = source

    @property
    def same_address(self):
        """Gets the same_address of this PublicOrder.  # noqa: E501

        Folosește aceeași adresă și la facturare  # noqa: E501

        :return: The same_address of this PublicOrder.  # noqa: E501
        :rtype: bool
        """
        return self._same_address

    @same_address.setter
    def same_address(self, same_address):
        """Sets the same_address of this PublicOrder.

        Folosește aceeași adresă și la facturare  # noqa: E501

        :param same_address: The same_address of this PublicOrder.  # noqa: E501
        :type: bool
        """

        self._same_address = same_address

    @property
    def delivery_date(self):
        """Gets the delivery_date of this PublicOrder.  # noqa: E501


        :return: The delivery_date of this PublicOrder.  # noqa: E501
        :rtype: date
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this PublicOrder.


        :param delivery_date: The delivery_date of this PublicOrder.  # noqa: E501
        :type: date
        """

        self._delivery_date = delivery_date

    @property
    def delivery_type(self):
        """Gets the delivery_type of this PublicOrder.  # noqa: E501


        :return: The delivery_type of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this PublicOrder.


        :param delivery_type: The delivery_type of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._delivery_type = delivery_type

    @property
    def delivery_country(self):
        """Gets the delivery_country of this PublicOrder.  # noqa: E501


        :return: The delivery_country of this PublicOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_country

    @delivery_country.setter
    def delivery_country(self, delivery_country):
        """Sets the delivery_country of this PublicOrder.


        :param delivery_country: The delivery_country of this PublicOrder.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                delivery_country is not None and len(delivery_country) < 1):
            raise ValueError("Invalid value for `delivery_country`, length must be greater than or equal to `1`")  # noqa: E501

        self._delivery_country = delivery_country

    @property
    def delivery_region(self):
        """Gets the delivery_region of this PublicOrder.  # noqa: E501


        :return: The delivery_region of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._delivery_region

    @delivery_region.setter
    def delivery_region(self, delivery_region):
        """Sets the delivery_region of this PublicOrder.


        :param delivery_region: The delivery_region of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._delivery_region = delivery_region

    @property
    def delivery_city(self):
        """Gets the delivery_city of this PublicOrder.  # noqa: E501


        :return: The delivery_city of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._delivery_city

    @delivery_city.setter
    def delivery_city(self, delivery_city):
        """Sets the delivery_city of this PublicOrder.


        :param delivery_city: The delivery_city of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._delivery_city = delivery_city

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PublicOrder.  # noqa: E501


        :return: The delivery_address of this PublicOrder.  # noqa: E501
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PublicOrder.


        :param delivery_address: The delivery_address of this PublicOrder.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                delivery_address is not None and len(delivery_address) > 200):
            raise ValueError("Invalid value for `delivery_address`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                delivery_address is not None and len(delivery_address) < 1):
            raise ValueError("Invalid value for `delivery_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._delivery_address = delivery_address

    @property
    def specific_date_time_requested(self):
        """Gets the specific_date_time_requested of this PublicOrder.  # noqa: E501


        :return: The specific_date_time_requested of this PublicOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._specific_date_time_requested

    @specific_date_time_requested.setter
    def specific_date_time_requested(self, specific_date_time_requested):
        """Sets the specific_date_time_requested of this PublicOrder.


        :param specific_date_time_requested: The specific_date_time_requested of this PublicOrder.  # noqa: E501
        :type: datetime
        """

        self._specific_date_time_requested = specific_date_time_requested

    @property
    def invoice_country(self):
        """Gets the invoice_country of this PublicOrder.  # noqa: E501


        :return: The invoice_country of this PublicOrder.  # noqa: E501
        :rtype: str
        """
        return self._invoice_country

    @invoice_country.setter
    def invoice_country(self, invoice_country):
        """Sets the invoice_country of this PublicOrder.


        :param invoice_country: The invoice_country of this PublicOrder.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                invoice_country is not None and len(invoice_country) < 1):
            raise ValueError("Invalid value for `invoice_country`, length must be greater than or equal to `1`")  # noqa: E501

        self._invoice_country = invoice_country

    @property
    def invoice_region(self):
        """Gets the invoice_region of this PublicOrder.  # noqa: E501


        :return: The invoice_region of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._invoice_region

    @invoice_region.setter
    def invoice_region(self, invoice_region):
        """Sets the invoice_region of this PublicOrder.


        :param invoice_region: The invoice_region of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._invoice_region = invoice_region

    @property
    def invoice_city(self):
        """Gets the invoice_city of this PublicOrder.  # noqa: E501


        :return: The invoice_city of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._invoice_city

    @invoice_city.setter
    def invoice_city(self, invoice_city):
        """Sets the invoice_city of this PublicOrder.


        :param invoice_city: The invoice_city of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._invoice_city = invoice_city

    @property
    def invoice_address(self):
        """Gets the invoice_address of this PublicOrder.  # noqa: E501


        :return: The invoice_address of this PublicOrder.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address):
        """Sets the invoice_address of this PublicOrder.


        :param invoice_address: The invoice_address of this PublicOrder.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                invoice_address is not None and len(invoice_address) > 200):
            raise ValueError("Invalid value for `invoice_address`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                invoice_address is not None and len(invoice_address) < 1):
            raise ValueError("Invalid value for `invoice_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._invoice_address = invoice_address

    @property
    def payment_type(self):
        """Gets the payment_type of this PublicOrder.  # noqa: E501


        :return: The payment_type of this PublicOrder.  # noqa: E501
        :rtype: int
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PublicOrder.


        :param payment_type: The payment_type of this PublicOrder.  # noqa: E501
        :type: int
        """

        self._payment_type = payment_type

    @property
    def observations(self):
        """Gets the observations of this PublicOrder.  # noqa: E501


        :return: The observations of this PublicOrder.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this PublicOrder.


        :param observations: The observations of this PublicOrder.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                observations is not None and len(observations) > 500):
            raise ValueError("Invalid value for `observations`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                observations is not None and len(observations) < 1):
            raise ValueError("Invalid value for `observations`, length must be greater than or equal to `1`")  # noqa: E501

        self._observations = observations

    @property
    def partner_data(self):
        """Gets the partner_data of this PublicOrder.  # noqa: E501


        :return: The partner_data of this PublicOrder.  # noqa: E501
        :rtype: PublicPartner
        """
        return self._partner_data

    @partner_data.setter
    def partner_data(self, partner_data):
        """Sets the partner_data of this PublicOrder.


        :param partner_data: The partner_data of this PublicOrder.  # noqa: E501
        :type: PublicPartner
        """

        self._partner_data = partner_data

    @property
    def items(self):
        """Gets the items of this PublicOrder.  # noqa: E501


        :return: The items of this PublicOrder.  # noqa: E501
        :rtype: list[PublicOrderItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PublicOrder.


        :param items: The items of this PublicOrder.  # noqa: E501
        :type: list[PublicOrderItem]
        """
        if self._configuration.client_side_validation and items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicOrder):
            return True

        return self.to_dict() != other.to_dict()
