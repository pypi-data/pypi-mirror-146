# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PartnerOrderWrite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'partner_id': 'int',
        'delivery_type': 'int',
        'delivered_by': 'str',
        'delivery_identifier': 'str',
        'delivery_date': 'datetime',
        'delivery_country': 'str',
        'delivery_region': 'int',
        'delivery_city': 'int',
        'delivery_address': 'str',
        'specific_date_time_requested': 'datetime',
        'payment_type': 'int',
        'status': 'int',
        '_date': 'date',
        'items': 'list[PartnerOrderItemModel]'
    }

    attribute_map = {
        'id': 'id',
        'partner_id': 'partner_id',
        'delivery_type': 'delivery_type',
        'delivered_by': 'delivered_by',
        'delivery_identifier': 'delivery_identifier',
        'delivery_date': 'delivery_date',
        'delivery_country': 'delivery_country',
        'delivery_region': 'delivery_region',
        'delivery_city': 'delivery_city',
        'delivery_address': 'delivery_address',
        'specific_date_time_requested': 'specific_date_time_requested',
        'payment_type': 'payment_type',
        'status': 'status',
        '_date': 'date',
        'items': 'items'
    }

    def __init__(self, id=None, partner_id=None, delivery_type=None, delivered_by=None, delivery_identifier=None, delivery_date=None, delivery_country=None, delivery_region=None, delivery_city=None, delivery_address=None, specific_date_time_requested=None, payment_type=None, status=None, _date=None, items=None, _configuration=None):  # noqa: E501
        """PartnerOrderWrite - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._partner_id = None
        self._delivery_type = None
        self._delivered_by = None
        self._delivery_identifier = None
        self._delivery_date = None
        self._delivery_country = None
        self._delivery_region = None
        self._delivery_city = None
        self._delivery_address = None
        self._specific_date_time_requested = None
        self._payment_type = None
        self._status = None
        self.__date = None
        self._items = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.partner_id = partner_id
        if delivery_type is not None:
            self.delivery_type = delivery_type
        if delivered_by is not None:
            self.delivered_by = delivered_by
        if delivery_identifier is not None:
            self.delivery_identifier = delivery_identifier
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if delivery_country is not None:
            self.delivery_country = delivery_country
        if delivery_region is not None:
            self.delivery_region = delivery_region
        if delivery_city is not None:
            self.delivery_city = delivery_city
        if delivery_address is not None:
            self.delivery_address = delivery_address
        if specific_date_time_requested is not None:
            self.specific_date_time_requested = specific_date_time_requested
        if payment_type is not None:
            self.payment_type = payment_type
        if status is not None:
            self.status = status
        self._date = _date
        self.items = items

    @property
    def id(self):
        """Gets the id of this PartnerOrderWrite.  # noqa: E501


        :return: The id of this PartnerOrderWrite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartnerOrderWrite.


        :param id: The id of this PartnerOrderWrite.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def partner_id(self):
        """Gets the partner_id of this PartnerOrderWrite.  # noqa: E501


        :return: The partner_id of this PartnerOrderWrite.  # noqa: E501
        :rtype: int
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this PartnerOrderWrite.


        :param partner_id: The partner_id of this PartnerOrderWrite.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and partner_id is None:
            raise ValueError("Invalid value for `partner_id`, must not be `None`")  # noqa: E501

        self._partner_id = partner_id

    @property
    def delivery_type(self):
        """Gets the delivery_type of this PartnerOrderWrite.  # noqa: E501


        :return: The delivery_type of this PartnerOrderWrite.  # noqa: E501
        :rtype: int
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this PartnerOrderWrite.


        :param delivery_type: The delivery_type of this PartnerOrderWrite.  # noqa: E501
        :type: int
        """

        self._delivery_type = delivery_type

    @property
    def delivered_by(self):
        """Gets the delivered_by of this PartnerOrderWrite.  # noqa: E501


        :return: The delivered_by of this PartnerOrderWrite.  # noqa: E501
        :rtype: str
        """
        return self._delivered_by

    @delivered_by.setter
    def delivered_by(self, delivered_by):
        """Sets the delivered_by of this PartnerOrderWrite.


        :param delivered_by: The delivered_by of this PartnerOrderWrite.  # noqa: E501
        :type: str
        """

        self._delivered_by = delivered_by

    @property
    def delivery_identifier(self):
        """Gets the delivery_identifier of this PartnerOrderWrite.  # noqa: E501


        :return: The delivery_identifier of this PartnerOrderWrite.  # noqa: E501
        :rtype: str
        """
        return self._delivery_identifier

    @delivery_identifier.setter
    def delivery_identifier(self, delivery_identifier):
        """Sets the delivery_identifier of this PartnerOrderWrite.


        :param delivery_identifier: The delivery_identifier of this PartnerOrderWrite.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                delivery_identifier is not None and len(delivery_identifier) > 100):
            raise ValueError("Invalid value for `delivery_identifier`, length must be less than or equal to `100`")  # noqa: E501

        self._delivery_identifier = delivery_identifier

    @property
    def delivery_date(self):
        """Gets the delivery_date of this PartnerOrderWrite.  # noqa: E501


        :return: The delivery_date of this PartnerOrderWrite.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this PartnerOrderWrite.


        :param delivery_date: The delivery_date of this PartnerOrderWrite.  # noqa: E501
        :type: datetime
        """

        self._delivery_date = delivery_date

    @property
    def delivery_country(self):
        """Gets the delivery_country of this PartnerOrderWrite.  # noqa: E501


        :return: The delivery_country of this PartnerOrderWrite.  # noqa: E501
        :rtype: str
        """
        return self._delivery_country

    @delivery_country.setter
    def delivery_country(self, delivery_country):
        """Sets the delivery_country of this PartnerOrderWrite.


        :param delivery_country: The delivery_country of this PartnerOrderWrite.  # noqa: E501
        :type: str
        """

        self._delivery_country = delivery_country

    @property
    def delivery_region(self):
        """Gets the delivery_region of this PartnerOrderWrite.  # noqa: E501


        :return: The delivery_region of this PartnerOrderWrite.  # noqa: E501
        :rtype: int
        """
        return self._delivery_region

    @delivery_region.setter
    def delivery_region(self, delivery_region):
        """Sets the delivery_region of this PartnerOrderWrite.


        :param delivery_region: The delivery_region of this PartnerOrderWrite.  # noqa: E501
        :type: int
        """

        self._delivery_region = delivery_region

    @property
    def delivery_city(self):
        """Gets the delivery_city of this PartnerOrderWrite.  # noqa: E501


        :return: The delivery_city of this PartnerOrderWrite.  # noqa: E501
        :rtype: int
        """
        return self._delivery_city

    @delivery_city.setter
    def delivery_city(self, delivery_city):
        """Sets the delivery_city of this PartnerOrderWrite.


        :param delivery_city: The delivery_city of this PartnerOrderWrite.  # noqa: E501
        :type: int
        """

        self._delivery_city = delivery_city

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PartnerOrderWrite.  # noqa: E501


        :return: The delivery_address of this PartnerOrderWrite.  # noqa: E501
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PartnerOrderWrite.


        :param delivery_address: The delivery_address of this PartnerOrderWrite.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                delivery_address is not None and len(delivery_address) > 200):
            raise ValueError("Invalid value for `delivery_address`, length must be less than or equal to `200`")  # noqa: E501

        self._delivery_address = delivery_address

    @property
    def specific_date_time_requested(self):
        """Gets the specific_date_time_requested of this PartnerOrderWrite.  # noqa: E501


        :return: The specific_date_time_requested of this PartnerOrderWrite.  # noqa: E501
        :rtype: datetime
        """
        return self._specific_date_time_requested

    @specific_date_time_requested.setter
    def specific_date_time_requested(self, specific_date_time_requested):
        """Sets the specific_date_time_requested of this PartnerOrderWrite.


        :param specific_date_time_requested: The specific_date_time_requested of this PartnerOrderWrite.  # noqa: E501
        :type: datetime
        """

        self._specific_date_time_requested = specific_date_time_requested

    @property
    def payment_type(self):
        """Gets the payment_type of this PartnerOrderWrite.  # noqa: E501


        :return: The payment_type of this PartnerOrderWrite.  # noqa: E501
        :rtype: int
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PartnerOrderWrite.


        :param payment_type: The payment_type of this PartnerOrderWrite.  # noqa: E501
        :type: int
        """

        self._payment_type = payment_type

    @property
    def status(self):
        """Gets the status of this PartnerOrderWrite.  # noqa: E501


        :return: The status of this PartnerOrderWrite.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PartnerOrderWrite.


        :param status: The status of this PartnerOrderWrite.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def _date(self):
        """Gets the _date of this PartnerOrderWrite.  # noqa: E501


        :return: The _date of this PartnerOrderWrite.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PartnerOrderWrite.


        :param _date: The _date of this PartnerOrderWrite.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def items(self):
        """Gets the items of this PartnerOrderWrite.  # noqa: E501


        :return: The items of this PartnerOrderWrite.  # noqa: E501
        :rtype: list[PartnerOrderItemModel]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PartnerOrderWrite.


        :param items: The items of this PartnerOrderWrite.  # noqa: E501
        :type: list[PartnerOrderItemModel]
        """
        if self._configuration.client_side_validation and items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartnerOrderWrite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerOrderWrite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartnerOrderWrite):
            return True

        return self.to_dict() != other.to_dict()
