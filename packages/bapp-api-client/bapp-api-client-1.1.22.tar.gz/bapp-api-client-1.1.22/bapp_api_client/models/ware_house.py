# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class WareHouse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'location': 'int',
        'name': 'str',
        'depth': 'str',
        'width': 'str',
        'height': 'str',
        'visual': 'str',
        'row_number': 'int',
        'column_number': 'int',
        'location_number': 'int',
        'row_format': 'int',
        'column_format': 'int',
        'location_format': 'int'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'name': 'name',
        'depth': 'depth',
        'width': 'width',
        'height': 'height',
        'visual': 'visual',
        'row_number': 'row_number',
        'column_number': 'column_number',
        'location_number': 'location_number',
        'row_format': 'row_format',
        'column_format': 'column_format',
        'location_format': 'location_format'
    }

    def __init__(self, id=None, location=None, name=None, depth=None, width=None, height=None, visual=None, row_number=None, column_number=None, location_number=None, row_format=None, column_format=None, location_format=None, _configuration=None):  # noqa: E501
        """WareHouse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._location = None
        self._name = None
        self._depth = None
        self._width = None
        self._height = None
        self._visual = None
        self._row_number = None
        self._column_number = None
        self._location_number = None
        self._row_format = None
        self._column_format = None
        self._location_format = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        self.name = name
        if depth is not None:
            self.depth = depth
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if visual is not None:
            self.visual = visual
        if row_number is not None:
            self.row_number = row_number
        if column_number is not None:
            self.column_number = column_number
        if location_number is not None:
            self.location_number = location_number
        if row_format is not None:
            self.row_format = row_format
        if column_format is not None:
            self.column_format = column_format
        if location_format is not None:
            self.location_format = location_format

    @property
    def id(self):
        """Gets the id of this WareHouse.  # noqa: E501


        :return: The id of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WareHouse.


        :param id: The id of this WareHouse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this WareHouse.  # noqa: E501


        :return: The location of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WareHouse.


        :param location: The location of this WareHouse.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this WareHouse.  # noqa: E501


        :return: The name of this WareHouse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WareHouse.


        :param name: The name of this WareHouse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def depth(self):
        """Gets the depth of this WareHouse.  # noqa: E501


        :return: The depth of this WareHouse.  # noqa: E501
        :rtype: str
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this WareHouse.


        :param depth: The depth of this WareHouse.  # noqa: E501
        :type: str
        """

        self._depth = depth

    @property
    def width(self):
        """Gets the width of this WareHouse.  # noqa: E501


        :return: The width of this WareHouse.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this WareHouse.


        :param width: The width of this WareHouse.  # noqa: E501
        :type: str
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this WareHouse.  # noqa: E501


        :return: The height of this WareHouse.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this WareHouse.


        :param height: The height of this WareHouse.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def visual(self):
        """Gets the visual of this WareHouse.  # noqa: E501


        :return: The visual of this WareHouse.  # noqa: E501
        :rtype: str
        """
        return self._visual

    @visual.setter
    def visual(self, visual):
        """Sets the visual of this WareHouse.


        :param visual: The visual of this WareHouse.  # noqa: E501
        :type: str
        """

        self._visual = visual

    @property
    def row_number(self):
        """Gets the row_number of this WareHouse.  # noqa: E501


        :return: The row_number of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._row_number

    @row_number.setter
    def row_number(self, row_number):
        """Sets the row_number of this WareHouse.


        :param row_number: The row_number of this WareHouse.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                row_number is not None and row_number > 20):  # noqa: E501
            raise ValueError("Invalid value for `row_number`, must be a value less than or equal to `20`")  # noqa: E501

        self._row_number = row_number

    @property
    def column_number(self):
        """Gets the column_number of this WareHouse.  # noqa: E501


        :return: The column_number of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._column_number

    @column_number.setter
    def column_number(self, column_number):
        """Sets the column_number of this WareHouse.


        :param column_number: The column_number of this WareHouse.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                column_number is not None and column_number > 20):  # noqa: E501
            raise ValueError("Invalid value for `column_number`, must be a value less than or equal to `20`")  # noqa: E501

        self._column_number = column_number

    @property
    def location_number(self):
        """Gets the location_number of this WareHouse.  # noqa: E501


        :return: The location_number of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._location_number

    @location_number.setter
    def location_number(self, location_number):
        """Sets the location_number of this WareHouse.


        :param location_number: The location_number of this WareHouse.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                location_number is not None and location_number > 20):  # noqa: E501
            raise ValueError("Invalid value for `location_number`, must be a value less than or equal to `20`")  # noqa: E501

        self._location_number = location_number

    @property
    def row_format(self):
        """Gets the row_format of this WareHouse.  # noqa: E501


        :return: The row_format of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._row_format

    @row_format.setter
    def row_format(self, row_format):
        """Sets the row_format of this WareHouse.


        :param row_format: The row_format of this WareHouse.  # noqa: E501
        :type: int
        """

        self._row_format = row_format

    @property
    def column_format(self):
        """Gets the column_format of this WareHouse.  # noqa: E501


        :return: The column_format of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._column_format

    @column_format.setter
    def column_format(self, column_format):
        """Sets the column_format of this WareHouse.


        :param column_format: The column_format of this WareHouse.  # noqa: E501
        :type: int
        """

        self._column_format = column_format

    @property
    def location_format(self):
        """Gets the location_format of this WareHouse.  # noqa: E501


        :return: The location_format of this WareHouse.  # noqa: E501
        :rtype: int
        """
        return self._location_format

    @location_format.setter
    def location_format(self, location_format):
        """Sets the location_format of this WareHouse.


        :param location_format: The location_format of this WareHouse.  # noqa: E501
        :type: int
        """

        self._location_format = location_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WareHouse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WareHouse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WareHouse):
            return True

        return self.to_dict() != other.to_dict()
