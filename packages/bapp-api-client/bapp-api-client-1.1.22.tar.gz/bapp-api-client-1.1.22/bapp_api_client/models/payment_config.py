# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PaymentConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'object',
        'enabled': 'bool',
        'default': 'bool',
        'provider': 'int'
    }

    attribute_map = {
        'config': 'config',
        'enabled': 'enabled',
        'default': 'default',
        'provider': 'provider'
    }

    def __init__(self, config=None, enabled=None, default=None, provider=None, _configuration=None):  # noqa: E501
        """PaymentConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._config = None
        self._enabled = None
        self._default = None
        self._provider = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if enabled is not None:
            self.enabled = enabled
        if default is not None:
            self.default = default
        if provider is not None:
            self.provider = provider

    @property
    def config(self):
        """Gets the config of this PaymentConfig.  # noqa: E501


        :return: The config of this PaymentConfig.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this PaymentConfig.


        :param config: The config of this PaymentConfig.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def enabled(self):
        """Gets the enabled of this PaymentConfig.  # noqa: E501


        :return: The enabled of this PaymentConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PaymentConfig.


        :param enabled: The enabled of this PaymentConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def default(self):
        """Gets the default of this PaymentConfig.  # noqa: E501


        :return: The default of this PaymentConfig.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this PaymentConfig.


        :param default: The default of this PaymentConfig.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def provider(self):
        """Gets the provider of this PaymentConfig.  # noqa: E501


        :return: The provider of this PaymentConfig.  # noqa: E501
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PaymentConfig.


        :param provider: The provider of this PaymentConfig.  # noqa: E501
        :type: int
        """

        self._provider = provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentConfig):
            return True

        return self.to_dict() != other.to_dict()
