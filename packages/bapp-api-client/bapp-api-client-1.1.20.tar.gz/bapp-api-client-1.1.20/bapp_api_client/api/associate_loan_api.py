# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bapp_api_client.api_client import ApiClient


class AssociateLoanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def associate_loan_contract_create(self, data, **kwargs):  # noqa: E501
        """associate_loan_contract_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoanContract data: (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """associate_loan_contract_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoanContract data: (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `associate_loan_contract_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanContract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_delete(self, id, **kwargs):  # noqa: E501
        """associate_loan_contract_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """associate_loan_contract_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_list(self, **kwargs):  # noqa: E501
        """associate_loan_contract_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str draft: 
        :param str reimbursed: 
        :param str number: 
        :param str active: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def associate_loan_contract_list_with_http_info(self, **kwargs):  # noqa: E501
        """associate_loan_contract_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str draft: 
        :param str reimbursed: 
        :param str number: 
        :param str active: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['draft', 'reimbursed', 'number', 'active', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'draft' in params:
            query_params.append(('draft', params['draft']))  # noqa: E501
        if 'reimbursed' in params:
            query_params.append(('reimbursed', params['reimbursed']))  # noqa: E501
        if 'number' in params:
            query_params.append(('number', params['number']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_partial_update(self, id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :param LoanContract data: (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :param LoanContract data: (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `associate_loan_contract_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanContract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_read(self, id, **kwargs):  # noqa: E501
        """associate_loan_contract_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """associate_loan_contract_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanContract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_repayment_create(self, contract_id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_create(contract_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param LoanRepayment data: (required)
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_repayment_create_with_http_info(contract_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_repayment_create_with_http_info(contract_id, data, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_repayment_create_with_http_info(self, contract_id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_create_with_http_info(contract_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param LoanRepayment data: (required)
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_repayment_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in params or
                                                       params['contract_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_id` when calling `associate_loan_contract_repayment_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `associate_loan_contract_repayment_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{contract_id}/repayment/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanRepayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_repayment_delete(self, contract_id, id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_delete(contract_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_repayment_delete_with_http_info(contract_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_repayment_delete_with_http_info(contract_id, id, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_repayment_delete_with_http_info(self, contract_id, id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_delete_with_http_info(contract_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_repayment_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in params or
                                                       params['contract_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_id` when calling `associate_loan_contract_repayment_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_repayment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{contract_id}/repayment/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_repayment_list(self, contract_id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_list(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_repayment_list_with_http_info(contract_id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_repayment_list_with_http_info(contract_id, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_repayment_list_with_http_info(self, contract_id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_list_with_http_info(contract_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_repayment_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in params or
                                                       params['contract_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_id` when calling `associate_loan_contract_repayment_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501

        query_params = []
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{contract_id}/repayment/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanRepayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_repayment_partial_update(self, contract_id, id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_partial_update(contract_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_repayment_partial_update_with_http_info(contract_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_repayment_partial_update_with_http_info(contract_id, id, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_repayment_partial_update_with_http_info(self, contract_id, id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_partial_update_with_http_info(contract_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_repayment_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in params or
                                                       params['contract_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_id` when calling `associate_loan_contract_repayment_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_repayment_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{contract_id}/repayment/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_repayment_read(self, contract_id, id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_read(contract_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_repayment_read_with_http_info(contract_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_repayment_read_with_http_info(contract_id, id, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_repayment_read_with_http_info(self, contract_id, id, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_read_with_http_info(contract_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_repayment_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in params or
                                                       params['contract_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_id` when calling `associate_loan_contract_repayment_read`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_repayment_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{contract_id}/repayment/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanRepayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_repayment_update(self, contract_id, id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_update(contract_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :param LoanRepayment data: (required)
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_repayment_update_with_http_info(contract_id, id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_repayment_update_with_http_info(contract_id, id, data, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_repayment_update_with_http_info(self, contract_id, id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_repayment_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_repayment_update_with_http_info(contract_id, id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str contract_id: (required)
        :param int id: A unique integer value identifying this restituire imprumut. (required)
        :param LoanRepayment data: (required)
        :return: LoanRepayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_repayment_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in params or
                                                       params['contract_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `contract_id` when calling `associate_loan_contract_repayment_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_repayment_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `associate_loan_contract_repayment_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{contract_id}/repayment/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanRepayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_loan_contract_update(self, id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :param LoanContract data: (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.associate_loan_contract_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_loan_contract_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def associate_loan_contract_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """associate_loan_contract_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.associate_loan_contract_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this contract împrumut. (required)
        :param LoanContract data: (required)
        :return: LoanContract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_loan_contract_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `associate_loan_contract_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `associate_loan_contract_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/associate-loan/contract/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoanContract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
