# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Ticket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'source': 'int',
        'source_custom': 'str',
        'priority': 'int',
        'queue': 'int',
        'partner': 'int',
        'status': 'int',
        'owner': 'int',
        'resolved': 'bool',
        'closed': 'bool',
        'on_hold': 'bool',
        'internal_notes': 'str',
        'tags': 'list[int]',
        'title': 'str',
        'issue': 'str',
        'resolution': 'str',
        'identifier': 'str',
        'messages': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'files': 'list[str]',
        'attachments': 'str',
        'can_edit': 'str',
        'can_delete_before': 'str',
        'client_online': 'str',
        'queue_name': 'str',
        'modified_at': 'datetime',
        'can_change_owner': 'str'
    }

    attribute_map = {
        'id': 'id',
        'source': 'source',
        'source_custom': 'source_custom',
        'priority': 'priority',
        'queue': 'queue',
        'partner': 'partner',
        'status': 'status',
        'owner': 'owner',
        'resolved': 'resolved',
        'closed': 'closed',
        'on_hold': 'on_hold',
        'internal_notes': 'internal_notes',
        'tags': 'tags',
        'title': 'title',
        'issue': 'issue',
        'resolution': 'resolution',
        'identifier': 'identifier',
        'messages': 'messages',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'files': 'files',
        'attachments': 'attachments',
        'can_edit': 'can_edit',
        'can_delete_before': 'can_delete_before',
        'client_online': 'client_online',
        'queue_name': 'queue_name',
        'modified_at': 'modified_at',
        'can_change_owner': 'can_change_owner'
    }

    def __init__(self, id=None, source=None, source_custom=None, priority=None, queue=None, partner=None, status=None, owner=None, resolved=None, closed=None, on_hold=None, internal_notes=None, tags=None, title=None, issue=None, resolution=None, identifier=None, messages=None, created_at=None, created_by=None, files=None, attachments=None, can_edit=None, can_delete_before=None, client_online=None, queue_name='', modified_at=None, can_change_owner=None, _configuration=None):  # noqa: E501
        """Ticket - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._source = None
        self._source_custom = None
        self._priority = None
        self._queue = None
        self._partner = None
        self._status = None
        self._owner = None
        self._resolved = None
        self._closed = None
        self._on_hold = None
        self._internal_notes = None
        self._tags = None
        self._title = None
        self._issue = None
        self._resolution = None
        self._identifier = None
        self._messages = None
        self._created_at = None
        self._created_by = None
        self._files = None
        self._attachments = None
        self._can_edit = None
        self._can_delete_before = None
        self._client_online = None
        self._queue_name = None
        self._modified_at = None
        self._can_change_owner = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if source_custom is not None:
            self.source_custom = source_custom
        if priority is not None:
            self.priority = priority
        self.queue = queue
        if partner is not None:
            self.partner = partner
        if status is not None:
            self.status = status
        if owner is not None:
            self.owner = owner
        if resolved is not None:
            self.resolved = resolved
        if closed is not None:
            self.closed = closed
        if on_hold is not None:
            self.on_hold = on_hold
        if internal_notes is not None:
            self.internal_notes = internal_notes
        if tags is not None:
            self.tags = tags
        self.title = title
        self.issue = issue
        if resolution is not None:
            self.resolution = resolution
        if identifier is not None:
            self.identifier = identifier
        if messages is not None:
            self.messages = messages
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if files is not None:
            self.files = files
        if attachments is not None:
            self.attachments = attachments
        if can_edit is not None:
            self.can_edit = can_edit
        if can_delete_before is not None:
            self.can_delete_before = can_delete_before
        if client_online is not None:
            self.client_online = client_online
        if queue_name is not None:
            self.queue_name = queue_name
        if modified_at is not None:
            self.modified_at = modified_at
        if can_change_owner is not None:
            self.can_change_owner = can_change_owner

    @property
    def id(self):
        """Gets the id of this Ticket.  # noqa: E501


        :return: The id of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ticket.


        :param id: The id of this Ticket.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this Ticket.  # noqa: E501


        :return: The source of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Ticket.


        :param source: The source of this Ticket.  # noqa: E501
        :type: int
        """

        self._source = source

    @property
    def source_custom(self):
        """Gets the source_custom of this Ticket.  # noqa: E501


        :return: The source_custom of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._source_custom

    @source_custom.setter
    def source_custom(self, source_custom):
        """Sets the source_custom of this Ticket.


        :param source_custom: The source_custom of this Ticket.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_custom is not None and len(source_custom) > 200):
            raise ValueError("Invalid value for `source_custom`, length must be less than or equal to `200`")  # noqa: E501

        self._source_custom = source_custom

    @property
    def priority(self):
        """Gets the priority of this Ticket.  # noqa: E501


        :return: The priority of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Ticket.


        :param priority: The priority of this Ticket.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def queue(self):
        """Gets the queue of this Ticket.  # noqa: E501


        :return: The queue of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this Ticket.


        :param queue: The queue of this Ticket.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and queue is None:
            raise ValueError("Invalid value for `queue`, must not be `None`")  # noqa: E501

        self._queue = queue

    @property
    def partner(self):
        """Gets the partner of this Ticket.  # noqa: E501


        :return: The partner of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Ticket.


        :param partner: The partner of this Ticket.  # noqa: E501
        :type: int
        """

        self._partner = partner

    @property
    def status(self):
        """Gets the status of this Ticket.  # noqa: E501


        :return: The status of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Ticket.


        :param status: The status of this Ticket.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def owner(self):
        """Gets the owner of this Ticket.  # noqa: E501


        :return: The owner of this Ticket.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Ticket.


        :param owner: The owner of this Ticket.  # noqa: E501
        :type: int
        """

        self._owner = owner

    @property
    def resolved(self):
        """Gets the resolved of this Ticket.  # noqa: E501


        :return: The resolved of this Ticket.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this Ticket.


        :param resolved: The resolved of this Ticket.  # noqa: E501
        :type: bool
        """

        self._resolved = resolved

    @property
    def closed(self):
        """Gets the closed of this Ticket.  # noqa: E501


        :return: The closed of this Ticket.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Ticket.


        :param closed: The closed of this Ticket.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def on_hold(self):
        """Gets the on_hold of this Ticket.  # noqa: E501


        :return: The on_hold of this Ticket.  # noqa: E501
        :rtype: bool
        """
        return self._on_hold

    @on_hold.setter
    def on_hold(self, on_hold):
        """Sets the on_hold of this Ticket.


        :param on_hold: The on_hold of this Ticket.  # noqa: E501
        :type: bool
        """

        self._on_hold = on_hold

    @property
    def internal_notes(self):
        """Gets the internal_notes of this Ticket.  # noqa: E501


        :return: The internal_notes of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._internal_notes

    @internal_notes.setter
    def internal_notes(self, internal_notes):
        """Sets the internal_notes of this Ticket.


        :param internal_notes: The internal_notes of this Ticket.  # noqa: E501
        :type: str
        """

        self._internal_notes = internal_notes

    @property
    def tags(self):
        """Gets the tags of this Ticket.  # noqa: E501


        :return: The tags of this Ticket.  # noqa: E501
        :rtype: list[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Ticket.


        :param tags: The tags of this Ticket.  # noqa: E501
        :type: list[int]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Ticket.  # noqa: E501


        :return: The title of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Ticket.


        :param title: The title of this Ticket.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 200):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def issue(self):
        """Gets the issue of this Ticket.  # noqa: E501


        :return: The issue of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this Ticket.


        :param issue: The issue of this Ticket.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and issue is None:
            raise ValueError("Invalid value for `issue`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                issue is not None and len(issue) < 1):
            raise ValueError("Invalid value for `issue`, length must be greater than or equal to `1`")  # noqa: E501

        self._issue = issue

    @property
    def resolution(self):
        """Gets the resolution of this Ticket.  # noqa: E501


        :return: The resolution of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Ticket.


        :param resolution: The resolution of this Ticket.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                resolution is not None and len(resolution) < 1):
            raise ValueError("Invalid value for `resolution`, length must be greater than or equal to `1`")  # noqa: E501

        self._resolution = resolution

    @property
    def identifier(self):
        """Gets the identifier of this Ticket.  # noqa: E501


        :return: The identifier of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Ticket.


        :param identifier: The identifier of this Ticket.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def messages(self):
        """Gets the messages of this Ticket.  # noqa: E501


        :return: The messages of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Ticket.


        :param messages: The messages of this Ticket.  # noqa: E501
        :type: str
        """

        self._messages = messages

    @property
    def created_at(self):
        """Gets the created_at of this Ticket.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Ticket.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Ticket.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Ticket.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Ticket.  # noqa: E501


        :return: The created_by of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Ticket.


        :param created_by: The created_by of this Ticket.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def files(self):
        """Gets the files of this Ticket.  # noqa: E501


        :return: The files of this Ticket.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Ticket.


        :param files: The files of this Ticket.  # noqa: E501
        :type: list[str]
        """

        self._files = files

    @property
    def attachments(self):
        """Gets the attachments of this Ticket.  # noqa: E501


        :return: The attachments of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Ticket.


        :param attachments: The attachments of this Ticket.  # noqa: E501
        :type: str
        """

        self._attachments = attachments

    @property
    def can_edit(self):
        """Gets the can_edit of this Ticket.  # noqa: E501


        :return: The can_edit of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this Ticket.


        :param can_edit: The can_edit of this Ticket.  # noqa: E501
        :type: str
        """

        self._can_edit = can_edit

    @property
    def can_delete_before(self):
        """Gets the can_delete_before of this Ticket.  # noqa: E501


        :return: The can_delete_before of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._can_delete_before

    @can_delete_before.setter
    def can_delete_before(self, can_delete_before):
        """Sets the can_delete_before of this Ticket.


        :param can_delete_before: The can_delete_before of this Ticket.  # noqa: E501
        :type: str
        """

        self._can_delete_before = can_delete_before

    @property
    def client_online(self):
        """Gets the client_online of this Ticket.  # noqa: E501


        :return: The client_online of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._client_online

    @client_online.setter
    def client_online(self, client_online):
        """Sets the client_online of this Ticket.


        :param client_online: The client_online of this Ticket.  # noqa: E501
        :type: str
        """

        self._client_online = client_online

    @property
    def queue_name(self):
        """Gets the queue_name of this Ticket.  # noqa: E501


        :return: The queue_name of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._queue_name

    @queue_name.setter
    def queue_name(self, queue_name):
        """Sets the queue_name of this Ticket.


        :param queue_name: The queue_name of this Ticket.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                queue_name is not None and len(queue_name) < 1):
            raise ValueError("Invalid value for `queue_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._queue_name = queue_name

    @property
    def modified_at(self):
        """Gets the modified_at of this Ticket.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Ticket.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Ticket.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Ticket.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def can_change_owner(self):
        """Gets the can_change_owner of this Ticket.  # noqa: E501


        :return: The can_change_owner of this Ticket.  # noqa: E501
        :rtype: str
        """
        return self._can_change_owner

    @can_change_owner.setter
    def can_change_owner(self, can_change_owner):
        """Sets the can_change_owner of this Ticket.


        :param can_change_owner: The can_change_owner of this Ticket.  # noqa: E501
        :type: str
        """

        self._can_change_owner = can_change_owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ticket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ticket):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ticket):
            return True

        return self.to_dict() != other.to_dict()
