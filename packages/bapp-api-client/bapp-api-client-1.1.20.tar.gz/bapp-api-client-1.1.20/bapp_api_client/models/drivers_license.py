# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class DriversLicense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'release_date': 'date',
        'expiration_date': 'date',
        'issued_by': 'str',
        'permit_number': 'str',
        'categories': 'list[DriversLicenseCategory]'
    }

    attribute_map = {
        'id': 'id',
        'release_date': 'release_date',
        'expiration_date': 'expiration_date',
        'issued_by': 'issued_by',
        'permit_number': 'permit_number',
        'categories': 'categories'
    }

    def __init__(self, id=None, release_date=None, expiration_date=None, issued_by=None, permit_number=None, categories=None, _configuration=None):  # noqa: E501
        """DriversLicense - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._release_date = None
        self._expiration_date = None
        self._issued_by = None
        self._permit_number = None
        self._categories = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.release_date = release_date
        self.expiration_date = expiration_date
        self.issued_by = issued_by
        self.permit_number = permit_number
        self.categories = categories

    @property
    def id(self):
        """Gets the id of this DriversLicense.  # noqa: E501


        :return: The id of this DriversLicense.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DriversLicense.


        :param id: The id of this DriversLicense.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def release_date(self):
        """Gets the release_date of this DriversLicense.  # noqa: E501


        :return: The release_date of this DriversLicense.  # noqa: E501
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this DriversLicense.


        :param release_date: The release_date of this DriversLicense.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")  # noqa: E501

        self._release_date = release_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DriversLicense.  # noqa: E501


        :return: The expiration_date of this DriversLicense.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DriversLicense.


        :param expiration_date: The expiration_date of this DriversLicense.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    @property
    def issued_by(self):
        """Gets the issued_by of this DriversLicense.  # noqa: E501


        :return: The issued_by of this DriversLicense.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this DriversLicense.


        :param issued_by: The issued_by of this DriversLicense.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and issued_by is None:
            raise ValueError("Invalid value for `issued_by`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                issued_by is not None and len(issued_by) > 200):
            raise ValueError("Invalid value for `issued_by`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                issued_by is not None and len(issued_by) < 1):
            raise ValueError("Invalid value for `issued_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._issued_by = issued_by

    @property
    def permit_number(self):
        """Gets the permit_number of this DriversLicense.  # noqa: E501


        :return: The permit_number of this DriversLicense.  # noqa: E501
        :rtype: str
        """
        return self._permit_number

    @permit_number.setter
    def permit_number(self, permit_number):
        """Sets the permit_number of this DriversLicense.


        :param permit_number: The permit_number of this DriversLicense.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and permit_number is None:
            raise ValueError("Invalid value for `permit_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                permit_number is not None and len(permit_number) > 50):
            raise ValueError("Invalid value for `permit_number`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                permit_number is not None and len(permit_number) < 1):
            raise ValueError("Invalid value for `permit_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._permit_number = permit_number

    @property
    def categories(self):
        """Gets the categories of this DriversLicense.  # noqa: E501


        :return: The categories of this DriversLicense.  # noqa: E501
        :rtype: list[DriversLicenseCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this DriversLicense.


        :param categories: The categories of this DriversLicense.  # noqa: E501
        :type: list[DriversLicenseCategory]
        """
        if self._configuration.client_side_validation and categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DriversLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriversLicense):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriversLicense):
            return True

        return self.to_dict() != other.to_dict()
