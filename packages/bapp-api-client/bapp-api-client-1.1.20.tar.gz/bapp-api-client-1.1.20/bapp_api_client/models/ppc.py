# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PPC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'product': 'int',
        'qty_estimated': 'str',
        'qty_consumed': 'str',
        'updated_at': 'datetime',
        'updated_by': 'int',
        'price': 'str'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'qty_estimated': 'qty_estimated',
        'qty_consumed': 'qty_consumed',
        'updated_at': 'updated_at',
        'updated_by': 'updated_by',
        'price': 'price'
    }

    def __init__(self, id=None, product=None, qty_estimated=None, qty_consumed=None, updated_at=None, updated_by=None, price=None, _configuration=None):  # noqa: E501
        """PPC - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._product = None
        self._qty_estimated = None
        self._qty_consumed = None
        self._updated_at = None
        self._updated_by = None
        self._price = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.product = product
        if qty_estimated is not None:
            self.qty_estimated = qty_estimated
        if qty_consumed is not None:
            self.qty_consumed = qty_consumed
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by is not None:
            self.updated_by = updated_by
        if price is not None:
            self.price = price

    @property
    def id(self):
        """Gets the id of this PPC.  # noqa: E501


        :return: The id of this PPC.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PPC.


        :param id: The id of this PPC.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this PPC.  # noqa: E501


        :return: The product of this PPC.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this PPC.


        :param product: The product of this PPC.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def qty_estimated(self):
        """Gets the qty_estimated of this PPC.  # noqa: E501


        :return: The qty_estimated of this PPC.  # noqa: E501
        :rtype: str
        """
        return self._qty_estimated

    @qty_estimated.setter
    def qty_estimated(self, qty_estimated):
        """Sets the qty_estimated of this PPC.


        :param qty_estimated: The qty_estimated of this PPC.  # noqa: E501
        :type: str
        """

        self._qty_estimated = qty_estimated

    @property
    def qty_consumed(self):
        """Gets the qty_consumed of this PPC.  # noqa: E501


        :return: The qty_consumed of this PPC.  # noqa: E501
        :rtype: str
        """
        return self._qty_consumed

    @qty_consumed.setter
    def qty_consumed(self, qty_consumed):
        """Sets the qty_consumed of this PPC.


        :param qty_consumed: The qty_consumed of this PPC.  # noqa: E501
        :type: str
        """

        self._qty_consumed = qty_consumed

    @property
    def updated_at(self):
        """Gets the updated_at of this PPC.  # noqa: E501


        :return: The updated_at of this PPC.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PPC.


        :param updated_at: The updated_at of this PPC.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this PPC.  # noqa: E501


        :return: The updated_by of this PPC.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PPC.


        :param updated_by: The updated_by of this PPC.  # noqa: E501
        :type: int
        """

        self._updated_by = updated_by

    @property
    def price(self):
        """Gets the price of this PPC.  # noqa: E501


        :return: The price of this PPC.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PPC.


        :param price: The price of this PPC.  # noqa: E501
        :type: str
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PPC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PPC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PPC):
            return True

        return self.to_dict() != other.to_dict()
