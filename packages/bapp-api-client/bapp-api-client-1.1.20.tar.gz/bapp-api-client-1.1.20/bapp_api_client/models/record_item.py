# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class RecordItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'expeditor': 'str',
        'destinatar': 'str',
        'cui': 'str',
        'tip_marfa': 'str',
        'packed': 'bool',
        'quantity': 'int',
        'weight': 'str',
        'document_type': 'int',
        'document_number': 'str',
        'document_date': 'date',
        'received_quantity': 'int',
        'received_weight': 'str',
        'remaining_quantity': 'int',
        'remaining_weight': 'str',
        'exchange_rate': 'str',
        'value': 'str',
        'tax_name': 'str',
        'tax_percent': 'str',
        'position': 'int',
        'total_taxes': 'str',
        'formatted_position': 'str',
        'formatted_ds': 'str',
        'has_dvi': 'bool',
        'created_by': 'str',
        'modified_by': 'str',
        'parent': 'int',
        'currency': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'expeditor': 'expeditor',
        'destinatar': 'destinatar',
        'cui': 'cui',
        'tip_marfa': 'tip_marfa',
        'packed': 'packed',
        'quantity': 'quantity',
        'weight': 'weight',
        'document_type': 'document_type',
        'document_number': 'document_number',
        'document_date': 'document_date',
        'received_quantity': 'received_quantity',
        'received_weight': 'received_weight',
        'remaining_quantity': 'remaining_quantity',
        'remaining_weight': 'remaining_weight',
        'exchange_rate': 'exchange_rate',
        'value': 'value',
        'tax_name': 'tax_name',
        'tax_percent': 'tax_percent',
        'position': 'position',
        'total_taxes': 'total_taxes',
        'formatted_position': 'formatted_position',
        'formatted_ds': 'formatted_ds',
        'has_dvi': 'has_dvi',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'parent': 'parent',
        'currency': 'currency'
    }

    def __init__(self, id=None, created_at=None, modified_at=None, expeditor=None, destinatar=None, cui=None, tip_marfa=None, packed=None, quantity=None, weight=None, document_type=None, document_number=None, document_date=None, received_quantity=None, received_weight=None, remaining_quantity=None, remaining_weight=None, exchange_rate=None, value=None, tax_name=None, tax_percent=None, position=None, total_taxes=None, formatted_position=None, formatted_ds=None, has_dvi=None, created_by=None, modified_by=None, parent=None, currency=None, _configuration=None):  # noqa: E501
        """RecordItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._modified_at = None
        self._expeditor = None
        self._destinatar = None
        self._cui = None
        self._tip_marfa = None
        self._packed = None
        self._quantity = None
        self._weight = None
        self._document_type = None
        self._document_number = None
        self._document_date = None
        self._received_quantity = None
        self._received_weight = None
        self._remaining_quantity = None
        self._remaining_weight = None
        self._exchange_rate = None
        self._value = None
        self._tax_name = None
        self._tax_percent = None
        self._position = None
        self._total_taxes = None
        self._formatted_position = None
        self._formatted_ds = None
        self._has_dvi = None
        self._created_by = None
        self._modified_by = None
        self._parent = None
        self._currency = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        self.expeditor = expeditor
        self.destinatar = destinatar
        self.cui = cui
        self.tip_marfa = tip_marfa
        if packed is not None:
            self.packed = packed
        if quantity is not None:
            self.quantity = quantity
        self.weight = weight
        if document_type is not None:
            self.document_type = document_type
        self.document_number = document_number
        self.document_date = document_date
        if received_quantity is not None:
            self.received_quantity = received_quantity
        if received_weight is not None:
            self.received_weight = received_weight
        if remaining_quantity is not None:
            self.remaining_quantity = remaining_quantity
        if remaining_weight is not None:
            self.remaining_weight = remaining_weight
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if value is not None:
            self.value = value
        self.tax_name = tax_name
        if tax_percent is not None:
            self.tax_percent = tax_percent
        if position is not None:
            self.position = position
        if total_taxes is not None:
            self.total_taxes = total_taxes
        if formatted_position is not None:
            self.formatted_position = formatted_position
        if formatted_ds is not None:
            self.formatted_ds = formatted_ds
        if has_dvi is not None:
            self.has_dvi = has_dvi
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        self.parent = parent
        self.currency = currency

    @property
    def id(self):
        """Gets the id of this RecordItem.  # noqa: E501


        :return: The id of this RecordItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecordItem.


        :param id: The id of this RecordItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this RecordItem.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this RecordItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RecordItem.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this RecordItem.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this RecordItem.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this RecordItem.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this RecordItem.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this RecordItem.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def expeditor(self):
        """Gets the expeditor of this RecordItem.  # noqa: E501


        :return: The expeditor of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._expeditor

    @expeditor.setter
    def expeditor(self, expeditor):
        """Sets the expeditor of this RecordItem.


        :param expeditor: The expeditor of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and expeditor is None:
            raise ValueError("Invalid value for `expeditor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                expeditor is not None and len(expeditor) > 200):
            raise ValueError("Invalid value for `expeditor`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                expeditor is not None and len(expeditor) < 1):
            raise ValueError("Invalid value for `expeditor`, length must be greater than or equal to `1`")  # noqa: E501

        self._expeditor = expeditor

    @property
    def destinatar(self):
        """Gets the destinatar of this RecordItem.  # noqa: E501


        :return: The destinatar of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._destinatar

    @destinatar.setter
    def destinatar(self, destinatar):
        """Sets the destinatar of this RecordItem.


        :param destinatar: The destinatar of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and destinatar is None:
            raise ValueError("Invalid value for `destinatar`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                destinatar is not None and len(destinatar) > 200):
            raise ValueError("Invalid value for `destinatar`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                destinatar is not None and len(destinatar) < 1):
            raise ValueError("Invalid value for `destinatar`, length must be greater than or equal to `1`")  # noqa: E501

        self._destinatar = destinatar

    @property
    def cui(self):
        """Gets the cui of this RecordItem.  # noqa: E501


        :return: The cui of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._cui

    @cui.setter
    def cui(self, cui):
        """Sets the cui of this RecordItem.


        :param cui: The cui of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cui is None:
            raise ValueError("Invalid value for `cui`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cui is not None and len(cui) > 24):
            raise ValueError("Invalid value for `cui`, length must be less than or equal to `24`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cui is not None and len(cui) < 1):
            raise ValueError("Invalid value for `cui`, length must be greater than or equal to `1`")  # noqa: E501

        self._cui = cui

    @property
    def tip_marfa(self):
        """Gets the tip_marfa of this RecordItem.  # noqa: E501


        :return: The tip_marfa of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._tip_marfa

    @tip_marfa.setter
    def tip_marfa(self, tip_marfa):
        """Sets the tip_marfa of this RecordItem.


        :param tip_marfa: The tip_marfa of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tip_marfa is None:
            raise ValueError("Invalid value for `tip_marfa`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tip_marfa is not None and len(tip_marfa) > 200):
            raise ValueError("Invalid value for `tip_marfa`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tip_marfa is not None and len(tip_marfa) < 1):
            raise ValueError("Invalid value for `tip_marfa`, length must be greater than or equal to `1`")  # noqa: E501

        self._tip_marfa = tip_marfa

    @property
    def packed(self):
        """Gets the packed of this RecordItem.  # noqa: E501


        :return: The packed of this RecordItem.  # noqa: E501
        :rtype: bool
        """
        return self._packed

    @packed.setter
    def packed(self, packed):
        """Sets the packed of this RecordItem.


        :param packed: The packed of this RecordItem.  # noqa: E501
        :type: bool
        """

        self._packed = packed

    @property
    def quantity(self):
        """Gets the quantity of this RecordItem.  # noqa: E501


        :return: The quantity of this RecordItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RecordItem.


        :param quantity: The quantity of this RecordItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                quantity is not None and quantity > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                quantity is not None and quantity < 0):  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quantity = quantity

    @property
    def weight(self):
        """Gets the weight of this RecordItem.  # noqa: E501


        :return: The weight of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RecordItem.


        :param weight: The weight of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def document_type(self):
        """Gets the document_type of this RecordItem.  # noqa: E501


        :return: The document_type of this RecordItem.  # noqa: E501
        :rtype: int
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this RecordItem.


        :param document_type: The document_type of this RecordItem.  # noqa: E501
        :type: int
        """

        self._document_type = document_type

    @property
    def document_number(self):
        """Gets the document_number of this RecordItem.  # noqa: E501


        :return: The document_number of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this RecordItem.


        :param document_number: The document_number of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) > 100):
            raise ValueError("Invalid value for `document_number`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) < 1):
            raise ValueError("Invalid value for `document_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._document_number = document_number

    @property
    def document_date(self):
        """Gets the document_date of this RecordItem.  # noqa: E501


        :return: The document_date of this RecordItem.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this RecordItem.


        :param document_date: The document_date of this RecordItem.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and document_date is None:
            raise ValueError("Invalid value for `document_date`, must not be `None`")  # noqa: E501

        self._document_date = document_date

    @property
    def received_quantity(self):
        """Gets the received_quantity of this RecordItem.  # noqa: E501


        :return: The received_quantity of this RecordItem.  # noqa: E501
        :rtype: int
        """
        return self._received_quantity

    @received_quantity.setter
    def received_quantity(self, received_quantity):
        """Sets the received_quantity of this RecordItem.


        :param received_quantity: The received_quantity of this RecordItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                received_quantity is not None and received_quantity > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `received_quantity`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                received_quantity is not None and received_quantity < 0):  # noqa: E501
            raise ValueError("Invalid value for `received_quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._received_quantity = received_quantity

    @property
    def received_weight(self):
        """Gets the received_weight of this RecordItem.  # noqa: E501


        :return: The received_weight of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._received_weight

    @received_weight.setter
    def received_weight(self, received_weight):
        """Sets the received_weight of this RecordItem.


        :param received_weight: The received_weight of this RecordItem.  # noqa: E501
        :type: str
        """

        self._received_weight = received_weight

    @property
    def remaining_quantity(self):
        """Gets the remaining_quantity of this RecordItem.  # noqa: E501


        :return: The remaining_quantity of this RecordItem.  # noqa: E501
        :rtype: int
        """
        return self._remaining_quantity

    @remaining_quantity.setter
    def remaining_quantity(self, remaining_quantity):
        """Sets the remaining_quantity of this RecordItem.


        :param remaining_quantity: The remaining_quantity of this RecordItem.  # noqa: E501
        :type: int
        """

        self._remaining_quantity = remaining_quantity

    @property
    def remaining_weight(self):
        """Gets the remaining_weight of this RecordItem.  # noqa: E501


        :return: The remaining_weight of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._remaining_weight

    @remaining_weight.setter
    def remaining_weight(self, remaining_weight):
        """Sets the remaining_weight of this RecordItem.


        :param remaining_weight: The remaining_weight of this RecordItem.  # noqa: E501
        :type: str
        """

        self._remaining_weight = remaining_weight

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this RecordItem.  # noqa: E501


        :return: The exchange_rate of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this RecordItem.


        :param exchange_rate: The exchange_rate of this RecordItem.  # noqa: E501
        :type: str
        """

        self._exchange_rate = exchange_rate

    @property
    def value(self):
        """Gets the value of this RecordItem.  # noqa: E501


        :return: The value of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RecordItem.


        :param value: The value of this RecordItem.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def tax_name(self):
        """Gets the tax_name of this RecordItem.  # noqa: E501


        :return: The tax_name of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this RecordItem.


        :param tax_name: The tax_name of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tax_name is None:
            raise ValueError("Invalid value for `tax_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tax_name is not None and len(tax_name) > 200):
            raise ValueError("Invalid value for `tax_name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tax_name is not None and len(tax_name) < 1):
            raise ValueError("Invalid value for `tax_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._tax_name = tax_name

    @property
    def tax_percent(self):
        """Gets the tax_percent of this RecordItem.  # noqa: E501


        :return: The tax_percent of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_percent

    @tax_percent.setter
    def tax_percent(self, tax_percent):
        """Sets the tax_percent of this RecordItem.


        :param tax_percent: The tax_percent of this RecordItem.  # noqa: E501
        :type: str
        """

        self._tax_percent = tax_percent

    @property
    def position(self):
        """Gets the position of this RecordItem.  # noqa: E501


        :return: The position of this RecordItem.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this RecordItem.


        :param position: The position of this RecordItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                position is not None and position > 32767):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                position is not None and position < 0):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `0`")  # noqa: E501

        self._position = position

    @property
    def total_taxes(self):
        """Gets the total_taxes of this RecordItem.  # noqa: E501


        :return: The total_taxes of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._total_taxes

    @total_taxes.setter
    def total_taxes(self, total_taxes):
        """Sets the total_taxes of this RecordItem.


        :param total_taxes: The total_taxes of this RecordItem.  # noqa: E501
        :type: str
        """

        self._total_taxes = total_taxes

    @property
    def formatted_position(self):
        """Gets the formatted_position of this RecordItem.  # noqa: E501


        :return: The formatted_position of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._formatted_position

    @formatted_position.setter
    def formatted_position(self, formatted_position):
        """Sets the formatted_position of this RecordItem.


        :param formatted_position: The formatted_position of this RecordItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                formatted_position is not None and len(formatted_position) < 1):
            raise ValueError("Invalid value for `formatted_position`, length must be greater than or equal to `1`")  # noqa: E501

        self._formatted_position = formatted_position

    @property
    def formatted_ds(self):
        """Gets the formatted_ds of this RecordItem.  # noqa: E501


        :return: The formatted_ds of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._formatted_ds

    @formatted_ds.setter
    def formatted_ds(self, formatted_ds):
        """Sets the formatted_ds of this RecordItem.


        :param formatted_ds: The formatted_ds of this RecordItem.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                formatted_ds is not None and len(formatted_ds) < 1):
            raise ValueError("Invalid value for `formatted_ds`, length must be greater than or equal to `1`")  # noqa: E501

        self._formatted_ds = formatted_ds

    @property
    def has_dvi(self):
        """Gets the has_dvi of this RecordItem.  # noqa: E501


        :return: The has_dvi of this RecordItem.  # noqa: E501
        :rtype: bool
        """
        return self._has_dvi

    @has_dvi.setter
    def has_dvi(self, has_dvi):
        """Sets the has_dvi of this RecordItem.


        :param has_dvi: The has_dvi of this RecordItem.  # noqa: E501
        :type: bool
        """

        self._has_dvi = has_dvi

    @property
    def created_by(self):
        """Gets the created_by of this RecordItem.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RecordItem.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this RecordItem.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this RecordItem.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this RecordItem.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this RecordItem.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def parent(self):
        """Gets the parent of this RecordItem.  # noqa: E501


        :return: The parent of this RecordItem.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this RecordItem.


        :param parent: The parent of this RecordItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")  # noqa: E501

        self._parent = parent

    @property
    def currency(self):
        """Gets the currency of this RecordItem.  # noqa: E501


        :return: The currency of this RecordItem.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RecordItem.


        :param currency: The currency of this RecordItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecordItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordItem):
            return True

        return self.to_dict() != other.to_dict()
