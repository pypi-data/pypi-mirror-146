# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'datetime',
        'level': 'int',
        'unread': 'bool',
        'actor_content_type': 'str',
        'actor_id': 'str',
        'verb': 'str',
        'target_content_type': 'str',
        'target_id': 'str',
        'action_object_content_type': 'str',
        'action_object_id': 'str',
        'message': 'str',
        'company_id': 'str',
        'notification_link': 'str'
    }

    attribute_map = {
        'time': 'time',
        'level': 'level',
        'unread': 'unread',
        'actor_content_type': 'actor_content_type',
        'actor_id': 'actor_id',
        'verb': 'verb',
        'target_content_type': 'target_content_type',
        'target_id': 'target_id',
        'action_object_content_type': 'action_object_content_type',
        'action_object_id': 'action_object_id',
        'message': 'message',
        'company_id': 'company_id',
        'notification_link': 'notification_link'
    }

    def __init__(self, time=None, level=None, unread=None, actor_content_type=None, actor_id=None, verb=None, target_content_type=None, target_id=None, action_object_content_type=None, action_object_id=None, message=None, company_id=None, notification_link=None, _configuration=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._time = None
        self._level = None
        self._unread = None
        self._actor_content_type = None
        self._actor_id = None
        self._verb = None
        self._target_content_type = None
        self._target_id = None
        self._action_object_content_type = None
        self._action_object_id = None
        self._message = None
        self._company_id = None
        self._notification_link = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if level is not None:
            self.level = level
        if unread is not None:
            self.unread = unread
        if actor_content_type is not None:
            self.actor_content_type = actor_content_type
        if actor_id is not None:
            self.actor_id = actor_id
        self.verb = verb
        if target_content_type is not None:
            self.target_content_type = target_content_type
        if target_id is not None:
            self.target_id = target_id
        if action_object_content_type is not None:
            self.action_object_content_type = action_object_content_type
        if action_object_id is not None:
            self.action_object_id = action_object_id
        if message is not None:
            self.message = message
        if company_id is not None:
            self.company_id = company_id
        if notification_link is not None:
            self.notification_link = notification_link

    @property
    def time(self):
        """Gets the time of this Notification.  # noqa: E501


        :return: The time of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Notification.


        :param time: The time of this Notification.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def level(self):
        """Gets the level of this Notification.  # noqa: E501


        :return: The level of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Notification.


        :param level: The level of this Notification.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def unread(self):
        """Gets the unread of this Notification.  # noqa: E501


        :return: The unread of this Notification.  # noqa: E501
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Notification.


        :param unread: The unread of this Notification.  # noqa: E501
        :type: bool
        """

        self._unread = unread

    @property
    def actor_content_type(self):
        """Gets the actor_content_type of this Notification.  # noqa: E501


        :return: The actor_content_type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._actor_content_type

    @actor_content_type.setter
    def actor_content_type(self, actor_content_type):
        """Sets the actor_content_type of this Notification.


        :param actor_content_type: The actor_content_type of this Notification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                actor_content_type is not None and len(actor_content_type) > 100):
            raise ValueError("Invalid value for `actor_content_type`, length must be less than or equal to `100`")  # noqa: E501

        self._actor_content_type = actor_content_type

    @property
    def actor_id(self):
        """Gets the actor_id of this Notification.  # noqa: E501


        :return: The actor_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._actor_id

    @actor_id.setter
    def actor_id(self, actor_id):
        """Sets the actor_id of this Notification.


        :param actor_id: The actor_id of this Notification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                actor_id is not None and len(actor_id) > 100):
            raise ValueError("Invalid value for `actor_id`, length must be less than or equal to `100`")  # noqa: E501

        self._actor_id = actor_id

    @property
    def verb(self):
        """Gets the verb of this Notification.  # noqa: E501


        :return: The verb of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this Notification.


        :param verb: The verb of this Notification.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and verb is None:
            raise ValueError("Invalid value for `verb`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                verb is not None and len(verb) > 100):
            raise ValueError("Invalid value for `verb`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                verb is not None and len(verb) < 1):
            raise ValueError("Invalid value for `verb`, length must be greater than or equal to `1`")  # noqa: E501

        self._verb = verb

    @property
    def target_content_type(self):
        """Gets the target_content_type of this Notification.  # noqa: E501


        :return: The target_content_type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._target_content_type

    @target_content_type.setter
    def target_content_type(self, target_content_type):
        """Sets the target_content_type of this Notification.


        :param target_content_type: The target_content_type of this Notification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                target_content_type is not None and len(target_content_type) > 100):
            raise ValueError("Invalid value for `target_content_type`, length must be less than or equal to `100`")  # noqa: E501

        self._target_content_type = target_content_type

    @property
    def target_id(self):
        """Gets the target_id of this Notification.  # noqa: E501


        :return: The target_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Notification.


        :param target_id: The target_id of this Notification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                target_id is not None and len(target_id) > 100):
            raise ValueError("Invalid value for `target_id`, length must be less than or equal to `100`")  # noqa: E501

        self._target_id = target_id

    @property
    def action_object_content_type(self):
        """Gets the action_object_content_type of this Notification.  # noqa: E501


        :return: The action_object_content_type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._action_object_content_type

    @action_object_content_type.setter
    def action_object_content_type(self, action_object_content_type):
        """Sets the action_object_content_type of this Notification.


        :param action_object_content_type: The action_object_content_type of this Notification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                action_object_content_type is not None and len(action_object_content_type) > 100):
            raise ValueError("Invalid value for `action_object_content_type`, length must be less than or equal to `100`")  # noqa: E501

        self._action_object_content_type = action_object_content_type

    @property
    def action_object_id(self):
        """Gets the action_object_id of this Notification.  # noqa: E501


        :return: The action_object_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._action_object_id

    @action_object_id.setter
    def action_object_id(self, action_object_id):
        """Sets the action_object_id of this Notification.


        :param action_object_id: The action_object_id of this Notification.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                action_object_id is not None and len(action_object_id) > 100):
            raise ValueError("Invalid value for `action_object_id`, length must be less than or equal to `100`")  # noqa: E501

        self._action_object_id = action_object_id

    @property
    def message(self):
        """Gets the message of this Notification.  # noqa: E501


        :return: The message of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Notification.


        :param message: The message of this Notification.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def company_id(self):
        """Gets the company_id of this Notification.  # noqa: E501


        :return: The company_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Notification.


        :param company_id: The company_id of this Notification.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def notification_link(self):
        """Gets the notification_link of this Notification.  # noqa: E501


        :return: The notification_link of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notification_link

    @notification_link.setter
    def notification_link(self, notification_link):
        """Sets the notification_link of this Notification.


        :param notification_link: The notification_link of this Notification.  # noqa: E501
        :type: str
        """

        self._notification_link = notification_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Notification):
            return True

        return self.to_dict() != other.to_dict()
