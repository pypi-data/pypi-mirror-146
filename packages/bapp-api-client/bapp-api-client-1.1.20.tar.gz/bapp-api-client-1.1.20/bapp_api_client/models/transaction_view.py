# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class TransactionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'partner': 'int',
        'bank': 'int',
        '_date': 'date',
        'credit': 'str',
        'debit': 'str',
        'details': 'str',
        'income_type': 'str',
        'income_id': 'int',
        'invoices': 'str',
        'type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'partner': 'partner',
        'bank': 'bank',
        '_date': 'date',
        'credit': 'credit',
        'debit': 'debit',
        'details': 'details',
        'income_type': 'income_type',
        'income_id': 'income_id',
        'invoices': 'invoices',
        'type': 'type'
    }

    def __init__(self, id=None, partner=None, bank=None, _date=None, credit=None, debit=None, details=None, income_type=None, income_id=None, invoices=None, type=None, _configuration=None):  # noqa: E501
        """TransactionView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._partner = None
        self._bank = None
        self.__date = None
        self._credit = None
        self._debit = None
        self._details = None
        self._income_type = None
        self._income_id = None
        self._invoices = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if partner is not None:
            self.partner = partner
        if bank is not None:
            self.bank = bank
        self._date = _date
        self.credit = credit
        self.debit = debit
        self.details = details
        if income_type is not None:
            self.income_type = income_type
        self.income_id = income_id
        if invoices is not None:
            self.invoices = invoices
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this TransactionView.  # noqa: E501


        :return: The id of this TransactionView.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionView.


        :param id: The id of this TransactionView.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def partner(self):
        """Gets the partner of this TransactionView.  # noqa: E501


        :return: The partner of this TransactionView.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this TransactionView.


        :param partner: The partner of this TransactionView.  # noqa: E501
        :type: int
        """

        self._partner = partner

    @property
    def bank(self):
        """Gets the bank of this TransactionView.  # noqa: E501


        :return: The bank of this TransactionView.  # noqa: E501
        :rtype: int
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this TransactionView.


        :param bank: The bank of this TransactionView.  # noqa: E501
        :type: int
        """

        self._bank = bank

    @property
    def _date(self):
        """Gets the _date of this TransactionView.  # noqa: E501


        :return: The _date of this TransactionView.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TransactionView.


        :param _date: The _date of this TransactionView.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def credit(self):
        """Gets the credit of this TransactionView.  # noqa: E501


        :return: The credit of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this TransactionView.


        :param credit: The credit of this TransactionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credit is None:
            raise ValueError("Invalid value for `credit`, must not be `None`")  # noqa: E501

        self._credit = credit

    @property
    def debit(self):
        """Gets the debit of this TransactionView.  # noqa: E501


        :return: The debit of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._debit

    @debit.setter
    def debit(self, debit):
        """Sets the debit of this TransactionView.


        :param debit: The debit of this TransactionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and debit is None:
            raise ValueError("Invalid value for `debit`, must not be `None`")  # noqa: E501

        self._debit = debit

    @property
    def details(self):
        """Gets the details of this TransactionView.  # noqa: E501


        :return: The details of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this TransactionView.


        :param details: The details of this TransactionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                details is not None and len(details) < 1):
            raise ValueError("Invalid value for `details`, length must be greater than or equal to `1`")  # noqa: E501

        self._details = details

    @property
    def income_type(self):
        """Gets the income_type of this TransactionView.  # noqa: E501


        :return: The income_type of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._income_type

    @income_type.setter
    def income_type(self, income_type):
        """Sets the income_type of this TransactionView.


        :param income_type: The income_type of this TransactionView.  # noqa: E501
        :type: str
        """

        self._income_type = income_type

    @property
    def income_id(self):
        """Gets the income_id of this TransactionView.  # noqa: E501


        :return: The income_id of this TransactionView.  # noqa: E501
        :rtype: int
        """
        return self._income_id

    @income_id.setter
    def income_id(self, income_id):
        """Sets the income_id of this TransactionView.


        :param income_id: The income_id of this TransactionView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and income_id is None:
            raise ValueError("Invalid value for `income_id`, must not be `None`")  # noqa: E501

        self._income_id = income_id

    @property
    def invoices(self):
        """Gets the invoices of this TransactionView.  # noqa: E501


        :return: The invoices of this TransactionView.  # noqa: E501
        :rtype: str
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this TransactionView.


        :param invoices: The invoices of this TransactionView.  # noqa: E501
        :type: str
        """

        self._invoices = invoices

    @property
    def type(self):
        """Gets the type of this TransactionView.  # noqa: E501


        :return: The type of this TransactionView.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionView.


        :param type: The type of this TransactionView.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionView):
            return True

        return self.to_dict() != other.to_dict()
