# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'language': 'str',
        'country': 'str',
        'is_active': 'bool',
        'valid_email': 'bool',
        'avatar': 'str',
        'referral': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'language': 'language',
        'country': 'country',
        'is_active': 'is_active',
        'valid_email': 'valid_email',
        'avatar': 'avatar',
        'referral': 'referral'
    }

    def __init__(self, id=None, first_name=None, last_name=None, email=None, language=None, country=None, is_active=None, valid_email=None, avatar=None, referral=None, _configuration=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._language = None
        self._country = None
        self._is_active = None
        self._valid_email = None
        self._avatar = None
        self._referral = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if language is not None:
            self.language = language
        if country is not None:
            self.country = country
        if is_active is not None:
            self.is_active = is_active
        if valid_email is not None:
            self.valid_email = valid_email
        if avatar is not None:
            self.avatar = avatar
        if referral is not None:
            self.referral = referral

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Account.  # noqa: E501


        :return: The first_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Account.


        :param first_name: The first_name of this Account.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 150):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `150`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) < 1):
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Account.  # noqa: E501


        :return: The last_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Account.


        :param last_name: The last_name of this Account.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                last_name is not None and len(last_name) > 150):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `150`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_name is not None and len(last_name) < 1):
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this Account.  # noqa: E501


        :return: The email of this Account.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.


        :param email: The email of this Account.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def language(self):
        """Gets the language of this Account.  # noqa: E501


        :return: The language of this Account.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Account.


        :param language: The language of this Account.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                language is not None and len(language) > 2):
            raise ValueError("Invalid value for `language`, length must be less than or equal to `2`")  # noqa: E501

        self._language = language

    @property
    def country(self):
        """Gets the country of this Account.  # noqa: E501


        :return: The country of this Account.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Account.


        :param country: The country of this Account.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                country is not None and len(country) < 1):
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `1`")  # noqa: E501

        self._country = country

    @property
    def is_active(self):
        """Gets the is_active of this Account.  # noqa: E501


        :return: The is_active of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Account.


        :param is_active: The is_active of this Account.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def valid_email(self):
        """Gets the valid_email of this Account.  # noqa: E501


        :return: The valid_email of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._valid_email

    @valid_email.setter
    def valid_email(self, valid_email):
        """Sets the valid_email of this Account.


        :param valid_email: The valid_email of this Account.  # noqa: E501
        :type: bool
        """

        self._valid_email = valid_email

    @property
    def avatar(self):
        """Gets the avatar of this Account.  # noqa: E501


        :return: The avatar of this Account.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Account.


        :param avatar: The avatar of this Account.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def referral(self):
        """Gets the referral of this Account.  # noqa: E501


        :return: The referral of this Account.  # noqa: E501
        :rtype: str
        """
        return self._referral

    @referral.setter
    def referral(self, referral):
        """Sets the referral of this Account.


        :param referral: The referral of this Account.  # noqa: E501
        :type: str
        """

        self._referral = referral

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Account):
            return True

        return self.to_dict() != other.to_dict()
