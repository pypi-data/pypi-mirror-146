# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'billable': 'int',
        'assigned_to': 'list[int]',
        'price': 'str',
        'estimate': 'float',
        'position': 'int',
        'subtasks': 'list[str]',
        'depends_on': 'list[int]',
        'priority': 'int',
        'on_complete': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'billable': 'billable',
        'assigned_to': 'assigned_to',
        'price': 'price',
        'estimate': 'estimate',
        'position': 'position',
        'subtasks': 'subtasks',
        'depends_on': 'depends_on',
        'priority': 'priority',
        'on_complete': 'on_complete'
    }

    def __init__(self, id=None, name=None, description=None, billable=None, assigned_to=None, price=None, estimate=None, position=None, subtasks=None, depends_on=None, priority=None, on_complete=None, _configuration=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._billable = None
        self._assigned_to = None
        self._price = None
        self._estimate = None
        self._position = None
        self._subtasks = None
        self._depends_on = None
        self._priority = None
        self._on_complete = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if billable is not None:
            self.billable = billable
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if price is not None:
            self.price = price
        if estimate is not None:
            self.estimate = estimate
        if position is not None:
            self.position = position
        if subtasks is not None:
            self.subtasks = subtasks
        if depends_on is not None:
            self.depends_on = depends_on
        if priority is not None:
            self.priority = priority
        if on_complete is not None:
            self.on_complete = on_complete

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501


        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.


        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Task.  # noqa: E501


        :return: The description of this Task.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.


        :param description: The description of this Task.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def billable(self):
        """Gets the billable of this Task.  # noqa: E501


        :return: The billable of this Task.  # noqa: E501
        :rtype: int
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this Task.


        :param billable: The billable of this Task.  # noqa: E501
        :type: int
        """

        self._billable = billable

    @property
    def assigned_to(self):
        """Gets the assigned_to of this Task.  # noqa: E501


        :return: The assigned_to of this Task.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this Task.


        :param assigned_to: The assigned_to of this Task.  # noqa: E501
        :type: list[int]
        """

        self._assigned_to = assigned_to

    @property
    def price(self):
        """Gets the price of this Task.  # noqa: E501


        :return: The price of this Task.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Task.


        :param price: The price of this Task.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def estimate(self):
        """Gets the estimate of this Task.  # noqa: E501


        :return: The estimate of this Task.  # noqa: E501
        :rtype: float
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate):
        """Sets the estimate of this Task.


        :param estimate: The estimate of this Task.  # noqa: E501
        :type: float
        """

        self._estimate = estimate

    @property
    def position(self):
        """Gets the position of this Task.  # noqa: E501


        :return: The position of this Task.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Task.


        :param position: The position of this Task.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def subtasks(self):
        """Gets the subtasks of this Task.  # noqa: E501


        :return: The subtasks of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtasks

    @subtasks.setter
    def subtasks(self, subtasks):
        """Sets the subtasks of this Task.


        :param subtasks: The subtasks of this Task.  # noqa: E501
        :type: list[str]
        """

        self._subtasks = subtasks

    @property
    def depends_on(self):
        """Gets the depends_on of this Task.  # noqa: E501


        :return: The depends_on of this Task.  # noqa: E501
        :rtype: list[int]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this Task.


        :param depends_on: The depends_on of this Task.  # noqa: E501
        :type: list[int]
        """

        self._depends_on = depends_on

    @property
    def priority(self):
        """Gets the priority of this Task.  # noqa: E501


        :return: The priority of this Task.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Task.


        :param priority: The priority of this Task.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def on_complete(self):
        """Gets the on_complete of this Task.  # noqa: E501


        :return: The on_complete of this Task.  # noqa: E501
        :rtype: int
        """
        return self._on_complete

    @on_complete.setter
    def on_complete(self, on_complete):
        """Sets the on_complete of this Task.


        :param on_complete: The on_complete of this Task.  # noqa: E501
        :type: int
        """

        self._on_complete = on_complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
