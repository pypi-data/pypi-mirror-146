# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Revision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'document': 'int',
        'edition': 'str',
        'version': 'str',
        'file': 'str',
        'date_start': 'date',
        'date_stop': 'date',
        'message': 'str',
        'is_active': 'bool',
        'view_tokens': 'str'
    }

    attribute_map = {
        'id': 'id',
        'document': 'document',
        'edition': 'edition',
        'version': 'version',
        'file': 'file',
        'date_start': 'date_start',
        'date_stop': 'date_stop',
        'message': 'message',
        'is_active': 'is_active',
        'view_tokens': 'view_tokens'
    }

    def __init__(self, id=None, document=None, edition=None, version=None, file=None, date_start=None, date_stop=None, message=None, is_active=None, view_tokens=None, _configuration=None):  # noqa: E501
        """Revision - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._document = None
        self._edition = None
        self._version = None
        self._file = None
        self._date_start = None
        self._date_stop = None
        self._message = None
        self._is_active = None
        self._view_tokens = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.document = document
        if edition is not None:
            self.edition = edition
        if version is not None:
            self.version = version
        if file is not None:
            self.file = file
        self.date_start = date_start
        if date_stop is not None:
            self.date_stop = date_stop
        if message is not None:
            self.message = message
        if is_active is not None:
            self.is_active = is_active
        if view_tokens is not None:
            self.view_tokens = view_tokens

    @property
    def id(self):
        """Gets the id of this Revision.  # noqa: E501


        :return: The id of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Revision.


        :param id: The id of this Revision.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def document(self):
        """Gets the document of this Revision.  # noqa: E501


        :return: The document of this Revision.  # noqa: E501
        :rtype: int
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this Revision.


        :param document: The document of this Revision.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document

    @property
    def edition(self):
        """Gets the edition of this Revision.  # noqa: E501


        :return: The edition of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this Revision.


        :param edition: The edition of this Revision.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                edition is not None and len(edition) > 100):
            raise ValueError("Invalid value for `edition`, length must be less than or equal to `100`")  # noqa: E501

        self._edition = edition

    @property
    def version(self):
        """Gets the version of this Revision.  # noqa: E501


        :return: The version of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Revision.


        :param version: The version of this Revision.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                version is not None and len(version) > 100):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `100`")  # noqa: E501

        self._version = version

    @property
    def file(self):
        """Gets the file of this Revision.  # noqa: E501


        :return: The file of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Revision.


        :param file: The file of this Revision.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def date_start(self):
        """Gets the date_start of this Revision.  # noqa: E501


        :return: The date_start of this Revision.  # noqa: E501
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this Revision.


        :param date_start: The date_start of this Revision.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and date_start is None:
            raise ValueError("Invalid value for `date_start`, must not be `None`")  # noqa: E501

        self._date_start = date_start

    @property
    def date_stop(self):
        """Gets the date_stop of this Revision.  # noqa: E501


        :return: The date_stop of this Revision.  # noqa: E501
        :rtype: date
        """
        return self._date_stop

    @date_stop.setter
    def date_stop(self, date_stop):
        """Sets the date_stop of this Revision.


        :param date_stop: The date_stop of this Revision.  # noqa: E501
        :type: date
        """

        self._date_stop = date_stop

    @property
    def message(self):
        """Gets the message of this Revision.  # noqa: E501


        :return: The message of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Revision.


        :param message: The message of this Revision.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def is_active(self):
        """Gets the is_active of this Revision.  # noqa: E501


        :return: The is_active of this Revision.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Revision.


        :param is_active: The is_active of this Revision.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def view_tokens(self):
        """Gets the view_tokens of this Revision.  # noqa: E501


        :return: The view_tokens of this Revision.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this Revision.


        :param view_tokens: The view_tokens of this Revision.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Revision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Revision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Revision):
            return True

        return self.to_dict() != other.to_dict()
