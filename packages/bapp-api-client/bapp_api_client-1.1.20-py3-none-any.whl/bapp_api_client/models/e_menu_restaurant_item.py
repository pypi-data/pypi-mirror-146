# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EMenuRestaurantItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'restaurant': 'str',
        'product': 'int',
        'main_image': 'str',
        'active': 'bool',
        'old_price': 'str',
        'position': 'int',
        'mass': 'int',
        'mass_units': 'int',
        'allergens': 'list[str]',
        'tags': 'list[str]',
        'options': 'object',
        'related': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'restaurant': 'restaurant',
        'product': 'product',
        'main_image': 'main_image',
        'active': 'active',
        'old_price': 'old_price',
        'position': 'position',
        'mass': 'mass',
        'mass_units': 'mass_units',
        'allergens': 'allergens',
        'tags': 'tags',
        'options': 'options',
        'related': 'related'
    }

    def __init__(self, id=None, restaurant=None, product=None, main_image=None, active=None, old_price=None, position=None, mass=None, mass_units=None, allergens=None, tags=None, options=None, related=None, _configuration=None):  # noqa: E501
        """EMenuRestaurantItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._restaurant = None
        self._product = None
        self._main_image = None
        self._active = None
        self._old_price = None
        self._position = None
        self._mass = None
        self._mass_units = None
        self._allergens = None
        self._tags = None
        self._options = None
        self._related = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.restaurant = restaurant
        self.product = product
        if main_image is not None:
            self.main_image = main_image
        if active is not None:
            self.active = active
        if old_price is not None:
            self.old_price = old_price
        if position is not None:
            self.position = position
        if mass is not None:
            self.mass = mass
        if mass_units is not None:
            self.mass_units = mass_units
        self.allergens = allergens
        self.tags = tags
        if options is not None:
            self.options = options
        if related is not None:
            self.related = related

    @property
    def id(self):
        """Gets the id of this EMenuRestaurantItem.  # noqa: E501


        :return: The id of this EMenuRestaurantItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EMenuRestaurantItem.


        :param id: The id of this EMenuRestaurantItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def restaurant(self):
        """Gets the restaurant of this EMenuRestaurantItem.  # noqa: E501


        :return: The restaurant of this EMenuRestaurantItem.  # noqa: E501
        :rtype: str
        """
        return self._restaurant

    @restaurant.setter
    def restaurant(self, restaurant):
        """Sets the restaurant of this EMenuRestaurantItem.


        :param restaurant: The restaurant of this EMenuRestaurantItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and restaurant is None:
            raise ValueError("Invalid value for `restaurant`, must not be `None`")  # noqa: E501

        self._restaurant = restaurant

    @property
    def product(self):
        """Gets the product of this EMenuRestaurantItem.  # noqa: E501


        :return: The product of this EMenuRestaurantItem.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this EMenuRestaurantItem.


        :param product: The product of this EMenuRestaurantItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def main_image(self):
        """Gets the main_image of this EMenuRestaurantItem.  # noqa: E501


        :return: The main_image of this EMenuRestaurantItem.  # noqa: E501
        :rtype: str
        """
        return self._main_image

    @main_image.setter
    def main_image(self, main_image):
        """Sets the main_image of this EMenuRestaurantItem.


        :param main_image: The main_image of this EMenuRestaurantItem.  # noqa: E501
        :type: str
        """

        self._main_image = main_image

    @property
    def active(self):
        """Gets the active of this EMenuRestaurantItem.  # noqa: E501


        :return: The active of this EMenuRestaurantItem.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EMenuRestaurantItem.


        :param active: The active of this EMenuRestaurantItem.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def old_price(self):
        """Gets the old_price of this EMenuRestaurantItem.  # noqa: E501


        :return: The old_price of this EMenuRestaurantItem.  # noqa: E501
        :rtype: str
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this EMenuRestaurantItem.


        :param old_price: The old_price of this EMenuRestaurantItem.  # noqa: E501
        :type: str
        """

        self._old_price = old_price

    @property
    def position(self):
        """Gets the position of this EMenuRestaurantItem.  # noqa: E501


        :return: The position of this EMenuRestaurantItem.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EMenuRestaurantItem.


        :param position: The position of this EMenuRestaurantItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                position is not None and position > 32767):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                position is not None and position < 0):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `0`")  # noqa: E501

        self._position = position

    @property
    def mass(self):
        """Gets the mass of this EMenuRestaurantItem.  # noqa: E501


        :return: The mass of this EMenuRestaurantItem.  # noqa: E501
        :rtype: int
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this EMenuRestaurantItem.


        :param mass: The mass of this EMenuRestaurantItem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                mass is not None and mass > 32767):  # noqa: E501
            raise ValueError("Invalid value for `mass`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mass is not None and mass < 0):  # noqa: E501
            raise ValueError("Invalid value for `mass`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mass = mass

    @property
    def mass_units(self):
        """Gets the mass_units of this EMenuRestaurantItem.  # noqa: E501


        :return: The mass_units of this EMenuRestaurantItem.  # noqa: E501
        :rtype: int
        """
        return self._mass_units

    @mass_units.setter
    def mass_units(self, mass_units):
        """Sets the mass_units of this EMenuRestaurantItem.


        :param mass_units: The mass_units of this EMenuRestaurantItem.  # noqa: E501
        :type: int
        """

        self._mass_units = mass_units

    @property
    def allergens(self):
        """Gets the allergens of this EMenuRestaurantItem.  # noqa: E501


        :return: The allergens of this EMenuRestaurantItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._allergens

    @allergens.setter
    def allergens(self, allergens):
        """Sets the allergens of this EMenuRestaurantItem.


        :param allergens: The allergens of this EMenuRestaurantItem.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and allergens is None:
            raise ValueError("Invalid value for `allergens`, must not be `None`")  # noqa: E501
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(allergens).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `allergens` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allergens) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allergens = allergens

    @property
    def tags(self):
        """Gets the tags of this EMenuRestaurantItem.  # noqa: E501


        :return: The tags of this EMenuRestaurantItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EMenuRestaurantItem.


        :param tags: The tags of this EMenuRestaurantItem.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(tags).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `tags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(tags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._tags = tags

    @property
    def options(self):
        """Gets the options of this EMenuRestaurantItem.  # noqa: E501


        :return: The options of this EMenuRestaurantItem.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EMenuRestaurantItem.


        :param options: The options of this EMenuRestaurantItem.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def related(self):
        """Gets the related of this EMenuRestaurantItem.  # noqa: E501


        :return: The related of this EMenuRestaurantItem.  # noqa: E501
        :rtype: list[int]
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this EMenuRestaurantItem.


        :param related: The related of this EMenuRestaurantItem.  # noqa: E501
        :type: list[int]
        """

        self._related = related

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EMenuRestaurantItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMenuRestaurantItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMenuRestaurantItem):
            return True

        return self.to_dict() != other.to_dict()
