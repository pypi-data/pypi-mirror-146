# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class LoginUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'password': 'str',
        'totp': 'str',
        'token': 'str',
        'jwt_token': 'object'
    }

    attribute_map = {
        'email': 'email',
        'password': 'password',
        'totp': 'totp',
        'token': 'token',
        'jwt_token': 'jwt_token'
    }

    def __init__(self, email=None, password=None, totp=None, token=None, jwt_token=None, _configuration=None):  # noqa: E501
        """LoginUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email = None
        self._password = None
        self._totp = None
        self._token = None
        self._jwt_token = None
        self.discriminator = None

        self.email = email
        self.password = password
        if totp is not None:
            self.totp = totp
        if token is not None:
            self.token = token
        if jwt_token is not None:
            self.jwt_token = jwt_token

    @property
    def email(self):
        """Gets the email of this LoginUser.  # noqa: E501


        :return: The email of this LoginUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LoginUser.


        :param email: The email of this LoginUser.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this LoginUser.  # noqa: E501


        :return: The password of this LoginUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginUser.


        :param password: The password of this LoginUser.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 1):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    @property
    def totp(self):
        """Gets the totp of this LoginUser.  # noqa: E501


        :return: The totp of this LoginUser.  # noqa: E501
        :rtype: str
        """
        return self._totp

    @totp.setter
    def totp(self, totp):
        """Sets the totp of this LoginUser.


        :param totp: The totp of this LoginUser.  # noqa: E501
        :type: str
        """

        self._totp = totp

    @property
    def token(self):
        """Gets the token of this LoginUser.  # noqa: E501


        :return: The token of this LoginUser.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LoginUser.


        :param token: The token of this LoginUser.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                token is not None and len(token) < 1):
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `1`")  # noqa: E501

        self._token = token

    @property
    def jwt_token(self):
        """Gets the jwt_token of this LoginUser.  # noqa: E501


        :return: The jwt_token of this LoginUser.  # noqa: E501
        :rtype: object
        """
        return self._jwt_token

    @jwt_token.setter
    def jwt_token(self, jwt_token):
        """Sets the jwt_token of this LoginUser.


        :param jwt_token: The jwt_token of this LoginUser.  # noqa: E501
        :type: object
        """

        self._jwt_token = jwt_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoginUser):
            return True

        return self.to_dict() != other.to_dict()
