# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CashBalanceMovement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'datetime',
        'document_number': 'str',
        'document_description': 'str',
        'currency': 'str',
        'value': 'str',
        'balance_after_value': 'str',
        'company_balance_after_value': 'str',
        'employee_id': 'int',
        'employee_name': 'str',
        'location_id': 'int',
        'location_name': 'str'
    }

    attribute_map = {
        'time': 'time',
        'document_number': 'document_number',
        'document_description': 'document_description',
        'currency': 'currency',
        'value': 'value',
        'balance_after_value': 'balance_after_value',
        'company_balance_after_value': 'company_balance_after_value',
        'employee_id': 'employee_id',
        'employee_name': 'employee_name',
        'location_id': 'location_id',
        'location_name': 'location_name'
    }

    def __init__(self, time=None, document_number=None, document_description=None, currency=None, value=None, balance_after_value=None, company_balance_after_value=None, employee_id=None, employee_name=None, location_id=None, location_name=None, _configuration=None):  # noqa: E501
        """CashBalanceMovement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._time = None
        self._document_number = None
        self._document_description = None
        self._currency = None
        self._value = None
        self._balance_after_value = None
        self._company_balance_after_value = None
        self._employee_id = None
        self._employee_name = None
        self._location_id = None
        self._location_name = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if document_number is not None:
            self.document_number = document_number
        if document_description is not None:
            self.document_description = document_description
        if currency is not None:
            self.currency = currency
        if value is not None:
            self.value = value
        if balance_after_value is not None:
            self.balance_after_value = balance_after_value
        if company_balance_after_value is not None:
            self.company_balance_after_value = company_balance_after_value
        if employee_id is not None:
            self.employee_id = employee_id
        if employee_name is not None:
            self.employee_name = employee_name
        if location_id is not None:
            self.location_id = location_id
        if location_name is not None:
            self.location_name = location_name

    @property
    def time(self):
        """Gets the time of this CashBalanceMovement.  # noqa: E501


        :return: The time of this CashBalanceMovement.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CashBalanceMovement.


        :param time: The time of this CashBalanceMovement.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def document_number(self):
        """Gets the document_number of this CashBalanceMovement.  # noqa: E501


        :return: The document_number of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this CashBalanceMovement.


        :param document_number: The document_number of this CashBalanceMovement.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) > 200):
            raise ValueError("Invalid value for `document_number`, length must be less than or equal to `200`")  # noqa: E501

        self._document_number = document_number

    @property
    def document_description(self):
        """Gets the document_description of this CashBalanceMovement.  # noqa: E501


        :return: The document_description of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._document_description

    @document_description.setter
    def document_description(self, document_description):
        """Sets the document_description of this CashBalanceMovement.


        :param document_description: The document_description of this CashBalanceMovement.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                document_description is not None and len(document_description) > 200):
            raise ValueError("Invalid value for `document_description`, length must be less than or equal to `200`")  # noqa: E501

        self._document_description = document_description

    @property
    def currency(self):
        """Gets the currency of this CashBalanceMovement.  # noqa: E501


        :return: The currency of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CashBalanceMovement.


        :param currency: The currency of this CashBalanceMovement.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                currency is not None and len(currency) > 3):
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def value(self):
        """Gets the value of this CashBalanceMovement.  # noqa: E501


        :return: The value of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CashBalanceMovement.


        :param value: The value of this CashBalanceMovement.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def balance_after_value(self):
        """Gets the balance_after_value of this CashBalanceMovement.  # noqa: E501


        :return: The balance_after_value of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._balance_after_value

    @balance_after_value.setter
    def balance_after_value(self, balance_after_value):
        """Sets the balance_after_value of this CashBalanceMovement.


        :param balance_after_value: The balance_after_value of this CashBalanceMovement.  # noqa: E501
        :type: str
        """

        self._balance_after_value = balance_after_value

    @property
    def company_balance_after_value(self):
        """Gets the company_balance_after_value of this CashBalanceMovement.  # noqa: E501


        :return: The company_balance_after_value of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._company_balance_after_value

    @company_balance_after_value.setter
    def company_balance_after_value(self, company_balance_after_value):
        """Sets the company_balance_after_value of this CashBalanceMovement.


        :param company_balance_after_value: The company_balance_after_value of this CashBalanceMovement.  # noqa: E501
        :type: str
        """

        self._company_balance_after_value = company_balance_after_value

    @property
    def employee_id(self):
        """Gets the employee_id of this CashBalanceMovement.  # noqa: E501


        :return: The employee_id of this CashBalanceMovement.  # noqa: E501
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this CashBalanceMovement.


        :param employee_id: The employee_id of this CashBalanceMovement.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                employee_id is not None and employee_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `employee_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                employee_id is not None and employee_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `employee_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._employee_id = employee_id

    @property
    def employee_name(self):
        """Gets the employee_name of this CashBalanceMovement.  # noqa: E501


        :return: The employee_name of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._employee_name

    @employee_name.setter
    def employee_name(self, employee_name):
        """Sets the employee_name of this CashBalanceMovement.


        :param employee_name: The employee_name of this CashBalanceMovement.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                employee_name is not None and len(employee_name) > 300):
            raise ValueError("Invalid value for `employee_name`, length must be less than or equal to `300`")  # noqa: E501

        self._employee_name = employee_name

    @property
    def location_id(self):
        """Gets the location_id of this CashBalanceMovement.  # noqa: E501


        :return: The location_id of this CashBalanceMovement.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this CashBalanceMovement.


        :param location_id: The location_id of this CashBalanceMovement.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                location_id is not None and location_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `location_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                location_id is not None and location_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `location_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._location_id = location_id

    @property
    def location_name(self):
        """Gets the location_name of this CashBalanceMovement.  # noqa: E501


        :return: The location_name of this CashBalanceMovement.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this CashBalanceMovement.


        :param location_name: The location_name of this CashBalanceMovement.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                location_name is not None and len(location_name) > 100):
            raise ValueError("Invalid value for `location_name`, length must be less than or equal to `100`")  # noqa: E501

        self._location_name = location_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CashBalanceMovement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashBalanceMovement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CashBalanceMovement):
            return True

        return self.to_dict() != other.to_dict()
