# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InlineResponse20049(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_providers': 'list[InlineResponse20049PaymentProviders]',
        'view_tokens': 'list[InlineResponse20049ViewTokens]',
        'snapshot': 'object'
    }

    attribute_map = {
        'payment_providers': 'payment_providers',
        'view_tokens': 'view_tokens',
        'snapshot': 'snapshot'
    }

    def __init__(self, payment_providers=None, view_tokens=None, snapshot=None, _configuration=None):  # noqa: E501
        """InlineResponse20049 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payment_providers = None
        self._view_tokens = None
        self._snapshot = None
        self.discriminator = None

        if payment_providers is not None:
            self.payment_providers = payment_providers
        if view_tokens is not None:
            self.view_tokens = view_tokens
        if snapshot is not None:
            self.snapshot = snapshot

    @property
    def payment_providers(self):
        """Gets the payment_providers of this InlineResponse20049.  # noqa: E501


        :return: The payment_providers of this InlineResponse20049.  # noqa: E501
        :rtype: list[InlineResponse20049PaymentProviders]
        """
        return self._payment_providers

    @payment_providers.setter
    def payment_providers(self, payment_providers):
        """Sets the payment_providers of this InlineResponse20049.


        :param payment_providers: The payment_providers of this InlineResponse20049.  # noqa: E501
        :type: list[InlineResponse20049PaymentProviders]
        """

        self._payment_providers = payment_providers

    @property
    def view_tokens(self):
        """Gets the view_tokens of this InlineResponse20049.  # noqa: E501


        :return: The view_tokens of this InlineResponse20049.  # noqa: E501
        :rtype: list[InlineResponse20049ViewTokens]
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this InlineResponse20049.


        :param view_tokens: The view_tokens of this InlineResponse20049.  # noqa: E501
        :type: list[InlineResponse20049ViewTokens]
        """

        self._view_tokens = view_tokens

    @property
    def snapshot(self):
        """Gets the snapshot of this InlineResponse20049.  # noqa: E501


        :return: The snapshot of this InlineResponse20049.  # noqa: E501
        :rtype: object
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this InlineResponse20049.


        :param snapshot: The snapshot of this InlineResponse20049.  # noqa: E501
        :type: object
        """

        self._snapshot = snapshot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20049, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20049):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20049):
            return True

        return self.to_dict() != other.to_dict()
