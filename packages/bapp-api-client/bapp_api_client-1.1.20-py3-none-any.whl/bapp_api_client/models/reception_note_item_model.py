# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ReceptionNoteItemModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'company': 'int',
        'product': 'int',
        'unit': 'str',
        'name': 'str',
        'description': 'str',
        'quantity_doc': 'str',
        'quantity': 'str',
        'code': 'str',
        'code_ean': 'str',
        'tax': 'str',
        'price': 'str',
        'subtotal': 'str',
        'tax_value': 'str',
        'total': 'str',
        'price_currency': 'str',
        'subtotal_currency': 'str',
        'tax_value_currency': 'str',
        'total_currency': 'str',
        'sale_price': 'str',
        'storno_item': 'int'
    }

    attribute_map = {
        'id': 'id',
        'company': 'company',
        'product': 'product',
        'unit': 'unit',
        'name': 'name',
        'description': 'description',
        'quantity_doc': 'quantity_doc',
        'quantity': 'quantity',
        'code': 'code',
        'code_ean': 'code_ean',
        'tax': 'tax',
        'price': 'price',
        'subtotal': 'subtotal',
        'tax_value': 'tax_value',
        'total': 'total',
        'price_currency': 'price_currency',
        'subtotal_currency': 'subtotal_currency',
        'tax_value_currency': 'tax_value_currency',
        'total_currency': 'total_currency',
        'sale_price': 'sale_price',
        'storno_item': 'storno_item'
    }

    def __init__(self, id=None, company=None, product=None, unit=None, name=None, description=None, quantity_doc=None, quantity=None, code=None, code_ean=None, tax=None, price=None, subtotal=None, tax_value=None, total=None, price_currency=None, subtotal_currency=None, tax_value_currency=None, total_currency=None, sale_price=None, storno_item=None, _configuration=None):  # noqa: E501
        """ReceptionNoteItemModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._company = None
        self._product = None
        self._unit = None
        self._name = None
        self._description = None
        self._quantity_doc = None
        self._quantity = None
        self._code = None
        self._code_ean = None
        self._tax = None
        self._price = None
        self._subtotal = None
        self._tax_value = None
        self._total = None
        self._price_currency = None
        self._subtotal_currency = None
        self._tax_value_currency = None
        self._total_currency = None
        self._sale_price = None
        self._storno_item = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if company is not None:
            self.company = company
        self.product = product
        if unit is not None:
            self.unit = unit
        self.name = name
        if description is not None:
            self.description = description
        self.quantity_doc = quantity_doc
        self.quantity = quantity
        if code is not None:
            self.code = code
        if code_ean is not None:
            self.code_ean = code_ean
        if tax is not None:
            self.tax = tax
        if price is not None:
            self.price = price
        if subtotal is not None:
            self.subtotal = subtotal
        if tax_value is not None:
            self.tax_value = tax_value
        if total is not None:
            self.total = total
        self.price_currency = price_currency
        if subtotal_currency is not None:
            self.subtotal_currency = subtotal_currency
        if tax_value_currency is not None:
            self.tax_value_currency = tax_value_currency
        if total_currency is not None:
            self.total_currency = total_currency
        if sale_price is not None:
            self.sale_price = sale_price
        if storno_item is not None:
            self.storno_item = storno_item

    @property
    def id(self):
        """Gets the id of this ReceptionNoteItemModel.  # noqa: E501


        :return: The id of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReceptionNoteItemModel.


        :param id: The id of this ReceptionNoteItemModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def company(self):
        """Gets the company of this ReceptionNoteItemModel.  # noqa: E501

        Firma care deține această înregistrare.  # noqa: E501

        :return: The company of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: int
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ReceptionNoteItemModel.

        Firma care deține această înregistrare.  # noqa: E501

        :param company: The company of this ReceptionNoteItemModel.  # noqa: E501
        :type: int
        """

        self._company = company

    @property
    def product(self):
        """Gets the product of this ReceptionNoteItemModel.  # noqa: E501


        :return: The product of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ReceptionNoteItemModel.


        :param product: The product of this ReceptionNoteItemModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def unit(self):
        """Gets the unit of this ReceptionNoteItemModel.  # noqa: E501


        :return: The unit of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ReceptionNoteItemModel.


        :param unit: The unit of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                unit is not None and len(unit) < 1):
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")  # noqa: E501

        self._unit = unit

    @property
    def name(self):
        """Gets the name of this ReceptionNoteItemModel.  # noqa: E501


        :return: The name of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReceptionNoteItemModel.


        :param name: The name of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ReceptionNoteItemModel.  # noqa: E501


        :return: The description of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReceptionNoteItemModel.


        :param description: The description of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity_doc(self):
        """Gets the quantity_doc of this ReceptionNoteItemModel.  # noqa: E501


        :return: The quantity_doc of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._quantity_doc

    @quantity_doc.setter
    def quantity_doc(self, quantity_doc):
        """Sets the quantity_doc of this ReceptionNoteItemModel.


        :param quantity_doc: The quantity_doc of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and quantity_doc is None:
            raise ValueError("Invalid value for `quantity_doc`, must not be `None`")  # noqa: E501

        self._quantity_doc = quantity_doc

    @property
    def quantity(self):
        """Gets the quantity of this ReceptionNoteItemModel.  # noqa: E501


        :return: The quantity of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ReceptionNoteItemModel.


        :param quantity: The quantity of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def code(self):
        """Gets the code of this ReceptionNoteItemModel.  # noqa: E501


        :return: The code of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ReceptionNoteItemModel.


        :param code: The code of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def code_ean(self):
        """Gets the code_ean of this ReceptionNoteItemModel.  # noqa: E501


        :return: The code_ean of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._code_ean

    @code_ean.setter
    def code_ean(self, code_ean):
        """Sets the code_ean of this ReceptionNoteItemModel.


        :param code_ean: The code_ean of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._code_ean = code_ean

    @property
    def tax(self):
        """Gets the tax of this ReceptionNoteItemModel.  # noqa: E501

        Procentaj TVA, aplicat dacă este plătitor de TVA.  # noqa: E501

        :return: The tax of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this ReceptionNoteItemModel.

        Procentaj TVA, aplicat dacă este plătitor de TVA.  # noqa: E501

        :param tax: The tax of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._tax = tax

    @property
    def price(self):
        """Gets the price of this ReceptionNoteItemModel.  # noqa: E501

        Preț RON  # noqa: E501

        :return: The price of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ReceptionNoteItemModel.

        Preț RON  # noqa: E501

        :param price: The price of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def subtotal(self):
        """Gets the subtotal of this ReceptionNoteItemModel.  # noqa: E501

        Subtotal RON  # noqa: E501

        :return: The subtotal of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this ReceptionNoteItemModel.

        Subtotal RON  # noqa: E501

        :param subtotal: The subtotal of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._subtotal = subtotal

    @property
    def tax_value(self):
        """Gets the tax_value of this ReceptionNoteItemModel.  # noqa: E501

        TVA RON  # noqa: E501

        :return: The tax_value of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this ReceptionNoteItemModel.

        TVA RON  # noqa: E501

        :param tax_value: The tax_value of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._tax_value = tax_value

    @property
    def total(self):
        """Gets the total of this ReceptionNoteItemModel.  # noqa: E501

        Total RON  # noqa: E501

        :return: The total of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ReceptionNoteItemModel.

        Total RON  # noqa: E501

        :param total: The total of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def price_currency(self):
        """Gets the price_currency of this ReceptionNoteItemModel.  # noqa: E501

        Preț valută  # noqa: E501

        :return: The price_currency of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this ReceptionNoteItemModel.

        Preț valută  # noqa: E501

        :param price_currency: The price_currency of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and price_currency is None:
            raise ValueError("Invalid value for `price_currency`, must not be `None`")  # noqa: E501

        self._price_currency = price_currency

    @property
    def subtotal_currency(self):
        """Gets the subtotal_currency of this ReceptionNoteItemModel.  # noqa: E501

        Subtotal valută  # noqa: E501

        :return: The subtotal_currency of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._subtotal_currency

    @subtotal_currency.setter
    def subtotal_currency(self, subtotal_currency):
        """Sets the subtotal_currency of this ReceptionNoteItemModel.

        Subtotal valută  # noqa: E501

        :param subtotal_currency: The subtotal_currency of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._subtotal_currency = subtotal_currency

    @property
    def tax_value_currency(self):
        """Gets the tax_value_currency of this ReceptionNoteItemModel.  # noqa: E501

        TVA valută  # noqa: E501

        :return: The tax_value_currency of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._tax_value_currency

    @tax_value_currency.setter
    def tax_value_currency(self, tax_value_currency):
        """Sets the tax_value_currency of this ReceptionNoteItemModel.

        TVA valută  # noqa: E501

        :param tax_value_currency: The tax_value_currency of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._tax_value_currency = tax_value_currency

    @property
    def total_currency(self):
        """Gets the total_currency of this ReceptionNoteItemModel.  # noqa: E501

        Total valută  # noqa: E501

        :return: The total_currency of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._total_currency

    @total_currency.setter
    def total_currency(self, total_currency):
        """Sets the total_currency of this ReceptionNoteItemModel.

        Total valută  # noqa: E501

        :param total_currency: The total_currency of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._total_currency = total_currency

    @property
    def sale_price(self):
        """Gets the sale_price of this ReceptionNoteItemModel.  # noqa: E501

        Preț valută  # noqa: E501

        :return: The sale_price of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: str
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this ReceptionNoteItemModel.

        Preț valută  # noqa: E501

        :param sale_price: The sale_price of this ReceptionNoteItemModel.  # noqa: E501
        :type: str
        """

        self._sale_price = sale_price

    @property
    def storno_item(self):
        """Gets the storno_item of this ReceptionNoteItemModel.  # noqa: E501


        :return: The storno_item of this ReceptionNoteItemModel.  # noqa: E501
        :rtype: int
        """
        return self._storno_item

    @storno_item.setter
    def storno_item(self, storno_item):
        """Sets the storno_item of this ReceptionNoteItemModel.


        :param storno_item: The storno_item of this ReceptionNoteItemModel.  # noqa: E501
        :type: int
        """

        self._storno_item = storno_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceptionNoteItemModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceptionNoteItemModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReceptionNoteItemModel):
            return True

        return self.to_dict() != other.to_dict()
