# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class VoucherUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'identifier': 'str',
        'affiliate': 'int',
        'code': 'str',
        'amount': 'str',
        'valid_until': 'date',
        'get_short_url': 'str',
        'get_public_url': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'created_at': 'datetime',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'email': 'str',
        'status': 'int'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'affiliate': 'affiliate',
        'code': 'code',
        'amount': 'amount',
        'valid_until': 'valid_until',
        'get_short_url': 'get_short_url',
        'get_public_url': 'get_public_url',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'created_at': 'created_at',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'phone': 'phone',
        'email': 'email',
        'status': 'status'
    }

    def __init__(self, id=None, identifier=None, affiliate=None, code=None, amount=None, valid_until=None, get_short_url=None, get_public_url=None, created_by=None, modified_by=None, created_at=None, first_name=None, last_name=None, phone=None, email=None, status=None, _configuration=None):  # noqa: E501
        """VoucherUpdate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._identifier = None
        self._affiliate = None
        self._code = None
        self._amount = None
        self._valid_until = None
        self._get_short_url = None
        self._get_public_url = None
        self._created_by = None
        self._modified_by = None
        self._created_at = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._email = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if identifier is not None:
            self.identifier = identifier
        if affiliate is not None:
            self.affiliate = affiliate
        if code is not None:
            self.code = code
        if amount is not None:
            self.amount = amount
        if valid_until is not None:
            self.valid_until = valid_until
        if get_short_url is not None:
            self.get_short_url = get_short_url
        if get_public_url is not None:
            self.get_public_url = get_public_url
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if created_at is not None:
            self.created_at = created_at
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this VoucherUpdate.  # noqa: E501


        :return: The id of this VoucherUpdate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VoucherUpdate.


        :param id: The id of this VoucherUpdate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this VoucherUpdate.  # noqa: E501


        :return: The identifier of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this VoucherUpdate.


        :param identifier: The identifier of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def affiliate(self):
        """Gets the affiliate of this VoucherUpdate.  # noqa: E501


        :return: The affiliate of this VoucherUpdate.  # noqa: E501
        :rtype: int
        """
        return self._affiliate

    @affiliate.setter
    def affiliate(self, affiliate):
        """Sets the affiliate of this VoucherUpdate.


        :param affiliate: The affiliate of this VoucherUpdate.  # noqa: E501
        :type: int
        """

        self._affiliate = affiliate

    @property
    def code(self):
        """Gets the code of this VoucherUpdate.  # noqa: E501


        :return: The code of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VoucherUpdate.


        :param code: The code of this VoucherUpdate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code is not None and len(code) < 1):
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")  # noqa: E501

        self._code = code

    @property
    def amount(self):
        """Gets the amount of this VoucherUpdate.  # noqa: E501


        :return: The amount of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this VoucherUpdate.


        :param amount: The amount of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def valid_until(self):
        """Gets the valid_until of this VoucherUpdate.  # noqa: E501


        :return: The valid_until of this VoucherUpdate.  # noqa: E501
        :rtype: date
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this VoucherUpdate.


        :param valid_until: The valid_until of this VoucherUpdate.  # noqa: E501
        :type: date
        """

        self._valid_until = valid_until

    @property
    def get_short_url(self):
        """Gets the get_short_url of this VoucherUpdate.  # noqa: E501


        :return: The get_short_url of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._get_short_url

    @get_short_url.setter
    def get_short_url(self, get_short_url):
        """Sets the get_short_url of this VoucherUpdate.


        :param get_short_url: The get_short_url of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._get_short_url = get_short_url

    @property
    def get_public_url(self):
        """Gets the get_public_url of this VoucherUpdate.  # noqa: E501


        :return: The get_public_url of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._get_public_url

    @get_public_url.setter
    def get_public_url(self, get_public_url):
        """Sets the get_public_url of this VoucherUpdate.


        :param get_public_url: The get_public_url of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._get_public_url = get_public_url

    @property
    def created_by(self):
        """Gets the created_by of this VoucherUpdate.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VoucherUpdate.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this VoucherUpdate.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this VoucherUpdate.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def created_at(self):
        """Gets the created_at of this VoucherUpdate.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this VoucherUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VoucherUpdate.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this VoucherUpdate.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def first_name(self):
        """Gets the first_name of this VoucherUpdate.  # noqa: E501


        :return: The first_name of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this VoucherUpdate.


        :param first_name: The first_name of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this VoucherUpdate.  # noqa: E501


        :return: The last_name of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VoucherUpdate.


        :param last_name: The last_name of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this VoucherUpdate.  # noqa: E501


        :return: The phone of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this VoucherUpdate.


        :param phone: The phone of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this VoucherUpdate.  # noqa: E501


        :return: The email of this VoucherUpdate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VoucherUpdate.


        :param email: The email of this VoucherUpdate.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def status(self):
        """Gets the status of this VoucherUpdate.  # noqa: E501


        :return: The status of this VoucherUpdate.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VoucherUpdate.


        :param status: The status of this VoucherUpdate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                status is not None and status > 32767):  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                status is not None and status < 0):  # noqa: E501
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `0`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoucherUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoucherUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VoucherUpdate):
            return True

        return self.to_dict() != other.to_dict()
