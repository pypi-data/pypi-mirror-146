# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InlineResponse20018Transactions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'credit': 'float',
        'debit': 'float',
        'details': 'str',
        'allocated': 'float',
        'value_in_accounting_documents': 'bool'
    }

    attribute_map = {
        '_date': 'date',
        'credit': 'credit',
        'debit': 'debit',
        'details': 'details',
        'allocated': 'allocated',
        'value_in_accounting_documents': 'value_in_accounting_documents'
    }

    def __init__(self, _date=None, credit=None, debit=None, details=None, allocated=None, value_in_accounting_documents=None, _configuration=None):  # noqa: E501
        """InlineResponse20018Transactions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._credit = None
        self._debit = None
        self._details = None
        self._allocated = None
        self._value_in_accounting_documents = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if credit is not None:
            self.credit = credit
        if debit is not None:
            self.debit = debit
        if details is not None:
            self.details = details
        if allocated is not None:
            self.allocated = allocated
        if value_in_accounting_documents is not None:
            self.value_in_accounting_documents = value_in_accounting_documents

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20018Transactions.  # noqa: E501


        :return: The _date of this InlineResponse20018Transactions.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20018Transactions.


        :param _date: The _date of this InlineResponse20018Transactions.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def credit(self):
        """Gets the credit of this InlineResponse20018Transactions.  # noqa: E501


        :return: The credit of this InlineResponse20018Transactions.  # noqa: E501
        :rtype: float
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this InlineResponse20018Transactions.


        :param credit: The credit of this InlineResponse20018Transactions.  # noqa: E501
        :type: float
        """

        self._credit = credit

    @property
    def debit(self):
        """Gets the debit of this InlineResponse20018Transactions.  # noqa: E501


        :return: The debit of this InlineResponse20018Transactions.  # noqa: E501
        :rtype: float
        """
        return self._debit

    @debit.setter
    def debit(self, debit):
        """Sets the debit of this InlineResponse20018Transactions.


        :param debit: The debit of this InlineResponse20018Transactions.  # noqa: E501
        :type: float
        """

        self._debit = debit

    @property
    def details(self):
        """Gets the details of this InlineResponse20018Transactions.  # noqa: E501


        :return: The details of this InlineResponse20018Transactions.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this InlineResponse20018Transactions.


        :param details: The details of this InlineResponse20018Transactions.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def allocated(self):
        """Gets the allocated of this InlineResponse20018Transactions.  # noqa: E501


        :return: The allocated of this InlineResponse20018Transactions.  # noqa: E501
        :rtype: float
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """Sets the allocated of this InlineResponse20018Transactions.


        :param allocated: The allocated of this InlineResponse20018Transactions.  # noqa: E501
        :type: float
        """

        self._allocated = allocated

    @property
    def value_in_accounting_documents(self):
        """Gets the value_in_accounting_documents of this InlineResponse20018Transactions.  # noqa: E501


        :return: The value_in_accounting_documents of this InlineResponse20018Transactions.  # noqa: E501
        :rtype: bool
        """
        return self._value_in_accounting_documents

    @value_in_accounting_documents.setter
    def value_in_accounting_documents(self, value_in_accounting_documents):
        """Sets the value_in_accounting_documents of this InlineResponse20018Transactions.


        :param value_in_accounting_documents: The value_in_accounting_documents of this InlineResponse20018Transactions.  # noqa: E501
        :type: bool
        """

        self._value_in_accounting_documents = value_in_accounting_documents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018Transactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018Transactions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20018Transactions):
            return True

        return self.to_dict() != other.to_dict()
