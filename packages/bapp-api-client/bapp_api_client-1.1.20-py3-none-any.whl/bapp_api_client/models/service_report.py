# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ServiceReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'str',
        'partner': 'int',
        'period': 'date',
        'content_type': 'int',
        'object_id': 'int',
        'view_tokens': 'str'
    }

    attribute_map = {
        'number': 'number',
        'partner': 'partner',
        'period': 'period',
        'content_type': 'content_type',
        'object_id': 'object_id',
        'view_tokens': 'view_tokens'
    }

    def __init__(self, number=None, partner=None, period=None, content_type=None, object_id=None, view_tokens=None, _configuration=None):  # noqa: E501
        """ServiceReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._number = None
        self._partner = None
        self._period = None
        self._content_type = None
        self._object_id = None
        self._view_tokens = None
        self.discriminator = None

        if number is not None:
            self.number = number
        self.partner = partner
        if period is not None:
            self.period = period
        if content_type is not None:
            self.content_type = content_type
        if object_id is not None:
            self.object_id = object_id
        if view_tokens is not None:
            self.view_tokens = view_tokens

    @property
    def number(self):
        """Gets the number of this ServiceReport.  # noqa: E501


        :return: The number of this ServiceReport.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ServiceReport.


        :param number: The number of this ServiceReport.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                number is not None and len(number) > 100):
            raise ValueError("Invalid value for `number`, length must be less than or equal to `100`")  # noqa: E501

        self._number = number

    @property
    def partner(self):
        """Gets the partner of this ServiceReport.  # noqa: E501


        :return: The partner of this ServiceReport.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this ServiceReport.


        :param partner: The partner of this ServiceReport.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")  # noqa: E501

        self._partner = partner

    @property
    def period(self):
        """Gets the period of this ServiceReport.  # noqa: E501


        :return: The period of this ServiceReport.  # noqa: E501
        :rtype: date
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ServiceReport.


        :param period: The period of this ServiceReport.  # noqa: E501
        :type: date
        """

        self._period = period

    @property
    def content_type(self):
        """Gets the content_type of this ServiceReport.  # noqa: E501


        :return: The content_type of this ServiceReport.  # noqa: E501
        :rtype: int
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ServiceReport.


        :param content_type: The content_type of this ServiceReport.  # noqa: E501
        :type: int
        """

        self._content_type = content_type

    @property
    def object_id(self):
        """Gets the object_id of this ServiceReport.  # noqa: E501


        :return: The object_id of this ServiceReport.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ServiceReport.


        :param object_id: The object_id of this ServiceReport.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                object_id is not None and object_id > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `object_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                object_id is not None and object_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `object_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._object_id = object_id

    @property
    def view_tokens(self):
        """Gets the view_tokens of this ServiceReport.  # noqa: E501


        :return: The view_tokens of this ServiceReport.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this ServiceReport.


        :param view_tokens: The view_tokens of this ServiceReport.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceReport):
            return True

        return self.to_dict() != other.to_dict()
