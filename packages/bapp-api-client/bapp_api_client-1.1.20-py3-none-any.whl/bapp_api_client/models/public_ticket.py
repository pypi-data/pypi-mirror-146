# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PublicTicket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'int',
        'status': 'int',
        'owner': 'int',
        'resolved': 'bool',
        'closed': 'bool',
        'on_hold': 'bool',
        'title': 'str',
        'issue': 'str',
        'resolution': 'str',
        'identifier': 'str',
        'messages': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'created_by': 'str',
        'attachments': 'str',
        'queue': 'int'
    }

    attribute_map = {
        'priority': 'priority',
        'status': 'status',
        'owner': 'owner',
        'resolved': 'resolved',
        'closed': 'closed',
        'on_hold': 'on_hold',
        'title': 'title',
        'issue': 'issue',
        'resolution': 'resolution',
        'identifier': 'identifier',
        'messages': 'messages',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'created_by': 'created_by',
        'attachments': 'attachments',
        'queue': 'queue'
    }

    def __init__(self, priority=None, status=None, owner=None, resolved=None, closed=None, on_hold=None, title=None, issue=None, resolution=None, identifier=None, messages=None, created_at=None, modified_at=None, created_by=None, attachments=None, queue=None, _configuration=None):  # noqa: E501
        """PublicTicket - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._priority = None
        self._status = None
        self._owner = None
        self._resolved = None
        self._closed = None
        self._on_hold = None
        self._title = None
        self._issue = None
        self._resolution = None
        self._identifier = None
        self._messages = None
        self._created_at = None
        self._modified_at = None
        self._created_by = None
        self._attachments = None
        self._queue = None
        self.discriminator = None

        if priority is not None:
            self.priority = priority
        if status is not None:
            self.status = status
        if owner is not None:
            self.owner = owner
        if resolved is not None:
            self.resolved = resolved
        if closed is not None:
            self.closed = closed
        if on_hold is not None:
            self.on_hold = on_hold
        if title is not None:
            self.title = title
        self.issue = issue
        if resolution is not None:
            self.resolution = resolution
        if identifier is not None:
            self.identifier = identifier
        if messages is not None:
            self.messages = messages
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if created_by is not None:
            self.created_by = created_by
        if attachments is not None:
            self.attachments = attachments
        if queue is not None:
            self.queue = queue

    @property
    def priority(self):
        """Gets the priority of this PublicTicket.  # noqa: E501


        :return: The priority of this PublicTicket.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PublicTicket.


        :param priority: The priority of this PublicTicket.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this PublicTicket.  # noqa: E501


        :return: The status of this PublicTicket.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PublicTicket.


        :param status: The status of this PublicTicket.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def owner(self):
        """Gets the owner of this PublicTicket.  # noqa: E501


        :return: The owner of this PublicTicket.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this PublicTicket.


        :param owner: The owner of this PublicTicket.  # noqa: E501
        :type: int
        """

        self._owner = owner

    @property
    def resolved(self):
        """Gets the resolved of this PublicTicket.  # noqa: E501


        :return: The resolved of this PublicTicket.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this PublicTicket.


        :param resolved: The resolved of this PublicTicket.  # noqa: E501
        :type: bool
        """

        self._resolved = resolved

    @property
    def closed(self):
        """Gets the closed of this PublicTicket.  # noqa: E501


        :return: The closed of this PublicTicket.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this PublicTicket.


        :param closed: The closed of this PublicTicket.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def on_hold(self):
        """Gets the on_hold of this PublicTicket.  # noqa: E501


        :return: The on_hold of this PublicTicket.  # noqa: E501
        :rtype: bool
        """
        return self._on_hold

    @on_hold.setter
    def on_hold(self, on_hold):
        """Sets the on_hold of this PublicTicket.


        :param on_hold: The on_hold of this PublicTicket.  # noqa: E501
        :type: bool
        """

        self._on_hold = on_hold

    @property
    def title(self):
        """Gets the title of this PublicTicket.  # noqa: E501


        :return: The title of this PublicTicket.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PublicTicket.


        :param title: The title of this PublicTicket.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 200):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def issue(self):
        """Gets the issue of this PublicTicket.  # noqa: E501


        :return: The issue of this PublicTicket.  # noqa: E501
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this PublicTicket.


        :param issue: The issue of this PublicTicket.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and issue is None:
            raise ValueError("Invalid value for `issue`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                issue is not None and len(issue) < 1):
            raise ValueError("Invalid value for `issue`, length must be greater than or equal to `1`")  # noqa: E501

        self._issue = issue

    @property
    def resolution(self):
        """Gets the resolution of this PublicTicket.  # noqa: E501


        :return: The resolution of this PublicTicket.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this PublicTicket.


        :param resolution: The resolution of this PublicTicket.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def identifier(self):
        """Gets the identifier of this PublicTicket.  # noqa: E501


        :return: The identifier of this PublicTicket.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PublicTicket.


        :param identifier: The identifier of this PublicTicket.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def messages(self):
        """Gets the messages of this PublicTicket.  # noqa: E501


        :return: The messages of this PublicTicket.  # noqa: E501
        :rtype: str
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this PublicTicket.


        :param messages: The messages of this PublicTicket.  # noqa: E501
        :type: str
        """

        self._messages = messages

    @property
    def created_at(self):
        """Gets the created_at of this PublicTicket.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this PublicTicket.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PublicTicket.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this PublicTicket.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this PublicTicket.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this PublicTicket.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this PublicTicket.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this PublicTicket.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def created_by(self):
        """Gets the created_by of this PublicTicket.  # noqa: E501


        :return: The created_by of this PublicTicket.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PublicTicket.


        :param created_by: The created_by of this PublicTicket.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def attachments(self):
        """Gets the attachments of this PublicTicket.  # noqa: E501


        :return: The attachments of this PublicTicket.  # noqa: E501
        :rtype: str
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this PublicTicket.


        :param attachments: The attachments of this PublicTicket.  # noqa: E501
        :type: str
        """

        self._attachments = attachments

    @property
    def queue(self):
        """Gets the queue of this PublicTicket.  # noqa: E501


        :return: The queue of this PublicTicket.  # noqa: E501
        :rtype: int
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this PublicTicket.


        :param queue: The queue of this PublicTicket.  # noqa: E501
        :type: int
        """

        self._queue = queue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicTicket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicTicket):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicTicket):
            return True

        return self.to_dict() != other.to_dict()
