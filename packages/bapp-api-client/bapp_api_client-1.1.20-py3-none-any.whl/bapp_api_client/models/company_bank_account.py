# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanyBankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'location': 'int',
        'iban': 'str',
        'currency': 'str',
        'bank': 'str',
        'description': 'str',
        'used_on_documents': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'iban': 'iban',
        'currency': 'currency',
        'bank': 'bank',
        'description': 'description',
        'used_on_documents': 'used_on_documents'
    }

    def __init__(self, id=None, location=None, iban=None, currency=None, bank=None, description=None, used_on_documents=None, _configuration=None):  # noqa: E501
        """CompanyBankAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._location = None
        self._iban = None
        self._currency = None
        self._bank = None
        self._description = None
        self._used_on_documents = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        self.iban = iban
        self.currency = currency
        self.bank = bank
        if description is not None:
            self.description = description
        if used_on_documents is not None:
            self.used_on_documents = used_on_documents

    @property
    def id(self):
        """Gets the id of this CompanyBankAccount.  # noqa: E501


        :return: The id of this CompanyBankAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyBankAccount.


        :param id: The id of this CompanyBankAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this CompanyBankAccount.  # noqa: E501


        :return: The location of this CompanyBankAccount.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CompanyBankAccount.


        :param location: The location of this CompanyBankAccount.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def iban(self):
        """Gets the iban of this CompanyBankAccount.  # noqa: E501


        :return: The iban of this CompanyBankAccount.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this CompanyBankAccount.


        :param iban: The iban of this CompanyBankAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                iban is not None and len(iban) > 29):
            raise ValueError("Invalid value for `iban`, length must be less than or equal to `29`")  # noqa: E501
        if (self._configuration.client_side_validation and
                iban is not None and len(iban) < 1):
            raise ValueError("Invalid value for `iban`, length must be greater than or equal to `1`")  # noqa: E501

        self._iban = iban

    @property
    def currency(self):
        """Gets the currency of this CompanyBankAccount.  # noqa: E501


        :return: The currency of this CompanyBankAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CompanyBankAccount.


        :param currency: The currency of this CompanyBankAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def bank(self):
        """Gets the bank of this CompanyBankAccount.  # noqa: E501


        :return: The bank of this CompanyBankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this CompanyBankAccount.


        :param bank: The bank of this CompanyBankAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bank is None:
            raise ValueError("Invalid value for `bank`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bank is not None and len(bank) > 100):
            raise ValueError("Invalid value for `bank`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bank is not None and len(bank) < 1):
            raise ValueError("Invalid value for `bank`, length must be greater than or equal to `1`")  # noqa: E501

        self._bank = bank

    @property
    def description(self):
        """Gets the description of this CompanyBankAccount.  # noqa: E501


        :return: The description of this CompanyBankAccount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompanyBankAccount.


        :param description: The description of this CompanyBankAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def used_on_documents(self):
        """Gets the used_on_documents of this CompanyBankAccount.  # noqa: E501


        :return: The used_on_documents of this CompanyBankAccount.  # noqa: E501
        :rtype: bool
        """
        return self._used_on_documents

    @used_on_documents.setter
    def used_on_documents(self, used_on_documents):
        """Sets the used_on_documents of this CompanyBankAccount.


        :param used_on_documents: The used_on_documents of this CompanyBankAccount.  # noqa: E501
        :type: bool
        """

        self._used_on_documents = used_on_documents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyBankAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyBankAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyBankAccount):
            return True

        return self.to_dict() != other.to_dict()
