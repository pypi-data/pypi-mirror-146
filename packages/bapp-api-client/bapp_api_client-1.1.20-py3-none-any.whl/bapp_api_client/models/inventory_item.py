# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InventoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_by': 'str',
        'modified_by': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'quantity': 'str',
        'quantity_actual': 'str',
        'price': 'str',
        'price_includes_tax': 'bool',
        'total': 'str',
        'total_difference': 'str',
        'quantity_difference': 'str',
        'total_actual': 'str',
        'parent': 'int',
        'product': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'quantity': 'quantity',
        'quantity_actual': 'quantity_actual',
        'price': 'price',
        'price_includes_tax': 'price_includes_tax',
        'total': 'total',
        'total_difference': 'total_difference',
        'quantity_difference': 'quantity_difference',
        'total_actual': 'total_actual',
        'parent': 'parent',
        'product': 'product'
    }

    def __init__(self, id=None, created_by=None, modified_by=None, created_at=None, modified_at=None, quantity=None, quantity_actual=None, price=None, price_includes_tax=None, total=None, total_difference=None, quantity_difference=None, total_actual=None, parent=None, product=None, _configuration=None):  # noqa: E501
        """InventoryItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_by = None
        self._modified_by = None
        self._created_at = None
        self._modified_at = None
        self._quantity = None
        self._quantity_actual = None
        self._price = None
        self._price_includes_tax = None
        self._total = None
        self._total_difference = None
        self._quantity_difference = None
        self._total_actual = None
        self._parent = None
        self._product = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if quantity is not None:
            self.quantity = quantity
        if quantity_actual is not None:
            self.quantity_actual = quantity_actual
        if price is not None:
            self.price = price
        if price_includes_tax is not None:
            self.price_includes_tax = price_includes_tax
        if total is not None:
            self.total = total
        if total_difference is not None:
            self.total_difference = total_difference
        if quantity_difference is not None:
            self.quantity_difference = quantity_difference
        if total_actual is not None:
            self.total_actual = total_actual
        self.parent = parent
        self.product = product

    @property
    def id(self):
        """Gets the id of this InventoryItem.  # noqa: E501


        :return: The id of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InventoryItem.


        :param id: The id of this InventoryItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this InventoryItem.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InventoryItem.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this InventoryItem.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this InventoryItem.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def created_at(self):
        """Gets the created_at of this InventoryItem.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this InventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InventoryItem.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this InventoryItem.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InventoryItem.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this InventoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InventoryItem.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this InventoryItem.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def quantity(self):
        """Gets the quantity of this InventoryItem.  # noqa: E501


        :return: The quantity of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InventoryItem.


        :param quantity: The quantity of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def quantity_actual(self):
        """Gets the quantity_actual of this InventoryItem.  # noqa: E501


        :return: The quantity_actual of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._quantity_actual

    @quantity_actual.setter
    def quantity_actual(self, quantity_actual):
        """Sets the quantity_actual of this InventoryItem.


        :param quantity_actual: The quantity_actual of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._quantity_actual = quantity_actual

    @property
    def price(self):
        """Gets the price of this InventoryItem.  # noqa: E501


        :return: The price of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InventoryItem.


        :param price: The price of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def price_includes_tax(self):
        """Gets the price_includes_tax of this InventoryItem.  # noqa: E501


        :return: The price_includes_tax of this InventoryItem.  # noqa: E501
        :rtype: bool
        """
        return self._price_includes_tax

    @price_includes_tax.setter
    def price_includes_tax(self, price_includes_tax):
        """Sets the price_includes_tax of this InventoryItem.


        :param price_includes_tax: The price_includes_tax of this InventoryItem.  # noqa: E501
        :type: bool
        """

        self._price_includes_tax = price_includes_tax

    @property
    def total(self):
        """Gets the total of this InventoryItem.  # noqa: E501


        :return: The total of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InventoryItem.


        :param total: The total of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def total_difference(self):
        """Gets the total_difference of this InventoryItem.  # noqa: E501


        :return: The total_difference of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._total_difference

    @total_difference.setter
    def total_difference(self, total_difference):
        """Sets the total_difference of this InventoryItem.


        :param total_difference: The total_difference of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._total_difference = total_difference

    @property
    def quantity_difference(self):
        """Gets the quantity_difference of this InventoryItem.  # noqa: E501


        :return: The quantity_difference of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._quantity_difference

    @quantity_difference.setter
    def quantity_difference(self, quantity_difference):
        """Sets the quantity_difference of this InventoryItem.


        :param quantity_difference: The quantity_difference of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._quantity_difference = quantity_difference

    @property
    def total_actual(self):
        """Gets the total_actual of this InventoryItem.  # noqa: E501


        :return: The total_actual of this InventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._total_actual

    @total_actual.setter
    def total_actual(self, total_actual):
        """Sets the total_actual of this InventoryItem.


        :param total_actual: The total_actual of this InventoryItem.  # noqa: E501
        :type: str
        """

        self._total_actual = total_actual

    @property
    def parent(self):
        """Gets the parent of this InventoryItem.  # noqa: E501


        :return: The parent of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this InventoryItem.


        :param parent: The parent of this InventoryItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")  # noqa: E501

        self._parent = parent

    @property
    def product(self):
        """Gets the product of this InventoryItem.  # noqa: E501


        :return: The product of this InventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InventoryItem.


        :param product: The product of this InventoryItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryItem):
            return True

        return self.to_dict() != other.to_dict()
