# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CarReminder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'type': 'int',
        'type_other': 'str',
        'next_occurrence': 'date',
        'scan': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'car': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'type': 'type',
        'type_other': 'type_other',
        'next_occurrence': 'next_occurrence',
        'scan': 'scan',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'car': 'car'
    }

    def __init__(self, id=None, created_at=None, modified_at=None, type=None, type_other=None, next_occurrence=None, scan=None, created_by=None, modified_by=None, car=None, _configuration=None):  # noqa: E501
        """CarReminder - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._modified_at = None
        self._type = None
        self._type_other = None
        self._next_occurrence = None
        self._scan = None
        self._created_by = None
        self._modified_by = None
        self._car = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if type is not None:
            self.type = type
        if type_other is not None:
            self.type_other = type_other
        self.next_occurrence = next_occurrence
        if scan is not None:
            self.scan = scan
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        self.car = car

    @property
    def id(self):
        """Gets the id of this CarReminder.  # noqa: E501


        :return: The id of this CarReminder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarReminder.


        :param id: The id of this CarReminder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this CarReminder.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this CarReminder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CarReminder.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this CarReminder.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this CarReminder.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this CarReminder.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this CarReminder.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this CarReminder.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def type(self):
        """Gets the type of this CarReminder.  # noqa: E501


        :return: The type of this CarReminder.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CarReminder.


        :param type: The type of this CarReminder.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def type_other(self):
        """Gets the type_other of this CarReminder.  # noqa: E501


        :return: The type_other of this CarReminder.  # noqa: E501
        :rtype: str
        """
        return self._type_other

    @type_other.setter
    def type_other(self, type_other):
        """Sets the type_other of this CarReminder.


        :param type_other: The type_other of this CarReminder.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                type_other is not None and len(type_other) > 200):
            raise ValueError("Invalid value for `type_other`, length must be less than or equal to `200`")  # noqa: E501

        self._type_other = type_other

    @property
    def next_occurrence(self):
        """Gets the next_occurrence of this CarReminder.  # noqa: E501


        :return: The next_occurrence of this CarReminder.  # noqa: E501
        :rtype: date
        """
        return self._next_occurrence

    @next_occurrence.setter
    def next_occurrence(self, next_occurrence):
        """Sets the next_occurrence of this CarReminder.


        :param next_occurrence: The next_occurrence of this CarReminder.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and next_occurrence is None:
            raise ValueError("Invalid value for `next_occurrence`, must not be `None`")  # noqa: E501

        self._next_occurrence = next_occurrence

    @property
    def scan(self):
        """Gets the scan of this CarReminder.  # noqa: E501


        :return: The scan of this CarReminder.  # noqa: E501
        :rtype: str
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """Sets the scan of this CarReminder.


        :param scan: The scan of this CarReminder.  # noqa: E501
        :type: str
        """

        self._scan = scan

    @property
    def created_by(self):
        """Gets the created_by of this CarReminder.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this CarReminder.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CarReminder.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this CarReminder.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this CarReminder.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this CarReminder.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this CarReminder.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this CarReminder.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def car(self):
        """Gets the car of this CarReminder.  # noqa: E501


        :return: The car of this CarReminder.  # noqa: E501
        :rtype: int
        """
        return self._car

    @car.setter
    def car(self, car):
        """Sets the car of this CarReminder.


        :param car: The car of this CarReminder.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and car is None:
            raise ValueError("Invalid value for `car`, must not be `None`")  # noqa: E501

        self._car = car

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarReminder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarReminder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CarReminder):
            return True

        return self.to_dict() != other.to_dict()
