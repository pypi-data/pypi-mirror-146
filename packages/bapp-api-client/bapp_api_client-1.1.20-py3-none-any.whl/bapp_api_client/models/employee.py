# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Employee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'user': 'str',
        'location': 'int',
        'department': 'int',
        'department_head': 'bool',
        'active': 'bool',
        'date_start': 'date',
        'user_agrees': 'bool',
        'contractor': 'bool',
        'partner': 'int',
        'hourly_rate': 'str',
        'monthly_rate': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'user': 'user',
        'location': 'location',
        'department': 'department',
        'department_head': 'department_head',
        'active': 'active',
        'date_start': 'date_start',
        'user_agrees': 'user_agrees',
        'contractor': 'contractor',
        'partner': 'partner',
        'hourly_rate': 'hourly_rate',
        'monthly_rate': 'monthly_rate',
        'currency': 'currency'
    }

    def __init__(self, id=None, first_name=None, last_name=None, user=None, location=None, department=None, department_head=None, active=None, date_start=None, user_agrees=False, contractor=None, partner=None, hourly_rate=None, monthly_rate=None, currency=None, _configuration=None):  # noqa: E501
        """Employee - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._first_name = None
        self._last_name = None
        self._user = None
        self._location = None
        self._department = None
        self._department_head = None
        self._active = None
        self._date_start = None
        self._user_agrees = None
        self._contractor = None
        self._partner = None
        self._hourly_rate = None
        self._monthly_rate = None
        self._currency = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.first_name = first_name
        self.last_name = last_name
        if user is not None:
            self.user = user
        if location is not None:
            self.location = location
        if department is not None:
            self.department = department
        if department_head is not None:
            self.department_head = department_head
        if active is not None:
            self.active = active
        if date_start is not None:
            self.date_start = date_start
        if user_agrees is not None:
            self.user_agrees = user_agrees
        if contractor is not None:
            self.contractor = contractor
        if partner is not None:
            self.partner = partner
        if hourly_rate is not None:
            self.hourly_rate = hourly_rate
        if monthly_rate is not None:
            self.monthly_rate = monthly_rate
        if currency is not None:
            self.currency = currency

    @property
    def id(self):
        """Gets the id of this Employee.  # noqa: E501


        :return: The id of this Employee.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Employee.


        :param id: The id of this Employee.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Employee.  # noqa: E501


        :return: The first_name of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Employee.


        :param first_name: The first_name of this Employee.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 200):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) < 1):
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Employee.  # noqa: E501


        :return: The last_name of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Employee.


        :param last_name: The last_name of this Employee.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_name is not None and len(last_name) > 200):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_name is not None and len(last_name) < 1):
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._last_name = last_name

    @property
    def user(self):
        """Gets the user of this Employee.  # noqa: E501


        :return: The user of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Employee.


        :param user: The user of this Employee.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def location(self):
        """Gets the location of this Employee.  # noqa: E501


        :return: The location of this Employee.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Employee.


        :param location: The location of this Employee.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def department(self):
        """Gets the department of this Employee.  # noqa: E501


        :return: The department of this Employee.  # noqa: E501
        :rtype: int
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Employee.


        :param department: The department of this Employee.  # noqa: E501
        :type: int
        """

        self._department = department

    @property
    def department_head(self):
        """Gets the department_head of this Employee.  # noqa: E501


        :return: The department_head of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._department_head

    @department_head.setter
    def department_head(self, department_head):
        """Sets the department_head of this Employee.


        :param department_head: The department_head of this Employee.  # noqa: E501
        :type: bool
        """

        self._department_head = department_head

    @property
    def active(self):
        """Gets the active of this Employee.  # noqa: E501


        :return: The active of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Employee.


        :param active: The active of this Employee.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def date_start(self):
        """Gets the date_start of this Employee.  # noqa: E501


        :return: The date_start of this Employee.  # noqa: E501
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this Employee.


        :param date_start: The date_start of this Employee.  # noqa: E501
        :type: date
        """

        self._date_start = date_start

    @property
    def user_agrees(self):
        """Gets the user_agrees of this Employee.  # noqa: E501


        :return: The user_agrees of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._user_agrees

    @user_agrees.setter
    def user_agrees(self, user_agrees):
        """Sets the user_agrees of this Employee.


        :param user_agrees: The user_agrees of this Employee.  # noqa: E501
        :type: bool
        """

        self._user_agrees = user_agrees

    @property
    def contractor(self):
        """Gets the contractor of this Employee.  # noqa: E501


        :return: The contractor of this Employee.  # noqa: E501
        :rtype: bool
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this Employee.


        :param contractor: The contractor of this Employee.  # noqa: E501
        :type: bool
        """

        self._contractor = contractor

    @property
    def partner(self):
        """Gets the partner of this Employee.  # noqa: E501


        :return: The partner of this Employee.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Employee.


        :param partner: The partner of this Employee.  # noqa: E501
        :type: int
        """

        self._partner = partner

    @property
    def hourly_rate(self):
        """Gets the hourly_rate of this Employee.  # noqa: E501


        :return: The hourly_rate of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._hourly_rate

    @hourly_rate.setter
    def hourly_rate(self, hourly_rate):
        """Sets the hourly_rate of this Employee.


        :param hourly_rate: The hourly_rate of this Employee.  # noqa: E501
        :type: str
        """

        self._hourly_rate = hourly_rate

    @property
    def monthly_rate(self):
        """Gets the monthly_rate of this Employee.  # noqa: E501


        :return: The monthly_rate of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._monthly_rate

    @monthly_rate.setter
    def monthly_rate(self, monthly_rate):
        """Sets the monthly_rate of this Employee.


        :param monthly_rate: The monthly_rate of this Employee.  # noqa: E501
        :type: str
        """

        self._monthly_rate = monthly_rate

    @property
    def currency(self):
        """Gets the currency of this Employee.  # noqa: E501


        :return: The currency of this Employee.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Employee.


        :param currency: The currency of this Employee.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Employee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Employee):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Employee):
            return True

        return self.to_dict() != other.to_dict()
