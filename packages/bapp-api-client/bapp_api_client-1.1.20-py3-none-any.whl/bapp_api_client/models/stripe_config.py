# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class StripeConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stripe_account': 'str',
        'stripe_enabled': 'bool',
        'stripe_config_url': 'str',
        'enabled': 'bool',
        'default': 'bool'
    }

    attribute_map = {
        'stripe_account': 'stripe_account',
        'stripe_enabled': 'stripe_enabled',
        'stripe_config_url': 'stripe_config_url',
        'enabled': 'enabled',
        'default': 'default'
    }

    def __init__(self, stripe_account=None, stripe_enabled=None, stripe_config_url=None, enabled=None, default=None, _configuration=None):  # noqa: E501
        """StripeConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._stripe_account = None
        self._stripe_enabled = None
        self._stripe_config_url = None
        self._enabled = None
        self._default = None
        self.discriminator = None

        if stripe_account is not None:
            self.stripe_account = stripe_account
        if stripe_enabled is not None:
            self.stripe_enabled = stripe_enabled
        if stripe_config_url is not None:
            self.stripe_config_url = stripe_config_url
        self.enabled = enabled
        self.default = default

    @property
    def stripe_account(self):
        """Gets the stripe_account of this StripeConfig.  # noqa: E501


        :return: The stripe_account of this StripeConfig.  # noqa: E501
        :rtype: str
        """
        return self._stripe_account

    @stripe_account.setter
    def stripe_account(self, stripe_account):
        """Sets the stripe_account of this StripeConfig.


        :param stripe_account: The stripe_account of this StripeConfig.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                stripe_account is not None and len(stripe_account) < 1):
            raise ValueError("Invalid value for `stripe_account`, length must be greater than or equal to `1`")  # noqa: E501

        self._stripe_account = stripe_account

    @property
    def stripe_enabled(self):
        """Gets the stripe_enabled of this StripeConfig.  # noqa: E501


        :return: The stripe_enabled of this StripeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._stripe_enabled

    @stripe_enabled.setter
    def stripe_enabled(self, stripe_enabled):
        """Sets the stripe_enabled of this StripeConfig.


        :param stripe_enabled: The stripe_enabled of this StripeConfig.  # noqa: E501
        :type: bool
        """

        self._stripe_enabled = stripe_enabled

    @property
    def stripe_config_url(self):
        """Gets the stripe_config_url of this StripeConfig.  # noqa: E501


        :return: The stripe_config_url of this StripeConfig.  # noqa: E501
        :rtype: str
        """
        return self._stripe_config_url

    @stripe_config_url.setter
    def stripe_config_url(self, stripe_config_url):
        """Sets the stripe_config_url of this StripeConfig.


        :param stripe_config_url: The stripe_config_url of this StripeConfig.  # noqa: E501
        :type: str
        """

        self._stripe_config_url = stripe_config_url

    @property
    def enabled(self):
        """Gets the enabled of this StripeConfig.  # noqa: E501


        :return: The enabled of this StripeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StripeConfig.


        :param enabled: The enabled of this StripeConfig.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def default(self):
        """Gets the default of this StripeConfig.  # noqa: E501


        :return: The default of this StripeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this StripeConfig.


        :param default: The default of this StripeConfig.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StripeConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StripeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StripeConfig):
            return True

        return self.to_dict() != other.to_dict()
