# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class UserNotificationConfigIdent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user': 'str',
        'app': 'str',
        'notification': 'int',
        'company': 'int',
        'channels': 'list[str]',
        'enabled': 'bool',
        'modifies_module_config': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'app': 'app',
        'notification': 'notification',
        'company': 'company',
        'channels': 'channels',
        'enabled': 'enabled',
        'modifies_module_config': 'modifies_module_config'
    }

    def __init__(self, id=None, user=None, app=None, notification=None, company=None, channels=None, enabled=None, modifies_module_config=None, _configuration=None):  # noqa: E501
        """UserNotificationConfigIdent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user = None
        self._app = None
        self._notification = None
        self._company = None
        self._channels = None
        self._enabled = None
        self._modifies_module_config = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user is not None:
            self.user = user
        if app is not None:
            self.app = app
        if notification is not None:
            self.notification = notification
        if company is not None:
            self.company = company
        self.channels = channels
        if enabled is not None:
            self.enabled = enabled
        if modifies_module_config is not None:
            self.modifies_module_config = modifies_module_config

    @property
    def id(self):
        """Gets the id of this UserNotificationConfigIdent.  # noqa: E501


        :return: The id of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserNotificationConfigIdent.


        :param id: The id of this UserNotificationConfigIdent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user(self):
        """Gets the user of this UserNotificationConfigIdent.  # noqa: E501

        Utilizatorul care deține această înregistrare.  # noqa: E501

        :return: The user of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserNotificationConfigIdent.

        Utilizatorul care deține această înregistrare.  # noqa: E501

        :param user: The user of this UserNotificationConfigIdent.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def app(self):
        """Gets the app of this UserNotificationConfigIdent.  # noqa: E501


        :return: The app of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this UserNotificationConfigIdent.


        :param app: The app of this UserNotificationConfigIdent.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                app is not None and len(app) < 1):
            raise ValueError("Invalid value for `app`, length must be greater than or equal to `1`")  # noqa: E501

        self._app = app

    @property
    def notification(self):
        """Gets the notification of this UserNotificationConfigIdent.  # noqa: E501


        :return: The notification of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: int
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this UserNotificationConfigIdent.


        :param notification: The notification of this UserNotificationConfigIdent.  # noqa: E501
        :type: int
        """

        self._notification = notification

    @property
    def company(self):
        """Gets the company of this UserNotificationConfigIdent.  # noqa: E501


        :return: The company of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: int
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserNotificationConfigIdent.


        :param company: The company of this UserNotificationConfigIdent.  # noqa: E501
        :type: int
        """

        self._company = company

    @property
    def channels(self):
        """Gets the channels of this UserNotificationConfigIdent.  # noqa: E501


        :return: The channels of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this UserNotificationConfigIdent.


        :param channels: The channels of this UserNotificationConfigIdent.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")  # noqa: E501
        allowed_values = ["email", "email_if_offline", "online"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(channels).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `channels` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(channels) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._channels = channels

    @property
    def enabled(self):
        """Gets the enabled of this UserNotificationConfigIdent.  # noqa: E501


        :return: The enabled of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserNotificationConfigIdent.


        :param enabled: The enabled of this UserNotificationConfigIdent.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def modifies_module_config(self):
        """Gets the modifies_module_config of this UserNotificationConfigIdent.  # noqa: E501


        :return: The modifies_module_config of this UserNotificationConfigIdent.  # noqa: E501
        :rtype: str
        """
        return self._modifies_module_config

    @modifies_module_config.setter
    def modifies_module_config(self, modifies_module_config):
        """Sets the modifies_module_config of this UserNotificationConfigIdent.


        :param modifies_module_config: The modifies_module_config of this UserNotificationConfigIdent.  # noqa: E501
        :type: str
        """

        self._modifies_module_config = modifies_module_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserNotificationConfigIdent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserNotificationConfigIdent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserNotificationConfigIdent):
            return True

        return self.to_dict() != other.to_dict()
