# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EMenuRestaurant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'location': 'int',
        'name': 'str',
        'brand': 'int',
        'active': 'bool',
        'currency': 'str',
        'language_default': 'str',
        'language_available': 'list[str]',
        'description': 'str',
        'wifi_ssid': 'str',
        'wifi_password': 'str',
        'address': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'name': 'name',
        'brand': 'brand',
        'active': 'active',
        'currency': 'currency',
        'language_default': 'language_default',
        'language_available': 'language_available',
        'description': 'description',
        'wifi_ssid': 'wifi_ssid',
        'wifi_password': 'wifi_password',
        'address': 'address',
        'phone': 'phone'
    }

    def __init__(self, id=None, location=None, name=None, brand=None, active=None, currency=None, language_default=None, language_available=None, description=None, wifi_ssid=None, wifi_password=None, address=None, phone=None, _configuration=None):  # noqa: E501
        """EMenuRestaurant - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._location = None
        self._name = None
        self._brand = None
        self._active = None
        self._currency = None
        self._language_default = None
        self._language_available = None
        self._description = None
        self._wifi_ssid = None
        self._wifi_password = None
        self._address = None
        self._phone = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        self.name = name
        if brand is not None:
            self.brand = brand
        if active is not None:
            self.active = active
        self.currency = currency
        self.language_default = language_default
        if language_available is not None:
            self.language_available = language_available
        if description is not None:
            self.description = description
        if wifi_ssid is not None:
            self.wifi_ssid = wifi_ssid
        if wifi_password is not None:
            self.wifi_password = wifi_password
        if address is not None:
            self.address = address
        if phone is not None:
            self.phone = phone

    @property
    def id(self):
        """Gets the id of this EMenuRestaurant.  # noqa: E501


        :return: The id of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EMenuRestaurant.


        :param id: The id of this EMenuRestaurant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this EMenuRestaurant.  # noqa: E501


        :return: The location of this EMenuRestaurant.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EMenuRestaurant.


        :param location: The location of this EMenuRestaurant.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this EMenuRestaurant.  # noqa: E501


        :return: The name of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EMenuRestaurant.


        :param name: The name of this EMenuRestaurant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def brand(self):
        """Gets the brand of this EMenuRestaurant.  # noqa: E501


        :return: The brand of this EMenuRestaurant.  # noqa: E501
        :rtype: int
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this EMenuRestaurant.


        :param brand: The brand of this EMenuRestaurant.  # noqa: E501
        :type: int
        """

        self._brand = brand

    @property
    def active(self):
        """Gets the active of this EMenuRestaurant.  # noqa: E501


        :return: The active of this EMenuRestaurant.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EMenuRestaurant.


        :param active: The active of this EMenuRestaurant.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def currency(self):
        """Gets the currency of this EMenuRestaurant.  # noqa: E501


        :return: The currency of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this EMenuRestaurant.


        :param currency: The currency of this EMenuRestaurant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def language_default(self):
        """Gets the language_default of this EMenuRestaurant.  # noqa: E501


        :return: The language_default of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._language_default

    @language_default.setter
    def language_default(self, language_default):
        """Sets the language_default of this EMenuRestaurant.


        :param language_default: The language_default of this EMenuRestaurant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and language_default is None:
            raise ValueError("Invalid value for `language_default`, must not be `None`")  # noqa: E501

        self._language_default = language_default

    @property
    def language_available(self):
        """Gets the language_available of this EMenuRestaurant.  # noqa: E501


        :return: The language_available of this EMenuRestaurant.  # noqa: E501
        :rtype: list[str]
        """
        return self._language_available

    @language_available.setter
    def language_available(self, language_available):
        """Sets the language_available of this EMenuRestaurant.


        :param language_available: The language_available of this EMenuRestaurant.  # noqa: E501
        :type: list[str]
        """

        self._language_available = language_available

    @property
    def description(self):
        """Gets the description of this EMenuRestaurant.  # noqa: E501


        :return: The description of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EMenuRestaurant.


        :param description: The description of this EMenuRestaurant.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def wifi_ssid(self):
        """Gets the wifi_ssid of this EMenuRestaurant.  # noqa: E501


        :return: The wifi_ssid of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._wifi_ssid

    @wifi_ssid.setter
    def wifi_ssid(self, wifi_ssid):
        """Sets the wifi_ssid of this EMenuRestaurant.


        :param wifi_ssid: The wifi_ssid of this EMenuRestaurant.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                wifi_ssid is not None and len(wifi_ssid) > 200):
            raise ValueError("Invalid value for `wifi_ssid`, length must be less than or equal to `200`")  # noqa: E501

        self._wifi_ssid = wifi_ssid

    @property
    def wifi_password(self):
        """Gets the wifi_password of this EMenuRestaurant.  # noqa: E501


        :return: The wifi_password of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._wifi_password

    @wifi_password.setter
    def wifi_password(self, wifi_password):
        """Sets the wifi_password of this EMenuRestaurant.


        :param wifi_password: The wifi_password of this EMenuRestaurant.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                wifi_password is not None and len(wifi_password) > 200):
            raise ValueError("Invalid value for `wifi_password`, length must be less than or equal to `200`")  # noqa: E501

        self._wifi_password = wifi_password

    @property
    def address(self):
        """Gets the address of this EMenuRestaurant.  # noqa: E501


        :return: The address of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EMenuRestaurant.


        :param address: The address of this EMenuRestaurant.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def phone(self):
        """Gets the phone of this EMenuRestaurant.  # noqa: E501


        :return: The phone of this EMenuRestaurant.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this EMenuRestaurant.


        :param phone: The phone of this EMenuRestaurant.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                phone is not None and len(phone) > 200):
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `200`")  # noqa: E501

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EMenuRestaurant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMenuRestaurant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMenuRestaurant):
            return True

        return self.to_dict() != other.to_dict()
