# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EmailAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'host': 'str',
        'port': 'int',
        'username': 'str',
        'password': 'str',
        'email_from': 'str',
        'outbound': 'bool',
        'inbound': 'bool',
        'protocol': 'str',
        'default': 'bool',
        'actions': 'list[int]',
        'processed_action': 'str',
        'smtp_validated': 'bool',
        'imap_validated': 'bool',
        'smtp_checking': 'bool',
        'imap_checking': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'host': 'host',
        'port': 'port',
        'username': 'username',
        'password': 'password',
        'email_from': 'email_from',
        'outbound': 'outbound',
        'inbound': 'inbound',
        'protocol': 'protocol',
        'default': 'default',
        'actions': 'actions',
        'processed_action': 'processed_action',
        'smtp_validated': 'smtp_validated',
        'imap_validated': 'imap_validated',
        'smtp_checking': 'smtp_checking',
        'imap_checking': 'imap_checking'
    }

    def __init__(self, id=None, host=None, port=None, username=None, password=None, email_from=None, outbound=None, inbound=None, protocol=None, default=None, actions=None, processed_action=None, smtp_validated=None, imap_validated=None, smtp_checking=None, imap_checking=None, _configuration=None):  # noqa: E501
        """EmailAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._host = None
        self._port = None
        self._username = None
        self._password = None
        self._email_from = None
        self._outbound = None
        self._inbound = None
        self._protocol = None
        self._default = None
        self._actions = None
        self._processed_action = None
        self._smtp_validated = None
        self._imap_validated = None
        self._smtp_checking = None
        self._imap_checking = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.host = host
        if port is not None:
            self.port = port
        self.username = username
        self.password = password
        if email_from is not None:
            self.email_from = email_from
        if outbound is not None:
            self.outbound = outbound
        if inbound is not None:
            self.inbound = inbound
        if protocol is not None:
            self.protocol = protocol
        if default is not None:
            self.default = default
        if actions is not None:
            self.actions = actions
        if processed_action is not None:
            self.processed_action = processed_action
        if smtp_validated is not None:
            self.smtp_validated = smtp_validated
        if imap_validated is not None:
            self.imap_validated = imap_validated
        if smtp_checking is not None:
            self.smtp_checking = smtp_checking
        if imap_checking is not None:
            self.imap_checking = imap_checking

    @property
    def id(self):
        """Gets the id of this EmailAccount.  # noqa: E501


        :return: The id of this EmailAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailAccount.


        :param id: The id of this EmailAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def host(self):
        """Gets the host of this EmailAccount.  # noqa: E501


        :return: The host of this EmailAccount.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this EmailAccount.


        :param host: The host of this EmailAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                host is not None and len(host) > 256):
            raise ValueError("Invalid value for `host`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                host is not None and len(host) < 1):
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this EmailAccount.  # noqa: E501


        :return: The port of this EmailAccount.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EmailAccount.


        :param port: The port of this EmailAccount.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 32767):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def username(self):
        """Gets the username of this EmailAccount.  # noqa: E501


        :return: The username of this EmailAccount.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EmailAccount.


        :param username: The username of this EmailAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                username is not None and len(username) > 200):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                username is not None and len(username) < 1):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this EmailAccount.  # noqa: E501


        :return: The password of this EmailAccount.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EmailAccount.


        :param password: The password of this EmailAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 200):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 1):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    @property
    def email_from(self):
        """Gets the email_from of this EmailAccount.  # noqa: E501


        :return: The email_from of this EmailAccount.  # noqa: E501
        :rtype: str
        """
        return self._email_from

    @email_from.setter
    def email_from(self, email_from):
        """Sets the email_from of this EmailAccount.


        :param email_from: The email_from of this EmailAccount.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email_from is not None and len(email_from) > 200):
            raise ValueError("Invalid value for `email_from`, length must be less than or equal to `200`")  # noqa: E501

        self._email_from = email_from

    @property
    def outbound(self):
        """Gets the outbound of this EmailAccount.  # noqa: E501


        :return: The outbound of this EmailAccount.  # noqa: E501
        :rtype: bool
        """
        return self._outbound

    @outbound.setter
    def outbound(self, outbound):
        """Sets the outbound of this EmailAccount.


        :param outbound: The outbound of this EmailAccount.  # noqa: E501
        :type: bool
        """

        self._outbound = outbound

    @property
    def inbound(self):
        """Gets the inbound of this EmailAccount.  # noqa: E501


        :return: The inbound of this EmailAccount.  # noqa: E501
        :rtype: bool
        """
        return self._inbound

    @inbound.setter
    def inbound(self, inbound):
        """Sets the inbound of this EmailAccount.


        :param inbound: The inbound of this EmailAccount.  # noqa: E501
        :type: bool
        """

        self._inbound = inbound

    @property
    def protocol(self):
        """Gets the protocol of this EmailAccount.  # noqa: E501


        :return: The protocol of this EmailAccount.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this EmailAccount.


        :param protocol: The protocol of this EmailAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["plain", "ssl", "tls"]  # noqa: E501
        if (self._configuration.client_side_validation and
                protocol not in allowed_values):
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def default(self):
        """Gets the default of this EmailAccount.  # noqa: E501


        :return: The default of this EmailAccount.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this EmailAccount.


        :param default: The default of this EmailAccount.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def actions(self):
        """Gets the actions of this EmailAccount.  # noqa: E501


        :return: The actions of this EmailAccount.  # noqa: E501
        :rtype: list[int]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this EmailAccount.


        :param actions: The actions of this EmailAccount.  # noqa: E501
        :type: list[int]
        """

        self._actions = actions

    @property
    def processed_action(self):
        """Gets the processed_action of this EmailAccount.  # noqa: E501


        :return: The processed_action of this EmailAccount.  # noqa: E501
        :rtype: str
        """
        return self._processed_action

    @processed_action.setter
    def processed_action(self, processed_action):
        """Sets the processed_action of this EmailAccount.


        :param processed_action: The processed_action of this EmailAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["mark_read", "delete"]  # noqa: E501
        if (self._configuration.client_side_validation and
                processed_action not in allowed_values):
            raise ValueError(
                "Invalid value for `processed_action` ({0}), must be one of {1}"  # noqa: E501
                .format(processed_action, allowed_values)
            )

        self._processed_action = processed_action

    @property
    def smtp_validated(self):
        """Gets the smtp_validated of this EmailAccount.  # noqa: E501


        :return: The smtp_validated of this EmailAccount.  # noqa: E501
        :rtype: bool
        """
        return self._smtp_validated

    @smtp_validated.setter
    def smtp_validated(self, smtp_validated):
        """Sets the smtp_validated of this EmailAccount.


        :param smtp_validated: The smtp_validated of this EmailAccount.  # noqa: E501
        :type: bool
        """

        self._smtp_validated = smtp_validated

    @property
    def imap_validated(self):
        """Gets the imap_validated of this EmailAccount.  # noqa: E501


        :return: The imap_validated of this EmailAccount.  # noqa: E501
        :rtype: bool
        """
        return self._imap_validated

    @imap_validated.setter
    def imap_validated(self, imap_validated):
        """Sets the imap_validated of this EmailAccount.


        :param imap_validated: The imap_validated of this EmailAccount.  # noqa: E501
        :type: bool
        """

        self._imap_validated = imap_validated

    @property
    def smtp_checking(self):
        """Gets the smtp_checking of this EmailAccount.  # noqa: E501


        :return: The smtp_checking of this EmailAccount.  # noqa: E501
        :rtype: bool
        """
        return self._smtp_checking

    @smtp_checking.setter
    def smtp_checking(self, smtp_checking):
        """Sets the smtp_checking of this EmailAccount.


        :param smtp_checking: The smtp_checking of this EmailAccount.  # noqa: E501
        :type: bool
        """

        self._smtp_checking = smtp_checking

    @property
    def imap_checking(self):
        """Gets the imap_checking of this EmailAccount.  # noqa: E501


        :return: The imap_checking of this EmailAccount.  # noqa: E501
        :rtype: bool
        """
        return self._imap_checking

    @imap_checking.setter
    def imap_checking(self, imap_checking):
        """Sets the imap_checking of this EmailAccount.


        :param imap_checking: The imap_checking of this EmailAccount.  # noqa: E501
        :type: bool
        """

        self._imap_checking = imap_checking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailAccount):
            return True

        return self.to_dict() != other.to_dict()
