# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class FiscalReceipt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cash_register': 'int',
        '_date': 'datetime',
        'number': 'int',
        'employee': 'int',
        'view_tokens': 'str',
        'status': 'int'
    }

    attribute_map = {
        'id': 'id',
        'cash_register': 'cash_register',
        '_date': 'date',
        'number': 'number',
        'employee': 'employee',
        'view_tokens': 'view_tokens',
        'status': 'status'
    }

    def __init__(self, id=None, cash_register=None, _date=None, number=None, employee=None, view_tokens=None, status=None, _configuration=None):  # noqa: E501
        """FiscalReceipt - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._cash_register = None
        self.__date = None
        self._number = None
        self._employee = None
        self._view_tokens = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.cash_register = cash_register
        if _date is not None:
            self._date = _date
        if number is not None:
            self.number = number
        if employee is not None:
            self.employee = employee
        if view_tokens is not None:
            self.view_tokens = view_tokens
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this FiscalReceipt.  # noqa: E501


        :return: The id of this FiscalReceipt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FiscalReceipt.


        :param id: The id of this FiscalReceipt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cash_register(self):
        """Gets the cash_register of this FiscalReceipt.  # noqa: E501


        :return: The cash_register of this FiscalReceipt.  # noqa: E501
        :rtype: int
        """
        return self._cash_register

    @cash_register.setter
    def cash_register(self, cash_register):
        """Sets the cash_register of this FiscalReceipt.


        :param cash_register: The cash_register of this FiscalReceipt.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and cash_register is None:
            raise ValueError("Invalid value for `cash_register`, must not be `None`")  # noqa: E501

        self._cash_register = cash_register

    @property
    def _date(self):
        """Gets the _date of this FiscalReceipt.  # noqa: E501


        :return: The _date of this FiscalReceipt.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this FiscalReceipt.


        :param _date: The _date of this FiscalReceipt.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def number(self):
        """Gets the number of this FiscalReceipt.  # noqa: E501


        :return: The number of this FiscalReceipt.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this FiscalReceipt.


        :param number: The number of this FiscalReceipt.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                number is not None and number > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                number is not None and number < 0):  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number = number

    @property
    def employee(self):
        """Gets the employee of this FiscalReceipt.  # noqa: E501


        :return: The employee of this FiscalReceipt.  # noqa: E501
        :rtype: int
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this FiscalReceipt.


        :param employee: The employee of this FiscalReceipt.  # noqa: E501
        :type: int
        """

        self._employee = employee

    @property
    def view_tokens(self):
        """Gets the view_tokens of this FiscalReceipt.  # noqa: E501


        :return: The view_tokens of this FiscalReceipt.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this FiscalReceipt.


        :param view_tokens: The view_tokens of this FiscalReceipt.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    @property
    def status(self):
        """Gets the status of this FiscalReceipt.  # noqa: E501


        :return: The status of this FiscalReceipt.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FiscalReceipt.


        :param status: The status of this FiscalReceipt.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FiscalReceipt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FiscalReceipt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FiscalReceipt):
            return True

        return self.to_dict() != other.to_dict()
