# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanyWorkScheduleException(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'day': 'int',
        'month': 'int',
        'year': 'int',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'day': 'day',
        'month': 'month',
        'year': 'year',
        'description': 'description'
    }

    def __init__(self, id=None, day=None, month=None, year=None, description=None, _configuration=None):  # noqa: E501
        """CompanyWorkScheduleException - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._day = None
        self._month = None
        self._year = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.day = day
        self.month = month
        if year is not None:
            self.year = year
        self.description = description

    @property
    def id(self):
        """Gets the id of this CompanyWorkScheduleException.  # noqa: E501


        :return: The id of this CompanyWorkScheduleException.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyWorkScheduleException.


        :param id: The id of this CompanyWorkScheduleException.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def day(self):
        """Gets the day of this CompanyWorkScheduleException.  # noqa: E501


        :return: The day of this CompanyWorkScheduleException.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this CompanyWorkScheduleException.


        :param day: The day of this CompanyWorkScheduleException.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                day is not None and day > 32767):  # noqa: E501
            raise ValueError("Invalid value for `day`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                day is not None and day < 0):  # noqa: E501
            raise ValueError("Invalid value for `day`, must be a value greater than or equal to `0`")  # noqa: E501

        self._day = day

    @property
    def month(self):
        """Gets the month of this CompanyWorkScheduleException.  # noqa: E501


        :return: The month of this CompanyWorkScheduleException.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this CompanyWorkScheduleException.


        :param month: The month of this CompanyWorkScheduleException.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                month is not None and month > 32767):  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                month is not None and month < 0):  # noqa: E501
            raise ValueError("Invalid value for `month`, must be a value greater than or equal to `0`")  # noqa: E501

        self._month = month

    @property
    def year(self):
        """Gets the year of this CompanyWorkScheduleException.  # noqa: E501


        :return: The year of this CompanyWorkScheduleException.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this CompanyWorkScheduleException.


        :param year: The year of this CompanyWorkScheduleException.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                year is not None and year > 32767):  # noqa: E501
            raise ValueError("Invalid value for `year`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                year is not None and year < 0):  # noqa: E501
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `0`")  # noqa: E501

        self._year = year

    @property
    def description(self):
        """Gets the description of this CompanyWorkScheduleException.  # noqa: E501


        :return: The description of this CompanyWorkScheduleException.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompanyWorkScheduleException.


        :param description: The description of this CompanyWorkScheduleException.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 500):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyWorkScheduleException, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyWorkScheduleException):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyWorkScheduleException):
            return True

        return self.to_dict() != other.to_dict()
