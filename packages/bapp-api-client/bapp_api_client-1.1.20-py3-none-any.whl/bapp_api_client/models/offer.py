# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Offer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'partner': 'int',
        'currency': 'str',
        'location': 'int',
        'number': 'int',
        '_date': 'date',
        'due_date': 'date',
        'uuid': 'str',
        'discount': 'int',
        'has_discount': 'bool',
        'subtotal': 'str',
        'formatted_number': 'str',
        'subtotal_currency': 'str',
        'tax_value': 'str',
        'tax_value_currency': 'str',
        'total': 'str',
        'total_currency': 'str',
        'discounted_total': 'str',
        'discounted_total_currency': 'str',
        'exchange_rate': 'str',
        'accepted_date': 'datetime',
        'sent_date': 'datetime',
        'markup': 'str',
        'show_totals': 'str',
        'items': 'list[OfferItem]',
        'view_tokens': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'partner': 'partner',
        'currency': 'currency',
        'location': 'location',
        'number': 'number',
        '_date': 'date',
        'due_date': 'due_date',
        'uuid': 'uuid',
        'discount': 'discount',
        'has_discount': 'has_discount',
        'subtotal': 'subtotal',
        'formatted_number': 'formatted_number',
        'subtotal_currency': 'subtotal_currency',
        'tax_value': 'tax_value',
        'tax_value_currency': 'tax_value_currency',
        'total': 'total',
        'total_currency': 'total_currency',
        'discounted_total': 'discounted_total',
        'discounted_total_currency': 'discounted_total_currency',
        'exchange_rate': 'exchange_rate',
        'accepted_date': 'accepted_date',
        'sent_date': 'sent_date',
        'markup': 'markup',
        'show_totals': 'show_totals',
        'items': 'items',
        'view_tokens': 'view_tokens',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, id=None, partner=None, currency=None, location=None, number=None, _date=None, due_date=None, uuid=None, discount=None, has_discount=None, subtotal=None, formatted_number=None, subtotal_currency=None, tax_value=None, tax_value_currency=None, total=None, total_currency=None, discounted_total=None, discounted_total_currency=None, exchange_rate=None, accepted_date=None, sent_date=None, markup=None, show_totals=None, items=None, view_tokens=None, created_by=None, modified_by=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """Offer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._partner = None
        self._currency = None
        self._location = None
        self._number = None
        self.__date = None
        self._due_date = None
        self._uuid = None
        self._discount = None
        self._has_discount = None
        self._subtotal = None
        self._formatted_number = None
        self._subtotal_currency = None
        self._tax_value = None
        self._tax_value_currency = None
        self._total = None
        self._total_currency = None
        self._discounted_total = None
        self._discounted_total_currency = None
        self._exchange_rate = None
        self._accepted_date = None
        self._sent_date = None
        self._markup = None
        self._show_totals = None
        self._items = None
        self._view_tokens = None
        self._created_by = None
        self._modified_by = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.partner = partner
        self.currency = currency
        if location is not None:
            self.location = location
        if number is not None:
            self.number = number
        self._date = _date
        if due_date is not None:
            self.due_date = due_date
        if uuid is not None:
            self.uuid = uuid
        if discount is not None:
            self.discount = discount
        if has_discount is not None:
            self.has_discount = has_discount
        if subtotal is not None:
            self.subtotal = subtotal
        if formatted_number is not None:
            self.formatted_number = formatted_number
        if subtotal_currency is not None:
            self.subtotal_currency = subtotal_currency
        if tax_value is not None:
            self.tax_value = tax_value
        if tax_value_currency is not None:
            self.tax_value_currency = tax_value_currency
        if total is not None:
            self.total = total
        if total_currency is not None:
            self.total_currency = total_currency
        if discounted_total is not None:
            self.discounted_total = discounted_total
        if discounted_total_currency is not None:
            self.discounted_total_currency = discounted_total_currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if accepted_date is not None:
            self.accepted_date = accepted_date
        if sent_date is not None:
            self.sent_date = sent_date
        if markup is not None:
            self.markup = markup
        if show_totals is not None:
            self.show_totals = show_totals
        self.items = items
        if view_tokens is not None:
            self.view_tokens = view_tokens
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this Offer.  # noqa: E501


        :return: The id of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Offer.


        :param id: The id of this Offer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def partner(self):
        """Gets the partner of this Offer.  # noqa: E501


        :return: The partner of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Offer.


        :param partner: The partner of this Offer.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")  # noqa: E501

        self._partner = partner

    @property
    def currency(self):
        """Gets the currency of this Offer.  # noqa: E501


        :return: The currency of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Offer.


        :param currency: The currency of this Offer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def location(self):
        """Gets the location of this Offer.  # noqa: E501


        :return: The location of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Offer.


        :param location: The location of this Offer.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def number(self):
        """Gets the number of this Offer.  # noqa: E501


        :return: The number of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Offer.


        :param number: The number of this Offer.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def _date(self):
        """Gets the _date of this Offer.  # noqa: E501


        :return: The _date of this Offer.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Offer.


        :param _date: The _date of this Offer.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def due_date(self):
        """Gets the due_date of this Offer.  # noqa: E501


        :return: The due_date of this Offer.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Offer.


        :param due_date: The due_date of this Offer.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def uuid(self):
        """Gets the uuid of this Offer.  # noqa: E501


        :return: The uuid of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Offer.


        :param uuid: The uuid of this Offer.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def discount(self):
        """Gets the discount of this Offer.  # noqa: E501


        :return: The discount of this Offer.  # noqa: E501
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this Offer.


        :param discount: The discount of this Offer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                discount is not None and discount > 32767):  # noqa: E501
            raise ValueError("Invalid value for `discount`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                discount is not None and discount < 0):  # noqa: E501
            raise ValueError("Invalid value for `discount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount = discount

    @property
    def has_discount(self):
        """Gets the has_discount of this Offer.  # noqa: E501

        True dacă unul din articole are discount aplicat.  # noqa: E501

        :return: The has_discount of this Offer.  # noqa: E501
        :rtype: bool
        """
        return self._has_discount

    @has_discount.setter
    def has_discount(self, has_discount):
        """Sets the has_discount of this Offer.

        True dacă unul din articole are discount aplicat.  # noqa: E501

        :param has_discount: The has_discount of this Offer.  # noqa: E501
        :type: bool
        """

        self._has_discount = has_discount

    @property
    def subtotal(self):
        """Gets the subtotal of this Offer.  # noqa: E501

        Subtotal RON redus/întreg  # noqa: E501

        :return: The subtotal of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this Offer.

        Subtotal RON redus/întreg  # noqa: E501

        :param subtotal: The subtotal of this Offer.  # noqa: E501
        :type: str
        """

        self._subtotal = subtotal

    @property
    def formatted_number(self):
        """Gets the formatted_number of this Offer.  # noqa: E501


        :return: The formatted_number of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._formatted_number

    @formatted_number.setter
    def formatted_number(self, formatted_number):
        """Sets the formatted_number of this Offer.


        :param formatted_number: The formatted_number of this Offer.  # noqa: E501
        :type: str
        """

        self._formatted_number = formatted_number

    @property
    def subtotal_currency(self):
        """Gets the subtotal_currency of this Offer.  # noqa: E501

        Subtotal valută redus/întreg  # noqa: E501

        :return: The subtotal_currency of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._subtotal_currency

    @subtotal_currency.setter
    def subtotal_currency(self, subtotal_currency):
        """Sets the subtotal_currency of this Offer.

        Subtotal valută redus/întreg  # noqa: E501

        :param subtotal_currency: The subtotal_currency of this Offer.  # noqa: E501
        :type: str
        """

        self._subtotal_currency = subtotal_currency

    @property
    def tax_value(self):
        """Gets the tax_value of this Offer.  # noqa: E501

        TVA RON redus/întreg  # noqa: E501

        :return: The tax_value of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this Offer.

        TVA RON redus/întreg  # noqa: E501

        :param tax_value: The tax_value of this Offer.  # noqa: E501
        :type: str
        """

        self._tax_value = tax_value

    @property
    def tax_value_currency(self):
        """Gets the tax_value_currency of this Offer.  # noqa: E501

        TVA valută redus/întreg  # noqa: E501

        :return: The tax_value_currency of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._tax_value_currency

    @tax_value_currency.setter
    def tax_value_currency(self, tax_value_currency):
        """Sets the tax_value_currency of this Offer.

        TVA valută redus/întreg  # noqa: E501

        :param tax_value_currency: The tax_value_currency of this Offer.  # noqa: E501
        :type: str
        """

        self._tax_value_currency = tax_value_currency

    @property
    def total(self):
        """Gets the total of this Offer.  # noqa: E501

        Total RON redus/întreg  # noqa: E501

        :return: The total of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Offer.

        Total RON redus/întreg  # noqa: E501

        :param total: The total of this Offer.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def total_currency(self):
        """Gets the total_currency of this Offer.  # noqa: E501

        Total valută redus/întreg  # noqa: E501

        :return: The total_currency of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._total_currency

    @total_currency.setter
    def total_currency(self, total_currency):
        """Sets the total_currency of this Offer.

        Total valută redus/întreg  # noqa: E501

        :param total_currency: The total_currency of this Offer.  # noqa: E501
        :type: str
        """

        self._total_currency = total_currency

    @property
    def discounted_total(self):
        """Gets the discounted_total of this Offer.  # noqa: E501

        Suma valorilor reduse din articole  # noqa: E501

        :return: The discounted_total of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._discounted_total

    @discounted_total.setter
    def discounted_total(self, discounted_total):
        """Sets the discounted_total of this Offer.

        Suma valorilor reduse din articole  # noqa: E501

        :param discounted_total: The discounted_total of this Offer.  # noqa: E501
        :type: str
        """

        self._discounted_total = discounted_total

    @property
    def discounted_total_currency(self):
        """Gets the discounted_total_currency of this Offer.  # noqa: E501

        Suma valorilor reduse din articole  # noqa: E501

        :return: The discounted_total_currency of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._discounted_total_currency

    @discounted_total_currency.setter
    def discounted_total_currency(self, discounted_total_currency):
        """Sets the discounted_total_currency of this Offer.

        Suma valorilor reduse din articole  # noqa: E501

        :param discounted_total_currency: The discounted_total_currency of this Offer.  # noqa: E501
        :type: str
        """

        self._discounted_total_currency = discounted_total_currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this Offer.  # noqa: E501


        :return: The exchange_rate of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this Offer.


        :param exchange_rate: The exchange_rate of this Offer.  # noqa: E501
        :type: str
        """

        self._exchange_rate = exchange_rate

    @property
    def accepted_date(self):
        """Gets the accepted_date of this Offer.  # noqa: E501


        :return: The accepted_date of this Offer.  # noqa: E501
        :rtype: datetime
        """
        return self._accepted_date

    @accepted_date.setter
    def accepted_date(self, accepted_date):
        """Sets the accepted_date of this Offer.


        :param accepted_date: The accepted_date of this Offer.  # noqa: E501
        :type: datetime
        """

        self._accepted_date = accepted_date

    @property
    def sent_date(self):
        """Gets the sent_date of this Offer.  # noqa: E501


        :return: The sent_date of this Offer.  # noqa: E501
        :rtype: datetime
        """
        return self._sent_date

    @sent_date.setter
    def sent_date(self, sent_date):
        """Sets the sent_date of this Offer.


        :param sent_date: The sent_date of this Offer.  # noqa: E501
        :type: datetime
        """

        self._sent_date = sent_date

    @property
    def markup(self):
        """Gets the markup of this Offer.  # noqa: E501


        :return: The markup of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this Offer.


        :param markup: The markup of this Offer.  # noqa: E501
        :type: str
        """

        self._markup = markup

    @property
    def show_totals(self):
        """Gets the show_totals of this Offer.  # noqa: E501


        :return: The show_totals of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._show_totals

    @show_totals.setter
    def show_totals(self, show_totals):
        """Sets the show_totals of this Offer.


        :param show_totals: The show_totals of this Offer.  # noqa: E501
        :type: str
        """

        self._show_totals = show_totals

    @property
    def items(self):
        """Gets the items of this Offer.  # noqa: E501


        :return: The items of this Offer.  # noqa: E501
        :rtype: list[OfferItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Offer.


        :param items: The items of this Offer.  # noqa: E501
        :type: list[OfferItem]
        """
        if self._configuration.client_side_validation and items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def view_tokens(self):
        """Gets the view_tokens of this Offer.  # noqa: E501


        :return: The view_tokens of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this Offer.


        :param view_tokens: The view_tokens of this Offer.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    @property
    def created_by(self):
        """Gets the created_by of this Offer.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Offer.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this Offer.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this Offer.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this Offer.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Offer.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this Offer.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def created_at(self):
        """Gets the created_at of this Offer.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Offer.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Offer.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Offer.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Offer.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Offer.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Offer.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Offer.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Offer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Offer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Offer):
            return True

        return self.to_dict() != other.to_dict()
