# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class DocSiteMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'domain': 'int',
        'slug': 'str',
        'file': 'str'
    }

    attribute_map = {
        'id': 'id',
        'domain': 'domain',
        'slug': 'slug',
        'file': 'file'
    }

    def __init__(self, id=None, domain=None, slug=None, file=None, _configuration=None):  # noqa: E501
        """DocSiteMedia - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._domain = None
        self._slug = None
        self._file = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if domain is not None:
            self.domain = domain
        if slug is not None:
            self.slug = slug
        if file is not None:
            self.file = file

    @property
    def id(self):
        """Gets the id of this DocSiteMedia.  # noqa: E501


        :return: The id of this DocSiteMedia.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocSiteMedia.


        :param id: The id of this DocSiteMedia.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def domain(self):
        """Gets the domain of this DocSiteMedia.  # noqa: E501


        :return: The domain of this DocSiteMedia.  # noqa: E501
        :rtype: int
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DocSiteMedia.


        :param domain: The domain of this DocSiteMedia.  # noqa: E501
        :type: int
        """

        self._domain = domain

    @property
    def slug(self):
        """Gets the slug of this DocSiteMedia.  # noqa: E501


        :return: The slug of this DocSiteMedia.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this DocSiteMedia.


        :param slug: The slug of this DocSiteMedia.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                slug is not None and len(slug) < 1):
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")  # noqa: E501

        self._slug = slug

    @property
    def file(self):
        """Gets the file of this DocSiteMedia.  # noqa: E501


        :return: The file of this DocSiteMedia.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this DocSiteMedia.


        :param file: The file of this DocSiteMedia.  # noqa: E501
        :type: str
        """

        self._file = file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocSiteMedia, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocSiteMedia):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocSiteMedia):
            return True

        return self.to_dict() != other.to_dict()
