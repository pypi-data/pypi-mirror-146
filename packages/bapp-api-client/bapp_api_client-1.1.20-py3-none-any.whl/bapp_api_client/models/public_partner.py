# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PublicPartner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'identifier': 'str',
        'pays_vat': 'bool',
        'reg_com': 'str',
        'type': 'str',
        'contact_first_name': 'str',
        'contact_last_name': 'str',
        'contact_email': 'str',
        'contact_phone': 'str',
        'language': 'str',
        'invoice_country': 'str',
        'invoice_region': 'int',
        'invoice_city': 'int',
        'invoice_address': 'str'
    }

    attribute_map = {
        'name': 'name',
        'identifier': 'identifier',
        'pays_vat': 'pays_vat',
        'reg_com': 'reg_com',
        'type': 'type',
        'contact_first_name': 'contact_first_name',
        'contact_last_name': 'contact_last_name',
        'contact_email': 'contact_email',
        'contact_phone': 'contact_phone',
        'language': 'language',
        'invoice_country': 'invoice_country',
        'invoice_region': 'invoice_region',
        'invoice_city': 'invoice_city',
        'invoice_address': 'invoice_address'
    }

    def __init__(self, name=None, identifier=None, pays_vat=False, reg_com=None, type='pf', contact_first_name=None, contact_last_name=None, contact_email=None, contact_phone=None, language=None, invoice_country=None, invoice_region=None, invoice_city=None, invoice_address=None, _configuration=None):  # noqa: E501
        """PublicPartner - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._identifier = None
        self._pays_vat = None
        self._reg_com = None
        self._type = None
        self._contact_first_name = None
        self._contact_last_name = None
        self._contact_email = None
        self._contact_phone = None
        self._language = None
        self._invoice_country = None
        self._invoice_region = None
        self._invoice_city = None
        self._invoice_address = None
        self.discriminator = None

        self.name = name
        if identifier is not None:
            self.identifier = identifier
        if pays_vat is not None:
            self.pays_vat = pays_vat
        if reg_com is not None:
            self.reg_com = reg_com
        if type is not None:
            self.type = type
        if contact_first_name is not None:
            self.contact_first_name = contact_first_name
        if contact_last_name is not None:
            self.contact_last_name = contact_last_name
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_phone is not None:
            self.contact_phone = contact_phone
        self.language = language
        self.invoice_country = invoice_country
        if invoice_region is not None:
            self.invoice_region = invoice_region
        if invoice_city is not None:
            self.invoice_city = invoice_city
        self.invoice_address = invoice_address

    @property
    def name(self):
        """Gets the name of this PublicPartner.  # noqa: E501


        :return: The name of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicPartner.


        :param name: The name of this PublicPartner.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 150):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def identifier(self):
        """Gets the identifier of this PublicPartner.  # noqa: E501

        CIF sau CNP  # noqa: E501

        :return: The identifier of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PublicPartner.

        CIF sau CNP  # noqa: E501

        :param identifier: The identifier of this PublicPartner.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) > 100):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `100`")  # noqa: E501

        self._identifier = identifier

    @property
    def pays_vat(self):
        """Gets the pays_vat of this PublicPartner.  # noqa: E501


        :return: The pays_vat of this PublicPartner.  # noqa: E501
        :rtype: bool
        """
        return self._pays_vat

    @pays_vat.setter
    def pays_vat(self, pays_vat):
        """Sets the pays_vat of this PublicPartner.


        :param pays_vat: The pays_vat of this PublicPartner.  # noqa: E501
        :type: bool
        """

        self._pays_vat = pays_vat

    @property
    def reg_com(self):
        """Gets the reg_com of this PublicPartner.  # noqa: E501


        :return: The reg_com of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._reg_com

    @reg_com.setter
    def reg_com(self, reg_com):
        """Sets the reg_com of this PublicPartner.


        :param reg_com: The reg_com of this PublicPartner.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                reg_com is not None and len(reg_com) > 50):
            raise ValueError("Invalid value for `reg_com`, length must be less than or equal to `50`")  # noqa: E501

        self._reg_com = reg_com

    @property
    def type(self):
        """Gets the type of this PublicPartner.  # noqa: E501


        :return: The type of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PublicPartner.


        :param type: The type of this PublicPartner.  # noqa: E501
        :type: str
        """
        allowed_values = ["pf", "pj"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def contact_first_name(self):
        """Gets the contact_first_name of this PublicPartner.  # noqa: E501


        :return: The contact_first_name of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name):
        """Sets the contact_first_name of this PublicPartner.


        :param contact_first_name: The contact_first_name of this PublicPartner.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                contact_first_name is not None and len(contact_first_name) > 100):
            raise ValueError("Invalid value for `contact_first_name`, length must be less than or equal to `100`")  # noqa: E501

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self):
        """Gets the contact_last_name of this PublicPartner.  # noqa: E501


        :return: The contact_last_name of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name):
        """Sets the contact_last_name of this PublicPartner.


        :param contact_last_name: The contact_last_name of this PublicPartner.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                contact_last_name is not None and len(contact_last_name) > 100):
            raise ValueError("Invalid value for `contact_last_name`, length must be less than or equal to `100`")  # noqa: E501

        self._contact_last_name = contact_last_name

    @property
    def contact_email(self):
        """Gets the contact_email of this PublicPartner.  # noqa: E501


        :return: The contact_email of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this PublicPartner.


        :param contact_email: The contact_email of this PublicPartner.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_phone(self):
        """Gets the contact_phone of this PublicPartner.  # noqa: E501


        :return: The contact_phone of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._contact_phone

    @contact_phone.setter
    def contact_phone(self, contact_phone):
        """Sets the contact_phone of this PublicPartner.


        :param contact_phone: The contact_phone of this PublicPartner.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                contact_phone is not None and len(contact_phone) > 100):
            raise ValueError("Invalid value for `contact_phone`, length must be less than or equal to `100`")  # noqa: E501

        self._contact_phone = contact_phone

    @property
    def language(self):
        """Gets the language of this PublicPartner.  # noqa: E501


        :return: The language of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PublicPartner.


        :param language: The language of this PublicPartner.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                language is not None and len(language) > 2):
            raise ValueError("Invalid value for `language`, length must be less than or equal to `2`")  # noqa: E501
        if (self._configuration.client_side_validation and
                language is not None and len(language) < 1):
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `1`")  # noqa: E501

        self._language = language

    @property
    def invoice_country(self):
        """Gets the invoice_country of this PublicPartner.  # noqa: E501


        :return: The invoice_country of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._invoice_country

    @invoice_country.setter
    def invoice_country(self, invoice_country):
        """Sets the invoice_country of this PublicPartner.


        :param invoice_country: The invoice_country of this PublicPartner.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and invoice_country is None:
            raise ValueError("Invalid value for `invoice_country`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                invoice_country is not None and len(invoice_country) > 3):
            raise ValueError("Invalid value for `invoice_country`, length must be less than or equal to `3`")  # noqa: E501
        if (self._configuration.client_side_validation and
                invoice_country is not None and len(invoice_country) < 1):
            raise ValueError("Invalid value for `invoice_country`, length must be greater than or equal to `1`")  # noqa: E501

        self._invoice_country = invoice_country

    @property
    def invoice_region(self):
        """Gets the invoice_region of this PublicPartner.  # noqa: E501


        :return: The invoice_region of this PublicPartner.  # noqa: E501
        :rtype: int
        """
        return self._invoice_region

    @invoice_region.setter
    def invoice_region(self, invoice_region):
        """Sets the invoice_region of this PublicPartner.


        :param invoice_region: The invoice_region of this PublicPartner.  # noqa: E501
        :type: int
        """

        self._invoice_region = invoice_region

    @property
    def invoice_city(self):
        """Gets the invoice_city of this PublicPartner.  # noqa: E501


        :return: The invoice_city of this PublicPartner.  # noqa: E501
        :rtype: int
        """
        return self._invoice_city

    @invoice_city.setter
    def invoice_city(self, invoice_city):
        """Sets the invoice_city of this PublicPartner.


        :param invoice_city: The invoice_city of this PublicPartner.  # noqa: E501
        :type: int
        """

        self._invoice_city = invoice_city

    @property
    def invoice_address(self):
        """Gets the invoice_address of this PublicPartner.  # noqa: E501


        :return: The invoice_address of this PublicPartner.  # noqa: E501
        :rtype: str
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address):
        """Sets the invoice_address of this PublicPartner.


        :param invoice_address: The invoice_address of this PublicPartner.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and invoice_address is None:
            raise ValueError("Invalid value for `invoice_address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                invoice_address is not None and len(invoice_address) > 300):
            raise ValueError("Invalid value for `invoice_address`, length must be less than or equal to `300`")  # noqa: E501

        self._invoice_address = invoice_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicPartner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicPartner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicPartner):
            return True

        return self.to_dict() != other.to_dict()
