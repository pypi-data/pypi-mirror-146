# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanyRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'enabled': 'bool',
        'name': 'str',
        'trigger': 'str',
        'trigger_settings': 'object',
        'actions': 'object',
        'subscribed_events': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'enabled': 'enabled',
        'name': 'name',
        'trigger': 'trigger',
        'trigger_settings': 'trigger_settings',
        'actions': 'actions',
        'subscribed_events': 'subscribed_events'
    }

    def __init__(self, id=None, enabled=None, name=None, trigger=None, trigger_settings=None, actions=None, subscribed_events=None, _configuration=None):  # noqa: E501
        """CompanyRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._enabled = None
        self._name = None
        self._trigger = None
        self._trigger_settings = None
        self._actions = None
        self._subscribed_events = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        self.trigger = trigger
        if trigger_settings is not None:
            self.trigger_settings = trigger_settings
        self.actions = actions
        if subscribed_events is not None:
            self.subscribed_events = subscribed_events

    @property
    def id(self):
        """Gets the id of this CompanyRule.  # noqa: E501


        :return: The id of this CompanyRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyRule.


        :param id: The id of this CompanyRule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def enabled(self):
        """Gets the enabled of this CompanyRule.  # noqa: E501


        :return: The enabled of this CompanyRule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CompanyRule.


        :param enabled: The enabled of this CompanyRule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this CompanyRule.  # noqa: E501


        :return: The name of this CompanyRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyRule.


        :param name: The name of this CompanyRule.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def trigger(self):
        """Gets the trigger of this CompanyRule.  # noqa: E501


        :return: The trigger of this CompanyRule.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this CompanyRule.


        :param trigger: The trigger of this CompanyRule.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                trigger is not None and len(trigger) > 200):
            raise ValueError("Invalid value for `trigger`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                trigger is not None and len(trigger) < 1):
            raise ValueError("Invalid value for `trigger`, length must be greater than or equal to `1`")  # noqa: E501

        self._trigger = trigger

    @property
    def trigger_settings(self):
        """Gets the trigger_settings of this CompanyRule.  # noqa: E501


        :return: The trigger_settings of this CompanyRule.  # noqa: E501
        :rtype: object
        """
        return self._trigger_settings

    @trigger_settings.setter
    def trigger_settings(self, trigger_settings):
        """Sets the trigger_settings of this CompanyRule.


        :param trigger_settings: The trigger_settings of this CompanyRule.  # noqa: E501
        :type: object
        """

        self._trigger_settings = trigger_settings

    @property
    def actions(self):
        """Gets the actions of this CompanyRule.  # noqa: E501


        :return: The actions of this CompanyRule.  # noqa: E501
        :rtype: object
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CompanyRule.


        :param actions: The actions of this CompanyRule.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")  # noqa: E501

        self._actions = actions

    @property
    def subscribed_events(self):
        """Gets the subscribed_events of this CompanyRule.  # noqa: E501


        :return: The subscribed_events of this CompanyRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscribed_events

    @subscribed_events.setter
    def subscribed_events(self, subscribed_events):
        """Sets the subscribed_events of this CompanyRule.


        :param subscribed_events: The subscribed_events of this CompanyRule.  # noqa: E501
        :type: list[str]
        """

        self._subscribed_events = subscribed_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyRule):
            return True

        return self.to_dict() != other.to_dict()
