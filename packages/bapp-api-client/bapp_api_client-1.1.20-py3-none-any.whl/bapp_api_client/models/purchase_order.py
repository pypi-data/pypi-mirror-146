# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PurchaseOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'supplier': 'int',
        'location': 'int',
        'formatted_number': 'str',
        '_date': 'date',
        'observations': 'str',
        'status': 'int',
        'created_by': 'str',
        'modified_by': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'items': 'list[PurchaseOrderItem]'
    }

    attribute_map = {
        'id': 'id',
        'supplier': 'supplier',
        'location': 'location',
        'formatted_number': 'formatted_number',
        '_date': 'date',
        'observations': 'observations',
        'status': 'status',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'items': 'items'
    }

    def __init__(self, id=None, supplier=None, location=None, formatted_number=None, _date=None, observations=None, status=None, created_by=None, modified_by=None, created_at=None, modified_at=None, items=None, _configuration=None):  # noqa: E501
        """PurchaseOrder - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._supplier = None
        self._location = None
        self._formatted_number = None
        self.__date = None
        self._observations = None
        self._status = None
        self._created_by = None
        self._modified_by = None
        self._created_at = None
        self._modified_at = None
        self._items = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.supplier = supplier
        if location is not None:
            self.location = location
        if formatted_number is not None:
            self.formatted_number = formatted_number
        self._date = _date
        if observations is not None:
            self.observations = observations
        if status is not None:
            self.status = status
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if items is not None:
            self.items = items

    @property
    def id(self):
        """Gets the id of this PurchaseOrder.  # noqa: E501


        :return: The id of this PurchaseOrder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PurchaseOrder.


        :param id: The id of this PurchaseOrder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def supplier(self):
        """Gets the supplier of this PurchaseOrder.  # noqa: E501


        :return: The supplier of this PurchaseOrder.  # noqa: E501
        :rtype: int
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this PurchaseOrder.


        :param supplier: The supplier of this PurchaseOrder.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and supplier is None:
            raise ValueError("Invalid value for `supplier`, must not be `None`")  # noqa: E501

        self._supplier = supplier

    @property
    def location(self):
        """Gets the location of this PurchaseOrder.  # noqa: E501


        :return: The location of this PurchaseOrder.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PurchaseOrder.


        :param location: The location of this PurchaseOrder.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def formatted_number(self):
        """Gets the formatted_number of this PurchaseOrder.  # noqa: E501


        :return: The formatted_number of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._formatted_number

    @formatted_number.setter
    def formatted_number(self, formatted_number):
        """Sets the formatted_number of this PurchaseOrder.


        :param formatted_number: The formatted_number of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._formatted_number = formatted_number

    @property
    def _date(self):
        """Gets the _date of this PurchaseOrder.  # noqa: E501


        :return: The _date of this PurchaseOrder.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PurchaseOrder.


        :param _date: The _date of this PurchaseOrder.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def observations(self):
        """Gets the observations of this PurchaseOrder.  # noqa: E501


        :return: The observations of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this PurchaseOrder.


        :param observations: The observations of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._observations = observations

    @property
    def status(self):
        """Gets the status of this PurchaseOrder.  # noqa: E501


        :return: The status of this PurchaseOrder.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PurchaseOrder.


        :param status: The status of this PurchaseOrder.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def created_by(self):
        """Gets the created_by of this PurchaseOrder.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PurchaseOrder.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this PurchaseOrder.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this PurchaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this PurchaseOrder.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this PurchaseOrder.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def created_at(self):
        """Gets the created_at of this PurchaseOrder.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this PurchaseOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PurchaseOrder.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this PurchaseOrder.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this PurchaseOrder.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this PurchaseOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this PurchaseOrder.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this PurchaseOrder.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def items(self):
        """Gets the items of this PurchaseOrder.  # noqa: E501


        :return: The items of this PurchaseOrder.  # noqa: E501
        :rtype: list[PurchaseOrderItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PurchaseOrder.


        :param items: The items of this PurchaseOrder.  # noqa: E501
        :type: list[PurchaseOrderItem]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchaseOrder):
            return True

        return self.to_dict() != other.to_dict()
