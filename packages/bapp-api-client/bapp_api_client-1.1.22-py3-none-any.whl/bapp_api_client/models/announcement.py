# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Announcement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'published': 'bool',
        'published_at': 'datetime',
        'publish_after': 'datetime',
        'all_users': 'bool',
        'title': 'str',
        'content': 'str',
        'locations': 'list[int]',
        'departments': 'list[int]',
        'employees': 'list[int]',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'created_by': 'str',
        'modified_by': 'str',
        'attachments_set': 'list[Attachment]'
    }

    attribute_map = {
        'id': 'id',
        'published': 'published',
        'published_at': 'published_at',
        'publish_after': 'publish_after',
        'all_users': 'all_users',
        'title': 'title',
        'content': 'content',
        'locations': 'locations',
        'departments': 'departments',
        'employees': 'employees',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'attachments_set': 'attachments_set'
    }

    def __init__(self, id=None, published=None, published_at=None, publish_after=None, all_users=None, title=None, content=None, locations=None, departments=None, employees=None, created_at=None, modified_at=None, created_by=None, modified_by=None, attachments_set=None, _configuration=None):  # noqa: E501
        """Announcement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._published = None
        self._published_at = None
        self._publish_after = None
        self._all_users = None
        self._title = None
        self._content = None
        self._locations = None
        self._departments = None
        self._employees = None
        self._created_at = None
        self._modified_at = None
        self._created_by = None
        self._modified_by = None
        self._attachments_set = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if published is not None:
            self.published = published
        if published_at is not None:
            self.published_at = published_at
        if publish_after is not None:
            self.publish_after = publish_after
        if all_users is not None:
            self.all_users = all_users
        self.title = title
        self.content = content
        if locations is not None:
            self.locations = locations
        if departments is not None:
            self.departments = departments
        if employees is not None:
            self.employees = employees
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if attachments_set is not None:
            self.attachments_set = attachments_set

    @property
    def id(self):
        """Gets the id of this Announcement.  # noqa: E501


        :return: The id of this Announcement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Announcement.


        :param id: The id of this Announcement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def published(self):
        """Gets the published of this Announcement.  # noqa: E501


        :return: The published of this Announcement.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Announcement.


        :param published: The published of this Announcement.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def published_at(self):
        """Gets the published_at of this Announcement.  # noqa: E501


        :return: The published_at of this Announcement.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this Announcement.


        :param published_at: The published_at of this Announcement.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def publish_after(self):
        """Gets the publish_after of this Announcement.  # noqa: E501


        :return: The publish_after of this Announcement.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_after

    @publish_after.setter
    def publish_after(self, publish_after):
        """Sets the publish_after of this Announcement.


        :param publish_after: The publish_after of this Announcement.  # noqa: E501
        :type: datetime
        """

        self._publish_after = publish_after

    @property
    def all_users(self):
        """Gets the all_users of this Announcement.  # noqa: E501


        :return: The all_users of this Announcement.  # noqa: E501
        :rtype: bool
        """
        return self._all_users

    @all_users.setter
    def all_users(self, all_users):
        """Sets the all_users of this Announcement.


        :param all_users: The all_users of this Announcement.  # noqa: E501
        :type: bool
        """

        self._all_users = all_users

    @property
    def title(self):
        """Gets the title of this Announcement.  # noqa: E501


        :return: The title of this Announcement.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Announcement.


        :param title: The title of this Announcement.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 200):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this Announcement.  # noqa: E501


        :return: The content of this Announcement.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Announcement.


        :param content: The content of this Announcement.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                content is not None and len(content) < 1):
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")  # noqa: E501

        self._content = content

    @property
    def locations(self):
        """Gets the locations of this Announcement.  # noqa: E501


        :return: The locations of this Announcement.  # noqa: E501
        :rtype: list[int]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Announcement.


        :param locations: The locations of this Announcement.  # noqa: E501
        :type: list[int]
        """

        self._locations = locations

    @property
    def departments(self):
        """Gets the departments of this Announcement.  # noqa: E501


        :return: The departments of this Announcement.  # noqa: E501
        :rtype: list[int]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this Announcement.


        :param departments: The departments of this Announcement.  # noqa: E501
        :type: list[int]
        """

        self._departments = departments

    @property
    def employees(self):
        """Gets the employees of this Announcement.  # noqa: E501


        :return: The employees of this Announcement.  # noqa: E501
        :rtype: list[int]
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this Announcement.


        :param employees: The employees of this Announcement.  # noqa: E501
        :type: list[int]
        """

        self._employees = employees

    @property
    def created_at(self):
        """Gets the created_at of this Announcement.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Announcement.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Announcement.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Announcement.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Announcement.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Announcement.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Announcement.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Announcement.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def created_by(self):
        """Gets the created_by of this Announcement.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this Announcement.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Announcement.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this Announcement.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this Announcement.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this Announcement.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Announcement.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this Announcement.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def attachments_set(self):
        """Gets the attachments_set of this Announcement.  # noqa: E501


        :return: The attachments_set of this Announcement.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments_set

    @attachments_set.setter
    def attachments_set(self, attachments_set):
        """Sets the attachments_set of this Announcement.


        :param attachments_set: The attachments_set of this Announcement.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments_set = attachments_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Announcement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Announcement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Announcement):
            return True

        return self.to_dict() != other.to_dict()
