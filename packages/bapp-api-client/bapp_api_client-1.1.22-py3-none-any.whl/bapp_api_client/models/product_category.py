# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ProductCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'parent': 'int',
        'external_id': 'str',
        'description': 'str',
        'active': 'bool',
        'translations': 'object',
        'photo': 'str',
        'markup': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'parent': 'parent',
        'external_id': 'external_id',
        'description': 'description',
        'active': 'active',
        'translations': 'translations',
        'photo': 'photo',
        'markup': 'markup'
    }

    def __init__(self, id=None, name=None, parent=None, external_id=None, description=None, active=None, translations=None, photo=None, markup=None, _configuration=None):  # noqa: E501
        """ProductCategory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._parent = None
        self._external_id = None
        self._description = None
        self._active = None
        self._translations = None
        self._photo = None
        self._markup = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if parent is not None:
            self.parent = parent
        if external_id is not None:
            self.external_id = external_id
        if description is not None:
            self.description = description
        if active is not None:
            self.active = active
        if translations is not None:
            self.translations = translations
        if photo is not None:
            self.photo = photo
        if markup is not None:
            self.markup = markup

    @property
    def id(self):
        """Gets the id of this ProductCategory.  # noqa: E501


        :return: The id of this ProductCategory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductCategory.


        :param id: The id of this ProductCategory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductCategory.  # noqa: E501


        :return: The name of this ProductCategory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductCategory.


        :param name: The name of this ProductCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this ProductCategory.  # noqa: E501


        :return: The parent of this ProductCategory.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ProductCategory.


        :param parent: The parent of this ProductCategory.  # noqa: E501
        :type: int
        """

        self._parent = parent

    @property
    def external_id(self):
        """Gets the external_id of this ProductCategory.  # noqa: E501


        :return: The external_id of this ProductCategory.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ProductCategory.


        :param external_id: The external_id of this ProductCategory.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                external_id is not None and len(external_id) > 40):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `40`")  # noqa: E501

        self._external_id = external_id

    @property
    def description(self):
        """Gets the description of this ProductCategory.  # noqa: E501


        :return: The description of this ProductCategory.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductCategory.


        :param description: The description of this ProductCategory.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """Gets the active of this ProductCategory.  # noqa: E501


        :return: The active of this ProductCategory.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProductCategory.


        :param active: The active of this ProductCategory.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def translations(self):
        """Gets the translations of this ProductCategory.  # noqa: E501


        :return: The translations of this ProductCategory.  # noqa: E501
        :rtype: object
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this ProductCategory.


        :param translations: The translations of this ProductCategory.  # noqa: E501
        :type: object
        """

        self._translations = translations

    @property
    def photo(self):
        """Gets the photo of this ProductCategory.  # noqa: E501


        :return: The photo of this ProductCategory.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this ProductCategory.


        :param photo: The photo of this ProductCategory.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def markup(self):
        """Gets the markup of this ProductCategory.  # noqa: E501


        :return: The markup of this ProductCategory.  # noqa: E501
        :rtype: int
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this ProductCategory.


        :param markup: The markup of this ProductCategory.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                markup is not None and markup > 32767):  # noqa: E501
            raise ValueError("Invalid value for `markup`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                markup is not None and markup < 0):  # noqa: E501
            raise ValueError("Invalid value for `markup`, must be a value greater than or equal to `0`")  # noqa: E501

        self._markup = markup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductCategory):
            return True

        return self.to_dict() != other.to_dict()
