# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PaymentTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'provider': 'int',
        'client': 'int',
        'status': 'str',
        'identifier': 'str',
        'ref_id': 'str',
        'description': 'str',
        'amount': 'str',
        'tax_value': 'str',
        'currency': 'str',
        'exchange_rate': 'str',
        'amount_ron': 'str',
        'target': 'str',
        'target_type': 'str',
        'income': 'str',
        'payment_method': 'int',
        'fiscal_invoice': 'str'
    }

    attribute_map = {
        'id': 'id',
        'provider': 'provider',
        'client': 'client',
        'status': 'status',
        'identifier': 'identifier',
        'ref_id': 'ref_id',
        'description': 'description',
        'amount': 'amount',
        'tax_value': 'tax_value',
        'currency': 'currency',
        'exchange_rate': 'exchange_rate',
        'amount_ron': 'amount_ron',
        'target': 'target',
        'target_type': 'target_type',
        'income': 'income',
        'payment_method': 'payment_method',
        'fiscal_invoice': 'fiscal_invoice'
    }

    def __init__(self, id=None, provider=None, client=None, status=None, identifier=None, ref_id=None, description=None, amount=None, tax_value=None, currency=None, exchange_rate=None, amount_ron=None, target=None, target_type=None, income=None, payment_method=None, fiscal_invoice=None, _configuration=None):  # noqa: E501
        """PaymentTransaction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._provider = None
        self._client = None
        self._status = None
        self._identifier = None
        self._ref_id = None
        self._description = None
        self._amount = None
        self._tax_value = None
        self._currency = None
        self._exchange_rate = None
        self._amount_ron = None
        self._target = None
        self._target_type = None
        self._income = None
        self._payment_method = None
        self._fiscal_invoice = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.provider = provider
        self.client = client
        if status is not None:
            self.status = status
        if identifier is not None:
            self.identifier = identifier
        if ref_id is not None:
            self.ref_id = ref_id
        self.description = description
        self.amount = amount
        if tax_value is not None:
            self.tax_value = tax_value
        self.currency = currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if amount_ron is not None:
            self.amount_ron = amount_ron
        if target is not None:
            self.target = target
        if target_type is not None:
            self.target_type = target_type
        if income is not None:
            self.income = income
        if payment_method is not None:
            self.payment_method = payment_method
        if fiscal_invoice is not None:
            self.fiscal_invoice = fiscal_invoice

    @property
    def id(self):
        """Gets the id of this PaymentTransaction.  # noqa: E501


        :return: The id of this PaymentTransaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentTransaction.


        :param id: The id of this PaymentTransaction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def provider(self):
        """Gets the provider of this PaymentTransaction.  # noqa: E501


        :return: The provider of this PaymentTransaction.  # noqa: E501
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PaymentTransaction.


        :param provider: The provider of this PaymentTransaction.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def client(self):
        """Gets the client of this PaymentTransaction.  # noqa: E501


        :return: The client of this PaymentTransaction.  # noqa: E501
        :rtype: int
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this PaymentTransaction.


        :param client: The client of this PaymentTransaction.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client

    @property
    def status(self):
        """Gets the status of this PaymentTransaction.  # noqa: E501


        :return: The status of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentTransaction.


        :param status: The status of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def identifier(self):
        """Gets the identifier of this PaymentTransaction.  # noqa: E501


        :return: The identifier of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PaymentTransaction.


        :param identifier: The identifier of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def ref_id(self):
        """Gets the ref_id of this PaymentTransaction.  # noqa: E501


        :return: The ref_id of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this PaymentTransaction.


        :param ref_id: The ref_id of this PaymentTransaction.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ref_id is not None and len(ref_id) < 1):
            raise ValueError("Invalid value for `ref_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._ref_id = ref_id

    @property
    def description(self):
        """Gets the description of this PaymentTransaction.  # noqa: E501


        :return: The description of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentTransaction.


        :param description: The description of this PaymentTransaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this PaymentTransaction.  # noqa: E501


        :return: The amount of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentTransaction.


        :param amount: The amount of this PaymentTransaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def tax_value(self):
        """Gets the tax_value of this PaymentTransaction.  # noqa: E501


        :return: The tax_value of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this PaymentTransaction.


        :param tax_value: The tax_value of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._tax_value = tax_value

    @property
    def currency(self):
        """Gets the currency of this PaymentTransaction.  # noqa: E501


        :return: The currency of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentTransaction.


        :param currency: The currency of this PaymentTransaction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this PaymentTransaction.  # noqa: E501


        :return: The exchange_rate of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this PaymentTransaction.


        :param exchange_rate: The exchange_rate of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._exchange_rate = exchange_rate

    @property
    def amount_ron(self):
        """Gets the amount_ron of this PaymentTransaction.  # noqa: E501


        :return: The amount_ron of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._amount_ron

    @amount_ron.setter
    def amount_ron(self, amount_ron):
        """Sets the amount_ron of this PaymentTransaction.


        :param amount_ron: The amount_ron of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._amount_ron = amount_ron

    @property
    def target(self):
        """Gets the target of this PaymentTransaction.  # noqa: E501


        :return: The target of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this PaymentTransaction.


        :param target: The target of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def target_type(self):
        """Gets the target_type of this PaymentTransaction.  # noqa: E501


        :return: The target_type of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this PaymentTransaction.


        :param target_type: The target_type of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._target_type = target_type

    @property
    def income(self):
        """Gets the income of this PaymentTransaction.  # noqa: E501


        :return: The income of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this PaymentTransaction.


        :param income: The income of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._income = income

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentTransaction.  # noqa: E501


        :return: The payment_method of this PaymentTransaction.  # noqa: E501
        :rtype: int
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentTransaction.


        :param payment_method: The payment_method of this PaymentTransaction.  # noqa: E501
        :type: int
        """

        self._payment_method = payment_method

    @property
    def fiscal_invoice(self):
        """Gets the fiscal_invoice of this PaymentTransaction.  # noqa: E501


        :return: The fiscal_invoice of this PaymentTransaction.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_invoice

    @fiscal_invoice.setter
    def fiscal_invoice(self, fiscal_invoice):
        """Sets the fiscal_invoice of this PaymentTransaction.


        :param fiscal_invoice: The fiscal_invoice of this PaymentTransaction.  # noqa: E501
        :type: str
        """

        self._fiscal_invoice = fiscal_invoice

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentTransaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentTransaction):
            return True

        return self.to_dict() != other.to_dict()
