# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Column(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'index': 'int',
        'row': 'str',
        'depth': 'int',
        'width': 'int',
        'height': 'int',
        'x': 'int',
        'y': 'int',
        'z': 'int'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'index': 'index',
        'row': 'row',
        'depth': 'depth',
        'width': 'width',
        'height': 'height',
        'x': 'x',
        'y': 'y',
        'z': 'z'
    }

    def __init__(self, id=None, code=None, index=None, row=None, depth=None, width=None, height=None, x=None, y=None, z=None, _configuration=None):  # noqa: E501
        """Column - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._code = None
        self._index = None
        self._row = None
        self._depth = None
        self._width = None
        self._height = None
        self._x = None
        self._y = None
        self._z = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if index is not None:
            self.index = index
        self.row = row
        if depth is not None:
            self.depth = depth
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z

    @property
    def id(self):
        """Gets the id of this Column.  # noqa: E501


        :return: The id of this Column.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Column.


        :param id: The id of this Column.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this Column.  # noqa: E501


        :return: The code of this Column.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Column.


        :param code: The code of this Column.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code is not None and len(code) < 1):
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")  # noqa: E501

        self._code = code

    @property
    def index(self):
        """Gets the index of this Column.  # noqa: E501


        :return: The index of this Column.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Column.


        :param index: The index of this Column.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def row(self):
        """Gets the row of this Column.  # noqa: E501


        :return: The row of this Column.  # noqa: E501
        :rtype: str
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this Column.


        :param row: The row of this Column.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and row is None:
            raise ValueError("Invalid value for `row`, must not be `None`")  # noqa: E501

        self._row = row

    @property
    def depth(self):
        """Gets the depth of this Column.  # noqa: E501


        :return: The depth of this Column.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this Column.


        :param depth: The depth of this Column.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                depth is not None and depth > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `depth`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                depth is not None and depth < 0):  # noqa: E501
            raise ValueError("Invalid value for `depth`, must be a value greater than or equal to `0`")  # noqa: E501

        self._depth = depth

    @property
    def width(self):
        """Gets the width of this Column.  # noqa: E501


        :return: The width of this Column.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Column.


        :param width: The width of this Column.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                width is not None and width > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                width is not None and width < 0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this Column.  # noqa: E501


        :return: The height of this Column.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Column.


        :param height: The height of this Column.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                height is not None and height > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                height is not None and height < 0):  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0`")  # noqa: E501

        self._height = height

    @property
    def x(self):
        """Gets the x of this Column.  # noqa: E501


        :return: The x of this Column.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Column.


        :param x: The x of this Column.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                x is not None and x > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                x is not None and x < 0):  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `0`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this Column.  # noqa: E501


        :return: The y of this Column.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Column.


        :param y: The y of this Column.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                y is not None and y > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                y is not None and y < 0):  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `0`")  # noqa: E501

        self._y = y

    @property
    def z(self):
        """Gets the z of this Column.  # noqa: E501


        :return: The z of this Column.  # noqa: E501
        :rtype: int
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this Column.


        :param z: The z of this Column.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                z is not None and z > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `z`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                z is not None and z < 0):  # noqa: E501
            raise ValueError("Invalid value for `z`, must be a value greater than or equal to `0`")  # noqa: E501

        self._z = z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Column, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Column):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Column):
            return True

        return self.to_dict() != other.to_dict()
