# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Resource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'type': 'int',
        'units': 'int',
        'identifier': 'str',
        'website_allow_booking': 'bool',
        'website_show_pending': 'bool',
        'group': 'int',
        'user': 'str',
        'product': 'int',
        'location': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'units': 'units',
        'identifier': 'identifier',
        'website_allow_booking': 'website_allow_booking',
        'website_show_pending': 'website_show_pending',
        'group': 'group',
        'user': 'user',
        'product': 'product',
        'location': 'location'
    }

    def __init__(self, id=None, name=None, description=None, type=None, units=None, identifier=None, website_allow_booking=None, website_show_pending=None, group=None, user=None, product=None, location=None, _configuration=None):  # noqa: E501
        """Resource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._units = None
        self._identifier = None
        self._website_allow_booking = None
        self._website_show_pending = None
        self._group = None
        self._user = None
        self._product = None
        self._location = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if units is not None:
            self.units = units
        if identifier is not None:
            self.identifier = identifier
        if website_allow_booking is not None:
            self.website_allow_booking = website_allow_booking
        if website_show_pending is not None:
            self.website_show_pending = website_show_pending
        if group is not None:
            self.group = group
        if user is not None:
            self.user = user
        if product is not None:
            self.product = product
        if location is not None:
            self.location = location

    @property
    def id(self):
        """Gets the id of this Resource.  # noqa: E501


        :return: The id of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Resource.


        :param id: The id of this Resource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Resource.  # noqa: E501


        :return: The name of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resource.


        :param name: The name of this Resource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Resource.  # noqa: E501


        :return: The description of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Resource.


        :param description: The description of this Resource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Resource.  # noqa: E501


        :return: The type of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Resource.


        :param type: The type of this Resource.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def units(self):
        """Gets the units of this Resource.  # noqa: E501


        :return: The units of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Resource.


        :param units: The units of this Resource.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                units is not None and units > 32767):  # noqa: E501
            raise ValueError("Invalid value for `units`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                units is not None and units < 0):  # noqa: E501
            raise ValueError("Invalid value for `units`, must be a value greater than or equal to `0`")  # noqa: E501

        self._units = units

    @property
    def identifier(self):
        """Gets the identifier of this Resource.  # noqa: E501


        :return: The identifier of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Resource.


        :param identifier: The identifier of this Resource.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def website_allow_booking(self):
        """Gets the website_allow_booking of this Resource.  # noqa: E501


        :return: The website_allow_booking of this Resource.  # noqa: E501
        :rtype: bool
        """
        return self._website_allow_booking

    @website_allow_booking.setter
    def website_allow_booking(self, website_allow_booking):
        """Sets the website_allow_booking of this Resource.


        :param website_allow_booking: The website_allow_booking of this Resource.  # noqa: E501
        :type: bool
        """

        self._website_allow_booking = website_allow_booking

    @property
    def website_show_pending(self):
        """Gets the website_show_pending of this Resource.  # noqa: E501


        :return: The website_show_pending of this Resource.  # noqa: E501
        :rtype: bool
        """
        return self._website_show_pending

    @website_show_pending.setter
    def website_show_pending(self, website_show_pending):
        """Sets the website_show_pending of this Resource.


        :param website_show_pending: The website_show_pending of this Resource.  # noqa: E501
        :type: bool
        """

        self._website_show_pending = website_show_pending

    @property
    def group(self):
        """Gets the group of this Resource.  # noqa: E501


        :return: The group of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Resource.


        :param group: The group of this Resource.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def user(self):
        """Gets the user of this Resource.  # noqa: E501


        :return: The user of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Resource.


        :param user: The user of this Resource.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def product(self):
        """Gets the product of this Resource.  # noqa: E501


        :return: The product of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Resource.


        :param product: The product of this Resource.  # noqa: E501
        :type: int
        """

        self._product = product

    @property
    def location(self):
        """Gets the location of this Resource.  # noqa: E501


        :return: The location of this Resource.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Resource.


        :param location: The location of this Resource.  # noqa: E501
        :type: int
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Resource):
            return True

        return self.to_dict() != other.to_dict()
