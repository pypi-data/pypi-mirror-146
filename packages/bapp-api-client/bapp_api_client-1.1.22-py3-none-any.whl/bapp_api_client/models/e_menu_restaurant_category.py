# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EMenuRestaurantCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'restaurant': 'str',
        'category': 'int',
        'position': 'int',
        'icon': 'str',
        'photo': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'restaurant': 'restaurant',
        'category': 'category',
        'position': 'position',
        'icon': 'icon',
        'photo': 'photo',
        'active': 'active'
    }

    def __init__(self, id=None, restaurant=None, category=None, position=None, icon=None, photo=None, active=None, _configuration=None):  # noqa: E501
        """EMenuRestaurantCategory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._restaurant = None
        self._category = None
        self._position = None
        self._icon = None
        self._photo = None
        self._active = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.restaurant = restaurant
        if category is not None:
            self.category = category
        if position is not None:
            self.position = position
        self.icon = icon
        if photo is not None:
            self.photo = photo
        if active is not None:
            self.active = active

    @property
    def id(self):
        """Gets the id of this EMenuRestaurantCategory.  # noqa: E501


        :return: The id of this EMenuRestaurantCategory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EMenuRestaurantCategory.


        :param id: The id of this EMenuRestaurantCategory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def restaurant(self):
        """Gets the restaurant of this EMenuRestaurantCategory.  # noqa: E501


        :return: The restaurant of this EMenuRestaurantCategory.  # noqa: E501
        :rtype: str
        """
        return self._restaurant

    @restaurant.setter
    def restaurant(self, restaurant):
        """Sets the restaurant of this EMenuRestaurantCategory.


        :param restaurant: The restaurant of this EMenuRestaurantCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and restaurant is None:
            raise ValueError("Invalid value for `restaurant`, must not be `None`")  # noqa: E501

        self._restaurant = restaurant

    @property
    def category(self):
        """Gets the category of this EMenuRestaurantCategory.  # noqa: E501


        :return: The category of this EMenuRestaurantCategory.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EMenuRestaurantCategory.


        :param category: The category of this EMenuRestaurantCategory.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def position(self):
        """Gets the position of this EMenuRestaurantCategory.  # noqa: E501


        :return: The position of this EMenuRestaurantCategory.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this EMenuRestaurantCategory.


        :param position: The position of this EMenuRestaurantCategory.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                position is not None and position > 32767):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                position is not None and position < 0):  # noqa: E501
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `0`")  # noqa: E501

        self._position = position

    @property
    def icon(self):
        """Gets the icon of this EMenuRestaurantCategory.  # noqa: E501


        :return: The icon of this EMenuRestaurantCategory.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this EMenuRestaurantCategory.


        :param icon: The icon of this EMenuRestaurantCategory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                icon is not None and len(icon) > 50):
            raise ValueError("Invalid value for `icon`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                icon is not None and len(icon) < 1):
            raise ValueError("Invalid value for `icon`, length must be greater than or equal to `1`")  # noqa: E501

        self._icon = icon

    @property
    def photo(self):
        """Gets the photo of this EMenuRestaurantCategory.  # noqa: E501


        :return: The photo of this EMenuRestaurantCategory.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this EMenuRestaurantCategory.


        :param photo: The photo of this EMenuRestaurantCategory.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def active(self):
        """Gets the active of this EMenuRestaurantCategory.  # noqa: E501


        :return: The active of this EMenuRestaurantCategory.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EMenuRestaurantCategory.


        :param active: The active of this EMenuRestaurantCategory.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EMenuRestaurantCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMenuRestaurantCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMenuRestaurantCategory):
            return True

        return self.to_dict() != other.to_dict()
