# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class LoanContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'number': 'str',
        'currency': 'str',
        'bank_account': 'int',
        'cash_balance': 'int',
        'date_start': 'date',
        'date_end': 'date',
        'date_completed': 'date',
        'draft': 'bool',
        'reimbursed': 'bool',
        'lenders': 'list[Lender]',
        'total': 'str',
        'paid': 'str',
        'active': 'str',
        'pdf_file': 'str',
        'view_tokens': 'str'
    }

    attribute_map = {
        'id': 'id',
        'number': 'number',
        'currency': 'currency',
        'bank_account': 'bank_account',
        'cash_balance': 'cash_balance',
        'date_start': 'date_start',
        'date_end': 'date_end',
        'date_completed': 'date_completed',
        'draft': 'draft',
        'reimbursed': 'reimbursed',
        'lenders': 'lenders',
        'total': 'total',
        'paid': 'paid',
        'active': 'active',
        'pdf_file': 'pdf_file',
        'view_tokens': 'view_tokens'
    }

    def __init__(self, id=None, number=None, currency=None, bank_account=None, cash_balance=None, date_start=None, date_end=None, date_completed=None, draft=None, reimbursed=None, lenders=None, total=None, paid=None, active=None, pdf_file=None, view_tokens=None, _configuration=None):  # noqa: E501
        """LoanContract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._number = None
        self._currency = None
        self._bank_account = None
        self._cash_balance = None
        self._date_start = None
        self._date_end = None
        self._date_completed = None
        self._draft = None
        self._reimbursed = None
        self._lenders = None
        self._total = None
        self._paid = None
        self._active = None
        self._pdf_file = None
        self._view_tokens = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.number = number
        self.currency = currency
        if bank_account is not None:
            self.bank_account = bank_account
        if cash_balance is not None:
            self.cash_balance = cash_balance
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if date_completed is not None:
            self.date_completed = date_completed
        if draft is not None:
            self.draft = draft
        if reimbursed is not None:
            self.reimbursed = reimbursed
        self.lenders = lenders
        if total is not None:
            self.total = total
        if paid is not None:
            self.paid = paid
        if active is not None:
            self.active = active
        if pdf_file is not None:
            self.pdf_file = pdf_file
        if view_tokens is not None:
            self.view_tokens = view_tokens

    @property
    def id(self):
        """Gets the id of this LoanContract.  # noqa: E501


        :return: The id of this LoanContract.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoanContract.


        :param id: The id of this LoanContract.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this LoanContract.  # noqa: E501


        :return: The number of this LoanContract.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this LoanContract.


        :param number: The number of this LoanContract.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                number is not None and len(number) > 50):
            raise ValueError("Invalid value for `number`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                number is not None and len(number) < 1):
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def currency(self):
        """Gets the currency of this LoanContract.  # noqa: E501


        :return: The currency of this LoanContract.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LoanContract.


        :param currency: The currency of this LoanContract.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def bank_account(self):
        """Gets the bank_account of this LoanContract.  # noqa: E501


        :return: The bank_account of this LoanContract.  # noqa: E501
        :rtype: int
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this LoanContract.


        :param bank_account: The bank_account of this LoanContract.  # noqa: E501
        :type: int
        """

        self._bank_account = bank_account

    @property
    def cash_balance(self):
        """Gets the cash_balance of this LoanContract.  # noqa: E501


        :return: The cash_balance of this LoanContract.  # noqa: E501
        :rtype: int
        """
        return self._cash_balance

    @cash_balance.setter
    def cash_balance(self, cash_balance):
        """Sets the cash_balance of this LoanContract.


        :param cash_balance: The cash_balance of this LoanContract.  # noqa: E501
        :type: int
        """

        self._cash_balance = cash_balance

    @property
    def date_start(self):
        """Gets the date_start of this LoanContract.  # noqa: E501


        :return: The date_start of this LoanContract.  # noqa: E501
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this LoanContract.


        :param date_start: The date_start of this LoanContract.  # noqa: E501
        :type: date
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this LoanContract.  # noqa: E501


        :return: The date_end of this LoanContract.  # noqa: E501
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this LoanContract.


        :param date_end: The date_end of this LoanContract.  # noqa: E501
        :type: date
        """

        self._date_end = date_end

    @property
    def date_completed(self):
        """Gets the date_completed of this LoanContract.  # noqa: E501


        :return: The date_completed of this LoanContract.  # noqa: E501
        :rtype: date
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """Sets the date_completed of this LoanContract.


        :param date_completed: The date_completed of this LoanContract.  # noqa: E501
        :type: date
        """

        self._date_completed = date_completed

    @property
    def draft(self):
        """Gets the draft of this LoanContract.  # noqa: E501


        :return: The draft of this LoanContract.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this LoanContract.


        :param draft: The draft of this LoanContract.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def reimbursed(self):
        """Gets the reimbursed of this LoanContract.  # noqa: E501


        :return: The reimbursed of this LoanContract.  # noqa: E501
        :rtype: bool
        """
        return self._reimbursed

    @reimbursed.setter
    def reimbursed(self, reimbursed):
        """Sets the reimbursed of this LoanContract.


        :param reimbursed: The reimbursed of this LoanContract.  # noqa: E501
        :type: bool
        """

        self._reimbursed = reimbursed

    @property
    def lenders(self):
        """Gets the lenders of this LoanContract.  # noqa: E501


        :return: The lenders of this LoanContract.  # noqa: E501
        :rtype: list[Lender]
        """
        return self._lenders

    @lenders.setter
    def lenders(self, lenders):
        """Sets the lenders of this LoanContract.


        :param lenders: The lenders of this LoanContract.  # noqa: E501
        :type: list[Lender]
        """
        if self._configuration.client_side_validation and lenders is None:
            raise ValueError("Invalid value for `lenders`, must not be `None`")  # noqa: E501

        self._lenders = lenders

    @property
    def total(self):
        """Gets the total of this LoanContract.  # noqa: E501


        :return: The total of this LoanContract.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LoanContract.


        :param total: The total of this LoanContract.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def paid(self):
        """Gets the paid of this LoanContract.  # noqa: E501


        :return: The paid of this LoanContract.  # noqa: E501
        :rtype: str
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this LoanContract.


        :param paid: The paid of this LoanContract.  # noqa: E501
        :type: str
        """

        self._paid = paid

    @property
    def active(self):
        """Gets the active of this LoanContract.  # noqa: E501


        :return: The active of this LoanContract.  # noqa: E501
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LoanContract.


        :param active: The active of this LoanContract.  # noqa: E501
        :type: str
        """

        self._active = active

    @property
    def pdf_file(self):
        """Gets the pdf_file of this LoanContract.  # noqa: E501


        :return: The pdf_file of this LoanContract.  # noqa: E501
        :rtype: str
        """
        return self._pdf_file

    @pdf_file.setter
    def pdf_file(self, pdf_file):
        """Sets the pdf_file of this LoanContract.


        :param pdf_file: The pdf_file of this LoanContract.  # noqa: E501
        :type: str
        """

        self._pdf_file = pdf_file

    @property
    def view_tokens(self):
        """Gets the view_tokens of this LoanContract.  # noqa: E501


        :return: The view_tokens of this LoanContract.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this LoanContract.


        :param view_tokens: The view_tokens of this LoanContract.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoanContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoanContract):
            return True

        return self.to_dict() != other.to_dict()
