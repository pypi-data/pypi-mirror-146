# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanySMSLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'datetime',
        'identifier': 'str',
        'device_id': 'int',
        'incoming': 'bool',
        'message': 'str',
        'phone': 'str',
        'confirmed': 'bool',
        'attachment': 'str'
    }

    attribute_map = {
        'time': 'time',
        'identifier': 'identifier',
        'device_id': 'device_id',
        'incoming': 'incoming',
        'message': 'message',
        'phone': 'phone',
        'confirmed': 'confirmed',
        'attachment': 'attachment'
    }

    def __init__(self, time=None, identifier=None, device_id=None, incoming=None, message=None, phone=None, confirmed=None, attachment=None, _configuration=None):  # noqa: E501
        """CompanySMSLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._time = None
        self._identifier = None
        self._device_id = None
        self._incoming = None
        self._message = None
        self._phone = None
        self._confirmed = None
        self._attachment = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if identifier is not None:
            self.identifier = identifier
        self.device_id = device_id
        if incoming is not None:
            self.incoming = incoming
        self.message = message
        self.phone = phone
        if confirmed is not None:
            self.confirmed = confirmed
        if attachment is not None:
            self.attachment = attachment

    @property
    def time(self):
        """Gets the time of this CompanySMSLog.  # noqa: E501


        :return: The time of this CompanySMSLog.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CompanySMSLog.


        :param time: The time of this CompanySMSLog.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def identifier(self):
        """Gets the identifier of this CompanySMSLog.  # noqa: E501


        :return: The identifier of this CompanySMSLog.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CompanySMSLog.


        :param identifier: The identifier of this CompanySMSLog.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def device_id(self):
        """Gets the device_id of this CompanySMSLog.  # noqa: E501


        :return: The device_id of this CompanySMSLog.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this CompanySMSLog.


        :param device_id: The device_id of this CompanySMSLog.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                device_id is not None and device_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                device_id is not None and device_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._device_id = device_id

    @property
    def incoming(self):
        """Gets the incoming of this CompanySMSLog.  # noqa: E501

        Inregistrarea a ajuns pe telefon si e inregistrata aici  # noqa: E501

        :return: The incoming of this CompanySMSLog.  # noqa: E501
        :rtype: bool
        """
        return self._incoming

    @incoming.setter
    def incoming(self, incoming):
        """Sets the incoming of this CompanySMSLog.

        Inregistrarea a ajuns pe telefon si e inregistrata aici  # noqa: E501

        :param incoming: The incoming of this CompanySMSLog.  # noqa: E501
        :type: bool
        """

        self._incoming = incoming

    @property
    def message(self):
        """Gets the message of this CompanySMSLog.  # noqa: E501


        :return: The message of this CompanySMSLog.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CompanySMSLog.


        :param message: The message of this CompanySMSLog.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message is not None and len(message) < 1):
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")  # noqa: E501

        self._message = message

    @property
    def phone(self):
        """Gets the phone of this CompanySMSLog.  # noqa: E501


        :return: The phone of this CompanySMSLog.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CompanySMSLog.


        :param phone: The phone of this CompanySMSLog.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                phone is not None and len(phone) > 128):
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                phone is not None and len(phone) < 1):
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")  # noqa: E501

        self._phone = phone

    @property
    def confirmed(self):
        """Gets the confirmed of this CompanySMSLog.  # noqa: E501

        Folosit cand device-ul trimite cu succes  # noqa: E501

        :return: The confirmed of this CompanySMSLog.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this CompanySMSLog.

        Folosit cand device-ul trimite cu succes  # noqa: E501

        :param confirmed: The confirmed of this CompanySMSLog.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    @property
    def attachment(self):
        """Gets the attachment of this CompanySMSLog.  # noqa: E501


        :return: The attachment of this CompanySMSLog.  # noqa: E501
        :rtype: str
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this CompanySMSLog.


        :param attachment: The attachment of this CompanySMSLog.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                attachment is not None and len(attachment) > 100):
            raise ValueError("Invalid value for `attachment`, length must be less than or equal to `100`")  # noqa: E501

        self._attachment = attachment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanySMSLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanySMSLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanySMSLog):
            return True

        return self.to_dict() != other.to_dict()
