# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InvoiceSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'automatically_send_invoice_to_client': 'bool',
        'two_invoices_on_the_same_pdf_page': 'bool',
        'add_certificate_of_conformity': 'bool',
        'auto_email_notifications': 'bool',
        'auto_email_invoice_finalised': 'bool',
        'auto_email_invoice_before_due_date': 'int',
        'auto_email_invoice_due_date': 'bool',
        'auto_email_invoice_after_due_date': 'int',
        'auto_email_invoice_bcc_emails': 'list[str]',
        'hide_delivery_note_prices': 'bool'
    }

    attribute_map = {
        'automatically_send_invoice_to_client': 'automatically_send_invoice_to_client',
        'two_invoices_on_the_same_pdf_page': 'two_invoices_on_the_same_pdf_page',
        'add_certificate_of_conformity': 'add_certificate_of_conformity',
        'auto_email_notifications': 'auto_email_notifications',
        'auto_email_invoice_finalised': 'auto_email_invoice_finalised',
        'auto_email_invoice_before_due_date': 'auto_email_invoice_before_due_date',
        'auto_email_invoice_due_date': 'auto_email_invoice_due_date',
        'auto_email_invoice_after_due_date': 'auto_email_invoice_after_due_date',
        'auto_email_invoice_bcc_emails': 'auto_email_invoice_bcc_emails',
        'hide_delivery_note_prices': 'hide_delivery_note_prices'
    }

    def __init__(self, automatically_send_invoice_to_client=False, two_invoices_on_the_same_pdf_page=False, add_certificate_of_conformity=False, auto_email_notifications=False, auto_email_invoice_finalised=True, auto_email_invoice_before_due_date=None, auto_email_invoice_due_date=True, auto_email_invoice_after_due_date=None, auto_email_invoice_bcc_emails=None, hide_delivery_note_prices=False, _configuration=None):  # noqa: E501
        """InvoiceSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._automatically_send_invoice_to_client = None
        self._two_invoices_on_the_same_pdf_page = None
        self._add_certificate_of_conformity = None
        self._auto_email_notifications = None
        self._auto_email_invoice_finalised = None
        self._auto_email_invoice_before_due_date = None
        self._auto_email_invoice_due_date = None
        self._auto_email_invoice_after_due_date = None
        self._auto_email_invoice_bcc_emails = None
        self._hide_delivery_note_prices = None
        self.discriminator = None

        if automatically_send_invoice_to_client is not None:
            self.automatically_send_invoice_to_client = automatically_send_invoice_to_client
        if two_invoices_on_the_same_pdf_page is not None:
            self.two_invoices_on_the_same_pdf_page = two_invoices_on_the_same_pdf_page
        if add_certificate_of_conformity is not None:
            self.add_certificate_of_conformity = add_certificate_of_conformity
        if auto_email_notifications is not None:
            self.auto_email_notifications = auto_email_notifications
        if auto_email_invoice_finalised is not None:
            self.auto_email_invoice_finalised = auto_email_invoice_finalised
        if auto_email_invoice_before_due_date is not None:
            self.auto_email_invoice_before_due_date = auto_email_invoice_before_due_date
        if auto_email_invoice_due_date is not None:
            self.auto_email_invoice_due_date = auto_email_invoice_due_date
        if auto_email_invoice_after_due_date is not None:
            self.auto_email_invoice_after_due_date = auto_email_invoice_after_due_date
        if auto_email_invoice_bcc_emails is not None:
            self.auto_email_invoice_bcc_emails = auto_email_invoice_bcc_emails
        if hide_delivery_note_prices is not None:
            self.hide_delivery_note_prices = hide_delivery_note_prices

    @property
    def automatically_send_invoice_to_client(self):
        """Gets the automatically_send_invoice_to_client of this InvoiceSettings.  # noqa: E501

        Trimite automat factura clientului la finalizarea acesteia.  # noqa: E501

        :return: The automatically_send_invoice_to_client of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_send_invoice_to_client

    @automatically_send_invoice_to_client.setter
    def automatically_send_invoice_to_client(self, automatically_send_invoice_to_client):
        """Sets the automatically_send_invoice_to_client of this InvoiceSettings.

        Trimite automat factura clientului la finalizarea acesteia.  # noqa: E501

        :param automatically_send_invoice_to_client: The automatically_send_invoice_to_client of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._automatically_send_invoice_to_client = automatically_send_invoice_to_client

    @property
    def two_invoices_on_the_same_pdf_page(self):
        """Gets the two_invoices_on_the_same_pdf_page of this InvoiceSettings.  # noqa: E501

        Încearcă să pună 2 facturi pe o singură pagină A4, dacă acestea au numărul de articole mai mic sau egal cu 5  # noqa: E501

        :return: The two_invoices_on_the_same_pdf_page of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._two_invoices_on_the_same_pdf_page

    @two_invoices_on_the_same_pdf_page.setter
    def two_invoices_on_the_same_pdf_page(self, two_invoices_on_the_same_pdf_page):
        """Sets the two_invoices_on_the_same_pdf_page of this InvoiceSettings.

        Încearcă să pună 2 facturi pe o singură pagină A4, dacă acestea au numărul de articole mai mic sau egal cu 5  # noqa: E501

        :param two_invoices_on_the_same_pdf_page: The two_invoices_on_the_same_pdf_page of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._two_invoices_on_the_same_pdf_page = two_invoices_on_the_same_pdf_page

    @property
    def add_certificate_of_conformity(self):
        """Gets the add_certificate_of_conformity of this InvoiceSettings.  # noqa: E501

        Adaugă certificatul de conformitate pe factură  # noqa: E501

        :return: The add_certificate_of_conformity of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._add_certificate_of_conformity

    @add_certificate_of_conformity.setter
    def add_certificate_of_conformity(self, add_certificate_of_conformity):
        """Sets the add_certificate_of_conformity of this InvoiceSettings.

        Adaugă certificatul de conformitate pe factură  # noqa: E501

        :param add_certificate_of_conformity: The add_certificate_of_conformity of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._add_certificate_of_conformity = add_certificate_of_conformity

    @property
    def auto_email_notifications(self):
        """Gets the auto_email_notifications of this InvoiceSettings.  # noqa: E501

        Notificări pe email.  # noqa: E501

        :return: The auto_email_notifications of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_notifications

    @auto_email_notifications.setter
    def auto_email_notifications(self, auto_email_notifications):
        """Sets the auto_email_notifications of this InvoiceSettings.

        Notificări pe email.  # noqa: E501

        :param auto_email_notifications: The auto_email_notifications of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_notifications = auto_email_notifications

    @property
    def auto_email_invoice_finalised(self):
        """Gets the auto_email_invoice_finalised of this InvoiceSettings.  # noqa: E501

        Notificare la emiterea facturii.  # noqa: E501

        :return: The auto_email_invoice_finalised of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_invoice_finalised

    @auto_email_invoice_finalised.setter
    def auto_email_invoice_finalised(self, auto_email_invoice_finalised):
        """Sets the auto_email_invoice_finalised of this InvoiceSettings.

        Notificare la emiterea facturii.  # noqa: E501

        :param auto_email_invoice_finalised: The auto_email_invoice_finalised of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_invoice_finalised = auto_email_invoice_finalised

    @property
    def auto_email_invoice_before_due_date(self):
        """Gets the auto_email_invoice_before_due_date of this InvoiceSettings.  # noqa: E501

        Notificare inainte cu \"x\" zile de data scadentă.  # noqa: E501

        :return: The auto_email_invoice_before_due_date of this InvoiceSettings.  # noqa: E501
        :rtype: int
        """
        return self._auto_email_invoice_before_due_date

    @auto_email_invoice_before_due_date.setter
    def auto_email_invoice_before_due_date(self, auto_email_invoice_before_due_date):
        """Sets the auto_email_invoice_before_due_date of this InvoiceSettings.

        Notificare inainte cu \"x\" zile de data scadentă.  # noqa: E501

        :param auto_email_invoice_before_due_date: The auto_email_invoice_before_due_date of this InvoiceSettings.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                auto_email_invoice_before_due_date is not None and auto_email_invoice_before_due_date > 20):  # noqa: E501
            raise ValueError("Invalid value for `auto_email_invoice_before_due_date`, must be a value less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                auto_email_invoice_before_due_date is not None and auto_email_invoice_before_due_date < 0):  # noqa: E501
            raise ValueError("Invalid value for `auto_email_invoice_before_due_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._auto_email_invoice_before_due_date = auto_email_invoice_before_due_date

    @property
    def auto_email_invoice_due_date(self):
        """Gets the auto_email_invoice_due_date of this InvoiceSettings.  # noqa: E501

        Notificare in ziua scadentă.  # noqa: E501

        :return: The auto_email_invoice_due_date of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_invoice_due_date

    @auto_email_invoice_due_date.setter
    def auto_email_invoice_due_date(self, auto_email_invoice_due_date):
        """Sets the auto_email_invoice_due_date of this InvoiceSettings.

        Notificare in ziua scadentă.  # noqa: E501

        :param auto_email_invoice_due_date: The auto_email_invoice_due_date of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_invoice_due_date = auto_email_invoice_due_date

    @property
    def auto_email_invoice_after_due_date(self):
        """Gets the auto_email_invoice_after_due_date of this InvoiceSettings.  # noqa: E501

        Notificare după \"x\" zile de la data scadentă.  # noqa: E501

        :return: The auto_email_invoice_after_due_date of this InvoiceSettings.  # noqa: E501
        :rtype: int
        """
        return self._auto_email_invoice_after_due_date

    @auto_email_invoice_after_due_date.setter
    def auto_email_invoice_after_due_date(self, auto_email_invoice_after_due_date):
        """Sets the auto_email_invoice_after_due_date of this InvoiceSettings.

        Notificare după \"x\" zile de la data scadentă.  # noqa: E501

        :param auto_email_invoice_after_due_date: The auto_email_invoice_after_due_date of this InvoiceSettings.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                auto_email_invoice_after_due_date is not None and auto_email_invoice_after_due_date > 20):  # noqa: E501
            raise ValueError("Invalid value for `auto_email_invoice_after_due_date`, must be a value less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                auto_email_invoice_after_due_date is not None and auto_email_invoice_after_due_date < 0):  # noqa: E501
            raise ValueError("Invalid value for `auto_email_invoice_after_due_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._auto_email_invoice_after_due_date = auto_email_invoice_after_due_date

    @property
    def auto_email_invoice_bcc_emails(self):
        """Gets the auto_email_invoice_bcc_emails of this InvoiceSettings.  # noqa: E501


        :return: The auto_email_invoice_bcc_emails of this InvoiceSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._auto_email_invoice_bcc_emails

    @auto_email_invoice_bcc_emails.setter
    def auto_email_invoice_bcc_emails(self, auto_email_invoice_bcc_emails):
        """Sets the auto_email_invoice_bcc_emails of this InvoiceSettings.


        :param auto_email_invoice_bcc_emails: The auto_email_invoice_bcc_emails of this InvoiceSettings.  # noqa: E501
        :type: list[str]
        """

        self._auto_email_invoice_bcc_emails = auto_email_invoice_bcc_emails

    @property
    def hide_delivery_note_prices(self):
        """Gets the hide_delivery_note_prices of this InvoiceSettings.  # noqa: E501

        Ascunde preturile produselor din avize.  # noqa: E501

        :return: The hide_delivery_note_prices of this InvoiceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._hide_delivery_note_prices

    @hide_delivery_note_prices.setter
    def hide_delivery_note_prices(self, hide_delivery_note_prices):
        """Sets the hide_delivery_note_prices of this InvoiceSettings.

        Ascunde preturile produselor din avize.  # noqa: E501

        :param hide_delivery_note_prices: The hide_delivery_note_prices of this InvoiceSettings.  # noqa: E501
        :type: bool
        """

        self._hide_delivery_note_prices = hide_delivery_note_prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvoiceSettings):
            return True

        return self.to_dict() != other.to_dict()
