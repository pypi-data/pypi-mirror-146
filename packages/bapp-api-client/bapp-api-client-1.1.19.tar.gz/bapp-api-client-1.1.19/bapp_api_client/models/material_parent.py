# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class MaterialParent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'order_item': 'int',
        'invoice_item': 'int',
        'offer_item': 'int',
        'items': 'list[MaterialItem]'
    }

    attribute_map = {
        'id': 'id',
        'order_item': 'order_item',
        'invoice_item': 'invoice_item',
        'offer_item': 'offer_item',
        'items': 'items'
    }

    def __init__(self, id=None, order_item=None, invoice_item=None, offer_item=None, items=None, _configuration=None):  # noqa: E501
        """MaterialParent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._order_item = None
        self._invoice_item = None
        self._offer_item = None
        self._items = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if order_item is not None:
            self.order_item = order_item
        if invoice_item is not None:
            self.invoice_item = invoice_item
        if offer_item is not None:
            self.offer_item = offer_item
        self.items = items

    @property
    def id(self):
        """Gets the id of this MaterialParent.  # noqa: E501


        :return: The id of this MaterialParent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaterialParent.


        :param id: The id of this MaterialParent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def order_item(self):
        """Gets the order_item of this MaterialParent.  # noqa: E501


        :return: The order_item of this MaterialParent.  # noqa: E501
        :rtype: int
        """
        return self._order_item

    @order_item.setter
    def order_item(self, order_item):
        """Sets the order_item of this MaterialParent.


        :param order_item: The order_item of this MaterialParent.  # noqa: E501
        :type: int
        """

        self._order_item = order_item

    @property
    def invoice_item(self):
        """Gets the invoice_item of this MaterialParent.  # noqa: E501


        :return: The invoice_item of this MaterialParent.  # noqa: E501
        :rtype: int
        """
        return self._invoice_item

    @invoice_item.setter
    def invoice_item(self, invoice_item):
        """Sets the invoice_item of this MaterialParent.


        :param invoice_item: The invoice_item of this MaterialParent.  # noqa: E501
        :type: int
        """

        self._invoice_item = invoice_item

    @property
    def offer_item(self):
        """Gets the offer_item of this MaterialParent.  # noqa: E501


        :return: The offer_item of this MaterialParent.  # noqa: E501
        :rtype: int
        """
        return self._offer_item

    @offer_item.setter
    def offer_item(self, offer_item):
        """Sets the offer_item of this MaterialParent.


        :param offer_item: The offer_item of this MaterialParent.  # noqa: E501
        :type: int
        """

        self._offer_item = offer_item

    @property
    def items(self):
        """Gets the items of this MaterialParent.  # noqa: E501


        :return: The items of this MaterialParent.  # noqa: E501
        :rtype: list[MaterialItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this MaterialParent.


        :param items: The items of this MaterialParent.  # noqa: E501
        :type: list[MaterialItem]
        """
        if self._configuration.client_side_validation and items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaterialParent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaterialParent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaterialParent):
            return True

        return self.to_dict() != other.to_dict()
