# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Associate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'bapp_user': 'str',
        'percentage': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'bapp_user': 'bapp_user',
        'percentage': 'percentage',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'active': 'active'
    }

    def __init__(self, id=None, bapp_user=None, percentage=None, start_date=None, end_date=None, active=None, _configuration=None):  # noqa: E501
        """Associate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._bapp_user = None
        self._percentage = None
        self._start_date = None
        self._end_date = None
        self._active = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.bapp_user = bapp_user
        self.percentage = percentage
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if active is not None:
            self.active = active

    @property
    def id(self):
        """Gets the id of this Associate.  # noqa: E501


        :return: The id of this Associate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Associate.


        :param id: The id of this Associate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def bapp_user(self):
        """Gets the bapp_user of this Associate.  # noqa: E501


        :return: The bapp_user of this Associate.  # noqa: E501
        :rtype: str
        """
        return self._bapp_user

    @bapp_user.setter
    def bapp_user(self, bapp_user):
        """Sets the bapp_user of this Associate.


        :param bapp_user: The bapp_user of this Associate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bapp_user is None:
            raise ValueError("Invalid value for `bapp_user`, must not be `None`")  # noqa: E501

        self._bapp_user = bapp_user

    @property
    def percentage(self):
        """Gets the percentage of this Associate.  # noqa: E501


        :return: The percentage of this Associate.  # noqa: E501
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Associate.


        :param percentage: The percentage of this Associate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")  # noqa: E501

        self._percentage = percentage

    @property
    def start_date(self):
        """Gets the start_date of this Associate.  # noqa: E501


        :return: The start_date of this Associate.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Associate.


        :param start_date: The start_date of this Associate.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Associate.  # noqa: E501


        :return: The end_date of this Associate.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Associate.


        :param end_date: The end_date of this Associate.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def active(self):
        """Gets the active of this Associate.  # noqa: E501


        :return: The active of this Associate.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Associate.


        :param active: The active of this Associate.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Associate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Associate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Associate):
            return True

        return self.to_dict() != other.to_dict()
