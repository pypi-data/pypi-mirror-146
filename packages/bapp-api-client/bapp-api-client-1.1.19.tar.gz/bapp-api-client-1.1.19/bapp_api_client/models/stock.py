# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Stock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'quantitative': 'bool',
        'location': 'int',
        'manager': 'int',
        'internal': 'bool',
        'cmp_method': 'int',
        'external_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'quantitative': 'quantitative',
        'location': 'location',
        'manager': 'manager',
        'internal': 'internal',
        'cmp_method': 'cmp_method',
        'external_code': 'external_code'
    }

    def __init__(self, id=None, name=None, description=None, quantitative=None, location=None, manager=None, internal=None, cmp_method=None, external_code=None, _configuration=None):  # noqa: E501
        """Stock - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._quantitative = None
        self._location = None
        self._manager = None
        self._internal = None
        self._cmp_method = None
        self._external_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if quantitative is not None:
            self.quantitative = quantitative
        if location is not None:
            self.location = location
        self.manager = manager
        if internal is not None:
            self.internal = internal
        self.cmp_method = cmp_method
        if external_code is not None:
            self.external_code = external_code

    @property
    def id(self):
        """Gets the id of this Stock.  # noqa: E501


        :return: The id of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stock.


        :param id: The id of this Stock.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Stock.  # noqa: E501


        :return: The name of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stock.


        :param name: The name of this Stock.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Stock.  # noqa: E501


        :return: The description of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Stock.


        :param description: The description of this Stock.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantitative(self):
        """Gets the quantitative of this Stock.  # noqa: E501


        :return: The quantitative of this Stock.  # noqa: E501
        :rtype: bool
        """
        return self._quantitative

    @quantitative.setter
    def quantitative(self, quantitative):
        """Sets the quantitative of this Stock.


        :param quantitative: The quantitative of this Stock.  # noqa: E501
        :type: bool
        """

        self._quantitative = quantitative

    @property
    def location(self):
        """Gets the location of this Stock.  # noqa: E501


        :return: The location of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Stock.


        :param location: The location of this Stock.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def manager(self):
        """Gets the manager of this Stock.  # noqa: E501


        :return: The manager of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this Stock.


        :param manager: The manager of this Stock.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and manager is None:
            raise ValueError("Invalid value for `manager`, must not be `None`")  # noqa: E501

        self._manager = manager

    @property
    def internal(self):
        """Gets the internal of this Stock.  # noqa: E501


        :return: The internal of this Stock.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this Stock.


        :param internal: The internal of this Stock.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def cmp_method(self):
        """Gets the cmp_method of this Stock.  # noqa: E501


        :return: The cmp_method of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._cmp_method

    @cmp_method.setter
    def cmp_method(self, cmp_method):
        """Sets the cmp_method of this Stock.


        :param cmp_method: The cmp_method of this Stock.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and cmp_method is None:
            raise ValueError("Invalid value for `cmp_method`, must not be `None`")  # noqa: E501

        self._cmp_method = cmp_method

    @property
    def external_code(self):
        """Gets the external_code of this Stock.  # noqa: E501


        :return: The external_code of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._external_code

    @external_code.setter
    def external_code(self, external_code):
        """Sets the external_code of this Stock.


        :param external_code: The external_code of this Stock.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                external_code is not None and len(external_code) > 20):
            raise ValueError("Invalid value for `external_code`, length must be less than or equal to `20`")  # noqa: E501

        self._external_code = external_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stock):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Stock):
            return True

        return self.to_dict() != other.to_dict()
