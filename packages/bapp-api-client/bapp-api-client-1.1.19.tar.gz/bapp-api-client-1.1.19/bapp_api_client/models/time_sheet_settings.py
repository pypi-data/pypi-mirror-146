# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class TimeSheetSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'replacement_required': 'bool',
        'ips_whitelist': 'list[str]',
        'minutes_to_hour': 'int',
        'paid_leave_of_absence': 'bool'
    }

    attribute_map = {
        'replacement_required': 'replacement_required',
        'ips_whitelist': 'ips_whitelist',
        'minutes_to_hour': 'minutes_to_hour',
        'paid_leave_of_absence': 'paid_leave_of_absence'
    }

    def __init__(self, replacement_required=False, ips_whitelist=None, minutes_to_hour=None, paid_leave_of_absence=True, _configuration=None):  # noqa: E501
        """TimeSheetSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._replacement_required = None
        self._ips_whitelist = None
        self._minutes_to_hour = None
        self._paid_leave_of_absence = None
        self.discriminator = None

        if replacement_required is not None:
            self.replacement_required = replacement_required
        if ips_whitelist is not None:
            self.ips_whitelist = ips_whitelist
        if minutes_to_hour is not None:
            self.minutes_to_hour = minutes_to_hour
        if paid_leave_of_absence is not None:
            self.paid_leave_of_absence = paid_leave_of_absence

    @property
    def replacement_required(self):
        """Gets the replacement_required of this TimeSheetSettings.  # noqa: E501


        :return: The replacement_required of this TimeSheetSettings.  # noqa: E501
        :rtype: bool
        """
        return self._replacement_required

    @replacement_required.setter
    def replacement_required(self, replacement_required):
        """Sets the replacement_required of this TimeSheetSettings.


        :param replacement_required: The replacement_required of this TimeSheetSettings.  # noqa: E501
        :type: bool
        """

        self._replacement_required = replacement_required

    @property
    def ips_whitelist(self):
        """Gets the ips_whitelist of this TimeSheetSettings.  # noqa: E501


        :return: The ips_whitelist of this TimeSheetSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._ips_whitelist

    @ips_whitelist.setter
    def ips_whitelist(self, ips_whitelist):
        """Sets the ips_whitelist of this TimeSheetSettings.


        :param ips_whitelist: The ips_whitelist of this TimeSheetSettings.  # noqa: E501
        :type: list[str]
        """

        self._ips_whitelist = ips_whitelist

    @property
    def minutes_to_hour(self):
        """Gets the minutes_to_hour of this TimeSheetSettings.  # noqa: E501


        :return: The minutes_to_hour of this TimeSheetSettings.  # noqa: E501
        :rtype: int
        """
        return self._minutes_to_hour

    @minutes_to_hour.setter
    def minutes_to_hour(self, minutes_to_hour):
        """Sets the minutes_to_hour of this TimeSheetSettings.


        :param minutes_to_hour: The minutes_to_hour of this TimeSheetSettings.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                minutes_to_hour is not None and minutes_to_hour > 60):  # noqa: E501
            raise ValueError("Invalid value for `minutes_to_hour`, must be a value less than or equal to `60`")  # noqa: E501
        if (self._configuration.client_side_validation and
                minutes_to_hour is not None and minutes_to_hour < 1):  # noqa: E501
            raise ValueError("Invalid value for `minutes_to_hour`, must be a value greater than or equal to `1`")  # noqa: E501

        self._minutes_to_hour = minutes_to_hour

    @property
    def paid_leave_of_absence(self):
        """Gets the paid_leave_of_absence of this TimeSheetSettings.  # noqa: E501


        :return: The paid_leave_of_absence of this TimeSheetSettings.  # noqa: E501
        :rtype: bool
        """
        return self._paid_leave_of_absence

    @paid_leave_of_absence.setter
    def paid_leave_of_absence(self, paid_leave_of_absence):
        """Sets the paid_leave_of_absence of this TimeSheetSettings.


        :param paid_leave_of_absence: The paid_leave_of_absence of this TimeSheetSettings.  # noqa: E501
        :type: bool
        """

        self._paid_leave_of_absence = paid_leave_of_absence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSheetSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSheetSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeSheetSettings):
            return True

        return self.to_dict() != other.to_dict()
