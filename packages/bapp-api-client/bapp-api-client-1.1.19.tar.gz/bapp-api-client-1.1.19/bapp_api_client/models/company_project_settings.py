# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanyProjectSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_time_closure': 'int',
        'task_page_size': 'int',
        'task_paralel_time_tracking': 'bool',
        'task_minimum_consumption': 'bool',
        'task_minimum_time_consumption': 'int',
        'task_minimum_time_percentage_consumption': 'int'
    }

    attribute_map = {
        'task_time_closure': 'task_time_closure',
        'task_page_size': 'task_page_size',
        'task_paralel_time_tracking': 'task_paralel_time_tracking',
        'task_minimum_consumption': 'task_minimum_consumption',
        'task_minimum_time_consumption': 'task_minimum_time_consumption',
        'task_minimum_time_percentage_consumption': 'task_minimum_time_percentage_consumption'
    }

    def __init__(self, task_time_closure=None, task_page_size=None, task_paralel_time_tracking=False, task_minimum_consumption=False, task_minimum_time_consumption=None, task_minimum_time_percentage_consumption=None, _configuration=None):  # noqa: E501
        """CompanyProjectSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._task_time_closure = None
        self._task_page_size = None
        self._task_paralel_time_tracking = None
        self._task_minimum_consumption = None
        self._task_minimum_time_consumption = None
        self._task_minimum_time_percentage_consumption = None
        self.discriminator = None

        if task_time_closure is not None:
            self.task_time_closure = task_time_closure
        if task_page_size is not None:
            self.task_page_size = task_page_size
        if task_paralel_time_tracking is not None:
            self.task_paralel_time_tracking = task_paralel_time_tracking
        if task_minimum_consumption is not None:
            self.task_minimum_consumption = task_minimum_consumption
        if task_minimum_time_consumption is not None:
            self.task_minimum_time_consumption = task_minimum_time_consumption
        if task_minimum_time_percentage_consumption is not None:
            self.task_minimum_time_percentage_consumption = task_minimum_time_percentage_consumption

    @property
    def task_time_closure(self):
        """Gets the task_time_closure of this CompanyProjectSettings.  # noqa: E501

        Time until a task can be closed  # noqa: E501

        :return: The task_time_closure of this CompanyProjectSettings.  # noqa: E501
        :rtype: int
        """
        return self._task_time_closure

    @task_time_closure.setter
    def task_time_closure(self, task_time_closure):
        """Sets the task_time_closure of this CompanyProjectSettings.

        Time until a task can be closed  # noqa: E501

        :param task_time_closure: The task_time_closure of this CompanyProjectSettings.  # noqa: E501
        :type: int
        """

        self._task_time_closure = task_time_closure

    @property
    def task_page_size(self):
        """Gets the task_page_size of this CompanyProjectSettings.  # noqa: E501

        Number of tasks on a page  # noqa: E501

        :return: The task_page_size of this CompanyProjectSettings.  # noqa: E501
        :rtype: int
        """
        return self._task_page_size

    @task_page_size.setter
    def task_page_size(self, task_page_size):
        """Sets the task_page_size of this CompanyProjectSettings.

        Number of tasks on a page  # noqa: E501

        :param task_page_size: The task_page_size of this CompanyProjectSettings.  # noqa: E501
        :type: int
        """

        self._task_page_size = task_page_size

    @property
    def task_paralel_time_tracking(self):
        """Gets the task_paralel_time_tracking of this CompanyProjectSettings.  # noqa: E501

        Track time for multiple tasks at once  # noqa: E501

        :return: The task_paralel_time_tracking of this CompanyProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._task_paralel_time_tracking

    @task_paralel_time_tracking.setter
    def task_paralel_time_tracking(self, task_paralel_time_tracking):
        """Sets the task_paralel_time_tracking of this CompanyProjectSettings.

        Track time for multiple tasks at once  # noqa: E501

        :param task_paralel_time_tracking: The task_paralel_time_tracking of this CompanyProjectSettings.  # noqa: E501
        :type: bool
        """

        self._task_paralel_time_tracking = task_paralel_time_tracking

    @property
    def task_minimum_consumption(self):
        """Gets the task_minimum_consumption of this CompanyProjectSettings.  # noqa: E501

        Allows the start of depends on tasks after a minimum of consumption  # noqa: E501

        :return: The task_minimum_consumption of this CompanyProjectSettings.  # noqa: E501
        :rtype: bool
        """
        return self._task_minimum_consumption

    @task_minimum_consumption.setter
    def task_minimum_consumption(self, task_minimum_consumption):
        """Sets the task_minimum_consumption of this CompanyProjectSettings.

        Allows the start of depends on tasks after a minimum of consumption  # noqa: E501

        :param task_minimum_consumption: The task_minimum_consumption of this CompanyProjectSettings.  # noqa: E501
        :type: bool
        """

        self._task_minimum_consumption = task_minimum_consumption

    @property
    def task_minimum_time_consumption(self):
        """Gets the task_minimum_time_consumption of this CompanyProjectSettings.  # noqa: E501

        Time until a depends on task will be shown, will propagate only if task_minimum_consumption is True  # noqa: E501

        :return: The task_minimum_time_consumption of this CompanyProjectSettings.  # noqa: E501
        :rtype: int
        """
        return self._task_minimum_time_consumption

    @task_minimum_time_consumption.setter
    def task_minimum_time_consumption(self, task_minimum_time_consumption):
        """Sets the task_minimum_time_consumption of this CompanyProjectSettings.

        Time until a depends on task will be shown, will propagate only if task_minimum_consumption is True  # noqa: E501

        :param task_minimum_time_consumption: The task_minimum_time_consumption of this CompanyProjectSettings.  # noqa: E501
        :type: int
        """

        self._task_minimum_time_consumption = task_minimum_time_consumption

    @property
    def task_minimum_time_percentage_consumption(self):
        """Gets the task_minimum_time_percentage_consumption of this CompanyProjectSettings.  # noqa: E501

        Percentage until a depends on task will be shown, will propagate only if task_minimum_consumption is True  # noqa: E501

        :return: The task_minimum_time_percentage_consumption of this CompanyProjectSettings.  # noqa: E501
        :rtype: int
        """
        return self._task_minimum_time_percentage_consumption

    @task_minimum_time_percentage_consumption.setter
    def task_minimum_time_percentage_consumption(self, task_minimum_time_percentage_consumption):
        """Sets the task_minimum_time_percentage_consumption of this CompanyProjectSettings.

        Percentage until a depends on task will be shown, will propagate only if task_minimum_consumption is True  # noqa: E501

        :param task_minimum_time_percentage_consumption: The task_minimum_time_percentage_consumption of this CompanyProjectSettings.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                task_minimum_time_percentage_consumption is not None and task_minimum_time_percentage_consumption > 99):  # noqa: E501
            raise ValueError("Invalid value for `task_minimum_time_percentage_consumption`, must be a value less than or equal to `99`")  # noqa: E501

        self._task_minimum_time_percentage_consumption = task_minimum_time_percentage_consumption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyProjectSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyProjectSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyProjectSettings):
            return True

        return self.to_dict() != other.to_dict()
