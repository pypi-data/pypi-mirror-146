# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class GCMDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'registration_id': 'str',
        'device_id': 'int',
        'active': 'bool',
        'date_created': 'datetime',
        'cloud_message_type': 'str',
        'application_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'registration_id': 'registration_id',
        'device_id': 'device_id',
        'active': 'active',
        'date_created': 'date_created',
        'cloud_message_type': 'cloud_message_type',
        'application_id': 'application_id'
    }

    def __init__(self, id=None, name=None, registration_id=None, device_id=None, active=None, date_created=None, cloud_message_type=None, application_id=None, _configuration=None):  # noqa: E501
        """GCMDevice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._registration_id = None
        self._device_id = None
        self._active = None
        self._date_created = None
        self._cloud_message_type = None
        self._application_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.registration_id = registration_id
        if device_id is not None:
            self.device_id = device_id
        if active is not None:
            self.active = active
        if date_created is not None:
            self.date_created = date_created
        if cloud_message_type is not None:
            self.cloud_message_type = cloud_message_type
        if application_id is not None:
            self.application_id = application_id

    @property
    def id(self):
        """Gets the id of this GCMDevice.  # noqa: E501


        :return: The id of this GCMDevice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GCMDevice.


        :param id: The id of this GCMDevice.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GCMDevice.  # noqa: E501


        :return: The name of this GCMDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GCMDevice.


        :param name: The name of this GCMDevice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def registration_id(self):
        """Gets the registration_id of this GCMDevice.  # noqa: E501


        :return: The registration_id of this GCMDevice.  # noqa: E501
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this GCMDevice.


        :param registration_id: The registration_id of this GCMDevice.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_id is not None and len(registration_id) < 1):
            raise ValueError("Invalid value for `registration_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._registration_id = registration_id

    @property
    def device_id(self):
        """Gets the device_id of this GCMDevice.  # noqa: E501

        ANDROID_ID / TelephonyManager.getDeviceId() (e.g: 0x01)  # noqa: E501

        :return: The device_id of this GCMDevice.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this GCMDevice.

        ANDROID_ID / TelephonyManager.getDeviceId() (e.g: 0x01)  # noqa: E501

        :param device_id: The device_id of this GCMDevice.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def active(self):
        """Gets the active of this GCMDevice.  # noqa: E501

        Inactive devices will not be sent notifications  # noqa: E501

        :return: The active of this GCMDevice.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GCMDevice.

        Inactive devices will not be sent notifications  # noqa: E501

        :param active: The active of this GCMDevice.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def date_created(self):
        """Gets the date_created of this GCMDevice.  # noqa: E501


        :return: The date_created of this GCMDevice.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this GCMDevice.


        :param date_created: The date_created of this GCMDevice.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def cloud_message_type(self):
        """Gets the cloud_message_type of this GCMDevice.  # noqa: E501

        You should choose FCM or GCM  # noqa: E501

        :return: The cloud_message_type of this GCMDevice.  # noqa: E501
        :rtype: str
        """
        return self._cloud_message_type

    @cloud_message_type.setter
    def cloud_message_type(self, cloud_message_type):
        """Sets the cloud_message_type of this GCMDevice.

        You should choose FCM or GCM  # noqa: E501

        :param cloud_message_type: The cloud_message_type of this GCMDevice.  # noqa: E501
        :type: str
        """
        allowed_values = ["FCM", "GCM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                cloud_message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `cloud_message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cloud_message_type, allowed_values)
            )

        self._cloud_message_type = cloud_message_type

    @property
    def application_id(self):
        """Gets the application_id of this GCMDevice.  # noqa: E501

        Opaque application identity, should be filled in for multiple key/certificate access  # noqa: E501

        :return: The application_id of this GCMDevice.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this GCMDevice.

        Opaque application identity, should be filled in for multiple key/certificate access  # noqa: E501

        :param application_id: The application_id of this GCMDevice.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                application_id is not None and len(application_id) > 64):
            raise ValueError("Invalid value for `application_id`, length must be less than or equal to `64`")  # noqa: E501

        self._application_id = application_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GCMDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCMDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GCMDevice):
            return True

        return self.to_dict() != other.to_dict()
