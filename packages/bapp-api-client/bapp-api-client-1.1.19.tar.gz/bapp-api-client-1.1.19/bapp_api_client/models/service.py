# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'thresholds': 'list[ServiceSerializerThresholds]',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'snapshot': 'object',
        'flow': 'int',
        'type': 'int',
        'status': 'int',
        'interval': 'int',
        'price': 'str',
        'quantity': 'str',
        'next_occurrence': 'date',
        'occurrences': 'int',
        'occurrences_performed': 'int',
        'description': 'str',
        'send_to_partner': 'bool',
        'fixed_price': 'bool',
        'total_quantity': 'bool',
        'partner': 'int',
        'product': 'int',
        'currency': 'str'
    }

    attribute_map = {
        'id': 'id',
        'thresholds': 'thresholds',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'snapshot': 'snapshot',
        'flow': 'flow',
        'type': 'type',
        'status': 'status',
        'interval': 'interval',
        'price': 'price',
        'quantity': 'quantity',
        'next_occurrence': 'next_occurrence',
        'occurrences': 'occurrences',
        'occurrences_performed': 'occurrences_performed',
        'description': 'description',
        'send_to_partner': 'send_to_partner',
        'fixed_price': 'fixed_price',
        'total_quantity': 'total_quantity',
        'partner': 'partner',
        'product': 'product',
        'currency': 'currency'
    }

    def __init__(self, id=None, thresholds=None, created_at=None, modified_at=None, snapshot=None, flow=None, type=None, status=None, interval=None, price=None, quantity=None, next_occurrence=None, occurrences=None, occurrences_performed=None, description=None, send_to_partner=None, fixed_price=None, total_quantity=None, partner=None, product=None, currency=None, _configuration=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._thresholds = None
        self._created_at = None
        self._modified_at = None
        self._snapshot = None
        self._flow = None
        self._type = None
        self._status = None
        self._interval = None
        self._price = None
        self._quantity = None
        self._next_occurrence = None
        self._occurrences = None
        self._occurrences_performed = None
        self._description = None
        self._send_to_partner = None
        self._fixed_price = None
        self._total_quantity = None
        self._partner = None
        self._product = None
        self._currency = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if thresholds is not None:
            self.thresholds = thresholds
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if snapshot is not None:
            self.snapshot = snapshot
        if flow is not None:
            self.flow = flow
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if interval is not None:
            self.interval = interval
        self.price = price
        if quantity is not None:
            self.quantity = quantity
        self.next_occurrence = next_occurrence
        if occurrences is not None:
            self.occurrences = occurrences
        if occurrences_performed is not None:
            self.occurrences_performed = occurrences_performed
        self.description = description
        if send_to_partner is not None:
            self.send_to_partner = send_to_partner
        if fixed_price is not None:
            self.fixed_price = fixed_price
        if total_quantity is not None:
            self.total_quantity = total_quantity
        self.partner = partner
        self.product = product
        self.currency = currency

    @property
    def id(self):
        """Gets the id of this Service.  # noqa: E501


        :return: The id of this Service.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.


        :param id: The id of this Service.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def thresholds(self):
        """Gets the thresholds of this Service.  # noqa: E501


        :return: The thresholds of this Service.  # noqa: E501
        :rtype: list[ServiceSerializerThresholds]
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this Service.


        :param thresholds: The thresholds of this Service.  # noqa: E501
        :type: list[ServiceSerializerThresholds]
        """

        self._thresholds = thresholds

    @property
    def created_at(self):
        """Gets the created_at of this Service.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Service.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Service.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Service.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Service.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Service.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Service.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def snapshot(self):
        """Gets the snapshot of this Service.  # noqa: E501

        This field is automatically populated acting as a cache of the last modification state.  # noqa: E501

        :return: The snapshot of this Service.  # noqa: E501
        :rtype: object
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this Service.

        This field is automatically populated acting as a cache of the last modification state.  # noqa: E501

        :param snapshot: The snapshot of this Service.  # noqa: E501
        :type: object
        """

        self._snapshot = snapshot

    @property
    def flow(self):
        """Gets the flow of this Service.  # noqa: E501


        :return: The flow of this Service.  # noqa: E501
        :rtype: int
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this Service.


        :param flow: The flow of this Service.  # noqa: E501
        :type: int
        """

        self._flow = flow

    @property
    def type(self):
        """Gets the type of this Service.  # noqa: E501


        :return: The type of this Service.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.


        :param type: The type of this Service.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Service.  # noqa: E501


        :return: The status of this Service.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Service.


        :param status: The status of this Service.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def interval(self):
        """Gets the interval of this Service.  # noqa: E501


        :return: The interval of this Service.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Service.


        :param interval: The interval of this Service.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def price(self):
        """Gets the price of this Service.  # noqa: E501


        :return: The price of this Service.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Service.


        :param price: The price of this Service.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Service.  # noqa: E501


        :return: The quantity of this Service.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Service.


        :param quantity: The quantity of this Service.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def next_occurrence(self):
        """Gets the next_occurrence of this Service.  # noqa: E501


        :return: The next_occurrence of this Service.  # noqa: E501
        :rtype: date
        """
        return self._next_occurrence

    @next_occurrence.setter
    def next_occurrence(self, next_occurrence):
        """Sets the next_occurrence of this Service.


        :param next_occurrence: The next_occurrence of this Service.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and next_occurrence is None:
            raise ValueError("Invalid value for `next_occurrence`, must not be `None`")  # noqa: E501

        self._next_occurrence = next_occurrence

    @property
    def occurrences(self):
        """Gets the occurrences of this Service.  # noqa: E501


        :return: The occurrences of this Service.  # noqa: E501
        :rtype: int
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this Service.


        :param occurrences: The occurrences of this Service.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                occurrences is not None and occurrences > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `occurrences`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                occurrences is not None and occurrences < 0):  # noqa: E501
            raise ValueError("Invalid value for `occurrences`, must be a value greater than or equal to `0`")  # noqa: E501

        self._occurrences = occurrences

    @property
    def occurrences_performed(self):
        """Gets the occurrences_performed of this Service.  # noqa: E501


        :return: The occurrences_performed of this Service.  # noqa: E501
        :rtype: int
        """
        return self._occurrences_performed

    @occurrences_performed.setter
    def occurrences_performed(self, occurrences_performed):
        """Sets the occurrences_performed of this Service.


        :param occurrences_performed: The occurrences_performed of this Service.  # noqa: E501
        :type: int
        """

        self._occurrences_performed = occurrences_performed

    @property
    def description(self):
        """Gets the description of this Service.  # noqa: E501


        :return: The description of this Service.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Service.


        :param description: The description of this Service.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def send_to_partner(self):
        """Gets the send_to_partner of this Service.  # noqa: E501


        :return: The send_to_partner of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._send_to_partner

    @send_to_partner.setter
    def send_to_partner(self, send_to_partner):
        """Sets the send_to_partner of this Service.


        :param send_to_partner: The send_to_partner of this Service.  # noqa: E501
        :type: bool
        """

        self._send_to_partner = send_to_partner

    @property
    def fixed_price(self):
        """Gets the fixed_price of this Service.  # noqa: E501

        true, nu se mai inmulteste cu quantity din datapoint  # noqa: E501

        :return: The fixed_price of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this Service.

        true, nu se mai inmulteste cu quantity din datapoint  # noqa: E501

        :param fixed_price: The fixed_price of this Service.  # noqa: E501
        :type: bool
        """

        self._fixed_price = fixed_price

    @property
    def total_quantity(self):
        """Gets the total_quantity of this Service.  # noqa: E501

        true, se face aggregate  # noqa: E501

        :return: The total_quantity of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this Service.

        true, se face aggregate  # noqa: E501

        :param total_quantity: The total_quantity of this Service.  # noqa: E501
        :type: bool
        """

        self._total_quantity = total_quantity

    @property
    def partner(self):
        """Gets the partner of this Service.  # noqa: E501


        :return: The partner of this Service.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Service.


        :param partner: The partner of this Service.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")  # noqa: E501

        self._partner = partner

    @property
    def product(self):
        """Gets the product of this Service.  # noqa: E501


        :return: The product of this Service.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Service.


        :param product: The product of this Service.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def currency(self):
        """Gets the currency of this Service.  # noqa: E501


        :return: The currency of this Service.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Service.


        :param currency: The currency of this Service.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Service):
            return True

        return self.to_dict() != other.to_dict()
