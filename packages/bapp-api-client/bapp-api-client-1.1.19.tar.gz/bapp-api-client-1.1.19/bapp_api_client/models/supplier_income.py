# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class SupplierIncome(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'partner': 'int',
        'currency': 'str',
        'type': 'int',
        'status': 'int',
        '_date': 'date',
        'due_date': 'date',
        'observations': 'str',
        'identifier': 'str',
        'value': 'str',
        'remaining': 'str',
        'extra': 'object',
        'invoices_ids': 'list[int]',
        'location': 'int'
    }

    attribute_map = {
        'id': 'id',
        'partner': 'partner',
        'currency': 'currency',
        'type': 'type',
        'status': 'status',
        '_date': 'date',
        'due_date': 'due_date',
        'observations': 'observations',
        'identifier': 'identifier',
        'value': 'value',
        'remaining': 'remaining',
        'extra': 'extra',
        'invoices_ids': 'invoices_ids',
        'location': 'location'
    }

    def __init__(self, id=None, partner=None, currency=None, type=None, status=None, _date=None, due_date=None, observations=None, identifier=None, value=None, remaining=None, extra=None, invoices_ids=None, location=None, _configuration=None):  # noqa: E501
        """SupplierIncome - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._partner = None
        self._currency = None
        self._type = None
        self._status = None
        self.__date = None
        self._due_date = None
        self._observations = None
        self._identifier = None
        self._value = None
        self._remaining = None
        self._extra = None
        self._invoices_ids = None
        self._location = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.partner = partner
        self.currency = currency
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        self._date = _date
        if due_date is not None:
            self.due_date = due_date
        if observations is not None:
            self.observations = observations
        if identifier is not None:
            self.identifier = identifier
        self.value = value
        if remaining is not None:
            self.remaining = remaining
        if extra is not None:
            self.extra = extra
        if invoices_ids is not None:
            self.invoices_ids = invoices_ids
        if location is not None:
            self.location = location

    @property
    def id(self):
        """Gets the id of this SupplierIncome.  # noqa: E501


        :return: The id of this SupplierIncome.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupplierIncome.


        :param id: The id of this SupplierIncome.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def partner(self):
        """Gets the partner of this SupplierIncome.  # noqa: E501


        :return: The partner of this SupplierIncome.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this SupplierIncome.


        :param partner: The partner of this SupplierIncome.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")  # noqa: E501

        self._partner = partner

    @property
    def currency(self):
        """Gets the currency of this SupplierIncome.  # noqa: E501


        :return: The currency of this SupplierIncome.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SupplierIncome.


        :param currency: The currency of this SupplierIncome.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def type(self):
        """Gets the type of this SupplierIncome.  # noqa: E501


        :return: The type of this SupplierIncome.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SupplierIncome.


        :param type: The type of this SupplierIncome.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this SupplierIncome.  # noqa: E501


        :return: The status of this SupplierIncome.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupplierIncome.


        :param status: The status of this SupplierIncome.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def _date(self):
        """Gets the _date of this SupplierIncome.  # noqa: E501


        :return: The _date of this SupplierIncome.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SupplierIncome.


        :param _date: The _date of this SupplierIncome.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def due_date(self):
        """Gets the due_date of this SupplierIncome.  # noqa: E501


        :return: The due_date of this SupplierIncome.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this SupplierIncome.


        :param due_date: The due_date of this SupplierIncome.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def observations(self):
        """Gets the observations of this SupplierIncome.  # noqa: E501


        :return: The observations of this SupplierIncome.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this SupplierIncome.


        :param observations: The observations of this SupplierIncome.  # noqa: E501
        :type: str
        """

        self._observations = observations

    @property
    def identifier(self):
        """Gets the identifier of this SupplierIncome.  # noqa: E501


        :return: The identifier of this SupplierIncome.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SupplierIncome.


        :param identifier: The identifier of this SupplierIncome.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) > 200):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `200`")  # noqa: E501

        self._identifier = identifier

    @property
    def value(self):
        """Gets the value of this SupplierIncome.  # noqa: E501


        :return: The value of this SupplierIncome.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SupplierIncome.


        :param value: The value of this SupplierIncome.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def remaining(self):
        """Gets the remaining of this SupplierIncome.  # noqa: E501


        :return: The remaining of this SupplierIncome.  # noqa: E501
        :rtype: str
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """Sets the remaining of this SupplierIncome.


        :param remaining: The remaining of this SupplierIncome.  # noqa: E501
        :type: str
        """

        self._remaining = remaining

    @property
    def extra(self):
        """Gets the extra of this SupplierIncome.  # noqa: E501

        This field is for knowing from what was the income created.  # noqa: E501

        :return: The extra of this SupplierIncome.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this SupplierIncome.

        This field is for knowing from what was the income created.  # noqa: E501

        :param extra: The extra of this SupplierIncome.  # noqa: E501
        :type: object
        """

        self._extra = extra

    @property
    def invoices_ids(self):
        """Gets the invoices_ids of this SupplierIncome.  # noqa: E501


        :return: The invoices_ids of this SupplierIncome.  # noqa: E501
        :rtype: list[int]
        """
        return self._invoices_ids

    @invoices_ids.setter
    def invoices_ids(self, invoices_ids):
        """Sets the invoices_ids of this SupplierIncome.


        :param invoices_ids: The invoices_ids of this SupplierIncome.  # noqa: E501
        :type: list[int]
        """

        self._invoices_ids = invoices_ids

    @property
    def location(self):
        """Gets the location of this SupplierIncome.  # noqa: E501


        :return: The location of this SupplierIncome.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SupplierIncome.


        :param location: The location of this SupplierIncome.  # noqa: E501
        :type: int
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierIncome, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierIncome):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupplierIncome):
            return True

        return self.to_dict() != other.to_dict()
