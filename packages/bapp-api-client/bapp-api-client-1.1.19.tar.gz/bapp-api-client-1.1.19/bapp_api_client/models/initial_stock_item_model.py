# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class InitialStockItemModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'code': 'str',
        'code_ean': 'str',
        'unit': 'str',
        'parent': 'int',
        'product': 'int',
        'qty': 'str',
        'markup': 'str',
        'tax': 'str',
        'price': 'str',
        'sale_price': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'code_ean': 'code_ean',
        'unit': 'unit',
        'parent': 'parent',
        'product': 'product',
        'qty': 'qty',
        'markup': 'markup',
        'tax': 'tax',
        'price': 'price',
        'sale_price': 'sale_price',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, id=None, name=None, code=None, code_ean=None, unit=None, parent=None, product=None, qty=None, markup=None, tax=None, price=None, sale_price=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """InitialStockItemModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._code = None
        self._code_ean = None
        self._unit = None
        self._parent = None
        self._product = None
        self._qty = None
        self._markup = None
        self._tax = None
        self._price = None
        self._sale_price = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if code_ean is not None:
            self.code_ean = code_ean
        if unit is not None:
            self.unit = unit
        self.parent = parent
        self.product = product
        self.qty = qty
        if markup is not None:
            self.markup = markup
        if tax is not None:
            self.tax = tax
        self.price = price
        if sale_price is not None:
            self.sale_price = sale_price
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this InitialStockItemModel.  # noqa: E501


        :return: The id of this InitialStockItemModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InitialStockItemModel.


        :param id: The id of this InitialStockItemModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InitialStockItemModel.  # noqa: E501


        :return: The name of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InitialStockItemModel.


        :param name: The name of this InitialStockItemModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this InitialStockItemModel.  # noqa: E501


        :return: The code of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this InitialStockItemModel.


        :param code: The code of this InitialStockItemModel.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def code_ean(self):
        """Gets the code_ean of this InitialStockItemModel.  # noqa: E501


        :return: The code_ean of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._code_ean

    @code_ean.setter
    def code_ean(self, code_ean):
        """Sets the code_ean of this InitialStockItemModel.


        :param code_ean: The code_ean of this InitialStockItemModel.  # noqa: E501
        :type: str
        """

        self._code_ean = code_ean

    @property
    def unit(self):
        """Gets the unit of this InitialStockItemModel.  # noqa: E501


        :return: The unit of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InitialStockItemModel.


        :param unit: The unit of this InitialStockItemModel.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def parent(self):
        """Gets the parent of this InitialStockItemModel.  # noqa: E501


        :return: The parent of this InitialStockItemModel.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this InitialStockItemModel.


        :param parent: The parent of this InitialStockItemModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")  # noqa: E501

        self._parent = parent

    @property
    def product(self):
        """Gets the product of this InitialStockItemModel.  # noqa: E501


        :return: The product of this InitialStockItemModel.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this InitialStockItemModel.


        :param product: The product of this InitialStockItemModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def qty(self):
        """Gets the qty of this InitialStockItemModel.  # noqa: E501


        :return: The qty of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this InitialStockItemModel.


        :param qty: The qty of this InitialStockItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def markup(self):
        """Gets the markup of this InitialStockItemModel.  # noqa: E501

        Adaos.  # noqa: E501

        :return: The markup of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this InitialStockItemModel.

        Adaos.  # noqa: E501

        :param markup: The markup of this InitialStockItemModel.  # noqa: E501
        :type: str
        """

        self._markup = markup

    @property
    def tax(self):
        """Gets the tax of this InitialStockItemModel.  # noqa: E501

        Cotă TVA.  # noqa: E501

        :return: The tax of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this InitialStockItemModel.

        Cotă TVA.  # noqa: E501

        :param tax: The tax of this InitialStockItemModel.  # noqa: E501
        :type: str
        """

        self._tax = tax

    @property
    def price(self):
        """Gets the price of this InitialStockItemModel.  # noqa: E501

        Preț achiziție  # noqa: E501

        :return: The price of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InitialStockItemModel.

        Preț achiziție  # noqa: E501

        :param price: The price of this InitialStockItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def sale_price(self):
        """Gets the sale_price of this InitialStockItemModel.  # noqa: E501

        Preț de vânzare  # noqa: E501

        :return: The sale_price of this InitialStockItemModel.  # noqa: E501
        :rtype: str
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this InitialStockItemModel.

        Preț de vânzare  # noqa: E501

        :param sale_price: The sale_price of this InitialStockItemModel.  # noqa: E501
        :type: str
        """

        self._sale_price = sale_price

    @property
    def created_at(self):
        """Gets the created_at of this InitialStockItemModel.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this InitialStockItemModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InitialStockItemModel.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this InitialStockItemModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InitialStockItemModel.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this InitialStockItemModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InitialStockItemModel.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this InitialStockItemModel.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitialStockItemModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitialStockItemModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InitialStockItemModel):
            return True

        return self.to_dict() != other.to_dict()
