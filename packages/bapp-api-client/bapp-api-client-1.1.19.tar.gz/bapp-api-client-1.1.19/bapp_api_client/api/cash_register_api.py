# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bapp_api_client.api_client import ApiClient


class CashRegisterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cash_register_balance_transfer_create(self, data, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BalanceTransfer data: (required)
        :return: BalanceTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_balance_transfer_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_balance_transfer_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def cash_register_balance_transfer_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BalanceTransfer data: (required)
        :return: BalanceTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_balance_transfer_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_balance_transfer_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/balance-transfer/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalanceTransfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_balance_transfer_delete(self, id, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Transfer intre balante. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_balance_transfer_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_balance_transfer_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cash_register_balance_transfer_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Transfer intre balante. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_balance_transfer_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cash_register_balance_transfer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/balance-transfer/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_balance_transfer_list(self, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_balance: 
        :param str to_balance: 
        :param float employee: 
        :param float location: 
        :param str currency: 
        :param str direct_inbound: 
        :param str direct_outbound: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_balance_transfer_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_balance_transfer_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cash_register_balance_transfer_list_with_http_info(self, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_balance: 
        :param str to_balance: 
        :param float employee: 
        :param float location: 
        :param str currency: 
        :param str direct_inbound: 
        :param str direct_outbound: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_balance', 'to_balance', 'employee', 'location', 'currency', 'direct_inbound', 'direct_outbound', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_balance_transfer_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_balance' in params:
            query_params.append(('from_balance', params['from_balance']))  # noqa: E501
        if 'to_balance' in params:
            query_params.append(('to_balance', params['to_balance']))  # noqa: E501
        if 'employee' in params:
            query_params.append(('employee', params['employee']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'direct_inbound' in params:
            query_params.append(('direct_inbound', params['direct_inbound']))  # noqa: E501
        if 'direct_outbound' in params:
            query_params.append(('direct_outbound', params['direct_outbound']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/balance-transfer/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_balance_transfer_read(self, id, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Transfer intre balante. (required)
        :return: BalanceTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_balance_transfer_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_balance_transfer_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cash_register_balance_transfer_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """cash_register_balance_transfer_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balance_transfer_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Transfer intre balante. (required)
        :return: BalanceTransfer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_balance_transfer_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cash_register_balance_transfer_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/balance-transfer/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalanceTransfer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_balances_list(self, **kwargs):  # noqa: E501
        """cash_register_balances_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balances_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: 
        :param str employee: 
        :param str location: 
        :param str company_only: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_balances_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_balances_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cash_register_balances_list_with_http_info(self, **kwargs):  # noqa: E501
        """cash_register_balances_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balances_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: 
        :param str employee: 
        :param str location: 
        :param str company_only: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency', 'employee', 'location', 'company_only', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_balances_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'employee' in params:
            query_params.append(('employee', params['employee']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'company_only' in params:
            query_params.append(('company_only', params['company_only']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/balances/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20061',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_balances_read(self, id, **kwargs):  # noqa: E501
        """cash_register_balances_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balances_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Soldul actual. (required)
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_balances_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_balances_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cash_register_balances_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """cash_register_balances_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_balances_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Soldul actual. (required)
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_balances_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cash_register_balances_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/balances/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_bank_deposit_create(self, data, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankDeposit data: (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_bank_deposit_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_bank_deposit_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def cash_register_bank_deposit_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankDeposit data: (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_bank_deposit_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_bank_deposit_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/bank-deposit/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankDeposit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_bank_deposit_delete(self, id, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_bank_deposit_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_bank_deposit_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cash_register_bank_deposit_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_bank_deposit_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cash_register_bank_deposit_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/bank-deposit/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_bank_deposit_list(self, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Specify required field by comma
        :param str omit: Specify required field by comma
        :param str expand: Specify required nested items by comma
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_bank_deposit_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_bank_deposit_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cash_register_bank_deposit_list_with_http_info(self, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Specify required field by comma
        :param str omit: Specify required field by comma
        :param str expand: Specify required nested items by comma
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'omit', 'expand', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_bank_deposit_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'omit' in params:
            query_params.append(('omit', params['omit']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/bank-deposit/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20063',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_bank_deposit_partial_update(self, id, data, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :param BankDeposit data: (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_bank_deposit_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_bank_deposit_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def cash_register_bank_deposit_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :param BankDeposit data: (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_bank_deposit_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cash_register_bank_deposit_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_bank_deposit_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/bank-deposit/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankDeposit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_bank_deposit_read(self, id, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_bank_deposit_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_bank_deposit_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cash_register_bank_deposit_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_bank_deposit_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cash_register_bank_deposit_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/bank-deposit/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankDeposit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_bank_deposit_update(self, id, data, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :param BankDeposit data: (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_bank_deposit_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_bank_deposit_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def cash_register_bank_deposit_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """cash_register_bank_deposit_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_bank_deposit_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this Depozit bancar. (required)
        :param BankDeposit data: (required)
        :return: BankDeposit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_bank_deposit_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cash_register_bank_deposit_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_bank_deposit_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/bank-deposit/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankDeposit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_confirm_transfer_partial_update(self, approval_identifier, data, **kwargs):  # noqa: E501
        """cash_register_confirm_transfer_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_confirm_transfer_partial_update(approval_identifier, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str approval_identifier: (required)
        :param BalanceTransferConfirm data: (required)
        :return: BalanceTransferConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_confirm_transfer_partial_update_with_http_info(approval_identifier, data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_confirm_transfer_partial_update_with_http_info(approval_identifier, data, **kwargs)  # noqa: E501
            return data

    def cash_register_confirm_transfer_partial_update_with_http_info(self, approval_identifier, data, **kwargs):  # noqa: E501
        """cash_register_confirm_transfer_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_confirm_transfer_partial_update_with_http_info(approval_identifier, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str approval_identifier: (required)
        :param BalanceTransferConfirm data: (required)
        :return: BalanceTransferConfirm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['approval_identifier', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_confirm_transfer_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'approval_identifier' is set
        if self.api_client.client_side_validation and ('approval_identifier' not in params or
                                                       params['approval_identifier'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `approval_identifier` when calling `cash_register_confirm_transfer_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_confirm_transfer_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'approval_identifier' in params:
            path_params['approval_identifier'] = params['approval_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/confirm-transfer/{approval_identifier}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalanceTransferConfirm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_confirm_transfer_update(self, approval_identifier, data, **kwargs):  # noqa: E501
        """cash_register_confirm_transfer_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_confirm_transfer_update(approval_identifier, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str approval_identifier: (required)
        :param BalanceTransferConfirm data: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_confirm_transfer_update_with_http_info(approval_identifier, data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_confirm_transfer_update_with_http_info(approval_identifier, data, **kwargs)  # noqa: E501
            return data

    def cash_register_confirm_transfer_update_with_http_info(self, approval_identifier, data, **kwargs):  # noqa: E501
        """cash_register_confirm_transfer_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_confirm_transfer_update_with_http_info(approval_identifier, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str approval_identifier: (required)
        :param BalanceTransferConfirm data: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['approval_identifier', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_confirm_transfer_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'approval_identifier' is set
        if self.api_client.client_side_validation and ('approval_identifier' not in params or
                                                       params['approval_identifier'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `approval_identifier` when calling `cash_register_confirm_transfer_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_confirm_transfer_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'approval_identifier' in params:
            path_params['approval_identifier'] = params['approval_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/confirm-transfer/{approval_identifier}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_location_cashiers_list(self, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_location_cashiers_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_location_cashiers_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cash_register_location_cashiers_list_with_http_info(self, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_location_cashiers_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/location-cashiers/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_location_cashiers_partial_update(self, location_id, data, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_partial_update(location_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: (required)
        :param LocationCashier data: (required)
        :return: LocationCashier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_location_cashiers_partial_update_with_http_info(location_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_location_cashiers_partial_update_with_http_info(location_id, data, **kwargs)  # noqa: E501
            return data

    def cash_register_location_cashiers_partial_update_with_http_info(self, location_id, data, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_partial_update_with_http_info(location_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: (required)
        :param LocationCashier data: (required)
        :return: LocationCashier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_location_cashiers_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and ('location_id' not in params or
                                                       params['location_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `location_id` when calling `cash_register_location_cashiers_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_location_cashiers_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location_id' in params:
            path_params['location_id'] = params['location_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/location-cashiers/{location_id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationCashier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_location_cashiers_read(self, location_id, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_read(location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: (required)
        :return: LocationCashier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_location_cashiers_read_with_http_info(location_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_location_cashiers_read_with_http_info(location_id, **kwargs)  # noqa: E501
            return data

    def cash_register_location_cashiers_read_with_http_info(self, location_id, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_read_with_http_info(location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: (required)
        :return: LocationCashier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_location_cashiers_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and ('location_id' not in params or
                                                       params['location_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `location_id` when calling `cash_register_location_cashiers_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location_id' in params:
            path_params['location_id'] = params['location_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/location-cashiers/{location_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationCashier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_location_cashiers_update(self, location_id, data, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_update(location_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: (required)
        :param LocationCashier data: (required)
        :return: LocationCashier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_location_cashiers_update_with_http_info(location_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_location_cashiers_update_with_http_info(location_id, data, **kwargs)  # noqa: E501
            return data

    def cash_register_location_cashiers_update_with_http_info(self, location_id, data, **kwargs):  # noqa: E501
        """cash_register_location_cashiers_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_location_cashiers_update_with_http_info(location_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str location_id: (required)
        :param LocationCashier data: (required)
        :return: LocationCashier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_location_cashiers_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and ('location_id' not in params or
                                                       params['location_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `location_id` when calling `cash_register_location_cashiers_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `cash_register_location_cashiers_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location_id' in params:
            path_params['location_id'] = params['location_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/location-cashiers/{location_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationCashier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cash_register_movements_list(self, **kwargs):  # noqa: E501
        """cash_register_movements_list  # noqa: E501

        Cash movements - ordering and ids parameters are not used  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_movements_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Currency
        :param str time: 
        :param int employee: Employee ID
        :param int location: Location ID
        :param bool company_only: Company only balances (employee and location are null)
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :param str time_before: Before time (ISO date/time format: 2022-03-16 or 2022-03-16T12:05)
        :param str time_after: After time (ISO date/time format: 2022-03-16 or 2022-03-16T12:05)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cash_register_movements_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cash_register_movements_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cash_register_movements_list_with_http_info(self, **kwargs):  # noqa: E501
        """cash_register_movements_list  # noqa: E501

        Cash movements - ordering and ids parameters are not used  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cash_register_movements_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str currency: Currency
        :param str time: 
        :param int employee: Employee ID
        :param int location: Location ID
        :param bool company_only: Company only balances (employee and location are null)
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :param str time_before: Before time (ISO date/time format: 2022-03-16 or 2022-03-16T12:05)
        :param str time_after: After time (ISO date/time format: 2022-03-16 or 2022-03-16T12:05)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['currency', 'time', 'employee', 'location', 'company_only', 'ordering', 'ids', 'page', 'time_before', 'time_after']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_register_movements_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'employee' in params:
            query_params.append(('employee', params['employee']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'company_only' in params:
            query_params.append(('company_only', params['company_only']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'time_before' in params:
            query_params.append(('time_before', params['time_before']))  # noqa: E501
        if 'time_after' in params:
            query_params.append(('time_after', params['time_after']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/cash-register/movements/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
