# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Domain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'type': 'str',
        'hostname': 'str',
        'custom_hostname': 'str',
        'template_code': 'str',
        'enabled': 'bool',
        'settings': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'type': 'type',
        'hostname': 'hostname',
        'custom_hostname': 'custom_hostname',
        'template_code': 'template_code',
        'enabled': 'enabled',
        'settings': 'settings'
    }

    def __init__(self, id=None, created_at=None, modified_at=None, type=None, hostname=None, custom_hostname=None, template_code=None, enabled=None, settings=None, _configuration=None):  # noqa: E501
        """Domain - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._modified_at = None
        self._type = None
        self._hostname = None
        self._custom_hostname = None
        self._template_code = None
        self._enabled = None
        self._settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if type is not None:
            self.type = type
        if hostname is not None:
            self.hostname = hostname
        if custom_hostname is not None:
            self.custom_hostname = custom_hostname
        self.template_code = template_code
        if enabled is not None:
            self.enabled = enabled
        if settings is not None:
            self.settings = settings

    @property
    def id(self):
        """Gets the id of this Domain.  # noqa: E501


        :return: The id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.


        :param id: The id of this Domain.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Domain.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Domain.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Domain.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Domain.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Domain.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Domain.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Domain.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Domain.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def type(self):
        """Gets the type of this Domain.  # noqa: E501


        :return: The type of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Domain.


        :param type: The type of this Domain.  # noqa: E501
        :type: str
        """
        allowed_values = ["custom", "helpdesk", "emenu", "shop", "website"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def hostname(self):
        """Gets the hostname of this Domain.  # noqa: E501


        :return: The hostname of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Domain.


        :param hostname: The hostname of this Domain.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                hostname is not None and len(hostname) < 1):
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `1`")  # noqa: E501

        self._hostname = hostname

    @property
    def custom_hostname(self):
        """Gets the custom_hostname of this Domain.  # noqa: E501

        Client domain  # noqa: E501

        :return: The custom_hostname of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._custom_hostname

    @custom_hostname.setter
    def custom_hostname(self, custom_hostname):
        """Sets the custom_hostname of this Domain.

        Client domain  # noqa: E501

        :param custom_hostname: The custom_hostname of this Domain.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                custom_hostname is not None and len(custom_hostname) > 200):
            raise ValueError("Invalid value for `custom_hostname`, length must be less than or equal to `200`")  # noqa: E501

        self._custom_hostname = custom_hostname

    @property
    def template_code(self):
        """Gets the template_code of this Domain.  # noqa: E501


        :return: The template_code of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._template_code

    @template_code.setter
    def template_code(self, template_code):
        """Sets the template_code of this Domain.


        :param template_code: The template_code of this Domain.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_code is None:
            raise ValueError("Invalid value for `template_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                template_code is not None and len(template_code) > 200):
            raise ValueError("Invalid value for `template_code`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                template_code is not None and len(template_code) < 1):
            raise ValueError("Invalid value for `template_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._template_code = template_code

    @property
    def enabled(self):
        """Gets the enabled of this Domain.  # noqa: E501


        :return: The enabled of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Domain.


        :param enabled: The enabled of this Domain.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def settings(self):
        """Gets the settings of this Domain.  # noqa: E501


        :return: The settings of this Domain.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Domain.


        :param settings: The settings of this Domain.  # noqa: E501
        :type: object
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Domain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Domain):
            return True

        return self.to_dict() != other.to_dict()
