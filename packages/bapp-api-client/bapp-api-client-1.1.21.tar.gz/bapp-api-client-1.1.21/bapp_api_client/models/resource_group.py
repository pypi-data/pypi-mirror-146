# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ResourceGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'reservation_fields': 'object',
        'location': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'reservation_fields': 'reservation_fields',
        'location': 'location'
    }

    def __init__(self, id=None, name=None, reservation_fields=None, location=None, _configuration=None):  # noqa: E501
        """ResourceGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._reservation_fields = None
        self._location = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if reservation_fields is not None:
            self.reservation_fields = reservation_fields
        if location is not None:
            self.location = location

    @property
    def id(self):
        """Gets the id of this ResourceGroup.  # noqa: E501


        :return: The id of this ResourceGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceGroup.


        :param id: The id of this ResourceGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResourceGroup.  # noqa: E501


        :return: The name of this ResourceGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceGroup.


        :param name: The name of this ResourceGroup.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def reservation_fields(self):
        """Gets the reservation_fields of this ResourceGroup.  # noqa: E501


        :return: The reservation_fields of this ResourceGroup.  # noqa: E501
        :rtype: object
        """
        return self._reservation_fields

    @reservation_fields.setter
    def reservation_fields(self, reservation_fields):
        """Sets the reservation_fields of this ResourceGroup.


        :param reservation_fields: The reservation_fields of this ResourceGroup.  # noqa: E501
        :type: object
        """

        self._reservation_fields = reservation_fields

    @property
    def location(self):
        """Gets the location of this ResourceGroup.  # noqa: E501


        :return: The location of this ResourceGroup.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ResourceGroup.


        :param location: The location of this ResourceGroup.  # noqa: E501
        :type: int
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceGroup):
            return True

        return self.to_dict() != other.to_dict()
