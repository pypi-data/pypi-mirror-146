# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class AuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'time': 'datetime',
        'company_id': 'int',
        'identifier': 'str',
        'user': 'str',
        'verb': 'int',
        'content': 'str',
        'changes': 'object'
    }

    attribute_map = {
        'id': 'id',
        'time': 'time',
        'company_id': 'company_id',
        'identifier': 'identifier',
        'user': 'user',
        'verb': 'verb',
        'content': 'content',
        'changes': 'changes'
    }

    def __init__(self, id=None, time=None, company_id=None, identifier=None, user=None, verb=None, content=None, changes=None, _configuration=None):  # noqa: E501
        """AuditLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._time = None
        self._company_id = None
        self._identifier = None
        self._user = None
        self._verb = None
        self._content = None
        self._changes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if time is not None:
            self.time = time
        self.company_id = company_id
        self.identifier = identifier
        if user is not None:
            self.user = user
        if verb is not None:
            self.verb = verb
        if content is not None:
            self.content = content
        if changes is not None:
            self.changes = changes

    @property
    def id(self):
        """Gets the id of this AuditLog.  # noqa: E501


        :return: The id of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditLog.


        :param id: The id of this AuditLog.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def time(self):
        """Gets the time of this AuditLog.  # noqa: E501


        :return: The time of this AuditLog.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AuditLog.


        :param time: The time of this AuditLog.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def company_id(self):
        """Gets the company_id of this AuditLog.  # noqa: E501


        :return: The company_id of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this AuditLog.


        :param company_id: The company_id of this AuditLog.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                company_id is not None and company_id > 9223372036854775807):  # noqa: E501
            raise ValueError("Invalid value for `company_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if (self._configuration.client_side_validation and
                company_id is not None and company_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `company_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._company_id = company_id

    @property
    def identifier(self):
        """Gets the identifier of this AuditLog.  # noqa: E501

        identifier-id  # noqa: E501

        :return: The identifier of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AuditLog.

        identifier-id  # noqa: E501

        :param identifier: The identifier of this AuditLog.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) > 100):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) < 1):
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")  # noqa: E501

        self._identifier = identifier

    @property
    def user(self):
        """Gets the user of this AuditLog.  # noqa: E501


        :return: The user of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuditLog.


        :param user: The user of this AuditLog.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def verb(self):
        """Gets the verb of this AuditLog.  # noqa: E501


        :return: The verb of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this AuditLog.


        :param verb: The verb of this AuditLog.  # noqa: E501
        :type: int
        """

        self._verb = verb

    @property
    def content(self):
        """Gets the content of this AuditLog.  # noqa: E501


        :return: The content of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AuditLog.


        :param content: The content of this AuditLog.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def changes(self):
        """Gets the changes of this AuditLog.  # noqa: E501


        :return: The changes of this AuditLog.  # noqa: E501
        :rtype: object
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this AuditLog.


        :param changes: The changes of this AuditLog.  # noqa: E501
        :type: object
        """

        self._changes = changes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditLog):
            return True

        return self.to_dict() != other.to_dict()
