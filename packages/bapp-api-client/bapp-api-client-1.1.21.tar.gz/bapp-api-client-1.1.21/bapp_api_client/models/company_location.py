# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class CompanyLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'vat_id': 'str',
        'country': 'str',
        'region': 'int',
        'city': 'int',
        'address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'vat_id': 'vat_id',
        'country': 'country',
        'region': 'region',
        'city': 'city',
        'address': 'address'
    }

    def __init__(self, id=None, name=None, vat_id=None, country=None, region=None, city=None, address=None, _configuration=None):  # noqa: E501
        """CompanyLocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._vat_id = None
        self._country = None
        self._region = None
        self._city = None
        self._address = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if vat_id is not None:
            self.vat_id = vat_id
        self.country = country
        if region is not None:
            self.region = region
        if city is not None:
            self.city = city
        self.address = address

    @property
    def id(self):
        """Gets the id of this CompanyLocation.  # noqa: E501


        :return: The id of this CompanyLocation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyLocation.


        :param id: The id of this CompanyLocation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CompanyLocation.  # noqa: E501


        :return: The name of this CompanyLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompanyLocation.


        :param name: The name of this CompanyLocation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def vat_id(self):
        """Gets the vat_id of this CompanyLocation.  # noqa: E501


        :return: The vat_id of this CompanyLocation.  # noqa: E501
        :rtype: str
        """
        return self._vat_id

    @vat_id.setter
    def vat_id(self, vat_id):
        """Sets the vat_id of this CompanyLocation.


        :param vat_id: The vat_id of this CompanyLocation.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                vat_id is not None and len(vat_id) > 100):
            raise ValueError("Invalid value for `vat_id`, length must be less than or equal to `100`")  # noqa: E501

        self._vat_id = vat_id

    @property
    def country(self):
        """Gets the country of this CompanyLocation.  # noqa: E501


        :return: The country of this CompanyLocation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CompanyLocation.


        :param country: The country of this CompanyLocation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def region(self):
        """Gets the region of this CompanyLocation.  # noqa: E501


        :return: The region of this CompanyLocation.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CompanyLocation.


        :param region: The region of this CompanyLocation.  # noqa: E501
        :type: int
        """

        self._region = region

    @property
    def city(self):
        """Gets the city of this CompanyLocation.  # noqa: E501


        :return: The city of this CompanyLocation.  # noqa: E501
        :rtype: int
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CompanyLocation.


        :param city: The city of this CompanyLocation.  # noqa: E501
        :type: int
        """

        self._city = city

    @property
    def address(self):
        """Gets the address of this CompanyLocation.  # noqa: E501


        :return: The address of this CompanyLocation.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CompanyLocation.


        :param address: The address of this CompanyLocation.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address is not None and len(address) > 200):
            raise ValueError("Invalid value for `address`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address is not None and len(address) < 1):
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyLocation):
            return True

        return self.to_dict() != other.to_dict()
