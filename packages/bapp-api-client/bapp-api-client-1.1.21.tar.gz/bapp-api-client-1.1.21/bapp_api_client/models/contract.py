# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Contract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'partner': 'int',
        'number': 'str',
        'content': 'str',
        'date_start': 'date',
        'date_end': 'date',
        'is_active': 'str',
        'currency': 'str',
        'hourly_value': 'str',
        'fixed_value': 'str',
        'draft': 'bool',
        'cancelled': 'bool',
        'extra': 'object',
        'form': 'str',
        'view_tokens': 'str',
        'pdf_file': 'str'
    }

    attribute_map = {
        'id': 'id',
        'partner': 'partner',
        'number': 'number',
        'content': 'content',
        'date_start': 'date_start',
        'date_end': 'date_end',
        'is_active': 'is_active',
        'currency': 'currency',
        'hourly_value': 'hourly_value',
        'fixed_value': 'fixed_value',
        'draft': 'draft',
        'cancelled': 'cancelled',
        'extra': 'extra',
        'form': 'form',
        'view_tokens': 'view_tokens',
        'pdf_file': 'pdf_file'
    }

    def __init__(self, id=None, partner=None, number=None, content=None, date_start=None, date_end=None, is_active=None, currency=None, hourly_value=None, fixed_value=None, draft=None, cancelled=None, extra=None, form=None, view_tokens=None, pdf_file=None, _configuration=None):  # noqa: E501
        """Contract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._partner = None
        self._number = None
        self._content = None
        self._date_start = None
        self._date_end = None
        self._is_active = None
        self._currency = None
        self._hourly_value = None
        self._fixed_value = None
        self._draft = None
        self._cancelled = None
        self._extra = None
        self._form = None
        self._view_tokens = None
        self._pdf_file = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.partner = partner
        if number is not None:
            self.number = number
        if content is not None:
            self.content = content
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if is_active is not None:
            self.is_active = is_active
        self.currency = currency
        if hourly_value is not None:
            self.hourly_value = hourly_value
        if fixed_value is not None:
            self.fixed_value = fixed_value
        if draft is not None:
            self.draft = draft
        if cancelled is not None:
            self.cancelled = cancelled
        if extra is not None:
            self.extra = extra
        if form is not None:
            self.form = form
        if view_tokens is not None:
            self.view_tokens = view_tokens
        if pdf_file is not None:
            self.pdf_file = pdf_file

    @property
    def id(self):
        """Gets the id of this Contract.  # noqa: E501


        :return: The id of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contract.


        :param id: The id of this Contract.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def partner(self):
        """Gets the partner of this Contract.  # noqa: E501


        :return: The partner of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Contract.


        :param partner: The partner of this Contract.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and partner is None:
            raise ValueError("Invalid value for `partner`, must not be `None`")  # noqa: E501

        self._partner = partner

    @property
    def number(self):
        """Gets the number of this Contract.  # noqa: E501


        :return: The number of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Contract.


        :param number: The number of this Contract.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                number is not None and len(number) > 50):
            raise ValueError("Invalid value for `number`, length must be less than or equal to `50`")  # noqa: E501

        self._number = number

    @property
    def content(self):
        """Gets the content of this Contract.  # noqa: E501


        :return: The content of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Contract.


        :param content: The content of this Contract.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def date_start(self):
        """Gets the date_start of this Contract.  # noqa: E501


        :return: The date_start of this Contract.  # noqa: E501
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this Contract.


        :param date_start: The date_start of this Contract.  # noqa: E501
        :type: date
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this Contract.  # noqa: E501


        :return: The date_end of this Contract.  # noqa: E501
        :rtype: date
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this Contract.


        :param date_end: The date_end of this Contract.  # noqa: E501
        :type: date
        """

        self._date_end = date_end

    @property
    def is_active(self):
        """Gets the is_active of this Contract.  # noqa: E501


        :return: The is_active of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Contract.


        :param is_active: The is_active of this Contract.  # noqa: E501
        :type: str
        """

        self._is_active = is_active

    @property
    def currency(self):
        """Gets the currency of this Contract.  # noqa: E501


        :return: The currency of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Contract.


        :param currency: The currency of this Contract.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def hourly_value(self):
        """Gets the hourly_value of this Contract.  # noqa: E501


        :return: The hourly_value of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._hourly_value

    @hourly_value.setter
    def hourly_value(self, hourly_value):
        """Sets the hourly_value of this Contract.


        :param hourly_value: The hourly_value of this Contract.  # noqa: E501
        :type: str
        """

        self._hourly_value = hourly_value

    @property
    def fixed_value(self):
        """Gets the fixed_value of this Contract.  # noqa: E501


        :return: The fixed_value of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._fixed_value

    @fixed_value.setter
    def fixed_value(self, fixed_value):
        """Sets the fixed_value of this Contract.


        :param fixed_value: The fixed_value of this Contract.  # noqa: E501
        :type: str
        """

        self._fixed_value = fixed_value

    @property
    def draft(self):
        """Gets the draft of this Contract.  # noqa: E501


        :return: The draft of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Contract.


        :param draft: The draft of this Contract.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def cancelled(self):
        """Gets the cancelled of this Contract.  # noqa: E501


        :return: The cancelled of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this Contract.


        :param cancelled: The cancelled of this Contract.  # noqa: E501
        :type: bool
        """

        self._cancelled = cancelled

    @property
    def extra(self):
        """Gets the extra of this Contract.  # noqa: E501


        :return: The extra of this Contract.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Contract.


        :param extra: The extra of this Contract.  # noqa: E501
        :type: object
        """

        self._extra = extra

    @property
    def form(self):
        """Gets the form of this Contract.  # noqa: E501


        :return: The form of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this Contract.


        :param form: The form of this Contract.  # noqa: E501
        :type: str
        """

        self._form = form

    @property
    def view_tokens(self):
        """Gets the view_tokens of this Contract.  # noqa: E501


        :return: The view_tokens of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this Contract.


        :param view_tokens: The view_tokens of this Contract.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    @property
    def pdf_file(self):
        """Gets the pdf_file of this Contract.  # noqa: E501


        :return: The pdf_file of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._pdf_file

    @pdf_file.setter
    def pdf_file(self, pdf_file):
        """Sets the pdf_file of this Contract.


        :param pdf_file: The pdf_file of this Contract.  # noqa: E501
        :type: str
        """

        self._pdf_file = pdf_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Contract):
            return True

        return self.to_dict() != other.to_dict()
