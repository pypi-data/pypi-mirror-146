# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EmployeeDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employee': 'int',
        'citizenship': 'str',
        'identity_document': 'int',
        'id_number': 'str',
        'extra': 'str',
        'work_approval': 'int',
        'approval_start': 'date',
        'approval_end': 'date',
        'country': 'str',
        'region': 'int',
        'city': 'int',
        'address': 'str',
        'cnp_data': 'str'
    }

    attribute_map = {
        'employee': 'employee',
        'citizenship': 'citizenship',
        'identity_document': 'identity_document',
        'id_number': 'id_number',
        'extra': 'extra',
        'work_approval': 'work_approval',
        'approval_start': 'approval_start',
        'approval_end': 'approval_end',
        'country': 'country',
        'region': 'region',
        'city': 'city',
        'address': 'address',
        'cnp_data': 'cnp_data'
    }

    def __init__(self, employee=None, citizenship=None, identity_document=None, id_number=None, extra=None, work_approval=None, approval_start=None, approval_end=None, country=None, region=None, city=None, address=None, cnp_data=None, _configuration=None):  # noqa: E501
        """EmployeeDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._employee = None
        self._citizenship = None
        self._identity_document = None
        self._id_number = None
        self._extra = None
        self._work_approval = None
        self._approval_start = None
        self._approval_end = None
        self._country = None
        self._region = None
        self._city = None
        self._address = None
        self._cnp_data = None
        self.discriminator = None

        self.employee = employee
        self.citizenship = citizenship
        self.identity_document = identity_document
        self.id_number = id_number
        if extra is not None:
            self.extra = extra
        if work_approval is not None:
            self.work_approval = work_approval
        if approval_start is not None:
            self.approval_start = approval_start
        if approval_end is not None:
            self.approval_end = approval_end
        self.country = country
        if region is not None:
            self.region = region
        if city is not None:
            self.city = city
        self.address = address
        if cnp_data is not None:
            self.cnp_data = cnp_data

    @property
    def employee(self):
        """Gets the employee of this EmployeeDetails.  # noqa: E501


        :return: The employee of this EmployeeDetails.  # noqa: E501
        :rtype: int
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this EmployeeDetails.


        :param employee: The employee of this EmployeeDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and employee is None:
            raise ValueError("Invalid value for `employee`, must not be `None`")  # noqa: E501

        self._employee = employee

    @property
    def citizenship(self):
        """Gets the citizenship of this EmployeeDetails.  # noqa: E501


        :return: The citizenship of this EmployeeDetails.  # noqa: E501
        :rtype: str
        """
        return self._citizenship

    @citizenship.setter
    def citizenship(self, citizenship):
        """Sets the citizenship of this EmployeeDetails.


        :param citizenship: The citizenship of this EmployeeDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and citizenship is None:
            raise ValueError("Invalid value for `citizenship`, must not be `None`")  # noqa: E501

        self._citizenship = citizenship

    @property
    def identity_document(self):
        """Gets the identity_document of this EmployeeDetails.  # noqa: E501


        :return: The identity_document of this EmployeeDetails.  # noqa: E501
        :rtype: int
        """
        return self._identity_document

    @identity_document.setter
    def identity_document(self, identity_document):
        """Sets the identity_document of this EmployeeDetails.


        :param identity_document: The identity_document of this EmployeeDetails.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and identity_document is None:
            raise ValueError("Invalid value for `identity_document`, must not be `None`")  # noqa: E501

        self._identity_document = identity_document

    @property
    def id_number(self):
        """Gets the id_number of this EmployeeDetails.  # noqa: E501


        :return: The id_number of this EmployeeDetails.  # noqa: E501
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this EmployeeDetails.


        :param id_number: The id_number of this EmployeeDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id_number is None:
            raise ValueError("Invalid value for `id_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id_number is not None and len(id_number) > 20):
            raise ValueError("Invalid value for `id_number`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id_number is not None and len(id_number) < 1):
            raise ValueError("Invalid value for `id_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._id_number = id_number

    @property
    def extra(self):
        """Gets the extra of this EmployeeDetails.  # noqa: E501


        :return: The extra of this EmployeeDetails.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this EmployeeDetails.


        :param extra: The extra of this EmployeeDetails.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                extra is not None and len(extra) > 500):
            raise ValueError("Invalid value for `extra`, length must be less than or equal to `500`")  # noqa: E501

        self._extra = extra

    @property
    def work_approval(self):
        """Gets the work_approval of this EmployeeDetails.  # noqa: E501


        :return: The work_approval of this EmployeeDetails.  # noqa: E501
        :rtype: int
        """
        return self._work_approval

    @work_approval.setter
    def work_approval(self, work_approval):
        """Sets the work_approval of this EmployeeDetails.


        :param work_approval: The work_approval of this EmployeeDetails.  # noqa: E501
        :type: int
        """

        self._work_approval = work_approval

    @property
    def approval_start(self):
        """Gets the approval_start of this EmployeeDetails.  # noqa: E501


        :return: The approval_start of this EmployeeDetails.  # noqa: E501
        :rtype: date
        """
        return self._approval_start

    @approval_start.setter
    def approval_start(self, approval_start):
        """Sets the approval_start of this EmployeeDetails.


        :param approval_start: The approval_start of this EmployeeDetails.  # noqa: E501
        :type: date
        """

        self._approval_start = approval_start

    @property
    def approval_end(self):
        """Gets the approval_end of this EmployeeDetails.  # noqa: E501


        :return: The approval_end of this EmployeeDetails.  # noqa: E501
        :rtype: date
        """
        return self._approval_end

    @approval_end.setter
    def approval_end(self, approval_end):
        """Sets the approval_end of this EmployeeDetails.


        :param approval_end: The approval_end of this EmployeeDetails.  # noqa: E501
        :type: date
        """

        self._approval_end = approval_end

    @property
    def country(self):
        """Gets the country of this EmployeeDetails.  # noqa: E501


        :return: The country of this EmployeeDetails.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EmployeeDetails.


        :param country: The country of this EmployeeDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def region(self):
        """Gets the region of this EmployeeDetails.  # noqa: E501


        :return: The region of this EmployeeDetails.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this EmployeeDetails.


        :param region: The region of this EmployeeDetails.  # noqa: E501
        :type: int
        """

        self._region = region

    @property
    def city(self):
        """Gets the city of this EmployeeDetails.  # noqa: E501


        :return: The city of this EmployeeDetails.  # noqa: E501
        :rtype: int
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EmployeeDetails.


        :param city: The city of this EmployeeDetails.  # noqa: E501
        :type: int
        """

        self._city = city

    @property
    def address(self):
        """Gets the address of this EmployeeDetails.  # noqa: E501


        :return: The address of this EmployeeDetails.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EmployeeDetails.


        :param address: The address of this EmployeeDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address is not None and len(address) > 200):
            raise ValueError("Invalid value for `address`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address is not None and len(address) < 1):
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def cnp_data(self):
        """Gets the cnp_data of this EmployeeDetails.  # noqa: E501


        :return: The cnp_data of this EmployeeDetails.  # noqa: E501
        :rtype: str
        """
        return self._cnp_data

    @cnp_data.setter
    def cnp_data(self, cnp_data):
        """Sets the cnp_data of this EmployeeDetails.


        :param cnp_data: The cnp_data of this EmployeeDetails.  # noqa: E501
        :type: str
        """

        self._cnp_data = cnp_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmployeeDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmployeeDetails):
            return True

        return self.to_dict() != other.to_dict()
