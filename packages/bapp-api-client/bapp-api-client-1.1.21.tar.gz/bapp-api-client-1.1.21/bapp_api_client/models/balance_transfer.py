# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class BalanceTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'from_balance': 'int',
        'value': 'str',
        'identifier': 'str',
        'to_employee': 'int',
        'to_location': 'int',
        'destination': 'str',
        'currency': 'str',
        'approval_identifier': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'can_delete': 'str',
        'can_accept': 'str',
        'from_str': 'str',
        'to_str': 'str'
    }

    attribute_map = {
        'id': 'id',
        'from_balance': 'from_balance',
        'value': 'value',
        'identifier': 'identifier',
        'to_employee': 'to_employee',
        'to_location': 'to_location',
        'destination': 'destination',
        'currency': 'currency',
        'approval_identifier': 'approval_identifier',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'can_delete': 'can_delete',
        'can_accept': 'can_accept',
        'from_str': 'from_str',
        'to_str': 'to_str'
    }

    def __init__(self, id=None, from_balance=None, value=None, identifier=None, to_employee=None, to_location=None, destination=None, currency=None, approval_identifier=None, created_at=None, modified_at=None, can_delete=None, can_accept=None, from_str=None, to_str=None, _configuration=None):  # noqa: E501
        """BalanceTransfer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._from_balance = None
        self._value = None
        self._identifier = None
        self._to_employee = None
        self._to_location = None
        self._destination = None
        self._currency = None
        self._approval_identifier = None
        self._created_at = None
        self._modified_at = None
        self._can_delete = None
        self._can_accept = None
        self._from_str = None
        self._to_str = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.from_balance = from_balance
        self.value = value
        if identifier is not None:
            self.identifier = identifier
        if to_employee is not None:
            self.to_employee = to_employee
        if to_location is not None:
            self.to_location = to_location
        if destination is not None:
            self.destination = destination
        if currency is not None:
            self.currency = currency
        if approval_identifier is not None:
            self.approval_identifier = approval_identifier
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if can_delete is not None:
            self.can_delete = can_delete
        if can_accept is not None:
            self.can_accept = can_accept
        if from_str is not None:
            self.from_str = from_str
        if to_str is not None:
            self.to_str = to_str

    @property
    def id(self):
        """Gets the id of this BalanceTransfer.  # noqa: E501


        :return: The id of this BalanceTransfer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BalanceTransfer.


        :param id: The id of this BalanceTransfer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def from_balance(self):
        """Gets the from_balance of this BalanceTransfer.  # noqa: E501


        :return: The from_balance of this BalanceTransfer.  # noqa: E501
        :rtype: int
        """
        return self._from_balance

    @from_balance.setter
    def from_balance(self, from_balance):
        """Sets the from_balance of this BalanceTransfer.


        :param from_balance: The from_balance of this BalanceTransfer.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and from_balance is None:
            raise ValueError("Invalid value for `from_balance`, must not be `None`")  # noqa: E501

        self._from_balance = from_balance

    @property
    def value(self):
        """Gets the value of this BalanceTransfer.  # noqa: E501


        :return: The value of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BalanceTransfer.


        :param value: The value of this BalanceTransfer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def identifier(self):
        """Gets the identifier of this BalanceTransfer.  # noqa: E501


        :return: The identifier of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this BalanceTransfer.


        :param identifier: The identifier of this BalanceTransfer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) > 200):
            raise ValueError("Invalid value for `identifier`, length must be less than or equal to `200`")  # noqa: E501

        self._identifier = identifier

    @property
    def to_employee(self):
        """Gets the to_employee of this BalanceTransfer.  # noqa: E501


        :return: The to_employee of this BalanceTransfer.  # noqa: E501
        :rtype: int
        """
        return self._to_employee

    @to_employee.setter
    def to_employee(self, to_employee):
        """Sets the to_employee of this BalanceTransfer.


        :param to_employee: The to_employee of this BalanceTransfer.  # noqa: E501
        :type: int
        """

        self._to_employee = to_employee

    @property
    def to_location(self):
        """Gets the to_location of this BalanceTransfer.  # noqa: E501


        :return: The to_location of this BalanceTransfer.  # noqa: E501
        :rtype: int
        """
        return self._to_location

    @to_location.setter
    def to_location(self, to_location):
        """Sets the to_location of this BalanceTransfer.


        :param to_location: The to_location of this BalanceTransfer.  # noqa: E501
        :type: int
        """

        self._to_location = to_location

    @property
    def destination(self):
        """Gets the destination of this BalanceTransfer.  # noqa: E501


        :return: The destination of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this BalanceTransfer.


        :param destination: The destination of this BalanceTransfer.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def currency(self):
        """Gets the currency of this BalanceTransfer.  # noqa: E501


        :return: The currency of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BalanceTransfer.


        :param currency: The currency of this BalanceTransfer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                currency is not None and len(currency) < 1):
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `1`")  # noqa: E501

        self._currency = currency

    @property
    def approval_identifier(self):
        """Gets the approval_identifier of this BalanceTransfer.  # noqa: E501


        :return: The approval_identifier of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._approval_identifier

    @approval_identifier.setter
    def approval_identifier(self, approval_identifier):
        """Sets the approval_identifier of this BalanceTransfer.


        :param approval_identifier: The approval_identifier of this BalanceTransfer.  # noqa: E501
        :type: str
        """

        self._approval_identifier = approval_identifier

    @property
    def created_at(self):
        """Gets the created_at of this BalanceTransfer.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this BalanceTransfer.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BalanceTransfer.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this BalanceTransfer.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this BalanceTransfer.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this BalanceTransfer.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this BalanceTransfer.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this BalanceTransfer.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def can_delete(self):
        """Gets the can_delete of this BalanceTransfer.  # noqa: E501


        :return: The can_delete of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this BalanceTransfer.


        :param can_delete: The can_delete of this BalanceTransfer.  # noqa: E501
        :type: str
        """

        self._can_delete = can_delete

    @property
    def can_accept(self):
        """Gets the can_accept of this BalanceTransfer.  # noqa: E501


        :return: The can_accept of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._can_accept

    @can_accept.setter
    def can_accept(self, can_accept):
        """Sets the can_accept of this BalanceTransfer.


        :param can_accept: The can_accept of this BalanceTransfer.  # noqa: E501
        :type: str
        """

        self._can_accept = can_accept

    @property
    def from_str(self):
        """Gets the from_str of this BalanceTransfer.  # noqa: E501


        :return: The from_str of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._from_str

    @from_str.setter
    def from_str(self, from_str):
        """Sets the from_str of this BalanceTransfer.


        :param from_str: The from_str of this BalanceTransfer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                from_str is not None and len(from_str) < 1):
            raise ValueError("Invalid value for `from_str`, length must be greater than or equal to `1`")  # noqa: E501

        self._from_str = from_str

    @property
    def to_str(self):
        """Gets the to_str of this BalanceTransfer.  # noqa: E501


        :return: The to_str of this BalanceTransfer.  # noqa: E501
        :rtype: str
        """
        return self._to_str

    @to_str.setter
    def to_str(self, to_str):
        """Sets the to_str of this BalanceTransfer.


        :param to_str: The to_str of this BalanceTransfer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                to_str is not None and len(to_str) < 1):
            raise ValueError("Invalid value for `to_str`, length must be greater than or equal to `1`")  # noqa: E501

        self._to_str = to_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceTransfer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BalanceTransfer):
            return True

        return self.to_dict() != other.to_dict()
