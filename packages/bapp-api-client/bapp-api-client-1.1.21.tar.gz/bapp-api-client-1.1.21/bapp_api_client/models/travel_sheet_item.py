# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class TravelSheetItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'source': 'str',
        'destination': 'str',
        'start_time': 'datetime',
        'stop_time': 'datetime',
        'purpose': 'str',
        'mileage_start': 'int',
        'km_small_city': 'int',
        'km_big_city': 'int',
        'km_out_of_city': 'int',
        'parent': 'int'
    }

    attribute_map = {
        'id': 'id',
        'source': 'source',
        'destination': 'destination',
        'start_time': 'start_time',
        'stop_time': 'stop_time',
        'purpose': 'purpose',
        'mileage_start': 'mileage_start',
        'km_small_city': 'km_small_city',
        'km_big_city': 'km_big_city',
        'km_out_of_city': 'km_out_of_city',
        'parent': 'parent'
    }

    def __init__(self, id=None, source=None, destination=None, start_time=None, stop_time=None, purpose=None, mileage_start=None, km_small_city=None, km_big_city=None, km_out_of_city=None, parent=None, _configuration=None):  # noqa: E501
        """TravelSheetItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._source = None
        self._destination = None
        self._start_time = None
        self._stop_time = None
        self._purpose = None
        self._mileage_start = None
        self._km_small_city = None
        self._km_big_city = None
        self._km_out_of_city = None
        self._parent = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.source = source
        self.destination = destination
        self.start_time = start_time
        self.stop_time = stop_time
        self.purpose = purpose
        self.mileage_start = mileage_start
        self.km_small_city = km_small_city
        self.km_big_city = km_big_city
        self.km_out_of_city = km_out_of_city
        self.parent = parent

    @property
    def id(self):
        """Gets the id of this TravelSheetItem.  # noqa: E501


        :return: The id of this TravelSheetItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TravelSheetItem.


        :param id: The id of this TravelSheetItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this TravelSheetItem.  # noqa: E501


        :return: The source of this TravelSheetItem.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TravelSheetItem.


        :param source: The source of this TravelSheetItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source is not None and len(source) > 200):
            raise ValueError("Invalid value for `source`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source is not None and len(source) < 1):
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")  # noqa: E501

        self._source = source

    @property
    def destination(self):
        """Gets the destination of this TravelSheetItem.  # noqa: E501


        :return: The destination of this TravelSheetItem.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this TravelSheetItem.


        :param destination: The destination of this TravelSheetItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                destination is not None and len(destination) > 200):
            raise ValueError("Invalid value for `destination`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                destination is not None and len(destination) < 1):
            raise ValueError("Invalid value for `destination`, length must be greater than or equal to `1`")  # noqa: E501

        self._destination = destination

    @property
    def start_time(self):
        """Gets the start_time of this TravelSheetItem.  # noqa: E501


        :return: The start_time of this TravelSheetItem.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TravelSheetItem.


        :param start_time: The start_time of this TravelSheetItem.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def stop_time(self):
        """Gets the stop_time of this TravelSheetItem.  # noqa: E501


        :return: The stop_time of this TravelSheetItem.  # noqa: E501
        :rtype: datetime
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time):
        """Sets the stop_time of this TravelSheetItem.


        :param stop_time: The stop_time of this TravelSheetItem.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and stop_time is None:
            raise ValueError("Invalid value for `stop_time`, must not be `None`")  # noqa: E501

        self._stop_time = stop_time

    @property
    def purpose(self):
        """Gets the purpose of this TravelSheetItem.  # noqa: E501


        :return: The purpose of this TravelSheetItem.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this TravelSheetItem.


        :param purpose: The purpose of this TravelSheetItem.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                purpose is not None and len(purpose) < 1):
            raise ValueError("Invalid value for `purpose`, length must be greater than or equal to `1`")  # noqa: E501

        self._purpose = purpose

    @property
    def mileage_start(self):
        """Gets the mileage_start of this TravelSheetItem.  # noqa: E501


        :return: The mileage_start of this TravelSheetItem.  # noqa: E501
        :rtype: int
        """
        return self._mileage_start

    @mileage_start.setter
    def mileage_start(self, mileage_start):
        """Sets the mileage_start of this TravelSheetItem.


        :param mileage_start: The mileage_start of this TravelSheetItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and mileage_start is None:
            raise ValueError("Invalid value for `mileage_start`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mileage_start is not None and mileage_start > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `mileage_start`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mileage_start is not None and mileage_start < 0):  # noqa: E501
            raise ValueError("Invalid value for `mileage_start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mileage_start = mileage_start

    @property
    def km_small_city(self):
        """Gets the km_small_city of this TravelSheetItem.  # noqa: E501


        :return: The km_small_city of this TravelSheetItem.  # noqa: E501
        :rtype: int
        """
        return self._km_small_city

    @km_small_city.setter
    def km_small_city(self, km_small_city):
        """Sets the km_small_city of this TravelSheetItem.


        :param km_small_city: The km_small_city of this TravelSheetItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and km_small_city is None:
            raise ValueError("Invalid value for `km_small_city`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                km_small_city is not None and km_small_city > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `km_small_city`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                km_small_city is not None and km_small_city < 0):  # noqa: E501
            raise ValueError("Invalid value for `km_small_city`, must be a value greater than or equal to `0`")  # noqa: E501

        self._km_small_city = km_small_city

    @property
    def km_big_city(self):
        """Gets the km_big_city of this TravelSheetItem.  # noqa: E501


        :return: The km_big_city of this TravelSheetItem.  # noqa: E501
        :rtype: int
        """
        return self._km_big_city

    @km_big_city.setter
    def km_big_city(self, km_big_city):
        """Sets the km_big_city of this TravelSheetItem.


        :param km_big_city: The km_big_city of this TravelSheetItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and km_big_city is None:
            raise ValueError("Invalid value for `km_big_city`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                km_big_city is not None and km_big_city > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `km_big_city`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                km_big_city is not None and km_big_city < 0):  # noqa: E501
            raise ValueError("Invalid value for `km_big_city`, must be a value greater than or equal to `0`")  # noqa: E501

        self._km_big_city = km_big_city

    @property
    def km_out_of_city(self):
        """Gets the km_out_of_city of this TravelSheetItem.  # noqa: E501


        :return: The km_out_of_city of this TravelSheetItem.  # noqa: E501
        :rtype: int
        """
        return self._km_out_of_city

    @km_out_of_city.setter
    def km_out_of_city(self, km_out_of_city):
        """Sets the km_out_of_city of this TravelSheetItem.


        :param km_out_of_city: The km_out_of_city of this TravelSheetItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and km_out_of_city is None:
            raise ValueError("Invalid value for `km_out_of_city`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                km_out_of_city is not None and km_out_of_city > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `km_out_of_city`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                km_out_of_city is not None and km_out_of_city < 0):  # noqa: E501
            raise ValueError("Invalid value for `km_out_of_city`, must be a value greater than or equal to `0`")  # noqa: E501

        self._km_out_of_city = km_out_of_city

    @property
    def parent(self):
        """Gets the parent of this TravelSheetItem.  # noqa: E501


        :return: The parent of this TravelSheetItem.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TravelSheetItem.


        :param parent: The parent of this TravelSheetItem.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")  # noqa: E501

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TravelSheetItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TravelSheetItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TravelSheetItem):
            return True

        return self.to_dict() != other.to_dict()
