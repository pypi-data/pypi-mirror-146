# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ProjectTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        '_date': 'datetime',
        'priority': 'int',
        'status_workflow': 'int',
        'billable': 'int',
        'assigned_to': 'list[int]',
        'price': 'str',
        'estimate': 'float',
        'position': 'int',
        'depends_on': 'list[int]',
        'project': 'int',
        'task_list': 'int',
        'duration': 'float',
        'subtasks': 'list[str]',
        'added_by': 'int',
        'created_at': 'datetime',
        'completed_at': 'datetime',
        'ready': 'bool',
        'can_be_closed': 'bool',
        'time_consumptions': 'str',
        'on_complete': 'int',
        'status_colour': 'str',
        'machine': 'int',
        'order_formatted_number': 'str',
        'completion_rate': 'int',
        'completed': 'bool',
        'minimum_completion_rate': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        '_date': 'date',
        'priority': 'priority',
        'status_workflow': 'status_workflow',
        'billable': 'billable',
        'assigned_to': 'assigned_to',
        'price': 'price',
        'estimate': 'estimate',
        'position': 'position',
        'depends_on': 'depends_on',
        'project': 'project',
        'task_list': 'task_list',
        'duration': 'duration',
        'subtasks': 'subtasks',
        'added_by': 'added_by',
        'created_at': 'created_at',
        'completed_at': 'completed_at',
        'ready': 'ready',
        'can_be_closed': 'can_be_closed',
        'time_consumptions': 'time_consumptions',
        'on_complete': 'on_complete',
        'status_colour': 'status_colour',
        'machine': 'machine',
        'order_formatted_number': 'order_formatted_number',
        'completion_rate': 'completion_rate',
        'completed': 'completed',
        'minimum_completion_rate': 'minimum_completion_rate'
    }

    def __init__(self, id=None, name=None, description=None, _date=None, priority=None, status_workflow=None, billable=None, assigned_to=None, price=None, estimate=None, position=None, depends_on=None, project=None, task_list=None, duration=None, subtasks=None, added_by=None, created_at=None, completed_at=None, ready=None, can_be_closed=None, time_consumptions=None, on_complete=None, status_colour=None, machine=None, order_formatted_number=None, completion_rate=None, completed=None, minimum_completion_rate=None, _configuration=None):  # noqa: E501
        """ProjectTask - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self.__date = None
        self._priority = None
        self._status_workflow = None
        self._billable = None
        self._assigned_to = None
        self._price = None
        self._estimate = None
        self._position = None
        self._depends_on = None
        self._project = None
        self._task_list = None
        self._duration = None
        self._subtasks = None
        self._added_by = None
        self._created_at = None
        self._completed_at = None
        self._ready = None
        self._can_be_closed = None
        self._time_consumptions = None
        self._on_complete = None
        self._status_colour = None
        self._machine = None
        self._order_formatted_number = None
        self._completion_rate = None
        self._completed = None
        self._minimum_completion_rate = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if _date is not None:
            self._date = _date
        if priority is not None:
            self.priority = priority
        if status_workflow is not None:
            self.status_workflow = status_workflow
        if billable is not None:
            self.billable = billable
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if price is not None:
            self.price = price
        if estimate is not None:
            self.estimate = estimate
        if position is not None:
            self.position = position
        if depends_on is not None:
            self.depends_on = depends_on
        if project is not None:
            self.project = project
        if task_list is not None:
            self.task_list = task_list
        if duration is not None:
            self.duration = duration
        if subtasks is not None:
            self.subtasks = subtasks
        if added_by is not None:
            self.added_by = added_by
        if created_at is not None:
            self.created_at = created_at
        if completed_at is not None:
            self.completed_at = completed_at
        if ready is not None:
            self.ready = ready
        if can_be_closed is not None:
            self.can_be_closed = can_be_closed
        if time_consumptions is not None:
            self.time_consumptions = time_consumptions
        if on_complete is not None:
            self.on_complete = on_complete
        if status_colour is not None:
            self.status_colour = status_colour
        if machine is not None:
            self.machine = machine
        if order_formatted_number is not None:
            self.order_formatted_number = order_formatted_number
        if completion_rate is not None:
            self.completion_rate = completion_rate
        if completed is not None:
            self.completed = completed
        if minimum_completion_rate is not None:
            self.minimum_completion_rate = minimum_completion_rate

    @property
    def id(self):
        """Gets the id of this ProjectTask.  # noqa: E501


        :return: The id of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectTask.


        :param id: The id of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectTask.  # noqa: E501


        :return: The name of this ProjectTask.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectTask.


        :param name: The name of this ProjectTask.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProjectTask.  # noqa: E501


        :return: The description of this ProjectTask.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectTask.


        :param description: The description of this ProjectTask.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def _date(self):
        """Gets the _date of this ProjectTask.  # noqa: E501


        :return: The _date of this ProjectTask.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ProjectTask.


        :param _date: The _date of this ProjectTask.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def priority(self):
        """Gets the priority of this ProjectTask.  # noqa: E501


        :return: The priority of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ProjectTask.


        :param priority: The priority of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def status_workflow(self):
        """Gets the status_workflow of this ProjectTask.  # noqa: E501


        :return: The status_workflow of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._status_workflow

    @status_workflow.setter
    def status_workflow(self, status_workflow):
        """Sets the status_workflow of this ProjectTask.


        :param status_workflow: The status_workflow of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._status_workflow = status_workflow

    @property
    def billable(self):
        """Gets the billable of this ProjectTask.  # noqa: E501


        :return: The billable of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this ProjectTask.


        :param billable: The billable of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._billable = billable

    @property
    def assigned_to(self):
        """Gets the assigned_to of this ProjectTask.  # noqa: E501


        :return: The assigned_to of this ProjectTask.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this ProjectTask.


        :param assigned_to: The assigned_to of this ProjectTask.  # noqa: E501
        :type: list[int]
        """

        self._assigned_to = assigned_to

    @property
    def price(self):
        """Gets the price of this ProjectTask.  # noqa: E501


        :return: The price of this ProjectTask.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProjectTask.


        :param price: The price of this ProjectTask.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def estimate(self):
        """Gets the estimate of this ProjectTask.  # noqa: E501


        :return: The estimate of this ProjectTask.  # noqa: E501
        :rtype: float
        """
        return self._estimate

    @estimate.setter
    def estimate(self, estimate):
        """Sets the estimate of this ProjectTask.


        :param estimate: The estimate of this ProjectTask.  # noqa: E501
        :type: float
        """

        self._estimate = estimate

    @property
    def position(self):
        """Gets the position of this ProjectTask.  # noqa: E501


        :return: The position of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ProjectTask.


        :param position: The position of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def depends_on(self):
        """Gets the depends_on of this ProjectTask.  # noqa: E501


        :return: The depends_on of this ProjectTask.  # noqa: E501
        :rtype: list[int]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this ProjectTask.


        :param depends_on: The depends_on of this ProjectTask.  # noqa: E501
        :type: list[int]
        """

        self._depends_on = depends_on

    @property
    def project(self):
        """Gets the project of this ProjectTask.  # noqa: E501


        :return: The project of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectTask.


        :param project: The project of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._project = project

    @property
    def task_list(self):
        """Gets the task_list of this ProjectTask.  # noqa: E501


        :return: The task_list of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this ProjectTask.


        :param task_list: The task_list of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._task_list = task_list

    @property
    def duration(self):
        """Gets the duration of this ProjectTask.  # noqa: E501


        :return: The duration of this ProjectTask.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ProjectTask.


        :param duration: The duration of this ProjectTask.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def subtasks(self):
        """Gets the subtasks of this ProjectTask.  # noqa: E501


        :return: The subtasks of this ProjectTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtasks

    @subtasks.setter
    def subtasks(self, subtasks):
        """Sets the subtasks of this ProjectTask.


        :param subtasks: The subtasks of this ProjectTask.  # noqa: E501
        :type: list[str]
        """

        self._subtasks = subtasks

    @property
    def added_by(self):
        """Gets the added_by of this ProjectTask.  # noqa: E501


        :return: The added_by of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._added_by

    @added_by.setter
    def added_by(self, added_by):
        """Sets the added_by of this ProjectTask.


        :param added_by: The added_by of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._added_by = added_by

    @property
    def created_at(self):
        """Gets the created_at of this ProjectTask.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this ProjectTask.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProjectTask.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this ProjectTask.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def completed_at(self):
        """Gets the completed_at of this ProjectTask.  # noqa: E501


        :return: The completed_at of this ProjectTask.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this ProjectTask.


        :param completed_at: The completed_at of this ProjectTask.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def ready(self):
        """Gets the ready of this ProjectTask.  # noqa: E501

        Task is ready to work on it (all dependencies are completed)  # noqa: E501

        :return: The ready of this ProjectTask.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this ProjectTask.

        Task is ready to work on it (all dependencies are completed)  # noqa: E501

        :param ready: The ready of this ProjectTask.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    @property
    def can_be_closed(self):
        """Gets the can_be_closed of this ProjectTask.  # noqa: E501

        If True task can now be close  # noqa: E501

        :return: The can_be_closed of this ProjectTask.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_closed

    @can_be_closed.setter
    def can_be_closed(self, can_be_closed):
        """Sets the can_be_closed of this ProjectTask.

        If True task can now be close  # noqa: E501

        :param can_be_closed: The can_be_closed of this ProjectTask.  # noqa: E501
        :type: bool
        """

        self._can_be_closed = can_be_closed

    @property
    def time_consumptions(self):
        """Gets the time_consumptions of this ProjectTask.  # noqa: E501


        :return: The time_consumptions of this ProjectTask.  # noqa: E501
        :rtype: str
        """
        return self._time_consumptions

    @time_consumptions.setter
    def time_consumptions(self, time_consumptions):
        """Sets the time_consumptions of this ProjectTask.


        :param time_consumptions: The time_consumptions of this ProjectTask.  # noqa: E501
        :type: str
        """

        self._time_consumptions = time_consumptions

    @property
    def on_complete(self):
        """Gets the on_complete of this ProjectTask.  # noqa: E501


        :return: The on_complete of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._on_complete

    @on_complete.setter
    def on_complete(self, on_complete):
        """Sets the on_complete of this ProjectTask.


        :param on_complete: The on_complete of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._on_complete = on_complete

    @property
    def status_colour(self):
        """Gets the status_colour of this ProjectTask.  # noqa: E501


        :return: The status_colour of this ProjectTask.  # noqa: E501
        :rtype: str
        """
        return self._status_colour

    @status_colour.setter
    def status_colour(self, status_colour):
        """Sets the status_colour of this ProjectTask.


        :param status_colour: The status_colour of this ProjectTask.  # noqa: E501
        :type: str
        """

        self._status_colour = status_colour

    @property
    def machine(self):
        """Gets the machine of this ProjectTask.  # noqa: E501


        :return: The machine of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._machine

    @machine.setter
    def machine(self, machine):
        """Sets the machine of this ProjectTask.


        :param machine: The machine of this ProjectTask.  # noqa: E501
        :type: int
        """

        self._machine = machine

    @property
    def order_formatted_number(self):
        """Gets the order_formatted_number of this ProjectTask.  # noqa: E501


        :return: The order_formatted_number of this ProjectTask.  # noqa: E501
        :rtype: str
        """
        return self._order_formatted_number

    @order_formatted_number.setter
    def order_formatted_number(self, order_formatted_number):
        """Sets the order_formatted_number of this ProjectTask.


        :param order_formatted_number: The order_formatted_number of this ProjectTask.  # noqa: E501
        :type: str
        """

        self._order_formatted_number = order_formatted_number

    @property
    def completion_rate(self):
        """Gets the completion_rate of this ProjectTask.  # noqa: E501

        Cat a fost completat din sarcina in procentaj  # noqa: E501

        :return: The completion_rate of this ProjectTask.  # noqa: E501
        :rtype: int
        """
        return self._completion_rate

    @completion_rate.setter
    def completion_rate(self, completion_rate):
        """Sets the completion_rate of this ProjectTask.

        Cat a fost completat din sarcina in procentaj  # noqa: E501

        :param completion_rate: The completion_rate of this ProjectTask.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                completion_rate is not None and completion_rate > 32767):  # noqa: E501
            raise ValueError("Invalid value for `completion_rate`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                completion_rate is not None and completion_rate < 0):  # noqa: E501
            raise ValueError("Invalid value for `completion_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._completion_rate = completion_rate

    @property
    def completed(self):
        """Gets the completed of this ProjectTask.  # noqa: E501


        :return: The completed of this ProjectTask.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this ProjectTask.


        :param completed: The completed of this ProjectTask.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def minimum_completion_rate(self):
        """Gets the minimum_completion_rate of this ProjectTask.  # noqa: E501


        :return: The minimum_completion_rate of this ProjectTask.  # noqa: E501
        :rtype: str
        """
        return self._minimum_completion_rate

    @minimum_completion_rate.setter
    def minimum_completion_rate(self, minimum_completion_rate):
        """Sets the minimum_completion_rate of this ProjectTask.


        :param minimum_completion_rate: The minimum_completion_rate of this ProjectTask.  # noqa: E501
        :type: str
        """

        self._minimum_completion_rate = minimum_completion_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectTask):
            return True

        return self.to_dict() != other.to_dict()
