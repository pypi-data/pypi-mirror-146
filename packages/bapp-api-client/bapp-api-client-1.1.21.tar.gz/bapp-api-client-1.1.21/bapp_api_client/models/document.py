# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'code': 'str',
        'category': 'int',
        'type': 'int',
        'locations': 'list[int]',
        'departments': 'list[int]',
        'employees': 'list[int]',
        'interval': 'int',
        'next_occurrence': 'date',
        'revision_set': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'category': 'category',
        'type': 'type',
        'locations': 'locations',
        'departments': 'departments',
        'employees': 'employees',
        'interval': 'interval',
        'next_occurrence': 'next_occurrence',
        'revision_set': 'revision_set'
    }

    def __init__(self, id=None, name=None, code=None, category=None, type=None, locations=None, departments=None, employees=None, interval=None, next_occurrence=None, revision_set=None, _configuration=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._code = None
        self._category = None
        self._type = None
        self._locations = None
        self._departments = None
        self._employees = None
        self._interval = None
        self._next_occurrence = None
        self._revision_set = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if code is not None:
            self.code = code
        if category is not None:
            self.category = category
        if type is not None:
            self.type = type
        if locations is not None:
            self.locations = locations
        if departments is not None:
            self.departments = departments
        if employees is not None:
            self.employees = employees
        if interval is not None:
            self.interval = interval
        if next_occurrence is not None:
            self.next_occurrence = next_occurrence
        if revision_set is not None:
            self.revision_set = revision_set

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Document.  # noqa: E501


        :return: The name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Document.


        :param name: The name of this Document.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this Document.  # noqa: E501


        :return: The code of this Document.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Document.


        :param code: The code of this Document.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code is not None and len(code) > 100):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `100`")  # noqa: E501

        self._code = code

    @property
    def category(self):
        """Gets the category of this Document.  # noqa: E501


        :return: The category of this Document.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Document.


        :param category: The category of this Document.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def type(self):
        """Gets the type of this Document.  # noqa: E501


        :return: The type of this Document.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Document.


        :param type: The type of this Document.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def locations(self):
        """Gets the locations of this Document.  # noqa: E501


        :return: The locations of this Document.  # noqa: E501
        :rtype: list[int]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Document.


        :param locations: The locations of this Document.  # noqa: E501
        :type: list[int]
        """

        self._locations = locations

    @property
    def departments(self):
        """Gets the departments of this Document.  # noqa: E501


        :return: The departments of this Document.  # noqa: E501
        :rtype: list[int]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this Document.


        :param departments: The departments of this Document.  # noqa: E501
        :type: list[int]
        """

        self._departments = departments

    @property
    def employees(self):
        """Gets the employees of this Document.  # noqa: E501


        :return: The employees of this Document.  # noqa: E501
        :rtype: list[int]
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this Document.


        :param employees: The employees of this Document.  # noqa: E501
        :type: list[int]
        """

        self._employees = employees

    @property
    def interval(self):
        """Gets the interval of this Document.  # noqa: E501


        :return: The interval of this Document.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Document.


        :param interval: The interval of this Document.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def next_occurrence(self):
        """Gets the next_occurrence of this Document.  # noqa: E501


        :return: The next_occurrence of this Document.  # noqa: E501
        :rtype: date
        """
        return self._next_occurrence

    @next_occurrence.setter
    def next_occurrence(self, next_occurrence):
        """Sets the next_occurrence of this Document.


        :param next_occurrence: The next_occurrence of this Document.  # noqa: E501
        :type: date
        """

        self._next_occurrence = next_occurrence

    @property
    def revision_set(self):
        """Gets the revision_set of this Document.  # noqa: E501


        :return: The revision_set of this Document.  # noqa: E501
        :rtype: list[int]
        """
        return self._revision_set

    @revision_set.setter
    def revision_set(self, revision_set):
        """Sets the revision_set of this Document.


        :param revision_set: The revision_set of this Document.  # noqa: E501
        :type: list[int]
        """

        self._revision_set = revision_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
