# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Car(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'pdf_file': 'str',
        'make': 'str',
        'model': 'str',
        'registration_number': 'str',
        'registration_released_by': 'str',
        'registration_certificate': 'str',
        'identification': 'str',
        'fabrication_year': 'int',
        'colour': 'str',
        'capacity': 'int',
        'contract_begin_date': 'date',
        'contract_end_date': 'date',
        'mileage': 'str',
        'tank_balance': 'str',
        'small_city_consumption': 'str',
        'big_city_consumption': 'str',
        'out_of_city_consumption': 'str',
        'fuel_type': 'int',
        'created_by': 'str',
        'modified_by': 'str',
        'driver': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'pdf_file': 'pdf_file',
        'make': 'make',
        'model': 'model',
        'registration_number': 'registration_number',
        'registration_released_by': 'registration_released_by',
        'registration_certificate': 'registration_certificate',
        'identification': 'identification',
        'fabrication_year': 'fabrication_year',
        'colour': 'colour',
        'capacity': 'capacity',
        'contract_begin_date': 'contract_begin_date',
        'contract_end_date': 'contract_end_date',
        'mileage': 'mileage',
        'tank_balance': 'tank_balance',
        'small_city_consumption': 'small_city_consumption',
        'big_city_consumption': 'big_city_consumption',
        'out_of_city_consumption': 'out_of_city_consumption',
        'fuel_type': 'fuel_type',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'driver': 'driver'
    }

    def __init__(self, id=None, created_at=None, modified_at=None, pdf_file=None, make=None, model=None, registration_number=None, registration_released_by=None, registration_certificate=None, identification=None, fabrication_year=None, colour=None, capacity=None, contract_begin_date=None, contract_end_date=None, mileage=None, tank_balance=None, small_city_consumption=None, big_city_consumption=None, out_of_city_consumption=None, fuel_type=None, created_by=None, modified_by=None, driver=None, _configuration=None):  # noqa: E501
        """Car - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._modified_at = None
        self._pdf_file = None
        self._make = None
        self._model = None
        self._registration_number = None
        self._registration_released_by = None
        self._registration_certificate = None
        self._identification = None
        self._fabrication_year = None
        self._colour = None
        self._capacity = None
        self._contract_begin_date = None
        self._contract_end_date = None
        self._mileage = None
        self._tank_balance = None
        self._small_city_consumption = None
        self._big_city_consumption = None
        self._out_of_city_consumption = None
        self._fuel_type = None
        self._created_by = None
        self._modified_by = None
        self._driver = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if pdf_file is not None:
            self.pdf_file = pdf_file
        self.make = make
        self.model = model
        self.registration_number = registration_number
        self.registration_released_by = registration_released_by
        self.registration_certificate = registration_certificate
        if identification is not None:
            self.identification = identification
        if fabrication_year is not None:
            self.fabrication_year = fabrication_year
        if colour is not None:
            self.colour = colour
        if capacity is not None:
            self.capacity = capacity
        self.contract_begin_date = contract_begin_date
        if contract_end_date is not None:
            self.contract_end_date = contract_end_date
        if mileage is not None:
            self.mileage = mileage
        if tank_balance is not None:
            self.tank_balance = tank_balance
        if small_city_consumption is not None:
            self.small_city_consumption = small_city_consumption
        if big_city_consumption is not None:
            self.big_city_consumption = big_city_consumption
        if out_of_city_consumption is not None:
            self.out_of_city_consumption = out_of_city_consumption
        if fuel_type is not None:
            self.fuel_type = fuel_type
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if driver is not None:
            self.driver = driver

    @property
    def id(self):
        """Gets the id of this Car.  # noqa: E501


        :return: The id of this Car.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Car.


        :param id: The id of this Car.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Car.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Car.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Car.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Car.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Car.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Car.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Car.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Car.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def pdf_file(self):
        """Gets the pdf_file of this Car.  # noqa: E501


        :return: The pdf_file of this Car.  # noqa: E501
        :rtype: str
        """
        return self._pdf_file

    @pdf_file.setter
    def pdf_file(self, pdf_file):
        """Sets the pdf_file of this Car.


        :param pdf_file: The pdf_file of this Car.  # noqa: E501
        :type: str
        """

        self._pdf_file = pdf_file

    @property
    def make(self):
        """Gets the make of this Car.  # noqa: E501


        :return: The make of this Car.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this Car.


        :param make: The make of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and make is None:
            raise ValueError("Invalid value for `make`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                make is not None and len(make) > 100):
            raise ValueError("Invalid value for `make`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                make is not None and len(make) < 1):
            raise ValueError("Invalid value for `make`, length must be greater than or equal to `1`")  # noqa: E501

        self._make = make

    @property
    def model(self):
        """Gets the model of this Car.  # noqa: E501


        :return: The model of this Car.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Car.


        :param model: The model of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                model is not None and len(model) > 100):
            raise ValueError("Invalid value for `model`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                model is not None and len(model) < 1):
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `1`")  # noqa: E501

        self._model = model

    @property
    def registration_number(self):
        """Gets the registration_number of this Car.  # noqa: E501

        Numar de inmatriculare (A)  # noqa: E501

        :return: The registration_number of this Car.  # noqa: E501
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this Car.

        Numar de inmatriculare (A)  # noqa: E501

        :param registration_number: The registration_number of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and registration_number is None:
            raise ValueError("Invalid value for `registration_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_number is not None and len(registration_number) > 30):
            raise ValueError("Invalid value for `registration_number`, length must be less than or equal to `30`")  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_number is not None and len(registration_number) < 1):
            raise ValueError("Invalid value for `registration_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._registration_number = registration_number

    @property
    def registration_released_by(self):
        """Gets the registration_released_by of this Car.  # noqa: E501

        Autoritatea emitenta (Z)  # noqa: E501

        :return: The registration_released_by of this Car.  # noqa: E501
        :rtype: str
        """
        return self._registration_released_by

    @registration_released_by.setter
    def registration_released_by(self, registration_released_by):
        """Sets the registration_released_by of this Car.

        Autoritatea emitenta (Z)  # noqa: E501

        :param registration_released_by: The registration_released_by of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and registration_released_by is None:
            raise ValueError("Invalid value for `registration_released_by`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_released_by is not None and len(registration_released_by) > 100):
            raise ValueError("Invalid value for `registration_released_by`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_released_by is not None and len(registration_released_by) < 1):
            raise ValueError("Invalid value for `registration_released_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._registration_released_by = registration_released_by

    @property
    def registration_certificate(self):
        """Gets the registration_certificate of this Car.  # noqa: E501

        Seria cartii de identitate a vehiculului (X)  # noqa: E501

        :return: The registration_certificate of this Car.  # noqa: E501
        :rtype: str
        """
        return self._registration_certificate

    @registration_certificate.setter
    def registration_certificate(self, registration_certificate):
        """Sets the registration_certificate of this Car.

        Seria cartii de identitate a vehiculului (X)  # noqa: E501

        :param registration_certificate: The registration_certificate of this Car.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and registration_certificate is None:
            raise ValueError("Invalid value for `registration_certificate`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_certificate is not None and len(registration_certificate) > 100):
            raise ValueError("Invalid value for `registration_certificate`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_certificate is not None and len(registration_certificate) < 1):
            raise ValueError("Invalid value for `registration_certificate`, length must be greater than or equal to `1`")  # noqa: E501

        self._registration_certificate = registration_certificate

    @property
    def identification(self):
        """Gets the identification of this Car.  # noqa: E501

        Numar de identificare al vehiculului (E)  # noqa: E501

        :return: The identification of this Car.  # noqa: E501
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this Car.

        Numar de identificare al vehiculului (E)  # noqa: E501

        :param identification: The identification of this Car.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                identification is not None and len(identification) > 20):
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `20`")  # noqa: E501

        self._identification = identification

    @property
    def fabrication_year(self):
        """Gets the fabrication_year of this Car.  # noqa: E501


        :return: The fabrication_year of this Car.  # noqa: E501
        :rtype: int
        """
        return self._fabrication_year

    @fabrication_year.setter
    def fabrication_year(self, fabrication_year):
        """Sets the fabrication_year of this Car.


        :param fabrication_year: The fabrication_year of this Car.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                fabrication_year is not None and fabrication_year > 32767):  # noqa: E501
            raise ValueError("Invalid value for `fabrication_year`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                fabrication_year is not None and fabrication_year < 0):  # noqa: E501
            raise ValueError("Invalid value for `fabrication_year`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fabrication_year = fabrication_year

    @property
    def colour(self):
        """Gets the colour of this Car.  # noqa: E501


        :return: The colour of this Car.  # noqa: E501
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this Car.


        :param colour: The colour of this Car.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                colour is not None and len(colour) > 100):
            raise ValueError("Invalid value for `colour`, length must be less than or equal to `100`")  # noqa: E501

        self._colour = colour

    @property
    def capacity(self):
        """Gets the capacity of this Car.  # noqa: E501

        Capacitatea motorului (P1)  # noqa: E501

        :return: The capacity of this Car.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Car.

        Capacitatea motorului (P1)  # noqa: E501

        :param capacity: The capacity of this Car.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                capacity is not None and capacity > 32767):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                capacity is not None and capacity < 0):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._capacity = capacity

    @property
    def contract_begin_date(self):
        """Gets the contract_begin_date of this Car.  # noqa: E501


        :return: The contract_begin_date of this Car.  # noqa: E501
        :rtype: date
        """
        return self._contract_begin_date

    @contract_begin_date.setter
    def contract_begin_date(self, contract_begin_date):
        """Sets the contract_begin_date of this Car.


        :param contract_begin_date: The contract_begin_date of this Car.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and contract_begin_date is None:
            raise ValueError("Invalid value for `contract_begin_date`, must not be `None`")  # noqa: E501

        self._contract_begin_date = contract_begin_date

    @property
    def contract_end_date(self):
        """Gets the contract_end_date of this Car.  # noqa: E501


        :return: The contract_end_date of this Car.  # noqa: E501
        :rtype: date
        """
        return self._contract_end_date

    @contract_end_date.setter
    def contract_end_date(self, contract_end_date):
        """Sets the contract_end_date of this Car.


        :param contract_end_date: The contract_end_date of this Car.  # noqa: E501
        :type: date
        """

        self._contract_end_date = contract_end_date

    @property
    def mileage(self):
        """Gets the mileage of this Car.  # noqa: E501

        KM in bord ai autoturismului  # noqa: E501

        :return: The mileage of this Car.  # noqa: E501
        :rtype: str
        """
        return self._mileage

    @mileage.setter
    def mileage(self, mileage):
        """Sets the mileage of this Car.

        KM in bord ai autoturismului  # noqa: E501

        :param mileage: The mileage of this Car.  # noqa: E501
        :type: str
        """

        self._mileage = mileage

    @property
    def tank_balance(self):
        """Gets the tank_balance of this Car.  # noqa: E501

        Cantitatea de litrii in rezervor la momentul adaugarii  # noqa: E501

        :return: The tank_balance of this Car.  # noqa: E501
        :rtype: str
        """
        return self._tank_balance

    @tank_balance.setter
    def tank_balance(self, tank_balance):
        """Sets the tank_balance of this Car.

        Cantitatea de litrii in rezervor la momentul adaugarii  # noqa: E501

        :param tank_balance: The tank_balance of this Car.  # noqa: E501
        :type: str
        """

        self._tank_balance = tank_balance

    @property
    def small_city_consumption(self):
        """Gets the small_city_consumption of this Car.  # noqa: E501


        :return: The small_city_consumption of this Car.  # noqa: E501
        :rtype: str
        """
        return self._small_city_consumption

    @small_city_consumption.setter
    def small_city_consumption(self, small_city_consumption):
        """Sets the small_city_consumption of this Car.


        :param small_city_consumption: The small_city_consumption of this Car.  # noqa: E501
        :type: str
        """

        self._small_city_consumption = small_city_consumption

    @property
    def big_city_consumption(self):
        """Gets the big_city_consumption of this Car.  # noqa: E501


        :return: The big_city_consumption of this Car.  # noqa: E501
        :rtype: str
        """
        return self._big_city_consumption

    @big_city_consumption.setter
    def big_city_consumption(self, big_city_consumption):
        """Sets the big_city_consumption of this Car.


        :param big_city_consumption: The big_city_consumption of this Car.  # noqa: E501
        :type: str
        """

        self._big_city_consumption = big_city_consumption

    @property
    def out_of_city_consumption(self):
        """Gets the out_of_city_consumption of this Car.  # noqa: E501


        :return: The out_of_city_consumption of this Car.  # noqa: E501
        :rtype: str
        """
        return self._out_of_city_consumption

    @out_of_city_consumption.setter
    def out_of_city_consumption(self, out_of_city_consumption):
        """Sets the out_of_city_consumption of this Car.


        :param out_of_city_consumption: The out_of_city_consumption of this Car.  # noqa: E501
        :type: str
        """

        self._out_of_city_consumption = out_of_city_consumption

    @property
    def fuel_type(self):
        """Gets the fuel_type of this Car.  # noqa: E501


        :return: The fuel_type of this Car.  # noqa: E501
        :rtype: int
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this Car.


        :param fuel_type: The fuel_type of this Car.  # noqa: E501
        :type: int
        """

        self._fuel_type = fuel_type

    @property
    def created_by(self):
        """Gets the created_by of this Car.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this Car.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Car.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this Car.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this Car.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this Car.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Car.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this Car.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def driver(self):
        """Gets the driver of this Car.  # noqa: E501


        :return: The driver of this Car.  # noqa: E501
        :rtype: int
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this Car.


        :param driver: The driver of this Car.  # noqa: E501
        :type: int
        """

        self._driver = driver

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Car, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Car):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Car):
            return True

        return self.to_dict() != other.to_dict()
