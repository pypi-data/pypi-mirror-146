# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class TimeSheetCalendar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'str',
        'contract_number': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'date_start': 'date',
        'calendar': 'str',
        'month_totals': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'contract_number': 'contract_number',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'date_start': 'date_start',
        'calendar': 'calendar',
        'month_totals': 'month_totals'
    }

    def __init__(self, id=None, user_id=None, contract_number=None, first_name=None, last_name=None, date_start=None, calendar=None, month_totals=None, _configuration=None):  # noqa: E501
        """TimeSheetCalendar - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._contract_number = None
        self._first_name = None
        self._last_name = None
        self._date_start = None
        self._calendar = None
        self._month_totals = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if contract_number is not None:
            self.contract_number = contract_number
        self.first_name = first_name
        self.last_name = last_name
        if date_start is not None:
            self.date_start = date_start
        if calendar is not None:
            self.calendar = calendar
        if month_totals is not None:
            self.month_totals = month_totals

    @property
    def id(self):
        """Gets the id of this TimeSheetCalendar.  # noqa: E501


        :return: The id of this TimeSheetCalendar.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeSheetCalendar.


        :param id: The id of this TimeSheetCalendar.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this TimeSheetCalendar.  # noqa: E501


        :return: The user_id of this TimeSheetCalendar.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TimeSheetCalendar.


        :param user_id: The user_id of this TimeSheetCalendar.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def contract_number(self):
        """Gets the contract_number of this TimeSheetCalendar.  # noqa: E501


        :return: The contract_number of this TimeSheetCalendar.  # noqa: E501
        :rtype: str
        """
        return self._contract_number

    @contract_number.setter
    def contract_number(self, contract_number):
        """Sets the contract_number of this TimeSheetCalendar.


        :param contract_number: The contract_number of this TimeSheetCalendar.  # noqa: E501
        :type: str
        """

        self._contract_number = contract_number

    @property
    def first_name(self):
        """Gets the first_name of this TimeSheetCalendar.  # noqa: E501


        :return: The first_name of this TimeSheetCalendar.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this TimeSheetCalendar.


        :param first_name: The first_name of this TimeSheetCalendar.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) > 200):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) < 1):
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this TimeSheetCalendar.  # noqa: E501


        :return: The last_name of this TimeSheetCalendar.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this TimeSheetCalendar.


        :param last_name: The last_name of this TimeSheetCalendar.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_name is not None and len(last_name) > 200):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_name is not None and len(last_name) < 1):
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._last_name = last_name

    @property
    def date_start(self):
        """Gets the date_start of this TimeSheetCalendar.  # noqa: E501


        :return: The date_start of this TimeSheetCalendar.  # noqa: E501
        :rtype: date
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this TimeSheetCalendar.


        :param date_start: The date_start of this TimeSheetCalendar.  # noqa: E501
        :type: date
        """

        self._date_start = date_start

    @property
    def calendar(self):
        """Gets the calendar of this TimeSheetCalendar.  # noqa: E501


        :return: The calendar of this TimeSheetCalendar.  # noqa: E501
        :rtype: str
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """Sets the calendar of this TimeSheetCalendar.


        :param calendar: The calendar of this TimeSheetCalendar.  # noqa: E501
        :type: str
        """

        self._calendar = calendar

    @property
    def month_totals(self):
        """Gets the month_totals of this TimeSheetCalendar.  # noqa: E501


        :return: The month_totals of this TimeSheetCalendar.  # noqa: E501
        :rtype: str
        """
        return self._month_totals

    @month_totals.setter
    def month_totals(self, month_totals):
        """Sets the month_totals of this TimeSheetCalendar.


        :param month_totals: The month_totals of this TimeSheetCalendar.  # noqa: E501
        :type: str
        """

        self._month_totals = month_totals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSheetCalendar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSheetCalendar):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeSheetCalendar):
            return True

        return self.to_dict() != other.to_dict()
