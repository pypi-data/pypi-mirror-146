# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class StockMovementModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'stock': 'int',
        'stock_reference': 'int',
        'product': 'int',
        'document_type': 'int',
        'document_serial': 'str',
        'document_number': 'str',
        'formatted_number': 'str',
        'quantity': 'str',
        'movement_stock': 'str',
        'weighted_average_cost': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'document_id': 'str',
        'movement': 'int',
        'available_quantity': 'str',
        'ingress_price': 'str'
    }

    attribute_map = {
        'id': 'id',
        'stock': 'stock',
        'stock_reference': 'stock_reference',
        'product': 'product',
        'document_type': 'document_type',
        'document_serial': 'document_serial',
        'document_number': 'document_number',
        'formatted_number': 'formatted_number',
        'quantity': 'quantity',
        'movement_stock': 'movement_stock',
        'weighted_average_cost': 'weighted_average_cost',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'document_id': 'document_id',
        'movement': 'movement',
        'available_quantity': 'available_quantity',
        'ingress_price': 'ingress_price'
    }

    def __init__(self, id=None, stock=None, stock_reference=None, product=None, document_type=None, document_serial=None, document_number=None, formatted_number=None, quantity=None, movement_stock=None, weighted_average_cost=None, created_at=None, modified_at=None, document_id=None, movement=None, available_quantity=None, ingress_price=None, _configuration=None):  # noqa: E501
        """StockMovementModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._stock = None
        self._stock_reference = None
        self._product = None
        self._document_type = None
        self._document_serial = None
        self._document_number = None
        self._formatted_number = None
        self._quantity = None
        self._movement_stock = None
        self._weighted_average_cost = None
        self._created_at = None
        self._modified_at = None
        self._document_id = None
        self._movement = None
        self._available_quantity = None
        self._ingress_price = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.stock = stock
        if stock_reference is not None:
            self.stock_reference = stock_reference
        self.product = product
        if document_type is not None:
            self.document_type = document_type
        if document_serial is not None:
            self.document_serial = document_serial
        if document_number is not None:
            self.document_number = document_number
        if formatted_number is not None:
            self.formatted_number = formatted_number
        if quantity is not None:
            self.quantity = quantity
        if movement_stock is not None:
            self.movement_stock = movement_stock
        if weighted_average_cost is not None:
            self.weighted_average_cost = weighted_average_cost
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if document_id is not None:
            self.document_id = document_id
        if movement is not None:
            self.movement = movement
        if available_quantity is not None:
            self.available_quantity = available_quantity
        if ingress_price is not None:
            self.ingress_price = ingress_price

    @property
    def id(self):
        """Gets the id of this StockMovementModel.  # noqa: E501


        :return: The id of this StockMovementModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockMovementModel.


        :param id: The id of this StockMovementModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def stock(self):
        """Gets the stock of this StockMovementModel.  # noqa: E501

        Stocul pe care se fac operații  # noqa: E501

        :return: The stock of this StockMovementModel.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this StockMovementModel.

        Stocul pe care se fac operații  # noqa: E501

        :param stock: The stock of this StockMovementModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def stock_reference(self):
        """Gets the stock_reference of this StockMovementModel.  # noqa: E501

        Stoc referință  # noqa: E501

        :return: The stock_reference of this StockMovementModel.  # noqa: E501
        :rtype: int
        """
        return self._stock_reference

    @stock_reference.setter
    def stock_reference(self, stock_reference):
        """Sets the stock_reference of this StockMovementModel.

        Stoc referință  # noqa: E501

        :param stock_reference: The stock_reference of this StockMovementModel.  # noqa: E501
        :type: int
        """

        self._stock_reference = stock_reference

    @property
    def product(self):
        """Gets the product of this StockMovementModel.  # noqa: E501


        :return: The product of this StockMovementModel.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this StockMovementModel.


        :param product: The product of this StockMovementModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def document_type(self):
        """Gets the document_type of this StockMovementModel.  # noqa: E501

        Tip document  # noqa: E501

        :return: The document_type of this StockMovementModel.  # noqa: E501
        :rtype: int
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this StockMovementModel.

        Tip document  # noqa: E501

        :param document_type: The document_type of this StockMovementModel.  # noqa: E501
        :type: int
        """

        self._document_type = document_type

    @property
    def document_serial(self):
        """Gets the document_serial of this StockMovementModel.  # noqa: E501

        Serie document legătură  # noqa: E501

        :return: The document_serial of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._document_serial

    @document_serial.setter
    def document_serial(self, document_serial):
        """Sets the document_serial of this StockMovementModel.

        Serie document legătură  # noqa: E501

        :param document_serial: The document_serial of this StockMovementModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                document_serial is not None and len(document_serial) > 20):
            raise ValueError("Invalid value for `document_serial`, length must be less than or equal to `20`")  # noqa: E501

        self._document_serial = document_serial

    @property
    def document_number(self):
        """Gets the document_number of this StockMovementModel.  # noqa: E501

        Număr document legătură  # noqa: E501

        :return: The document_number of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this StockMovementModel.

        Număr document legătură  # noqa: E501

        :param document_number: The document_number of this StockMovementModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) > 20):
            raise ValueError("Invalid value for `document_number`, length must be less than or equal to `20`")  # noqa: E501

        self._document_number = document_number

    @property
    def formatted_number(self):
        """Gets the formatted_number of this StockMovementModel.  # noqa: E501


        :return: The formatted_number of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._formatted_number

    @formatted_number.setter
    def formatted_number(self, formatted_number):
        """Sets the formatted_number of this StockMovementModel.


        :param formatted_number: The formatted_number of this StockMovementModel.  # noqa: E501
        :type: str
        """

        self._formatted_number = formatted_number

    @property
    def quantity(self):
        """Gets the quantity of this StockMovementModel.  # noqa: E501


        :return: The quantity of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this StockMovementModel.


        :param quantity: The quantity of this StockMovementModel.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def movement_stock(self):
        """Gets the movement_stock of this StockMovementModel.  # noqa: E501

        Cantitatea stocului sursă la momentul creării mișcării de stoc  # noqa: E501

        :return: The movement_stock of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._movement_stock

    @movement_stock.setter
    def movement_stock(self, movement_stock):
        """Sets the movement_stock of this StockMovementModel.

        Cantitatea stocului sursă la momentul creării mișcării de stoc  # noqa: E501

        :param movement_stock: The movement_stock of this StockMovementModel.  # noqa: E501
        :type: str
        """

        self._movement_stock = movement_stock

    @property
    def weighted_average_cost(self):
        """Gets the weighted_average_cost of this StockMovementModel.  # noqa: E501


        :return: The weighted_average_cost of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._weighted_average_cost

    @weighted_average_cost.setter
    def weighted_average_cost(self, weighted_average_cost):
        """Sets the weighted_average_cost of this StockMovementModel.


        :param weighted_average_cost: The weighted_average_cost of this StockMovementModel.  # noqa: E501
        :type: str
        """

        self._weighted_average_cost = weighted_average_cost

    @property
    def created_at(self):
        """Gets the created_at of this StockMovementModel.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this StockMovementModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this StockMovementModel.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this StockMovementModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this StockMovementModel.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this StockMovementModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this StockMovementModel.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this StockMovementModel.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def document_id(self):
        """Gets the document_id of this StockMovementModel.  # noqa: E501


        :return: The document_id of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this StockMovementModel.


        :param document_id: The document_id of this StockMovementModel.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def movement(self):
        """Gets the movement of this StockMovementModel.  # noqa: E501


        :return: The movement of this StockMovementModel.  # noqa: E501
        :rtype: int
        """
        return self._movement

    @movement.setter
    def movement(self, movement):
        """Sets the movement of this StockMovementModel.


        :param movement: The movement of this StockMovementModel.  # noqa: E501
        :type: int
        """

        self._movement = movement

    @property
    def available_quantity(self):
        """Gets the available_quantity of this StockMovementModel.  # noqa: E501


        :return: The available_quantity of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this StockMovementModel.


        :param available_quantity: The available_quantity of this StockMovementModel.  # noqa: E501
        :type: str
        """

        self._available_quantity = available_quantity

    @property
    def ingress_price(self):
        """Gets the ingress_price of this StockMovementModel.  # noqa: E501

        Preț RON  # noqa: E501

        :return: The ingress_price of this StockMovementModel.  # noqa: E501
        :rtype: str
        """
        return self._ingress_price

    @ingress_price.setter
    def ingress_price(self, ingress_price):
        """Sets the ingress_price of this StockMovementModel.

        Preț RON  # noqa: E501

        :param ingress_price: The ingress_price of this StockMovementModel.  # noqa: E501
        :type: str
        """

        self._ingress_price = ingress_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockMovementModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockMovementModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StockMovementModel):
            return True

        return self.to_dict() != other.to_dict()
