# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ProjectFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'file': 'str',
        'path': 'str',
        'name': 'str',
        'public': 'bool',
        'is_from_task': 'str'
    }

    attribute_map = {
        'id': 'id',
        'file': 'file',
        'path': 'path',
        'name': 'name',
        'public': 'public',
        'is_from_task': 'is_from_task'
    }

    def __init__(self, id=None, file=None, path=None, name=None, public=None, is_from_task=None, _configuration=None):  # noqa: E501
        """ProjectFile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._file = None
        self._path = None
        self._name = None
        self._public = None
        self._is_from_task = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if file is not None:
            self.file = file
        if path is not None:
            self.path = path
        if name is not None:
            self.name = name
        if public is not None:
            self.public = public
        if is_from_task is not None:
            self.is_from_task = is_from_task

    @property
    def id(self):
        """Gets the id of this ProjectFile.  # noqa: E501


        :return: The id of this ProjectFile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectFile.


        :param id: The id of this ProjectFile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def file(self):
        """Gets the file of this ProjectFile.  # noqa: E501


        :return: The file of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ProjectFile.


        :param file: The file of this ProjectFile.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def path(self):
        """Gets the path of this ProjectFile.  # noqa: E501


        :return: The path of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProjectFile.


        :param path: The path of this ProjectFile.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                path is not None and len(path) > 200):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `200`")  # noqa: E501

        self._path = path

    @property
    def name(self):
        """Gets the name of this ProjectFile.  # noqa: E501


        :return: The name of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectFile.


        :param name: The name of this ProjectFile.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def public(self):
        """Gets the public of this ProjectFile.  # noqa: E501


        :return: The public of this ProjectFile.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ProjectFile.


        :param public: The public of this ProjectFile.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def is_from_task(self):
        """Gets the is_from_task of this ProjectFile.  # noqa: E501


        :return: The is_from_task of this ProjectFile.  # noqa: E501
        :rtype: str
        """
        return self._is_from_task

    @is_from_task.setter
    def is_from_task(self, is_from_task):
        """Sets the is_from_task of this ProjectFile.


        :param is_from_task: The is_from_task of this ProjectFile.  # noqa: E501
        :type: str
        """

        self._is_from_task = is_from_task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectFile):
            return True

        return self.to_dict() != other.to_dict()
