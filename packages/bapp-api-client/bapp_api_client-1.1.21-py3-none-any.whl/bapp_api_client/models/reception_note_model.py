# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ReceptionNoteModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'stock': 'int',
        'supplier': 'int',
        'delegate': 'int',
        'location': 'int',
        'series': 'int',
        'number': 'str',
        'document_type': 'int',
        'document_number': 'str',
        'document_date': 'date',
        'auto': 'str',
        '_date': 'date',
        'status': 'int',
        'observations': 'str',
        'exchange_rate': 'str',
        'subtotal': 'str',
        'tax_value': 'str',
        'total': 'str',
        'is_storno': 'bool',
        'subtotal_currency': 'str',
        'tax_value_currency': 'str',
        'total_currency': 'str',
        'items': 'list[ReceptionNoteItemModel]',
        'view_tokens': 'str',
        'formatted_number': 'str',
        'created_by': 'str',
        'modified_by': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'stock': 'stock',
        'supplier': 'supplier',
        'delegate': 'delegate',
        'location': 'location',
        'series': 'series',
        'number': 'number',
        'document_type': 'document_type',
        'document_number': 'document_number',
        'document_date': 'document_date',
        'auto': 'auto',
        '_date': 'date',
        'status': 'status',
        'observations': 'observations',
        'exchange_rate': 'exchange_rate',
        'subtotal': 'subtotal',
        'tax_value': 'tax_value',
        'total': 'total',
        'is_storno': 'is_storno',
        'subtotal_currency': 'subtotal_currency',
        'tax_value_currency': 'tax_value_currency',
        'total_currency': 'total_currency',
        'items': 'items',
        'view_tokens': 'view_tokens',
        'formatted_number': 'formatted_number',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, id=None, stock=None, supplier=None, delegate=None, location=None, series=None, number=None, document_type=None, document_number=None, document_date=None, auto=None, _date=None, status=None, observations=None, exchange_rate=None, subtotal=None, tax_value=None, total=None, is_storno=None, subtotal_currency=None, tax_value_currency=None, total_currency=None, items=None, view_tokens=None, formatted_number=None, created_by=None, modified_by=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """ReceptionNoteModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._stock = None
        self._supplier = None
        self._delegate = None
        self._location = None
        self._series = None
        self._number = None
        self._document_type = None
        self._document_number = None
        self._document_date = None
        self._auto = None
        self.__date = None
        self._status = None
        self._observations = None
        self._exchange_rate = None
        self._subtotal = None
        self._tax_value = None
        self._total = None
        self._is_storno = None
        self._subtotal_currency = None
        self._tax_value_currency = None
        self._total_currency = None
        self._items = None
        self._view_tokens = None
        self._formatted_number = None
        self._created_by = None
        self._modified_by = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.stock = stock
        self.supplier = supplier
        if delegate is not None:
            self.delegate = delegate
        if location is not None:
            self.location = location
        if series is not None:
            self.series = series
        if number is not None:
            self.number = number
        self.document_type = document_type
        self.document_number = document_number
        self.document_date = document_date
        if auto is not None:
            self.auto = auto
        self._date = _date
        if status is not None:
            self.status = status
        if observations is not None:
            self.observations = observations
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if subtotal is not None:
            self.subtotal = subtotal
        if tax_value is not None:
            self.tax_value = tax_value
        if total is not None:
            self.total = total
        if is_storno is not None:
            self.is_storno = is_storno
        if subtotal_currency is not None:
            self.subtotal_currency = subtotal_currency
        if tax_value_currency is not None:
            self.tax_value_currency = tax_value_currency
        if total_currency is not None:
            self.total_currency = total_currency
        if items is not None:
            self.items = items
        if view_tokens is not None:
            self.view_tokens = view_tokens
        if formatted_number is not None:
            self.formatted_number = formatted_number
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this ReceptionNoteModel.  # noqa: E501


        :return: The id of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReceptionNoteModel.


        :param id: The id of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def stock(self):
        """Gets the stock of this ReceptionNoteModel.  # noqa: E501


        :return: The stock of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this ReceptionNoteModel.


        :param stock: The stock of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and stock is None:
            raise ValueError("Invalid value for `stock`, must not be `None`")  # noqa: E501

        self._stock = stock

    @property
    def supplier(self):
        """Gets the supplier of this ReceptionNoteModel.  # noqa: E501


        :return: The supplier of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this ReceptionNoteModel.


        :param supplier: The supplier of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and supplier is None:
            raise ValueError("Invalid value for `supplier`, must not be `None`")  # noqa: E501

        self._supplier = supplier

    @property
    def delegate(self):
        """Gets the delegate of this ReceptionNoteModel.  # noqa: E501


        :return: The delegate of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._delegate

    @delegate.setter
    def delegate(self, delegate):
        """Sets the delegate of this ReceptionNoteModel.


        :param delegate: The delegate of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """

        self._delegate = delegate

    @property
    def location(self):
        """Gets the location of this ReceptionNoteModel.  # noqa: E501


        :return: The location of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ReceptionNoteModel.


        :param location: The location of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """

        self._location = location

    @property
    def series(self):
        """Gets the series of this ReceptionNoteModel.  # noqa: E501


        :return: The series of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this ReceptionNoteModel.


        :param series: The series of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """

        self._series = series

    @property
    def number(self):
        """Gets the number of this ReceptionNoteModel.  # noqa: E501


        :return: The number of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ReceptionNoteModel.


        :param number: The number of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                number is not None and len(number) < 1):
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def document_type(self):
        """Gets the document_type of this ReceptionNoteModel.  # noqa: E501


        :return: The document_type of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this ReceptionNoteModel.


        :param document_type: The document_type of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")  # noqa: E501

        self._document_type = document_type

    @property
    def document_number(self):
        """Gets the document_number of this ReceptionNoteModel.  # noqa: E501


        :return: The document_number of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this ReceptionNoteModel.


        :param document_number: The document_number of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) > 100):
            raise ValueError("Invalid value for `document_number`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) < 1):
            raise ValueError("Invalid value for `document_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._document_number = document_number

    @property
    def document_date(self):
        """Gets the document_date of this ReceptionNoteModel.  # noqa: E501


        :return: The document_date of this ReceptionNoteModel.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this ReceptionNoteModel.


        :param document_date: The document_date of this ReceptionNoteModel.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and document_date is None:
            raise ValueError("Invalid value for `document_date`, must not be `None`")  # noqa: E501

        self._document_date = document_date

    @property
    def auto(self):
        """Gets the auto of this ReceptionNoteModel.  # noqa: E501


        :return: The auto of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this ReceptionNoteModel.


        :param auto: The auto of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                auto is not None and len(auto) > 100):
            raise ValueError("Invalid value for `auto`, length must be less than or equal to `100`")  # noqa: E501

        self._auto = auto

    @property
    def _date(self):
        """Gets the _date of this ReceptionNoteModel.  # noqa: E501


        :return: The _date of this ReceptionNoteModel.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ReceptionNoteModel.


        :param _date: The _date of this ReceptionNoteModel.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def status(self):
        """Gets the status of this ReceptionNoteModel.  # noqa: E501


        :return: The status of this ReceptionNoteModel.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReceptionNoteModel.


        :param status: The status of this ReceptionNoteModel.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def observations(self):
        """Gets the observations of this ReceptionNoteModel.  # noqa: E501


        :return: The observations of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this ReceptionNoteModel.


        :param observations: The observations of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._observations = observations

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this ReceptionNoteModel.  # noqa: E501


        :return: The exchange_rate of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this ReceptionNoteModel.


        :param exchange_rate: The exchange_rate of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._exchange_rate = exchange_rate

    @property
    def subtotal(self):
        """Gets the subtotal of this ReceptionNoteModel.  # noqa: E501

        Subtotal RON  # noqa: E501

        :return: The subtotal of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this ReceptionNoteModel.

        Subtotal RON  # noqa: E501

        :param subtotal: The subtotal of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._subtotal = subtotal

    @property
    def tax_value(self):
        """Gets the tax_value of this ReceptionNoteModel.  # noqa: E501

        TVA RON  # noqa: E501

        :return: The tax_value of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this ReceptionNoteModel.

        TVA RON  # noqa: E501

        :param tax_value: The tax_value of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._tax_value = tax_value

    @property
    def total(self):
        """Gets the total of this ReceptionNoteModel.  # noqa: E501

        Total RON  # noqa: E501

        :return: The total of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ReceptionNoteModel.

        Total RON  # noqa: E501

        :param total: The total of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def is_storno(self):
        """Gets the is_storno of this ReceptionNoteModel.  # noqa: E501


        :return: The is_storno of this ReceptionNoteModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_storno

    @is_storno.setter
    def is_storno(self, is_storno):
        """Sets the is_storno of this ReceptionNoteModel.


        :param is_storno: The is_storno of this ReceptionNoteModel.  # noqa: E501
        :type: bool
        """

        self._is_storno = is_storno

    @property
    def subtotal_currency(self):
        """Gets the subtotal_currency of this ReceptionNoteModel.  # noqa: E501

        Subtotal valută  # noqa: E501

        :return: The subtotal_currency of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._subtotal_currency

    @subtotal_currency.setter
    def subtotal_currency(self, subtotal_currency):
        """Sets the subtotal_currency of this ReceptionNoteModel.

        Subtotal valută  # noqa: E501

        :param subtotal_currency: The subtotal_currency of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._subtotal_currency = subtotal_currency

    @property
    def tax_value_currency(self):
        """Gets the tax_value_currency of this ReceptionNoteModel.  # noqa: E501

        TVA valută  # noqa: E501

        :return: The tax_value_currency of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._tax_value_currency

    @tax_value_currency.setter
    def tax_value_currency(self, tax_value_currency):
        """Sets the tax_value_currency of this ReceptionNoteModel.

        TVA valută  # noqa: E501

        :param tax_value_currency: The tax_value_currency of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._tax_value_currency = tax_value_currency

    @property
    def total_currency(self):
        """Gets the total_currency of this ReceptionNoteModel.  # noqa: E501

        Total valută  # noqa: E501

        :return: The total_currency of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._total_currency

    @total_currency.setter
    def total_currency(self, total_currency):
        """Sets the total_currency of this ReceptionNoteModel.

        Total valută  # noqa: E501

        :param total_currency: The total_currency of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._total_currency = total_currency

    @property
    def items(self):
        """Gets the items of this ReceptionNoteModel.  # noqa: E501


        :return: The items of this ReceptionNoteModel.  # noqa: E501
        :rtype: list[ReceptionNoteItemModel]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ReceptionNoteModel.


        :param items: The items of this ReceptionNoteModel.  # noqa: E501
        :type: list[ReceptionNoteItemModel]
        """

        self._items = items

    @property
    def view_tokens(self):
        """Gets the view_tokens of this ReceptionNoteModel.  # noqa: E501


        :return: The view_tokens of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._view_tokens

    @view_tokens.setter
    def view_tokens(self, view_tokens):
        """Sets the view_tokens of this ReceptionNoteModel.


        :param view_tokens: The view_tokens of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._view_tokens = view_tokens

    @property
    def formatted_number(self):
        """Gets the formatted_number of this ReceptionNoteModel.  # noqa: E501


        :return: The formatted_number of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._formatted_number

    @formatted_number.setter
    def formatted_number(self, formatted_number):
        """Sets the formatted_number of this ReceptionNoteModel.


        :param formatted_number: The formatted_number of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._formatted_number = formatted_number

    @property
    def created_by(self):
        """Gets the created_by of this ReceptionNoteModel.  # noqa: E501


        :return: The created_by of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ReceptionNoteModel.


        :param created_by: The created_by of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this ReceptionNoteModel.  # noqa: E501


        :return: The modified_by of this ReceptionNoteModel.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this ReceptionNoteModel.


        :param modified_by: The modified_by of this ReceptionNoteModel.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def created_at(self):
        """Gets the created_at of this ReceptionNoteModel.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this ReceptionNoteModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReceptionNoteModel.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this ReceptionNoteModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this ReceptionNoteModel.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this ReceptionNoteModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this ReceptionNoteModel.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this ReceptionNoteModel.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceptionNoteModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceptionNoteModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReceptionNoteModel):
            return True

        return self.to_dict() != other.to_dict()
