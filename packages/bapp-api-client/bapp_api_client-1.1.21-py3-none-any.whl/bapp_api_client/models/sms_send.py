# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class SMSSend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'list[str]',
        'recipients': 'list[str]',
        'attachments': 'str'
    }

    attribute_map = {
        'body': 'body',
        'recipients': 'recipients',
        'attachments': 'attachments'
    }

    def __init__(self, body=None, recipients=None, attachments=None, _configuration=None):  # noqa: E501
        """SMSSend - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._body = None
        self._recipients = None
        self._attachments = None
        self.discriminator = None

        self.body = body
        self.recipients = recipients
        if attachments is not None:
            self.attachments = attachments

    @property
    def body(self):
        """Gets the body of this SMSSend.  # noqa: E501


        :return: The body of this SMSSend.  # noqa: E501
        :rtype: list[str]
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SMSSend.


        :param body: The body of this SMSSend.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def recipients(self):
        """Gets the recipients of this SMSSend.  # noqa: E501


        :return: The recipients of this SMSSend.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this SMSSend.


        :param recipients: The recipients of this SMSSend.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")  # noqa: E501

        self._recipients = recipients

    @property
    def attachments(self):
        """Gets the attachments of this SMSSend.  # noqa: E501


        :return: The attachments of this SMSSend.  # noqa: E501
        :rtype: str
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SMSSend.


        :param attachments: The attachments of this SMSSend.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                attachments is not None and len(attachments) < 1):
            raise ValueError("Invalid value for `attachments`, length must be greater than or equal to `1`")  # noqa: E501

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SMSSend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SMSSend):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SMSSend):
            return True

        return self.to_dict() != other.to_dict()
