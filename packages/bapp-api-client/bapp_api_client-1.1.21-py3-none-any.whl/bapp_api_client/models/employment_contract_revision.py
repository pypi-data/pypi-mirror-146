# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EmploymentContractRevision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_start': 'date',
        'cod_cor': 'str',
        'work_end': 'date',
        'end_date_exception': 'int',
        'contract_type': 'str',
        'full_time': 'bool',
        'contract_time': 'int',
        'shift_type': 'int',
        'hour_split': 'int',
        'working_hours': 'int',
        'extra': 'object',
        'from_date': 'date',
        'salary': 'str'
    }

    attribute_map = {
        'work_start': 'work_start',
        'cod_cor': 'cod_cor',
        'work_end': 'work_end',
        'end_date_exception': 'end_date_exception',
        'contract_type': 'contract_type',
        'full_time': 'full_time',
        'contract_time': 'contract_time',
        'shift_type': 'shift_type',
        'hour_split': 'hour_split',
        'working_hours': 'working_hours',
        'extra': 'extra',
        'from_date': 'from_date',
        'salary': 'salary'
    }

    def __init__(self, work_start=None, cod_cor=None, work_end=None, end_date_exception=None, contract_type=None, full_time=None, contract_time=None, shift_type=None, hour_split=None, working_hours=None, extra=None, from_date=None, salary=None, _configuration=None):  # noqa: E501
        """EmploymentContractRevision - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._work_start = None
        self._cod_cor = None
        self._work_end = None
        self._end_date_exception = None
        self._contract_type = None
        self._full_time = None
        self._contract_time = None
        self._shift_type = None
        self._hour_split = None
        self._working_hours = None
        self._extra = None
        self._from_date = None
        self._salary = None
        self.discriminator = None

        if work_start is not None:
            self.work_start = work_start
        if cod_cor is not None:
            self.cod_cor = cod_cor
        if work_end is not None:
            self.work_end = work_end
        if end_date_exception is not None:
            self.end_date_exception = end_date_exception
        if contract_type is not None:
            self.contract_type = contract_type
        if full_time is not None:
            self.full_time = full_time
        if contract_time is not None:
            self.contract_time = contract_time
        if shift_type is not None:
            self.shift_type = shift_type
        if hour_split is not None:
            self.hour_split = hour_split
        if working_hours is not None:
            self.working_hours = working_hours
        if extra is not None:
            self.extra = extra
        self.from_date = from_date
        if salary is not None:
            self.salary = salary

    @property
    def work_start(self):
        """Gets the work_start of this EmploymentContractRevision.  # noqa: E501


        :return: The work_start of this EmploymentContractRevision.  # noqa: E501
        :rtype: date
        """
        return self._work_start

    @work_start.setter
    def work_start(self, work_start):
        """Sets the work_start of this EmploymentContractRevision.


        :param work_start: The work_start of this EmploymentContractRevision.  # noqa: E501
        :type: date
        """

        self._work_start = work_start

    @property
    def cod_cor(self):
        """Gets the cod_cor of this EmploymentContractRevision.  # noqa: E501


        :return: The cod_cor of this EmploymentContractRevision.  # noqa: E501
        :rtype: str
        """
        return self._cod_cor

    @cod_cor.setter
    def cod_cor(self, cod_cor):
        """Sets the cod_cor of this EmploymentContractRevision.


        :param cod_cor: The cod_cor of this EmploymentContractRevision.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cod_cor is not None and len(cod_cor) > 6):
            raise ValueError("Invalid value for `cod_cor`, length must be less than or equal to `6`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cod_cor is not None and len(cod_cor) < 1):
            raise ValueError("Invalid value for `cod_cor`, length must be greater than or equal to `1`")  # noqa: E501

        self._cod_cor = cod_cor

    @property
    def work_end(self):
        """Gets the work_end of this EmploymentContractRevision.  # noqa: E501


        :return: The work_end of this EmploymentContractRevision.  # noqa: E501
        :rtype: date
        """
        return self._work_end

    @work_end.setter
    def work_end(self, work_end):
        """Sets the work_end of this EmploymentContractRevision.


        :param work_end: The work_end of this EmploymentContractRevision.  # noqa: E501
        :type: date
        """

        self._work_end = work_end

    @property
    def end_date_exception(self):
        """Gets the end_date_exception of this EmploymentContractRevision.  # noqa: E501


        :return: The end_date_exception of this EmploymentContractRevision.  # noqa: E501
        :rtype: int
        """
        return self._end_date_exception

    @end_date_exception.setter
    def end_date_exception(self, end_date_exception):
        """Sets the end_date_exception of this EmploymentContractRevision.


        :param end_date_exception: The end_date_exception of this EmploymentContractRevision.  # noqa: E501
        :type: int
        """

        self._end_date_exception = end_date_exception

    @property
    def contract_type(self):
        """Gets the contract_type of this EmploymentContractRevision.  # noqa: E501


        :return: The contract_type of this EmploymentContractRevision.  # noqa: E501
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this EmploymentContractRevision.


        :param contract_type: The contract_type of this EmploymentContractRevision.  # noqa: E501
        :type: str
        """
        allowed_values = ["individual", "ucenicie", "domiciliu", "temporar", "dezavantajati", "telemunca", "telemunca_temporar"]  # noqa: E501
        if (self._configuration.client_side_validation and
                contract_type not in allowed_values):
            raise ValueError(
                "Invalid value for `contract_type` ({0}), must be one of {1}"  # noqa: E501
                .format(contract_type, allowed_values)
            )

        self._contract_type = contract_type

    @property
    def full_time(self):
        """Gets the full_time of this EmploymentContractRevision.  # noqa: E501


        :return: The full_time of this EmploymentContractRevision.  # noqa: E501
        :rtype: bool
        """
        return self._full_time

    @full_time.setter
    def full_time(self, full_time):
        """Sets the full_time of this EmploymentContractRevision.


        :param full_time: The full_time of this EmploymentContractRevision.  # noqa: E501
        :type: bool
        """

        self._full_time = full_time

    @property
    def contract_time(self):
        """Gets the contract_time of this EmploymentContractRevision.  # noqa: E501


        :return: The contract_time of this EmploymentContractRevision.  # noqa: E501
        :rtype: int
        """
        return self._contract_time

    @contract_time.setter
    def contract_time(self, contract_time):
        """Sets the contract_time of this EmploymentContractRevision.


        :param contract_time: The contract_time of this EmploymentContractRevision.  # noqa: E501
        :type: int
        """

        self._contract_time = contract_time

    @property
    def shift_type(self):
        """Gets the shift_type of this EmploymentContractRevision.  # noqa: E501


        :return: The shift_type of this EmploymentContractRevision.  # noqa: E501
        :rtype: int
        """
        return self._shift_type

    @shift_type.setter
    def shift_type(self, shift_type):
        """Sets the shift_type of this EmploymentContractRevision.


        :param shift_type: The shift_type of this EmploymentContractRevision.  # noqa: E501
        :type: int
        """

        self._shift_type = shift_type

    @property
    def hour_split(self):
        """Gets the hour_split of this EmploymentContractRevision.  # noqa: E501


        :return: The hour_split of this EmploymentContractRevision.  # noqa: E501
        :rtype: int
        """
        return self._hour_split

    @hour_split.setter
    def hour_split(self, hour_split):
        """Sets the hour_split of this EmploymentContractRevision.


        :param hour_split: The hour_split of this EmploymentContractRevision.  # noqa: E501
        :type: int
        """

        self._hour_split = hour_split

    @property
    def working_hours(self):
        """Gets the working_hours of this EmploymentContractRevision.  # noqa: E501


        :return: The working_hours of this EmploymentContractRevision.  # noqa: E501
        :rtype: int
        """
        return self._working_hours

    @working_hours.setter
    def working_hours(self, working_hours):
        """Sets the working_hours of this EmploymentContractRevision.


        :param working_hours: The working_hours of this EmploymentContractRevision.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                working_hours is not None and working_hours > 32767):  # noqa: E501
            raise ValueError("Invalid value for `working_hours`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                working_hours is not None and working_hours < 0):  # noqa: E501
            raise ValueError("Invalid value for `working_hours`, must be a value greater than or equal to `0`")  # noqa: E501

        self._working_hours = working_hours

    @property
    def extra(self):
        """Gets the extra of this EmploymentContractRevision.  # noqa: E501


        :return: The extra of this EmploymentContractRevision.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this EmploymentContractRevision.


        :param extra: The extra of this EmploymentContractRevision.  # noqa: E501
        :type: object
        """

        self._extra = extra

    @property
    def from_date(self):
        """Gets the from_date of this EmploymentContractRevision.  # noqa: E501


        :return: The from_date of this EmploymentContractRevision.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this EmploymentContractRevision.


        :param from_date: The from_date of this EmploymentContractRevision.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and from_date is None:
            raise ValueError("Invalid value for `from_date`, must not be `None`")  # noqa: E501

        self._from_date = from_date

    @property
    def salary(self):
        """Gets the salary of this EmploymentContractRevision.  # noqa: E501


        :return: The salary of this EmploymentContractRevision.  # noqa: E501
        :rtype: str
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """Sets the salary of this EmploymentContractRevision.


        :param salary: The salary of this EmploymentContractRevision.  # noqa: E501
        :type: str
        """

        self._salary = salary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmploymentContractRevision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmploymentContractRevision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmploymentContractRevision):
            return True

        return self.to_dict() != other.to_dict()
