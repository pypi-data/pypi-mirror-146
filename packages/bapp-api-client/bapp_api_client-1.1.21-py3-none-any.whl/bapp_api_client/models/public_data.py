# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class PublicData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'dob': 'date',
        'dod': 'date',
        'age': 'str',
        'description': 'str',
        'short_description': 'str',
        'public_url': 'str',
        'photos': 'list[PublicDataPhoto]',
        'identifier': 'str',
        'cemetery': 'Cemetery'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'dob': 'dob',
        'dod': 'dod',
        'age': 'age',
        'description': 'description',
        'short_description': 'short_description',
        'public_url': 'public_url',
        'photos': 'photos',
        'identifier': 'identifier',
        'cemetery': 'cemetery'
    }

    def __init__(self, id=None, name=None, dob=None, dod=None, age=None, description=None, short_description=None, public_url=None, photos=None, identifier=None, cemetery=None, _configuration=None):  # noqa: E501
        """PublicData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._dob = None
        self._dod = None
        self._age = None
        self._description = None
        self._short_description = None
        self._public_url = None
        self._photos = None
        self._identifier = None
        self._cemetery = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if dob is not None:
            self.dob = dob
        if dod is not None:
            self.dod = dod
        if age is not None:
            self.age = age
        if description is not None:
            self.description = description
        self.short_description = short_description
        if public_url is not None:
            self.public_url = public_url
        if photos is not None:
            self.photos = photos
        if identifier is not None:
            self.identifier = identifier
        if cemetery is not None:
            self.cemetery = cemetery

    @property
    def id(self):
        """Gets the id of this PublicData.  # noqa: E501


        :return: The id of this PublicData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicData.


        :param id: The id of this PublicData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PublicData.  # noqa: E501


        :return: The name of this PublicData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicData.


        :param name: The name of this PublicData.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def dob(self):
        """Gets the dob of this PublicData.  # noqa: E501


        :return: The dob of this PublicData.  # noqa: E501
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this PublicData.


        :param dob: The dob of this PublicData.  # noqa: E501
        :type: date
        """

        self._dob = dob

    @property
    def dod(self):
        """Gets the dod of this PublicData.  # noqa: E501


        :return: The dod of this PublicData.  # noqa: E501
        :rtype: date
        """
        return self._dod

    @dod.setter
    def dod(self, dod):
        """Sets the dod of this PublicData.


        :param dod: The dod of this PublicData.  # noqa: E501
        :type: date
        """

        self._dod = dod

    @property
    def age(self):
        """Gets the age of this PublicData.  # noqa: E501


        :return: The age of this PublicData.  # noqa: E501
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this PublicData.


        :param age: The age of this PublicData.  # noqa: E501
        :type: str
        """

        self._age = age

    @property
    def description(self):
        """Gets the description of this PublicData.  # noqa: E501


        :return: The description of this PublicData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PublicData.


        :param description: The description of this PublicData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def short_description(self):
        """Gets the short_description of this PublicData.  # noqa: E501


        :return: The short_description of this PublicData.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this PublicData.


        :param short_description: The short_description of this PublicData.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                short_description is not None and len(short_description) > 250):
            raise ValueError("Invalid value for `short_description`, length must be less than or equal to `250`")  # noqa: E501
        if (self._configuration.client_side_validation and
                short_description is not None and len(short_description) < 1):
            raise ValueError("Invalid value for `short_description`, length must be greater than or equal to `1`")  # noqa: E501

        self._short_description = short_description

    @property
    def public_url(self):
        """Gets the public_url of this PublicData.  # noqa: E501


        :return: The public_url of this PublicData.  # noqa: E501
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """Sets the public_url of this PublicData.


        :param public_url: The public_url of this PublicData.  # noqa: E501
        :type: str
        """

        self._public_url = public_url

    @property
    def photos(self):
        """Gets the photos of this PublicData.  # noqa: E501


        :return: The photos of this PublicData.  # noqa: E501
        :rtype: list[PublicDataPhoto]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this PublicData.


        :param photos: The photos of this PublicData.  # noqa: E501
        :type: list[PublicDataPhoto]
        """

        self._photos = photos

    @property
    def identifier(self):
        """Gets the identifier of this PublicData.  # noqa: E501


        :return: The identifier of this PublicData.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PublicData.


        :param identifier: The identifier of this PublicData.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def cemetery(self):
        """Gets the cemetery of this PublicData.  # noqa: E501


        :return: The cemetery of this PublicData.  # noqa: E501
        :rtype: Cemetery
        """
        return self._cemetery

    @cemetery.setter
    def cemetery(self, cemetery):
        """Sets the cemetery of this PublicData.


        :param cemetery: The cemetery of this PublicData.  # noqa: E501
        :type: Cemetery
        """

        self._cemetery = cemetery

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicData):
            return True

        return self.to_dict() != other.to_dict()
