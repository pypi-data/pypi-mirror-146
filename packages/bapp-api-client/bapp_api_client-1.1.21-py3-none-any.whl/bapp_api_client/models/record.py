# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class Record(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'items': 'list[RecordItem]',
        'files': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'pdf_file': 'str',
        'status': 'int',
        'type': 'int',
        'wheel_type': 'int',
        'comisionar': 'str',
        'vama_intrare': 'str',
        'document_type': 'int',
        'document_number': 'str',
        'document_date': 'date',
        'container_series': 'str',
        'auto_number': 'str',
        'transfer_from': 'str',
        'observations': 'str',
        'formatted_number': 'str',
        'total_taxes': 'str',
        'initial_sold': 'str',
        'total_quantity': 'int',
        'total_weight': 'str',
        'nir_gestionar': 'str',
        'nir_lucrator_vamal': 'str',
        'nir_numar_sigiliu': 'str',
        'stocat_din': 'date',
        'created_by': 'str',
        'modified_by': 'str',
        'partner': 'int',
        'user': 'str'
    }

    attribute_map = {
        'id': 'id',
        'items': 'items',
        'files': 'files',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'pdf_file': 'pdf_file',
        'status': 'status',
        'type': 'type',
        'wheel_type': 'wheel_type',
        'comisionar': 'comisionar',
        'vama_intrare': 'vama_intrare',
        'document_type': 'document_type',
        'document_number': 'document_number',
        'document_date': 'document_date',
        'container_series': 'container_series',
        'auto_number': 'auto_number',
        'transfer_from': 'transfer_from',
        'observations': 'observations',
        'formatted_number': 'formatted_number',
        'total_taxes': 'total_taxes',
        'initial_sold': 'initial_sold',
        'total_quantity': 'total_quantity',
        'total_weight': 'total_weight',
        'nir_gestionar': 'nir_gestionar',
        'nir_lucrator_vamal': 'nir_lucrator_vamal',
        'nir_numar_sigiliu': 'nir_numar_sigiliu',
        'stocat_din': 'stocat_din',
        'created_by': 'created_by',
        'modified_by': 'modified_by',
        'partner': 'partner',
        'user': 'user'
    }

    def __init__(self, id=None, items=None, files=None, created_at=None, modified_at=None, pdf_file=None, status=None, type=None, wheel_type=None, comisionar=None, vama_intrare=None, document_type=None, document_number=None, document_date=None, container_series=None, auto_number=None, transfer_from=None, observations=None, formatted_number=None, total_taxes=None, initial_sold=None, total_quantity=None, total_weight=None, nir_gestionar=None, nir_lucrator_vamal=None, nir_numar_sigiliu=None, stocat_din=None, created_by=None, modified_by=None, partner=None, user=None, _configuration=None):  # noqa: E501
        """Record - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._items = None
        self._files = None
        self._created_at = None
        self._modified_at = None
        self._pdf_file = None
        self._status = None
        self._type = None
        self._wheel_type = None
        self._comisionar = None
        self._vama_intrare = None
        self._document_type = None
        self._document_number = None
        self._document_date = None
        self._container_series = None
        self._auto_number = None
        self._transfer_from = None
        self._observations = None
        self._formatted_number = None
        self._total_taxes = None
        self._initial_sold = None
        self._total_quantity = None
        self._total_weight = None
        self._nir_gestionar = None
        self._nir_lucrator_vamal = None
        self._nir_numar_sigiliu = None
        self._stocat_din = None
        self._created_by = None
        self._modified_by = None
        self._partner = None
        self._user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if items is not None:
            self.items = items
        if files is not None:
            self.files = files
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if pdf_file is not None:
            self.pdf_file = pdf_file
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if wheel_type is not None:
            self.wheel_type = wheel_type
        self.comisionar = comisionar
        self.vama_intrare = vama_intrare
        if document_type is not None:
            self.document_type = document_type
        self.document_number = document_number
        self.document_date = document_date
        self.container_series = container_series
        self.auto_number = auto_number
        if transfer_from is not None:
            self.transfer_from = transfer_from
        if observations is not None:
            self.observations = observations
        if formatted_number is not None:
            self.formatted_number = formatted_number
        if total_taxes is not None:
            self.total_taxes = total_taxes
        if initial_sold is not None:
            self.initial_sold = initial_sold
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if total_weight is not None:
            self.total_weight = total_weight
        if nir_gestionar is not None:
            self.nir_gestionar = nir_gestionar
        if nir_lucrator_vamal is not None:
            self.nir_lucrator_vamal = nir_lucrator_vamal
        if nir_numar_sigiliu is not None:
            self.nir_numar_sigiliu = nir_numar_sigiliu
        if stocat_din is not None:
            self.stocat_din = stocat_din
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if partner is not None:
            self.partner = partner
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this Record.  # noqa: E501


        :return: The id of this Record.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Record.


        :param id: The id of this Record.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this Record.  # noqa: E501


        :return: The items of this Record.  # noqa: E501
        :rtype: list[RecordItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Record.


        :param items: The items of this Record.  # noqa: E501
        :type: list[RecordItem]
        """

        self._items = items

    @property
    def files(self):
        """Gets the files of this Record.  # noqa: E501


        :return: The files of this Record.  # noqa: E501
        :rtype: str
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Record.


        :param files: The files of this Record.  # noqa: E501
        :type: str
        """

        self._files = files

    @property
    def created_at(self):
        """Gets the created_at of this Record.  # noqa: E501

        Date and time at which this record was added  # noqa: E501

        :return: The created_at of this Record.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Record.

        Date and time at which this record was added  # noqa: E501

        :param created_at: The created_at of this Record.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Record.  # noqa: E501

        Date and time at which this record was modified  # noqa: E501

        :return: The modified_at of this Record.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Record.

        Date and time at which this record was modified  # noqa: E501

        :param modified_at: The modified_at of this Record.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def pdf_file(self):
        """Gets the pdf_file of this Record.  # noqa: E501


        :return: The pdf_file of this Record.  # noqa: E501
        :rtype: str
        """
        return self._pdf_file

    @pdf_file.setter
    def pdf_file(self, pdf_file):
        """Sets the pdf_file of this Record.


        :param pdf_file: The pdf_file of this Record.  # noqa: E501
        :type: str
        """

        self._pdf_file = pdf_file

    @property
    def status(self):
        """Gets the status of this Record.  # noqa: E501


        :return: The status of this Record.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Record.


        :param status: The status of this Record.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Record.  # noqa: E501


        :return: The type of this Record.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Record.


        :param type: The type of this Record.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def wheel_type(self):
        """Gets the wheel_type of this Record.  # noqa: E501


        :return: The wheel_type of this Record.  # noqa: E501
        :rtype: int
        """
        return self._wheel_type

    @wheel_type.setter
    def wheel_type(self, wheel_type):
        """Sets the wheel_type of this Record.


        :param wheel_type: The wheel_type of this Record.  # noqa: E501
        :type: int
        """

        self._wheel_type = wheel_type

    @property
    def comisionar(self):
        """Gets the comisionar of this Record.  # noqa: E501


        :return: The comisionar of this Record.  # noqa: E501
        :rtype: str
        """
        return self._comisionar

    @comisionar.setter
    def comisionar(self, comisionar):
        """Sets the comisionar of this Record.


        :param comisionar: The comisionar of this Record.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and comisionar is None:
            raise ValueError("Invalid value for `comisionar`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                comisionar is not None and len(comisionar) > 200):
            raise ValueError("Invalid value for `comisionar`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                comisionar is not None and len(comisionar) < 1):
            raise ValueError("Invalid value for `comisionar`, length must be greater than or equal to `1`")  # noqa: E501

        self._comisionar = comisionar

    @property
    def vama_intrare(self):
        """Gets the vama_intrare of this Record.  # noqa: E501


        :return: The vama_intrare of this Record.  # noqa: E501
        :rtype: str
        """
        return self._vama_intrare

    @vama_intrare.setter
    def vama_intrare(self, vama_intrare):
        """Sets the vama_intrare of this Record.


        :param vama_intrare: The vama_intrare of this Record.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and vama_intrare is None:
            raise ValueError("Invalid value for `vama_intrare`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vama_intrare is not None and len(vama_intrare) > 200):
            raise ValueError("Invalid value for `vama_intrare`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vama_intrare is not None and len(vama_intrare) < 1):
            raise ValueError("Invalid value for `vama_intrare`, length must be greater than or equal to `1`")  # noqa: E501

        self._vama_intrare = vama_intrare

    @property
    def document_type(self):
        """Gets the document_type of this Record.  # noqa: E501


        :return: The document_type of this Record.  # noqa: E501
        :rtype: int
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Record.


        :param document_type: The document_type of this Record.  # noqa: E501
        :type: int
        """

        self._document_type = document_type

    @property
    def document_number(self):
        """Gets the document_number of this Record.  # noqa: E501


        :return: The document_number of this Record.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this Record.


        :param document_number: The document_number of this Record.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) > 100):
            raise ValueError("Invalid value for `document_number`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                document_number is not None and len(document_number) < 1):
            raise ValueError("Invalid value for `document_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._document_number = document_number

    @property
    def document_date(self):
        """Gets the document_date of this Record.  # noqa: E501


        :return: The document_date of this Record.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this Record.


        :param document_date: The document_date of this Record.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and document_date is None:
            raise ValueError("Invalid value for `document_date`, must not be `None`")  # noqa: E501

        self._document_date = document_date

    @property
    def container_series(self):
        """Gets the container_series of this Record.  # noqa: E501


        :return: The container_series of this Record.  # noqa: E501
        :rtype: str
        """
        return self._container_series

    @container_series.setter
    def container_series(self, container_series):
        """Sets the container_series of this Record.


        :param container_series: The container_series of this Record.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and container_series is None:
            raise ValueError("Invalid value for `container_series`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                container_series is not None and len(container_series) > 200):
            raise ValueError("Invalid value for `container_series`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                container_series is not None and len(container_series) < 1):
            raise ValueError("Invalid value for `container_series`, length must be greater than or equal to `1`")  # noqa: E501

        self._container_series = container_series

    @property
    def auto_number(self):
        """Gets the auto_number of this Record.  # noqa: E501


        :return: The auto_number of this Record.  # noqa: E501
        :rtype: str
        """
        return self._auto_number

    @auto_number.setter
    def auto_number(self, auto_number):
        """Sets the auto_number of this Record.


        :param auto_number: The auto_number of this Record.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and auto_number is None:
            raise ValueError("Invalid value for `auto_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                auto_number is not None and len(auto_number) > 200):
            raise ValueError("Invalid value for `auto_number`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                auto_number is not None and len(auto_number) < 1):
            raise ValueError("Invalid value for `auto_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._auto_number = auto_number

    @property
    def transfer_from(self):
        """Gets the transfer_from of this Record.  # noqa: E501


        :return: The transfer_from of this Record.  # noqa: E501
        :rtype: str
        """
        return self._transfer_from

    @transfer_from.setter
    def transfer_from(self, transfer_from):
        """Sets the transfer_from of this Record.


        :param transfer_from: The transfer_from of this Record.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                transfer_from is not None and len(transfer_from) > 200):
            raise ValueError("Invalid value for `transfer_from`, length must be less than or equal to `200`")  # noqa: E501

        self._transfer_from = transfer_from

    @property
    def observations(self):
        """Gets the observations of this Record.  # noqa: E501


        :return: The observations of this Record.  # noqa: E501
        :rtype: str
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this Record.


        :param observations: The observations of this Record.  # noqa: E501
        :type: str
        """

        self._observations = observations

    @property
    def formatted_number(self):
        """Gets the formatted_number of this Record.  # noqa: E501


        :return: The formatted_number of this Record.  # noqa: E501
        :rtype: str
        """
        return self._formatted_number

    @formatted_number.setter
    def formatted_number(self, formatted_number):
        """Sets the formatted_number of this Record.


        :param formatted_number: The formatted_number of this Record.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                formatted_number is not None and len(formatted_number) < 1):
            raise ValueError("Invalid value for `formatted_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._formatted_number = formatted_number

    @property
    def total_taxes(self):
        """Gets the total_taxes of this Record.  # noqa: E501


        :return: The total_taxes of this Record.  # noqa: E501
        :rtype: str
        """
        return self._total_taxes

    @total_taxes.setter
    def total_taxes(self, total_taxes):
        """Sets the total_taxes of this Record.


        :param total_taxes: The total_taxes of this Record.  # noqa: E501
        :type: str
        """

        self._total_taxes = total_taxes

    @property
    def initial_sold(self):
        """Gets the initial_sold of this Record.  # noqa: E501


        :return: The initial_sold of this Record.  # noqa: E501
        :rtype: str
        """
        return self._initial_sold

    @initial_sold.setter
    def initial_sold(self, initial_sold):
        """Sets the initial_sold of this Record.


        :param initial_sold: The initial_sold of this Record.  # noqa: E501
        :type: str
        """

        self._initial_sold = initial_sold

    @property
    def total_quantity(self):
        """Gets the total_quantity of this Record.  # noqa: E501


        :return: The total_quantity of this Record.  # noqa: E501
        :rtype: int
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this Record.


        :param total_quantity: The total_quantity of this Record.  # noqa: E501
        :type: int
        """

        self._total_quantity = total_quantity

    @property
    def total_weight(self):
        """Gets the total_weight of this Record.  # noqa: E501


        :return: The total_weight of this Record.  # noqa: E501
        :rtype: str
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this Record.


        :param total_weight: The total_weight of this Record.  # noqa: E501
        :type: str
        """

        self._total_weight = total_weight

    @property
    def nir_gestionar(self):
        """Gets the nir_gestionar of this Record.  # noqa: E501


        :return: The nir_gestionar of this Record.  # noqa: E501
        :rtype: str
        """
        return self._nir_gestionar

    @nir_gestionar.setter
    def nir_gestionar(self, nir_gestionar):
        """Sets the nir_gestionar of this Record.


        :param nir_gestionar: The nir_gestionar of this Record.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nir_gestionar is not None and len(nir_gestionar) > 200):
            raise ValueError("Invalid value for `nir_gestionar`, length must be less than or equal to `200`")  # noqa: E501

        self._nir_gestionar = nir_gestionar

    @property
    def nir_lucrator_vamal(self):
        """Gets the nir_lucrator_vamal of this Record.  # noqa: E501


        :return: The nir_lucrator_vamal of this Record.  # noqa: E501
        :rtype: str
        """
        return self._nir_lucrator_vamal

    @nir_lucrator_vamal.setter
    def nir_lucrator_vamal(self, nir_lucrator_vamal):
        """Sets the nir_lucrator_vamal of this Record.


        :param nir_lucrator_vamal: The nir_lucrator_vamal of this Record.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nir_lucrator_vamal is not None and len(nir_lucrator_vamal) > 200):
            raise ValueError("Invalid value for `nir_lucrator_vamal`, length must be less than or equal to `200`")  # noqa: E501

        self._nir_lucrator_vamal = nir_lucrator_vamal

    @property
    def nir_numar_sigiliu(self):
        """Gets the nir_numar_sigiliu of this Record.  # noqa: E501


        :return: The nir_numar_sigiliu of this Record.  # noqa: E501
        :rtype: str
        """
        return self._nir_numar_sigiliu

    @nir_numar_sigiliu.setter
    def nir_numar_sigiliu(self, nir_numar_sigiliu):
        """Sets the nir_numar_sigiliu of this Record.


        :param nir_numar_sigiliu: The nir_numar_sigiliu of this Record.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nir_numar_sigiliu is not None and len(nir_numar_sigiliu) > 200):
            raise ValueError("Invalid value for `nir_numar_sigiliu`, length must be less than or equal to `200`")  # noqa: E501

        self._nir_numar_sigiliu = nir_numar_sigiliu

    @property
    def stocat_din(self):
        """Gets the stocat_din of this Record.  # noqa: E501


        :return: The stocat_din of this Record.  # noqa: E501
        :rtype: date
        """
        return self._stocat_din

    @stocat_din.setter
    def stocat_din(self, stocat_din):
        """Sets the stocat_din of this Record.


        :param stocat_din: The stocat_din of this Record.  # noqa: E501
        :type: date
        """

        self._stocat_din = stocat_din

    @property
    def created_by(self):
        """Gets the created_by of this Record.  # noqa: E501

        User id that created this record  # noqa: E501

        :return: The created_by of this Record.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Record.

        User id that created this record  # noqa: E501

        :param created_by: The created_by of this Record.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this Record.  # noqa: E501

        Last user id that modified this record  # noqa: E501

        :return: The modified_by of this Record.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Record.

        Last user id that modified this record  # noqa: E501

        :param modified_by: The modified_by of this Record.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def partner(self):
        """Gets the partner of this Record.  # noqa: E501


        :return: The partner of this Record.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this Record.


        :param partner: The partner of this Record.  # noqa: E501
        :type: int
        """

        self._partner = partner

    @property
    def user(self):
        """Gets the user of this Record.  # noqa: E501


        :return: The user of this Record.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Record.


        :param user: The user of this Record.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Record, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Record):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Record):
            return True

        return self.to_dict() != other.to_dict()
