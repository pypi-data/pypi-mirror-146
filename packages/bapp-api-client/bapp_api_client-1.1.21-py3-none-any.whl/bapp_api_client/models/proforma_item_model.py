# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ProformaItemModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'product': 'int',
        'unit': 'str',
        'name': 'str',
        'description': 'str',
        'quantity': 'str',
        'tax': 'str',
        'price': 'str',
        'discount': 'str',
        'is_discount': 'bool',
        'subtotal': 'str',
        'tax_value': 'str',
        'total': 'str',
        'discounted_value': 'str',
        'discounted_tax_value': 'str',
        'discount_subtotal': 'str',
        'discount_tax_value': 'str',
        'price_currency': 'str',
        'subtotal_currency': 'str',
        'tax_value_currency': 'str',
        'total_currency': 'str',
        'discounted_value_currency': 'str',
        'discounted_tax_value_currency': 'str',
        'discount_subtotal_currency': 'str',
        'discount_tax_value_currency': 'str',
        'undiscounted_price': 'str',
        'undiscounted_price_currency': 'str',
        'product_discountable': 'str',
        'code': 'str',
        'code_ean': 'str',
        'price_has_tax': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'unit': 'unit',
        'name': 'name',
        'description': 'description',
        'quantity': 'quantity',
        'tax': 'tax',
        'price': 'price',
        'discount': 'discount',
        'is_discount': 'is_discount',
        'subtotal': 'subtotal',
        'tax_value': 'tax_value',
        'total': 'total',
        'discounted_value': 'discounted_value',
        'discounted_tax_value': 'discounted_tax_value',
        'discount_subtotal': 'discount_subtotal',
        'discount_tax_value': 'discount_tax_value',
        'price_currency': 'price_currency',
        'subtotal_currency': 'subtotal_currency',
        'tax_value_currency': 'tax_value_currency',
        'total_currency': 'total_currency',
        'discounted_value_currency': 'discounted_value_currency',
        'discounted_tax_value_currency': 'discounted_tax_value_currency',
        'discount_subtotal_currency': 'discount_subtotal_currency',
        'discount_tax_value_currency': 'discount_tax_value_currency',
        'undiscounted_price': 'undiscounted_price',
        'undiscounted_price_currency': 'undiscounted_price_currency',
        'product_discountable': 'product_discountable',
        'code': 'code',
        'code_ean': 'code_ean',
        'price_has_tax': 'price_has_tax'
    }

    def __init__(self, id=None, product=None, unit=None, name=None, description=None, quantity=None, tax=None, price=None, discount=None, is_discount=None, subtotal=None, tax_value=None, total=None, discounted_value=None, discounted_tax_value=None, discount_subtotal=None, discount_tax_value=None, price_currency=None, subtotal_currency=None, tax_value_currency=None, total_currency=None, discounted_value_currency=None, discounted_tax_value_currency=None, discount_subtotal_currency=None, discount_tax_value_currency=None, undiscounted_price=None, undiscounted_price_currency=None, product_discountable=None, code=None, code_ean=None, price_has_tax=False, _configuration=None):  # noqa: E501
        """ProformaItemModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._product = None
        self._unit = None
        self._name = None
        self._description = None
        self._quantity = None
        self._tax = None
        self._price = None
        self._discount = None
        self._is_discount = None
        self._subtotal = None
        self._tax_value = None
        self._total = None
        self._discounted_value = None
        self._discounted_tax_value = None
        self._discount_subtotal = None
        self._discount_tax_value = None
        self._price_currency = None
        self._subtotal_currency = None
        self._tax_value_currency = None
        self._total_currency = None
        self._discounted_value_currency = None
        self._discounted_tax_value_currency = None
        self._discount_subtotal_currency = None
        self._discount_tax_value_currency = None
        self._undiscounted_price = None
        self._undiscounted_price_currency = None
        self._product_discountable = None
        self._code = None
        self._code_ean = None
        self._price_has_tax = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.product = product
        if unit is not None:
            self.unit = unit
        self.name = name
        if description is not None:
            self.description = description
        self.quantity = quantity
        if tax is not None:
            self.tax = tax
        if price is not None:
            self.price = price
        self.discount = discount
        if is_discount is not None:
            self.is_discount = is_discount
        if subtotal is not None:
            self.subtotal = subtotal
        if tax_value is not None:
            self.tax_value = tax_value
        if total is not None:
            self.total = total
        if discounted_value is not None:
            self.discounted_value = discounted_value
        if discounted_tax_value is not None:
            self.discounted_tax_value = discounted_tax_value
        if discount_subtotal is not None:
            self.discount_subtotal = discount_subtotal
        if discount_tax_value is not None:
            self.discount_tax_value = discount_tax_value
        self.price_currency = price_currency
        if subtotal_currency is not None:
            self.subtotal_currency = subtotal_currency
        if tax_value_currency is not None:
            self.tax_value_currency = tax_value_currency
        if total_currency is not None:
            self.total_currency = total_currency
        if discounted_value_currency is not None:
            self.discounted_value_currency = discounted_value_currency
        if discounted_tax_value_currency is not None:
            self.discounted_tax_value_currency = discounted_tax_value_currency
        if discount_subtotal_currency is not None:
            self.discount_subtotal_currency = discount_subtotal_currency
        if discount_tax_value_currency is not None:
            self.discount_tax_value_currency = discount_tax_value_currency
        if undiscounted_price is not None:
            self.undiscounted_price = undiscounted_price
        if undiscounted_price_currency is not None:
            self.undiscounted_price_currency = undiscounted_price_currency
        if product_discountable is not None:
            self.product_discountable = product_discountable
        if code is not None:
            self.code = code
        if code_ean is not None:
            self.code_ean = code_ean
        if price_has_tax is not None:
            self.price_has_tax = price_has_tax

    @property
    def id(self):
        """Gets the id of this ProformaItemModel.  # noqa: E501


        :return: The id of this ProformaItemModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProformaItemModel.


        :param id: The id of this ProformaItemModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this ProformaItemModel.  # noqa: E501


        :return: The product of this ProformaItemModel.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProformaItemModel.


        :param product: The product of this ProformaItemModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def unit(self):
        """Gets the unit of this ProformaItemModel.  # noqa: E501


        :return: The unit of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProformaItemModel.


        :param unit: The unit of this ProformaItemModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                unit is not None and len(unit) > 20):
            raise ValueError("Invalid value for `unit`, length must be less than or equal to `20`")  # noqa: E501
        if (self._configuration.client_side_validation and
                unit is not None and len(unit) < 1):
            raise ValueError("Invalid value for `unit`, length must be greater than or equal to `1`")  # noqa: E501

        self._unit = unit

    @property
    def name(self):
        """Gets the name of this ProformaItemModel.  # noqa: E501


        :return: The name of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProformaItemModel.


        :param name: The name of this ProformaItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProformaItemModel.  # noqa: E501


        :return: The description of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProformaItemModel.


        :param description: The description of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this ProformaItemModel.  # noqa: E501


        :return: The quantity of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProformaItemModel.


        :param quantity: The quantity of this ProformaItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def tax(self):
        """Gets the tax of this ProformaItemModel.  # noqa: E501

        Procentaj TVA, aplicat dacă este plătitor de TVA.  # noqa: E501

        :return: The tax of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this ProformaItemModel.

        Procentaj TVA, aplicat dacă este plătitor de TVA.  # noqa: E501

        :param tax: The tax of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._tax = tax

    @property
    def price(self):
        """Gets the price of this ProformaItemModel.  # noqa: E501

        Preț RON cu reducere/fără reducere  # noqa: E501

        :return: The price of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProformaItemModel.

        Preț RON cu reducere/fără reducere  # noqa: E501

        :param price: The price of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def discount(self):
        """Gets the discount of this ProformaItemModel.  # noqa: E501


        :return: The discount of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ProformaItemModel.


        :param discount: The discount of this ProformaItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def is_discount(self):
        """Gets the is_discount of this ProformaItemModel.  # noqa: E501

        Dacă este aplicat deja un discount  # noqa: E501

        :return: The is_discount of this ProformaItemModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_discount

    @is_discount.setter
    def is_discount(self, is_discount):
        """Sets the is_discount of this ProformaItemModel.

        Dacă este aplicat deja un discount  # noqa: E501

        :param is_discount: The is_discount of this ProformaItemModel.  # noqa: E501
        :type: bool
        """

        self._is_discount = is_discount

    @property
    def subtotal(self):
        """Gets the subtotal of this ProformaItemModel.  # noqa: E501

        Subtotal RON cu reducere/fără reducere  # noqa: E501

        :return: The subtotal of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this ProformaItemModel.

        Subtotal RON cu reducere/fără reducere  # noqa: E501

        :param subtotal: The subtotal of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._subtotal = subtotal

    @property
    def tax_value(self):
        """Gets the tax_value of this ProformaItemModel.  # noqa: E501

        TVA RON cu reducere/fără reducere  # noqa: E501

        :return: The tax_value of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this ProformaItemModel.

        TVA RON cu reducere/fără reducere  # noqa: E501

        :param tax_value: The tax_value of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._tax_value = tax_value

    @property
    def total(self):
        """Gets the total of this ProformaItemModel.  # noqa: E501

        Total RON cu reducere/fără reducere  # noqa: E501

        :return: The total of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ProformaItemModel.

        Total RON cu reducere/fără reducere  # noqa: E501

        :param total: The total of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def discounted_value(self):
        """Gets the discounted_value of this ProformaItemModel.  # noqa: E501

        Reprezintă valoarea reducerii  # noqa: E501

        :return: The discounted_value of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discounted_value

    @discounted_value.setter
    def discounted_value(self, discounted_value):
        """Sets the discounted_value of this ProformaItemModel.

        Reprezintă valoarea reducerii  # noqa: E501

        :param discounted_value: The discounted_value of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discounted_value = discounted_value

    @property
    def discounted_tax_value(self):
        """Gets the discounted_tax_value of this ProformaItemModel.  # noqa: E501

        Reprezintă valoarea reducerii  # noqa: E501

        :return: The discounted_tax_value of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discounted_tax_value

    @discounted_tax_value.setter
    def discounted_tax_value(self, discounted_tax_value):
        """Sets the discounted_tax_value of this ProformaItemModel.

        Reprezintă valoarea reducerii  # noqa: E501

        :param discounted_tax_value: The discounted_tax_value of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discounted_tax_value = discounted_tax_value

    @property
    def discount_subtotal(self):
        """Gets the discount_subtotal of this ProformaItemModel.  # noqa: E501

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :return: The discount_subtotal of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discount_subtotal

    @discount_subtotal.setter
    def discount_subtotal(self, discount_subtotal):
        """Sets the discount_subtotal of this ProformaItemModel.

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :param discount_subtotal: The discount_subtotal of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discount_subtotal = discount_subtotal

    @property
    def discount_tax_value(self):
        """Gets the discount_tax_value of this ProformaItemModel.  # noqa: E501

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :return: The discount_tax_value of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discount_tax_value

    @discount_tax_value.setter
    def discount_tax_value(self, discount_tax_value):
        """Sets the discount_tax_value of this ProformaItemModel.

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :param discount_tax_value: The discount_tax_value of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discount_tax_value = discount_tax_value

    @property
    def price_currency(self):
        """Gets the price_currency of this ProformaItemModel.  # noqa: E501

        Preț valută cu reducere/fără reducere  # noqa: E501

        :return: The price_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this ProformaItemModel.

        Preț valută cu reducere/fără reducere  # noqa: E501

        :param price_currency: The price_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and price_currency is None:
            raise ValueError("Invalid value for `price_currency`, must not be `None`")  # noqa: E501

        self._price_currency = price_currency

    @property
    def subtotal_currency(self):
        """Gets the subtotal_currency of this ProformaItemModel.  # noqa: E501

        Subtotal valută cu reducere/fără reducere  # noqa: E501

        :return: The subtotal_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._subtotal_currency

    @subtotal_currency.setter
    def subtotal_currency(self, subtotal_currency):
        """Sets the subtotal_currency of this ProformaItemModel.

        Subtotal valută cu reducere/fără reducere  # noqa: E501

        :param subtotal_currency: The subtotal_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._subtotal_currency = subtotal_currency

    @property
    def tax_value_currency(self):
        """Gets the tax_value_currency of this ProformaItemModel.  # noqa: E501

        TVA valută cu reducere/fără reducere  # noqa: E501

        :return: The tax_value_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._tax_value_currency

    @tax_value_currency.setter
    def tax_value_currency(self, tax_value_currency):
        """Sets the tax_value_currency of this ProformaItemModel.

        TVA valută cu reducere/fără reducere  # noqa: E501

        :param tax_value_currency: The tax_value_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._tax_value_currency = tax_value_currency

    @property
    def total_currency(self):
        """Gets the total_currency of this ProformaItemModel.  # noqa: E501

        Total valută cu reducere/fără reducere  # noqa: E501

        :return: The total_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._total_currency

    @total_currency.setter
    def total_currency(self, total_currency):
        """Sets the total_currency of this ProformaItemModel.

        Total valută cu reducere/fără reducere  # noqa: E501

        :param total_currency: The total_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._total_currency = total_currency

    @property
    def discounted_value_currency(self):
        """Gets the discounted_value_currency of this ProformaItemModel.  # noqa: E501

        Reprezintă valoarea reducerii în valută  # noqa: E501

        :return: The discounted_value_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discounted_value_currency

    @discounted_value_currency.setter
    def discounted_value_currency(self, discounted_value_currency):
        """Sets the discounted_value_currency of this ProformaItemModel.

        Reprezintă valoarea reducerii în valută  # noqa: E501

        :param discounted_value_currency: The discounted_value_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discounted_value_currency = discounted_value_currency

    @property
    def discounted_tax_value_currency(self):
        """Gets the discounted_tax_value_currency of this ProformaItemModel.  # noqa: E501

        Reprezintă valoarea reducerii în valută  # noqa: E501

        :return: The discounted_tax_value_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discounted_tax_value_currency

    @discounted_tax_value_currency.setter
    def discounted_tax_value_currency(self, discounted_tax_value_currency):
        """Sets the discounted_tax_value_currency of this ProformaItemModel.

        Reprezintă valoarea reducerii în valută  # noqa: E501

        :param discounted_tax_value_currency: The discounted_tax_value_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discounted_tax_value_currency = discounted_tax_value_currency

    @property
    def discount_subtotal_currency(self):
        """Gets the discount_subtotal_currency of this ProformaItemModel.  # noqa: E501

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :return: The discount_subtotal_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discount_subtotal_currency

    @discount_subtotal_currency.setter
    def discount_subtotal_currency(self, discount_subtotal_currency):
        """Sets the discount_subtotal_currency of this ProformaItemModel.

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :param discount_subtotal_currency: The discount_subtotal_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discount_subtotal_currency = discount_subtotal_currency

    @property
    def discount_tax_value_currency(self):
        """Gets the discount_tax_value_currency of this ProformaItemModel.  # noqa: E501

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :return: The discount_tax_value_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._discount_tax_value_currency

    @discount_tax_value_currency.setter
    def discount_tax_value_currency(self, discount_tax_value_currency):
        """Sets the discount_tax_value_currency of this ProformaItemModel.

        Valoarea întreagă, se completează dacă avem discount  # noqa: E501

        :param discount_tax_value_currency: The discount_tax_value_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._discount_tax_value_currency = discount_tax_value_currency

    @property
    def undiscounted_price(self):
        """Gets the undiscounted_price of this ProformaItemModel.  # noqa: E501

        Valoarea întreagă, se completează dacă avem reducere  # noqa: E501

        :return: The undiscounted_price of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._undiscounted_price

    @undiscounted_price.setter
    def undiscounted_price(self, undiscounted_price):
        """Sets the undiscounted_price of this ProformaItemModel.

        Valoarea întreagă, se completează dacă avem reducere  # noqa: E501

        :param undiscounted_price: The undiscounted_price of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._undiscounted_price = undiscounted_price

    @property
    def undiscounted_price_currency(self):
        """Gets the undiscounted_price_currency of this ProformaItemModel.  # noqa: E501

        Valoarea întreagă, se completează dacă avem reducere  # noqa: E501

        :return: The undiscounted_price_currency of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._undiscounted_price_currency

    @undiscounted_price_currency.setter
    def undiscounted_price_currency(self, undiscounted_price_currency):
        """Sets the undiscounted_price_currency of this ProformaItemModel.

        Valoarea întreagă, se completează dacă avem reducere  # noqa: E501

        :param undiscounted_price_currency: The undiscounted_price_currency of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._undiscounted_price_currency = undiscounted_price_currency

    @property
    def product_discountable(self):
        """Gets the product_discountable of this ProformaItemModel.  # noqa: E501


        :return: The product_discountable of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._product_discountable

    @product_discountable.setter
    def product_discountable(self, product_discountable):
        """Sets the product_discountable of this ProformaItemModel.


        :param product_discountable: The product_discountable of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._product_discountable = product_discountable

    @property
    def code(self):
        """Gets the code of this ProformaItemModel.  # noqa: E501


        :return: The code of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProformaItemModel.


        :param code: The code of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def code_ean(self):
        """Gets the code_ean of this ProformaItemModel.  # noqa: E501


        :return: The code_ean of this ProformaItemModel.  # noqa: E501
        :rtype: str
        """
        return self._code_ean

    @code_ean.setter
    def code_ean(self, code_ean):
        """Sets the code_ean of this ProformaItemModel.


        :param code_ean: The code_ean of this ProformaItemModel.  # noqa: E501
        :type: str
        """

        self._code_ean = code_ean

    @property
    def price_has_tax(self):
        """Gets the price_has_tax of this ProformaItemModel.  # noqa: E501


        :return: The price_has_tax of this ProformaItemModel.  # noqa: E501
        :rtype: bool
        """
        return self._price_has_tax

    @price_has_tax.setter
    def price_has_tax(self, price_has_tax):
        """Sets the price_has_tax of this ProformaItemModel.


        :param price_has_tax: The price_has_tax of this ProformaItemModel.  # noqa: E501
        :type: bool
        """

        self._price_has_tax = price_has_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProformaItemModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProformaItemModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProformaItemModel):
            return True

        return self.to_dict() != other.to_dict()
