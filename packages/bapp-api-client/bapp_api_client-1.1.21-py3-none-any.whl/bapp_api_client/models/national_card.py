# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class NationalCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cnp': 'str',
        'series': 'str',
        'number': 'str',
        'emitted_by': 'str',
        'emitted_at': 'date',
        'expires_at': 'date',
        'address': 'int'
    }

    attribute_map = {
        'cnp': 'cnp',
        'series': 'series',
        'number': 'number',
        'emitted_by': 'emitted_by',
        'emitted_at': 'emitted_at',
        'expires_at': 'expires_at',
        'address': 'address'
    }

    def __init__(self, cnp=None, series=None, number=None, emitted_by=None, emitted_at=None, expires_at=None, address=None, _configuration=None):  # noqa: E501
        """NationalCard - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cnp = None
        self._series = None
        self._number = None
        self._emitted_by = None
        self._emitted_at = None
        self._expires_at = None
        self._address = None
        self.discriminator = None

        self.cnp = cnp
        if series is not None:
            self.series = series
        if number is not None:
            self.number = number
        if emitted_by is not None:
            self.emitted_by = emitted_by
        if emitted_at is not None:
            self.emitted_at = emitted_at
        self.expires_at = expires_at
        self.address = address

    @property
    def cnp(self):
        """Gets the cnp of this NationalCard.  # noqa: E501


        :return: The cnp of this NationalCard.  # noqa: E501
        :rtype: str
        """
        return self._cnp

    @cnp.setter
    def cnp(self, cnp):
        """Sets the cnp of this NationalCard.


        :param cnp: The cnp of this NationalCard.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cnp is None:
            raise ValueError("Invalid value for `cnp`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cnp is not None and len(cnp) > 13):
            raise ValueError("Invalid value for `cnp`, length must be less than or equal to `13`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cnp is not None and len(cnp) < 1):
            raise ValueError("Invalid value for `cnp`, length must be greater than or equal to `1`")  # noqa: E501

        self._cnp = cnp

    @property
    def series(self):
        """Gets the series of this NationalCard.  # noqa: E501


        :return: The series of this NationalCard.  # noqa: E501
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this NationalCard.


        :param series: The series of this NationalCard.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                series is not None and len(series) > 20):
            raise ValueError("Invalid value for `series`, length must be less than or equal to `20`")  # noqa: E501

        self._series = series

    @property
    def number(self):
        """Gets the number of this NationalCard.  # noqa: E501


        :return: The number of this NationalCard.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this NationalCard.


        :param number: The number of this NationalCard.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                number is not None and len(number) > 20):
            raise ValueError("Invalid value for `number`, length must be less than or equal to `20`")  # noqa: E501

        self._number = number

    @property
    def emitted_by(self):
        """Gets the emitted_by of this NationalCard.  # noqa: E501


        :return: The emitted_by of this NationalCard.  # noqa: E501
        :rtype: str
        """
        return self._emitted_by

    @emitted_by.setter
    def emitted_by(self, emitted_by):
        """Sets the emitted_by of this NationalCard.


        :param emitted_by: The emitted_by of this NationalCard.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                emitted_by is not None and len(emitted_by) > 200):
            raise ValueError("Invalid value for `emitted_by`, length must be less than or equal to `200`")  # noqa: E501

        self._emitted_by = emitted_by

    @property
    def emitted_at(self):
        """Gets the emitted_at of this NationalCard.  # noqa: E501


        :return: The emitted_at of this NationalCard.  # noqa: E501
        :rtype: date
        """
        return self._emitted_at

    @emitted_at.setter
    def emitted_at(self, emitted_at):
        """Sets the emitted_at of this NationalCard.


        :param emitted_at: The emitted_at of this NationalCard.  # noqa: E501
        :type: date
        """

        self._emitted_at = emitted_at

    @property
    def expires_at(self):
        """Gets the expires_at of this NationalCard.  # noqa: E501


        :return: The expires_at of this NationalCard.  # noqa: E501
        :rtype: date
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this NationalCard.


        :param expires_at: The expires_at of this NationalCard.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    @property
    def address(self):
        """Gets the address of this NationalCard.  # noqa: E501


        :return: The address of this NationalCard.  # noqa: E501
        :rtype: int
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NationalCard.


        :param address: The address of this NationalCard.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NationalCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NationalCard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NationalCard):
            return True

        return self.to_dict() != other.to_dict()
