# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class OrderSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'percentage_added_to_delivery': 'int',
        'automatically_generate_and_finalise_fiscal': 'bool',
        'decrease_stock_when_order_is_finalized': 'bool',
        'status_flow': 'list[int]',
        'auto_email_notifications': 'bool',
        'auto_email_payments': 'bool',
        'auto_email_registered': 'bool',
        'auto_email_processing': 'bool',
        'auto_email_delivering': 'bool',
        'auto_email_delivered': 'bool',
        'auto_email_canceled': 'bool',
        'auto_email_feedback': 'int'
    }

    attribute_map = {
        'percentage_added_to_delivery': 'percentage_added_to_delivery',
        'automatically_generate_and_finalise_fiscal': 'automatically_generate_and_finalise_fiscal',
        'decrease_stock_when_order_is_finalized': 'decrease_stock_when_order_is_finalized',
        'status_flow': 'status_flow',
        'auto_email_notifications': 'auto_email_notifications',
        'auto_email_payments': 'auto_email_payments',
        'auto_email_registered': 'auto_email_registered',
        'auto_email_processing': 'auto_email_processing',
        'auto_email_delivering': 'auto_email_delivering',
        'auto_email_delivered': 'auto_email_delivered',
        'auto_email_canceled': 'auto_email_canceled',
        'auto_email_feedback': 'auto_email_feedback'
    }

    def __init__(self, percentage_added_to_delivery=None, automatically_generate_and_finalise_fiscal=False, decrease_stock_when_order_is_finalized=False, status_flow=None, auto_email_notifications=False, auto_email_payments=True, auto_email_registered=True, auto_email_processing=True, auto_email_delivering=True, auto_email_delivered=True, auto_email_canceled=True, auto_email_feedback=None, _configuration=None):  # noqa: E501
        """OrderSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._percentage_added_to_delivery = None
        self._automatically_generate_and_finalise_fiscal = None
        self._decrease_stock_when_order_is_finalized = None
        self._status_flow = None
        self._auto_email_notifications = None
        self._auto_email_payments = None
        self._auto_email_registered = None
        self._auto_email_processing = None
        self._auto_email_delivering = None
        self._auto_email_delivered = None
        self._auto_email_canceled = None
        self._auto_email_feedback = None
        self.discriminator = None

        if percentage_added_to_delivery is not None:
            self.percentage_added_to_delivery = percentage_added_to_delivery
        if automatically_generate_and_finalise_fiscal is not None:
            self.automatically_generate_and_finalise_fiscal = automatically_generate_and_finalise_fiscal
        if decrease_stock_when_order_is_finalized is not None:
            self.decrease_stock_when_order_is_finalized = decrease_stock_when_order_is_finalized
        if status_flow is not None:
            self.status_flow = status_flow
        if auto_email_notifications is not None:
            self.auto_email_notifications = auto_email_notifications
        if auto_email_payments is not None:
            self.auto_email_payments = auto_email_payments
        if auto_email_registered is not None:
            self.auto_email_registered = auto_email_registered
        if auto_email_processing is not None:
            self.auto_email_processing = auto_email_processing
        if auto_email_delivering is not None:
            self.auto_email_delivering = auto_email_delivering
        if auto_email_delivered is not None:
            self.auto_email_delivered = auto_email_delivered
        if auto_email_canceled is not None:
            self.auto_email_canceled = auto_email_canceled
        if auto_email_feedback is not None:
            self.auto_email_feedback = auto_email_feedback

    @property
    def percentage_added_to_delivery(self):
        """Gets the percentage_added_to_delivery of this OrderSettings.  # noqa: E501

        Procentaj adăugat la prețul articolelor dacă se selectează livrare  # noqa: E501

        :return: The percentage_added_to_delivery of this OrderSettings.  # noqa: E501
        :rtype: int
        """
        return self._percentage_added_to_delivery

    @percentage_added_to_delivery.setter
    def percentage_added_to_delivery(self, percentage_added_to_delivery):
        """Sets the percentage_added_to_delivery of this OrderSettings.

        Procentaj adăugat la prețul articolelor dacă se selectează livrare  # noqa: E501

        :param percentage_added_to_delivery: The percentage_added_to_delivery of this OrderSettings.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                percentage_added_to_delivery is not None and percentage_added_to_delivery > 5000):  # noqa: E501
            raise ValueError("Invalid value for `percentage_added_to_delivery`, must be a value less than or equal to `5000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                percentage_added_to_delivery is not None and percentage_added_to_delivery < 0):  # noqa: E501
            raise ValueError("Invalid value for `percentage_added_to_delivery`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percentage_added_to_delivery = percentage_added_to_delivery

    @property
    def automatically_generate_and_finalise_fiscal(self):
        """Gets the automatically_generate_and_finalise_fiscal of this OrderSettings.  # noqa: E501

        Generează și finalizează automat facturi fiscale din comenzile plasate de către parteneri care au conexiune, dacă există produsele în stoc  # noqa: E501

        :return: The automatically_generate_and_finalise_fiscal of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._automatically_generate_and_finalise_fiscal

    @automatically_generate_and_finalise_fiscal.setter
    def automatically_generate_and_finalise_fiscal(self, automatically_generate_and_finalise_fiscal):
        """Sets the automatically_generate_and_finalise_fiscal of this OrderSettings.

        Generează și finalizează automat facturi fiscale din comenzile plasate de către parteneri care au conexiune, dacă există produsele în stoc  # noqa: E501

        :param automatically_generate_and_finalise_fiscal: The automatically_generate_and_finalise_fiscal of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._automatically_generate_and_finalise_fiscal = automatically_generate_and_finalise_fiscal

    @property
    def decrease_stock_when_order_is_finalized(self):
        """Gets the decrease_stock_when_order_is_finalized of this OrderSettings.  # noqa: E501

        Scade din stoc când se finalizează comanda și numai scade când este generată factură din aceasta.  # noqa: E501

        :return: The decrease_stock_when_order_is_finalized of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._decrease_stock_when_order_is_finalized

    @decrease_stock_when_order_is_finalized.setter
    def decrease_stock_when_order_is_finalized(self, decrease_stock_when_order_is_finalized):
        """Sets the decrease_stock_when_order_is_finalized of this OrderSettings.

        Scade din stoc când se finalizează comanda și numai scade când este generată factură din aceasta.  # noqa: E501

        :param decrease_stock_when_order_is_finalized: The decrease_stock_when_order_is_finalized of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._decrease_stock_when_order_is_finalized = decrease_stock_when_order_is_finalized

    @property
    def status_flow(self):
        """Gets the status_flow of this OrderSettings.  # noqa: E501

        Ordinea procesării comenzii  # noqa: E501

        :return: The status_flow of this OrderSettings.  # noqa: E501
        :rtype: list[int]
        """
        return self._status_flow

    @status_flow.setter
    def status_flow(self, status_flow):
        """Sets the status_flow of this OrderSettings.

        Ordinea procesării comenzii  # noqa: E501

        :param status_flow: The status_flow of this OrderSettings.  # noqa: E501
        :type: list[int]
        """

        self._status_flow = status_flow

    @property
    def auto_email_notifications(self):
        """Gets the auto_email_notifications of this OrderSettings.  # noqa: E501

        Notificări pe email.  # noqa: E501

        :return: The auto_email_notifications of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_notifications

    @auto_email_notifications.setter
    def auto_email_notifications(self, auto_email_notifications):
        """Sets the auto_email_notifications of this OrderSettings.

        Notificări pe email.  # noqa: E501

        :param auto_email_notifications: The auto_email_notifications of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_notifications = auto_email_notifications

    @property
    def auto_email_payments(self):
        """Gets the auto_email_payments of this OrderSettings.  # noqa: E501

        Notificări despre statusul plăti.  # noqa: E501

        :return: The auto_email_payments of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_payments

    @auto_email_payments.setter
    def auto_email_payments(self, auto_email_payments):
        """Sets the auto_email_payments of this OrderSettings.

        Notificări despre statusul plăti.  # noqa: E501

        :param auto_email_payments: The auto_email_payments of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_payments = auto_email_payments

    @property
    def auto_email_registered(self):
        """Gets the auto_email_registered of this OrderSettings.  # noqa: E501

        Notificare la înregistrarea comenzii.  # noqa: E501

        :return: The auto_email_registered of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_registered

    @auto_email_registered.setter
    def auto_email_registered(self, auto_email_registered):
        """Sets the auto_email_registered of this OrderSettings.

        Notificare la înregistrarea comenzii.  # noqa: E501

        :param auto_email_registered: The auto_email_registered of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_registered = auto_email_registered

    @property
    def auto_email_processing(self):
        """Gets the auto_email_processing of this OrderSettings.  # noqa: E501

        Notificare la procesarea comenzii.  # noqa: E501

        :return: The auto_email_processing of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_processing

    @auto_email_processing.setter
    def auto_email_processing(self, auto_email_processing):
        """Sets the auto_email_processing of this OrderSettings.

        Notificare la procesarea comenzii.  # noqa: E501

        :param auto_email_processing: The auto_email_processing of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_processing = auto_email_processing

    @property
    def auto_email_delivering(self):
        """Gets the auto_email_delivering of this OrderSettings.  # noqa: E501

        Notificare la trimiterea comenzii.  # noqa: E501

        :return: The auto_email_delivering of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_delivering

    @auto_email_delivering.setter
    def auto_email_delivering(self, auto_email_delivering):
        """Sets the auto_email_delivering of this OrderSettings.

        Notificare la trimiterea comenzii.  # noqa: E501

        :param auto_email_delivering: The auto_email_delivering of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_delivering = auto_email_delivering

    @property
    def auto_email_delivered(self):
        """Gets the auto_email_delivered of this OrderSettings.  # noqa: E501

        Notificare la livrarea comenzii.  # noqa: E501

        :return: The auto_email_delivered of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_delivered

    @auto_email_delivered.setter
    def auto_email_delivered(self, auto_email_delivered):
        """Sets the auto_email_delivered of this OrderSettings.

        Notificare la livrarea comenzii.  # noqa: E501

        :param auto_email_delivered: The auto_email_delivered of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_delivered = auto_email_delivered

    @property
    def auto_email_canceled(self):
        """Gets the auto_email_canceled of this OrderSettings.  # noqa: E501

        Notificare la anularea comenzii.  # noqa: E501

        :return: The auto_email_canceled of this OrderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email_canceled

    @auto_email_canceled.setter
    def auto_email_canceled(self, auto_email_canceled):
        """Sets the auto_email_canceled of this OrderSettings.

        Notificare la anularea comenzii.  # noqa: E501

        :param auto_email_canceled: The auto_email_canceled of this OrderSettings.  # noqa: E501
        :type: bool
        """

        self._auto_email_canceled = auto_email_canceled

    @property
    def auto_email_feedback(self):
        """Gets the auto_email_feedback of this OrderSettings.  # noqa: E501

        Notificare pentru evaluarea comenzii după \"x\" zile de la finalizare.  # noqa: E501

        :return: The auto_email_feedback of this OrderSettings.  # noqa: E501
        :rtype: int
        """
        return self._auto_email_feedback

    @auto_email_feedback.setter
    def auto_email_feedback(self, auto_email_feedback):
        """Sets the auto_email_feedback of this OrderSettings.

        Notificare pentru evaluarea comenzii după \"x\" zile de la finalizare.  # noqa: E501

        :param auto_email_feedback: The auto_email_feedback of this OrderSettings.  # noqa: E501
        :type: int
        """

        self._auto_email_feedback = auto_email_feedback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderSettings):
            return True

        return self.to_dict() != other.to_dict()
