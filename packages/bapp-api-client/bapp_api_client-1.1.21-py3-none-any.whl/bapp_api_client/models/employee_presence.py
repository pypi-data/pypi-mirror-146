# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class EmployeePresence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'user_id': 'str',
        'employee_id': 'str',
        'type': 'str',
        'start_period': 'datetime'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'user_id': 'user_id',
        'employee_id': 'employee_id',
        'type': 'type',
        'start_period': 'start_period'
    }

    def __init__(self, first_name=None, last_name=None, user_id=None, employee_id=None, type=None, start_period=None, _configuration=None):  # noqa: E501
        """EmployeePresence - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._first_name = None
        self._last_name = None
        self._user_id = None
        self._employee_id = None
        self._type = None
        self._start_period = None
        self.discriminator = None

        self.first_name = first_name
        self.last_name = last_name
        self.user_id = user_id
        if employee_id is not None:
            self.employee_id = employee_id
        self.type = type
        self.start_period = start_period

    @property
    def first_name(self):
        """Gets the first_name of this EmployeePresence.  # noqa: E501


        :return: The first_name of this EmployeePresence.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EmployeePresence.


        :param first_name: The first_name of this EmployeePresence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                first_name is not None and len(first_name) < 1):
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EmployeePresence.  # noqa: E501


        :return: The last_name of this EmployeePresence.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EmployeePresence.


        :param last_name: The last_name of this EmployeePresence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_name is not None and len(last_name) < 1):
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._last_name = last_name

    @property
    def user_id(self):
        """Gets the user_id of this EmployeePresence.  # noqa: E501


        :return: The user_id of this EmployeePresence.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EmployeePresence.


        :param user_id: The user_id of this EmployeePresence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_id is not None and len(user_id) < 1):
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._user_id = user_id

    @property
    def employee_id(self):
        """Gets the employee_id of this EmployeePresence.  # noqa: E501


        :return: The employee_id of this EmployeePresence.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this EmployeePresence.


        :param employee_id: The employee_id of this EmployeePresence.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def type(self):
        """Gets the type of this EmployeePresence.  # noqa: E501


        :return: The type of this EmployeePresence.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EmployeePresence.


        :param type: The type of this EmployeePresence.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["P", "Pz", "N", "AM", "CM", "CO", "CFP", "I", "M", "O", "PRB", "PRM", "EV", "DT", "DS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_period(self):
        """Gets the start_period of this EmployeePresence.  # noqa: E501


        :return: The start_period of this EmployeePresence.  # noqa: E501
        :rtype: datetime
        """
        return self._start_period

    @start_period.setter
    def start_period(self, start_period):
        """Sets the start_period of this EmployeePresence.


        :param start_period: The start_period of this EmployeePresence.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_period is None:
            raise ValueError("Invalid value for `start_period`, must not be `None`")  # noqa: E501

        self._start_period = start_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmployeePresence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeePresence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmployeePresence):
            return True

        return self.to_dict() != other.to_dict()
