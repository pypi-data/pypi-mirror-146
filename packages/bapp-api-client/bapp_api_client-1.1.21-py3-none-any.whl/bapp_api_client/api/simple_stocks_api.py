# coding: utf-8

"""
    BAPP API

    This is the primary API for BAPP platform development  # noqa: E501

    OpenAPI spec version: v1
    Contact: office@cbsoft.ro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bapp_api_client.api_client import ApiClient


class SimpleStocksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def simple_stocks_real_time_stock_list(self, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: 
        :param str product: 
        :param str stock: 
        :param float qty: 
        :param float qty_gte: 
        :param str active: 
        :param str type: 
        :param float type_category: 
        :param str product_ids: 
        :param float quantity_lte: 
        :param float quantity_gte: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse200144
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_stocks_real_time_stock_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.simple_stocks_real_time_stock_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def simple_stocks_real_time_stock_list_with_http_info(self, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: 
        :param str product: 
        :param str stock: 
        :param float qty: 
        :param float qty_gte: 
        :param str active: 
        :param str type: 
        :param float type_category: 
        :param str product_ids: 
        :param float quantity_lte: 
        :param float quantity_gte: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse200144
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'product', 'stock', 'qty', 'qty_gte', 'active', 'type', 'type_category', 'product_ids', 'quantity_lte', 'quantity_gte', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_stocks_real_time_stock_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'stock' in params:
            query_params.append(('stock', params['stock']))  # noqa: E501
        if 'qty' in params:
            query_params.append(('qty', params['qty']))  # noqa: E501
        if 'qty_gte' in params:
            query_params.append(('qty_gte', params['qty_gte']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'type_category' in params:
            query_params.append(('type_category', params['type_category']))  # noqa: E501
        if 'product_ids' in params:
            query_params.append(('product_ids', params['product_ids']))  # noqa: E501
        if 'quantity_lte' in params:
            query_params.append(('quantity_lte', params['quantity_lte']))  # noqa: E501
        if 'quantity_gte' in params:
            query_params.append(('quantity_gte', params['quantity_gte']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/simple-stocks/real-time-stock/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200144',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simple_stocks_real_time_stock_operation_list(self, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_operation_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_operation_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float product_id: 
        :param float stock_id: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse200143
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_stocks_real_time_stock_operation_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.simple_stocks_real_time_stock_operation_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def simple_stocks_real_time_stock_operation_list_with_http_info(self, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_operation_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_operation_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float product_id: 
        :param float stock_id: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: InlineResponse200143
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'stock_id', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_stocks_real_time_stock_operation_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'stock_id' in params:
            query_params.append(('stock_id', params['stock_id']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/simple-stocks/real-time-stock-operation/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200143',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simple_stocks_real_time_stock_operation_read(self, id, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_operation_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_operation_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this simple stock operation. (required)
        :return: SimpleStockOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_stocks_real_time_stock_operation_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.simple_stocks_real_time_stock_operation_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def simple_stocks_real_time_stock_operation_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_operation_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_operation_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this simple stock operation. (required)
        :return: SimpleStockOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_stocks_real_time_stock_operation_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `simple_stocks_real_time_stock_operation_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/simple-stocks/real-time-stock-operation/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimpleStockOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simple_stocks_real_time_stock_product_stock(self, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_product_stock  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_product_stock(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: 
        :param str product: 
        :param str stock: 
        :param float qty: 
        :param float qty_gte: 
        :param str active: 
        :param str type: 
        :param float type_category: 
        :param str product_ids: 
        :param float quantity_lte: 
        :param float quantity_gte: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_stocks_real_time_stock_product_stock_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.simple_stocks_real_time_stock_product_stock_with_http_info(**kwargs)  # noqa: E501
            return data

    def simple_stocks_real_time_stock_product_stock_with_http_info(self, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_product_stock  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_product_stock_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: 
        :param str product: 
        :param str stock: 
        :param float qty: 
        :param float qty_gte: 
        :param str active: 
        :param str type: 
        :param float type_category: 
        :param str product_ids: 
        :param float quantity_lte: 
        :param float quantity_gte: 
        :param str ordering: Which field to use when ordering the results.
        :param str ids: Specify required IDs separated by comma
        :param int page: A page number within the paginated result set.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'product', 'stock', 'qty', 'qty_gte', 'active', 'type', 'type_category', 'product_ids', 'quantity_lte', 'quantity_gte', 'ordering', 'ids', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_stocks_real_time_stock_product_stock" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'stock' in params:
            query_params.append(('stock', params['stock']))  # noqa: E501
        if 'qty' in params:
            query_params.append(('qty', params['qty']))  # noqa: E501
        if 'qty_gte' in params:
            query_params.append(('qty_gte', params['qty_gte']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'type_category' in params:
            query_params.append(('type_category', params['type_category']))  # noqa: E501
        if 'product_ids' in params:
            query_params.append(('product_ids', params['product_ids']))  # noqa: E501
        if 'quantity_lte' in params:
            query_params.append(('quantity_lte', params['quantity_lte']))  # noqa: E501
        if 'quantity_gte' in params:
            query_params.append(('quantity_gte', params['quantity_gte']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/simple-stocks/real-time-stock/product-stock/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simple_stocks_real_time_stock_read(self, id, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this real time overall stock. (required)
        :return: RealTimeOverallStockModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simple_stocks_real_time_stock_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.simple_stocks_real_time_stock_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def simple_stocks_real_time_stock_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """simple_stocks_real_time_stock_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simple_stocks_real_time_stock_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this real time overall stock. (required)
        :return: RealTimeOverallStockModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simple_stocks_real_time_stock_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `simple_stocks_real_time_stock_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth', 'Token']  # noqa: E501

        return self.api_client.call_api(
            '/simple-stocks/real-time-stock/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RealTimeOverallStockModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
