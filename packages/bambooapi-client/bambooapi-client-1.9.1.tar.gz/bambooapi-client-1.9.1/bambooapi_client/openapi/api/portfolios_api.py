"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.9.1
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.activation_data_point import ActivationDataPoint
from bambooapi_client.openapi.model.activation_response_data_point import ActivationResponseDataPoint
from bambooapi_client.openapi.model.bid_data_point import BidDataPoint
from bambooapi_client.openapi.model.clearing_data_point import ClearingDataPoint
from bambooapi_client.openapi.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.portfolio import Portfolio
from bambooapi_client.openapi.model.portfolio_create import PortfolioCreate
from bambooapi_client.openapi.model.portfolio_list_item import PortfolioListItem
from bambooapi_client.openapi.model.portfolio_market import PortfolioMarket
from bambooapi_client.openapi.model.portfolio_market_summary import PortfolioMarketSummary
from bambooapi_client.openapi.model.portfolio_site import PortfolioSite
from bambooapi_client.openapi.model.portfolio_update import PortfolioUpdate
from bambooapi_client.openapi.model.profits_data_point import ProfitsDataPoint


class PortfoliosApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_portfolio_market_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}',
                'operation_id': 'add_portfolio_market',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.add_portfolio_site_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/sites/{site_id}',
                'operation_id': 'add_portfolio_site',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'site_id',
                ],
                'required': [
                    'portfolio_id',
                    'site_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'site_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('site_id',): {

                        'inclusive_maximum': 99999,
                        'inclusive_minimum': 10000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'site_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'site_id': 'site_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'site_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios',
                'operation_id': 'create_portfolio',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_create',
                ],
                'required': [
                    'portfolio_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_create':
                        (PortfolioCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'portfolio_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}',
                'operation_id': 'delete_portfolio',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_portfolio_market_summary_endpoint = _Endpoint(
            settings={
                'response_type': (PortfolioMarketSummary,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/summary',
                'operation_id': 'get_portfolio_market_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'period_start',
                    'period_stop',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                    'period_start',
                    'period_stop',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'period_start': 'query',
                    'period_stop': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.insert_portfolio_market_activations_endpoint = _Endpoint(
            settings={
                'response_type': ([ActivationDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/activations',
                'operation_id': 'insert_portfolio_market_activations',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'activation_data_point',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                    'activation_data_point',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'activation_data_point':
                        ([ActivationDataPoint],),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'activation_data_point': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_portfolio_market_bids_endpoint = _Endpoint(
            settings={
                'response_type': ([BidDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/bids',
                'operation_id': 'insert_portfolio_market_bids',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'bid_data_point',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                    'bid_data_point',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'bid_data_point':
                        ([BidDataPoint],),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'bid_data_point': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_portfolio_market_clearings_endpoint = _Endpoint(
            settings={
                'response_type': ([ClearingDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/clearings',
                'operation_id': 'insert_portfolio_market_clearings',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'clearing_data_point',
                    'ramping',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                    'clearing_data_point',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'clearing_data_point':
                        ([ClearingDataPoint],),
                    'ramping':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                    'ramping': 'ramping',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'clearing_data_point': 'body',
                    'ramping': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_portfolio_market_kpis_profits_endpoint = _Endpoint(
            settings={
                'response_type': ([ProfitsDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/kpis/profits',
                'operation_id': 'insert_portfolio_market_kpis_profits',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'profits_data_point',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                    'profits_data_point',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'profits_data_point':
                        ([ProfitsDataPoint],),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'profits_data_point': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.insert_portfolio_market_responses_endpoint = _Endpoint(
            settings={
                'response_type': ([ActivationResponseDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/responses',
                'operation_id': 'insert_portfolio_market_responses',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'activation_response_data_point',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                    'activation_response_data_point',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'activation_response_data_point':
                        ([ActivationResponseDataPoint],),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'activation_response_data_point': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.list_portfolios_endpoint = _Endpoint(
            settings={
                'response_type': ([PortfolioListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios',
                'operation_id': 'list_portfolios',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_portfolios_markets_endpoint = _Endpoint(
            settings={
                'response_type': ([PortfolioMarket],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets',
                'operation_id': 'list_portfolios_markets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_portfolios_sites_endpoint = _Endpoint(
            settings={
                'response_type': ([PortfolioSite],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/sites',
                'operation_id': 'list_portfolios_sites',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}',
                'operation_id': 'read_portfolio',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                ],
                'required': [
                    'portfolio_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_portfolio_market_activations_endpoint = _Endpoint(
            settings={
                'response_type': ([ActivationDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/activations',
                'operation_id': 'read_portfolio_market_activations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'period',
                    'period_start',
                    'period_stop',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'period':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                    'period': 'period',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'period': 'query',
                    'period_start': 'query',
                    'period_stop': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_portfolio_market_bids_endpoint = _Endpoint(
            settings={
                'response_type': ([BidDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/bids',
                'operation_id': 'read_portfolio_market_bids',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'period',
                    'period_start',
                    'period_stop',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'period':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                    'period': 'period',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'period': 'query',
                    'period_start': 'query',
                    'period_stop': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_portfolio_market_clearings_endpoint = _Endpoint(
            settings={
                'response_type': ([ClearingDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/clearings',
                'operation_id': 'read_portfolio_market_clearings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'ramping',
                    'period',
                    'period_start',
                    'period_stop',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'ramping':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'period':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                    'ramping': 'ramping',
                    'period': 'period',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'ramping': 'query',
                    'period': 'query',
                    'period_start': 'query',
                    'period_stop': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_portfolio_market_kpis_profits_endpoint = _Endpoint(
            settings={
                'response_type': ([ProfitsDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/kpis/profits',
                'operation_id': 'read_portfolio_market_kpis_profits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'period',
                    'period_start',
                    'period_stop',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'period':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                    'period': 'period',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'period': 'query',
                    'period_start': 'query',
                    'period_stop': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_portfolio_market_responses_endpoint = _Endpoint(
            settings={
                'response_type': ([ActivationResponseDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}/responses',
                'operation_id': 'read_portfolio_market_responses',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                    'period',
                    'period_start',
                    'period_stop',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                    'period':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                    'period': 'period',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                    'period': 'query',
                    'period_start': 'query',
                    'period_stop': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_portfolio_market_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/markets/{market_id}',
                'operation_id': 'remove_portfolio_market',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'market_id',
                ],
                'required': [
                    'portfolio_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_portfolio_site_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}/sites/{site_id}',
                'operation_id': 'remove_portfolio_site',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'site_id',
                ],
                'required': [
                    'portfolio_id',
                    'site_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                    'site_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                    ('site_id',): {

                        'inclusive_maximum': 99999,
                        'inclusive_minimum': 10000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'site_id':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                    'site_id': 'site_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'site_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_portfolio_endpoint = _Endpoint(
            settings={
                'response_type': (Portfolio,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/portfolios/{portfolio_id}',
                'operation_id': 'update_portfolio',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_id',
                    'portfolio_update',
                ],
                'required': [
                    'portfolio_id',
                    'portfolio_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'portfolio_id',
                ]
            },
            root_map={
                'validations': {
                    ('portfolio_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_id':
                        (int,),
                    'portfolio_update':
                        (PortfolioUpdate,),
                },
                'attribute_map': {
                    'portfolio_id': 'portfolio_id',
                },
                'location_map': {
                    'portfolio_id': 'path',
                    'portfolio_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_portfolio_market(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Add a Market to a Portfolio  # noqa: E501

        Add a Market to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_portfolio_market(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.add_portfolio_market_endpoint.call_with_http_info(**kwargs)

    def add_portfolio_site(
        self,
        portfolio_id,
        site_id,
        **kwargs
    ):
        """Add a Site to a Portfolio  # noqa: E501

        Add a Site to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_portfolio_site(portfolio_id, site_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            site_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['site_id'] = \
            site_id
        return self.add_portfolio_site_endpoint.call_with_http_info(**kwargs)

    def create_portfolio(
        self,
        portfolio_create,
        **kwargs
    ):
        """Create a Portfolio  # noqa: E501

        Create a Portfolio with all the information.  - **portfolio_name**: each portfolio must have a unique name - **enable**: If True, this portfolio participates in market auction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_portfolio(portfolio_create, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_create (PortfolioCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_create'] = \
            portfolio_create
        return self.create_portfolio_endpoint.call_with_http_info(**kwargs)

    def delete_portfolio(
        self,
        portfolio_id,
        **kwargs
    ):
        """Delete an existing Portfolio  # noqa: E501

        Delete a Portfolio.  **WARNING!: Portfolio deletion is PERMANENT!** (no way to recover deleted portfolio)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_portfolio(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.delete_portfolio_endpoint.call_with_http_info(**kwargs)

    def get_portfolio_market_summary(
        self,
        portfolio_id,
        market_id,
        period_start,
        period_stop,
        **kwargs
    ):
        """Get summary statistics of flexibility markets operations of the portfolio  # noqa: E501

        Return summary of flexibility markets operations of a portfolio.  This endpoint only accepts `market_id` of flexibility markets.  It returns the following KPIs: - Total offered flexibility up - Total offered flexibility down - Total profits - Reliability index  The way of computing `total_profits` and `reliability_index` depends on the legislation of each country and market. First, we will do it for Spain.  **Not implemented yet. Endpoint returns 0.0 for each KPI.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_portfolio_market_summary(portfolio_id, market_id, period_start, period_stop, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PortfolioMarketSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        kwargs['period_start'] = \
            period_start
        kwargs['period_stop'] = \
            period_stop
        return self.get_portfolio_market_summary_endpoint.call_with_http_info(**kwargs)

    def insert_portfolio_market_activations(
        self,
        portfolio_id,
        market_id,
        activation_data_point,
        **kwargs
    ):
        """Insert/update activation state of a given portfolio and market  # noqa: E501

        Insert/update activation state of a given portfolio and market.  - **Timestamps don't need to be pushed in any particular order** - **Values will be stored exactly as pushed** (no transformation applied)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_portfolio_market_activations(portfolio_id, market_id, activation_data_point, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):
            activation_data_point ([ActivationDataPoint]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ActivationDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        kwargs['activation_data_point'] = \
            activation_data_point
        return self.insert_portfolio_market_activations_endpoint.call_with_http_info(**kwargs)

    def insert_portfolio_market_bids(
        self,
        portfolio_id,
        market_id,
        bid_data_point,
        **kwargs
    ):
        """Insert/update market bid information of a given portfolio and market  # noqa: E501

        Insert/update market bid information of a given portfolio and market.  - **Timestamps don't need to be pushed in any particular order** - **Values will be stored exactly as pushed** (no transformation applied)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_portfolio_market_bids(portfolio_id, market_id, bid_data_point, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):
            bid_data_point ([BidDataPoint]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BidDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        kwargs['bid_data_point'] = \
            bid_data_point
        return self.insert_portfolio_market_bids_endpoint.call_with_http_info(**kwargs)

    def insert_portfolio_market_clearings(
        self,
        portfolio_id,
        market_id,
        clearing_data_point,
        **kwargs
    ):
        """Insert/update market clearing information of a given portfolio and market  # noqa: E501

        Insert/update market clearing information of a given portfolio and market.  - **Timestamps don't'clearing' need to be pushed in any particular order** - **Values will be stored exactly as pushed** (no transformation applied)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_portfolio_market_clearings(portfolio_id, market_id, clearing_data_point, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):
            clearing_data_point ([ClearingDataPoint]):

        Keyword Args:
            ramping (str): [optional] if omitted the server will use the default value of "ramp_up"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ClearingDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        kwargs['clearing_data_point'] = \
            clearing_data_point
        return self.insert_portfolio_market_clearings_endpoint.call_with_http_info(**kwargs)

    def insert_portfolio_market_kpis_profits(
        self,
        portfolio_id,
        market_id,
        profits_data_point,
        **kwargs
    ):
        """Insert/update profits obtained from activations  # noqa: E501

        Insert/update profits obtained from activations.  - **Timestamps don't need to be pushed in any particular order** - **Values will be stored exactly as pushed** (no transformation applied)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_portfolio_market_kpis_profits(portfolio_id, market_id, profits_data_point, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):
            profits_data_point ([ProfitsDataPoint]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ProfitsDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        kwargs['profits_data_point'] = \
            profits_data_point
        return self.insert_portfolio_market_kpis_profits_endpoint.call_with_http_info(**kwargs)

    def insert_portfolio_market_responses(
        self,
        portfolio_id,
        market_id,
        activation_response_data_point,
        **kwargs
    ):
        """Insert/update activation response of a given portfolio and market  # noqa: E501

        Insert/update activation response of a given portfolio and market.  - **Timestamps don't need to be pushed in any particular order** - **Values will be stored exactly as pushed** (no transformation applied)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_portfolio_market_responses(portfolio_id, market_id, activation_response_data_point, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):
            activation_response_data_point ([ActivationResponseDataPoint]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ActivationResponseDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        kwargs['activation_response_data_point'] = \
            activation_response_data_point
        return self.insert_portfolio_market_responses_endpoint.call_with_http_info(**kwargs)

    def list_portfolios(
        self,
        **kwargs
    ):
        """List all portfolios  # noqa: E501

        List all Portfolios.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_portfolios(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PortfolioListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_portfolios_endpoint.call_with_http_info(**kwargs)

    def list_portfolios_markets(
        self,
        portfolio_id,
        **kwargs
    ):
        """List all Markets added to a Portfolio  # noqa: E501

        List all Markets added to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_portfolios_markets(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PortfolioMarket]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.list_portfolios_markets_endpoint.call_with_http_info(**kwargs)

    def list_portfolios_sites(
        self,
        portfolio_id,
        **kwargs
    ):
        """List all Sites added to a Portfolio  # noqa: E501

        List all Sites added to a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_portfolios_sites(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PortfolioSite]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.list_portfolios_sites_endpoint.call_with_http_info(**kwargs)

    def read_portfolio(
        self,
        portfolio_id,
        **kwargs
    ):
        """Info about a specific Portfolio  # noqa: E501

        Info about a specific Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_portfolio(portfolio_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        return self.read_portfolio_endpoint.call_with_http_info(**kwargs)

    def read_portfolio_market_activations(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Return activation state of a given portfolio and market  # noqa: E501

        Return activation state of a given portfolio and market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_portfolio_market_activations(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            period (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ActivationDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.read_portfolio_market_activations_endpoint.call_with_http_info(**kwargs)

    def read_portfolio_market_bids(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Return market bid information of a given portfolio and market  # noqa: E501

        Return market bid information of a given portfolio and market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_portfolio_market_bids(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            period (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [BidDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.read_portfolio_market_bids_endpoint.call_with_http_info(**kwargs)

    def read_portfolio_market_clearings(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Return market clearing information of a given portfolio and market  # noqa: E501

        Return market clearing information of a given portfolio and market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_portfolio_market_clearings(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            ramping (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            period (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ClearingDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.read_portfolio_market_clearings_endpoint.call_with_http_info(**kwargs)

    def read_portfolio_market_kpis_profits(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Return profits obtained from activations  # noqa: E501

        Return profits obtained from activations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_portfolio_market_kpis_profits(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            period (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ProfitsDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.read_portfolio_market_kpis_profits_endpoint.call_with_http_info(**kwargs)

    def read_portfolio_market_responses(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Return activation response of a given portfolio and market  # noqa: E501

        Return activation response of a given portfolio and market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_portfolio_market_responses(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            period (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ActivationResponseDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.read_portfolio_market_responses_endpoint.call_with_http_info(**kwargs)

    def remove_portfolio_market(
        self,
        portfolio_id,
        market_id,
        **kwargs
    ):
        """Remove a Market from a Portfolio  # noqa: E501

        Remove a Market from a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_portfolio_market(portfolio_id, market_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['market_id'] = \
            market_id
        return self.remove_portfolio_market_endpoint.call_with_http_info(**kwargs)

    def remove_portfolio_site(
        self,
        portfolio_id,
        site_id,
        **kwargs
    ):
        """Remove a Site from a Portfolio  # noqa: E501

        Remove a Site from a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_portfolio_site(portfolio_id, site_id, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            site_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['site_id'] = \
            site_id
        return self.remove_portfolio_site_endpoint.call_with_http_info(**kwargs)

    def update_portfolio(
        self,
        portfolio_id,
        portfolio_update,
        **kwargs
    ):
        """Update an existing Portfolio  # noqa: E501

        Update information about a Portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_portfolio(portfolio_id, portfolio_update, async_req=True)
        >>> result = thread.get()

        Args:
            portfolio_id (int):
            portfolio_update (PortfolioUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Portfolio
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['portfolio_id'] = \
            portfolio_id
        kwargs['portfolio_update'] = \
            portfolio_update
        return self.update_portfolio_endpoint.call_with_http_info(**kwargs)

