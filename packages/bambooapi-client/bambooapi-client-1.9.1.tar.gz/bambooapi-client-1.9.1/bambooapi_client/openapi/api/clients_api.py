"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.9.1
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.client_summary import ClientSummary
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.site_data_point import SiteDataPoint


class ClientsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.client_forecast_baseline_endpoint = _Endpoint(
            settings={
                'response_type': ([SiteDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/forecasts/baseline',
                'operation_id': 'client_forecast_baseline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'period_start',
                    'period_stop',
                    'horizon',
                    'frequency',
                ],
                'required': [
                    'client_id',
                    'period_start',
                    'period_stop',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                    'horizon':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'frequency':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                    'horizon': 'horizon',
                    'frequency': 'frequency',
                },
                'location_map': {
                    'client_id': 'path',
                    'period_start': 'query',
                    'period_stop': 'query',
                    'horizon': 'query',
                    'frequency': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.client_forecast_flexibility_endpoint = _Endpoint(
            settings={
                'response_type': ([SiteDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/forecasts/flexibility',
                'operation_id': 'client_forecast_flexibility',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'start_date',
                    'end_date',
                    'frequency',
                ],
                'required': [
                    'client_id',
                    'start_date',
                    'end_date',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'frequency':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'frequency': 'frequency',
                },
                'location_map': {
                    'client_id': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                    'frequency': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.client_meters_measurements_endpoint = _Endpoint(
            settings={
                'response_type': ([SiteDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/meters/measurements',
                'operation_id': 'client_meters_measurements',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'period_start',
                    'period_stop',
                    'frequency',
                ],
                'required': [
                    'client_id',
                    'period_start',
                    'period_stop',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'period_start':
                        (datetime,),
                    'period_stop':
                        (datetime,),
                    'frequency':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'period_start': 'period_start',
                    'period_stop': 'period_stop',
                    'frequency': 'frequency',
                },
                'location_map': {
                    'client_id': 'path',
                    'period_start': 'query',
                    'period_stop': 'query',
                    'frequency': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.client_summary_endpoint = _Endpoint(
            settings={
                'response_type': (ClientSummary,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/summary',
                'operation_id': 'client_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'start_date',
                    'end_date',
                ],
                'required': [
                    'client_id',
                    'start_date',
                    'end_date',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                },
                'location_map': {
                    'client_id': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def client_forecast_baseline(
        self,
        client_id,
        period_start,
        period_stop,
        **kwargs
    ):
        """Get the sum of forecast baseline of all sites  # noqa: E501

        Get the sum of forecast baseline of all sites in a time series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_forecast_baseline(client_id, period_start, period_stop, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"

        Keyword Args:
            horizon (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            frequency (bool, date, datetime, dict, float, int, list, str, none_type): Aggregate measurements to this frequency. The measurements will include data for whole periods.  For example, if _period_start_ = '2021-05-01T10:23:00Z', _period_stop_ = '2021-05-01T10:49:00Z' and _frequency_ = 'quarter', the backend queries data from '2021-05-01T10:15:00Z' to '2021-05-01T11:00:00Z' (not included) and resamples it every 15 minutes.  . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [SiteDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['period_start'] = \
            period_start
        kwargs['period_stop'] = \
            period_stop
        return self.client_forecast_baseline_endpoint.call_with_http_info(**kwargs)

    def client_forecast_flexibility(
        self,
        client_id,
        start_date,
        end_date,
        **kwargs
    ):
        """Get the sum of forecast flexibilities of all sites  # noqa: E501

        Get the sum of forecast flexibilities of all sites in a time series.  Not implemented yet. Endpoint returns an empty list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_forecast_flexibility(client_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            start_date (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"
            end_date (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"

        Keyword Args:
            frequency (bool, date, datetime, dict, float, int, list, str, none_type): Aggregate measurements to this frequency. The measurements will include data for whole periods.  For example, if _period_start_ = '2021-05-01T10:23:00Z', _period_stop_ = '2021-05-01T10:49:00Z' and _frequency_ = 'quarter', the backend queries data from '2021-05-01T10:15:00Z' to '2021-05-01T11:00:00Z' (not included) and resamples it every 15 minutes.  . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [SiteDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.client_forecast_flexibility_endpoint.call_with_http_info(**kwargs)

    def client_meters_measurements(
        self,
        client_id,
        period_start,
        period_stop,
        **kwargs
    ):
        """Get the sum of measurements of all sites  # noqa: E501

        Get the sum of meters of all sites in a time series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_meters_measurements(client_id, period_start, period_stop, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            period_start (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"
            period_stop (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"

        Keyword Args:
            frequency (bool, date, datetime, dict, float, int, list, str, none_type): Aggregate measurements to this frequency. The measurements will include data for whole periods.  For example, if _period_start_ = '2021-05-01T10:23:00Z', _period_stop_ = '2021-05-01T10:49:00Z' and _frequency_ = 'quarter', the backend queries data from '2021-05-01T10:15:00Z' to '2021-05-01T11:00:00Z' (not included) and resamples it every 15 minutes.  . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [SiteDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['period_start'] = \
            period_start
        kwargs['period_stop'] = \
            period_stop
        return self.client_meters_measurements_endpoint.call_with_http_info(**kwargs)

    def client_summary(
        self,
        client_id,
        start_date,
        end_date,
        **kwargs
    ):
        """Get summary statistics of a client  # noqa: E501

        Get summary statistics of a client.  1. Total consumption of all prosumers. 2. Total number of prosumers 3. Total number of activations. 4. Total profits of all prosumers.  Not implemented yet. Endpoint returns 0 values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_summary(client_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            start_date (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"
            end_date (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ClientSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.client_summary_endpoint.call_with_http_info(**kwargs)

