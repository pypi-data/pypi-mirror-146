# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PyAnyCAD
else:
    import _PyAnyCAD

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _PyAnyCAD.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_SwigPyIterator

    def value(self):
        return _PyAnyCAD.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyAnyCAD.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyAnyCAD.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyAnyCAD.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyAnyCAD.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyAnyCAD.SwigPyIterator_copy(self)

    def next(self):
        return _PyAnyCAD.SwigPyIterator_next(self)

    def __next__(self):
        return _PyAnyCAD.SwigPyIterator___next__(self)

    def previous(self):
        return _PyAnyCAD.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyAnyCAD.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyAnyCAD.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyAnyCAD.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyAnyCAD.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyAnyCAD.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyAnyCAD.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyAnyCAD.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PyAnyCAD:
_PyAnyCAD.SwigPyIterator_swigregister(SwigPyIterator)

packed_highp = _PyAnyCAD.packed_highp
packed_mediump = _PyAnyCAD.packed_mediump
packed_lowp = _PyAnyCAD.packed_lowp
highp = _PyAnyCAD.highp
mediump = _PyAnyCAD.mediump
lowp = _PyAnyCAD.lowp
class Vector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector2_swiginit(self, _PyAnyCAD.new_Vector2(*args))
    x = property(_PyAnyCAD.Vector2_x_get, _PyAnyCAD.Vector2_x_set)
    y = property(_PyAnyCAD.Vector2_y_get, _PyAnyCAD.Vector2_y_set)
    __swig_destroy__ = _PyAnyCAD.delete_Vector2

# Register Vector2 in _PyAnyCAD:
_PyAnyCAD.Vector2_swigregister(Vector2)

class Vector2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector2i_swiginit(self, _PyAnyCAD.new_Vector2i(*args))
    x = property(_PyAnyCAD.Vector2i_x_get, _PyAnyCAD.Vector2i_x_set)
    y = property(_PyAnyCAD.Vector2i_y_get, _PyAnyCAD.Vector2i_y_set)
    __swig_destroy__ = _PyAnyCAD.delete_Vector2i

# Register Vector2i in _PyAnyCAD:
_PyAnyCAD.Vector2i_swigregister(Vector2i)

class Vector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector3_swiginit(self, _PyAnyCAD.new_Vector3(*args))
    x = property(_PyAnyCAD.Vector3_x_get, _PyAnyCAD.Vector3_x_set)
    y = property(_PyAnyCAD.Vector3_y_get, _PyAnyCAD.Vector3_y_set)
    z = property(_PyAnyCAD.Vector3_z_get, _PyAnyCAD.Vector3_z_set)

    def clone(self):
        return _PyAnyCAD.Vector3_clone(self)

    def add(self, v):
        return _PyAnyCAD.Vector3_add(self, v)

    def sub(self, v):
        return _PyAnyCAD.Vector3_sub(self, v)

    def applyMatrix4(self, trf):
        return _PyAnyCAD.Vector3_applyMatrix4(self, trf)

    def multiplyScalar(self, scalar):
        return _PyAnyCAD.Vector3_multiplyScalar(self, scalar)

    def normalize(self):
        return _PyAnyCAD.Vector3_normalize(self)

    def normalized(self):
        return _PyAnyCAD.Vector3_normalized(self)

    def length(self):
        return _PyAnyCAD.Vector3_length(self)

    def distanceTo(self, v):
        return _PyAnyCAD.Vector3_distanceTo(self, v)

    def angleTo(self, v):
        return _PyAnyCAD.Vector3_angleTo(self, v)

    def dot(self, v):
        return _PyAnyCAD.Vector3_dot(self, v)

    def cross(self, v):
        return _PyAnyCAD.Vector3_cross(self, v)
    __swig_destroy__ = _PyAnyCAD.delete_Vector3

# Register Vector3 in _PyAnyCAD:
_PyAnyCAD.Vector3_swigregister(Vector3)

class Vector4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector4_swiginit(self, _PyAnyCAD.new_Vector4(*args))
    x = property(_PyAnyCAD.Vector4_x_get, _PyAnyCAD.Vector4_x_set)
    y = property(_PyAnyCAD.Vector4_y_get, _PyAnyCAD.Vector4_y_set)
    z = property(_PyAnyCAD.Vector4_z_get, _PyAnyCAD.Vector4_z_set)
    w = property(_PyAnyCAD.Vector4_w_get, _PyAnyCAD.Vector4_w_set)

    def clone(self):
        return _PyAnyCAD.Vector4_clone(self)

    def applyMatrix4(self, trf):
        return _PyAnyCAD.Vector4_applyMatrix4(self, trf)
    __swig_destroy__ = _PyAnyCAD.delete_Vector4

# Register Vector4 in _PyAnyCAD:
_PyAnyCAD.Vector4_swigregister(Vector4)

class Quaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Quaternion_swiginit(self, _PyAnyCAD.new_Quaternion(*args))
    x = property(_PyAnyCAD.Quaternion_x_get, _PyAnyCAD.Quaternion_x_set)
    y = property(_PyAnyCAD.Quaternion_y_get, _PyAnyCAD.Quaternion_y_set)
    z = property(_PyAnyCAD.Quaternion_z_get, _PyAnyCAD.Quaternion_z_set)
    w = property(_PyAnyCAD.Quaternion_w_get, _PyAnyCAD.Quaternion_w_set)

    def clone(self):
        return _PyAnyCAD.Quaternion_clone(self)

    def toMatrix4(self):
        return _PyAnyCAD.Quaternion_toMatrix4(self)

    def toMatrix3(self):
        return _PyAnyCAD.Quaternion_toMatrix3(self)

    def conjugate(self):
        return _PyAnyCAD.Quaternion_conjugate(self)

    def eulerAngles(self):
        return _PyAnyCAD.Quaternion_eulerAngles(self)

    @staticmethod
    def makeFromAxisAngle(angle, axis):
        return _PyAnyCAD.Quaternion_makeFromAxisAngle(angle, axis)

    @staticmethod
    def makeFromEulerAngles(pitch, yaw, roll):
        return _PyAnyCAD.Quaternion_makeFromEulerAngles(pitch, yaw, roll)

    @staticmethod
    def getRotationTo(_from, to):
        return _PyAnyCAD.Quaternion_getRotationTo(_from, to)
    __swig_destroy__ = _PyAnyCAD.delete_Quaternion

# Register Quaternion in _PyAnyCAD:
_PyAnyCAD.Quaternion_swigregister(Quaternion)

def Quaternion_makeFromAxisAngle(angle, axis):
    return _PyAnyCAD.Quaternion_makeFromAxisAngle(angle, axis)

def Quaternion_makeFromEulerAngles(pitch, yaw, roll):
    return _PyAnyCAD.Quaternion_makeFromEulerAngles(pitch, yaw, roll)

def Quaternion_getRotationTo(_from, to):
    return _PyAnyCAD.Quaternion_getRotationTo(_from, to)

class Matrix3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix3_swiginit(self, _PyAnyCAD.new_Matrix3(*args))

    def get(self, i, j):
        return _PyAnyCAD.Matrix3_get(self, i, j)

    def set(self, i, j, val):
        return _PyAnyCAD.Matrix3_set(self, i, j, val)

    def toMatrix4(self):
        return _PyAnyCAD.Matrix3_toMatrix4(self)
    __swig_destroy__ = _PyAnyCAD.delete_Matrix3

# Register Matrix3 in _PyAnyCAD:
_PyAnyCAD.Matrix3_swigregister(Matrix3)

class Matrix4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix4_swiginit(self, _PyAnyCAD.new_Matrix4(*args))

    def clone(self):
        return _PyAnyCAD.Matrix4_clone(self)

    def get(self, i, j):
        return _PyAnyCAD.Matrix4_get(self, i, j)

    def set(self, i, j, val):
        return _PyAnyCAD.Matrix4_set(self, i, j, val)

    def rotate(self, angle, axis):
        return _PyAnyCAD.Matrix4_rotate(self, angle, axis)

    def scale(self, ratio):
        return _PyAnyCAD.Matrix4_scale(self, ratio)

    def translate(self, v):
        return _PyAnyCAD.Matrix4_translate(self, v)

    def toMatrix3(self):
        return _PyAnyCAD.Matrix4_toMatrix3(self)

    def multiply(self, trf):
        return _PyAnyCAD.Matrix4_multiply(self, trf)

    def multiplied(self, trf):
        return _PyAnyCAD.Matrix4_multiplied(self, trf)

    def transpose(self):
        return _PyAnyCAD.Matrix4_transpose(self)

    def transposed(self):
        return _PyAnyCAD.Matrix4_transposed(self)

    def inverse(self):
        return _PyAnyCAD.Matrix4_inverse(self)

    def inversed(self):
        return _PyAnyCAD.Matrix4_inversed(self)

    def determinant(self):
        return _PyAnyCAD.Matrix4_determinant(self)

    def decompose(self):
        return _PyAnyCAD.Matrix4_decompose(self)

    def decomposeTRS(self):
        return _PyAnyCAD.Matrix4_decomposeTRS(self)

    def extractTranslation(self):
        return _PyAnyCAD.Matrix4_extractTranslation(self)

    def extractScale(self):
        return _PyAnyCAD.Matrix4_extractScale(self)

    def extractEulerAngleXYZ(self):
        return _PyAnyCAD.Matrix4_extractEulerAngleXYZ(self)

    @staticmethod
    def makeRotationAxis(axis, angle):
        return _PyAnyCAD.Matrix4_makeRotationAxis(axis, angle)

    @staticmethod
    def makeScale(x, y, z):
        return _PyAnyCAD.Matrix4_makeScale(x, y, z)

    @staticmethod
    def makeTranslation(x, y, z):
        return _PyAnyCAD.Matrix4_makeTranslation(x, y, z)

    @staticmethod
    def fromEulerAngleXYZ(x, y, z):
        return _PyAnyCAD.Matrix4_fromEulerAngleXYZ(x, y, z)

    @staticmethod
    def fromEulerAngleYXZ(y, x, z):
        return _PyAnyCAD.Matrix4_fromEulerAngleYXZ(y, x, z)
    __swig_destroy__ = _PyAnyCAD.delete_Matrix4

# Register Matrix4 in _PyAnyCAD:
_PyAnyCAD.Matrix4_swigregister(Matrix4)

def Matrix4_makeRotationAxis(axis, angle):
    return _PyAnyCAD.Matrix4_makeRotationAxis(axis, angle)

def Matrix4_makeScale(x, y, z):
    return _PyAnyCAD.Matrix4_makeScale(x, y, z)

def Matrix4_makeTranslation(x, y, z):
    return _PyAnyCAD.Matrix4_makeTranslation(x, y, z)

def Matrix4_fromEulerAngleXYZ(x, y, z):
    return _PyAnyCAD.Matrix4_fromEulerAngleXYZ(x, y, z)

def Matrix4_fromEulerAngleYXZ(y, x, z):
    return _PyAnyCAD.Matrix4_fromEulerAngleYXZ(y, x, z)

class Matrix4DecomposeResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rotation = property(_PyAnyCAD.Matrix4DecomposeResult_rotation_get, _PyAnyCAD.Matrix4DecomposeResult_rotation_set)
    scale = property(_PyAnyCAD.Matrix4DecomposeResult_scale_get, _PyAnyCAD.Matrix4DecomposeResult_scale_set)
    translation = property(_PyAnyCAD.Matrix4DecomposeResult_translation_get, _PyAnyCAD.Matrix4DecomposeResult_translation_set)
    skew = property(_PyAnyCAD.Matrix4DecomposeResult_skew_get, _PyAnyCAD.Matrix4DecomposeResult_skew_set)
    perspective = property(_PyAnyCAD.Matrix4DecomposeResult_perspective_get, _PyAnyCAD.Matrix4DecomposeResult_perspective_set)

    def __init__(self):
        _PyAnyCAD.Matrix4DecomposeResult_swiginit(self, _PyAnyCAD.new_Matrix4DecomposeResult())
    __swig_destroy__ = _PyAnyCAD.delete_Matrix4DecomposeResult

# Register Matrix4DecomposeResult in _PyAnyCAD:
_PyAnyCAD.Matrix4DecomposeResult_swigregister(Matrix4DecomposeResult)

GL_ZERO = _PyAnyCAD.GL_ZERO
GL_ONE = _PyAnyCAD.GL_ONE
GL_NONE = _PyAnyCAD.GL_NONE
GL_DEPTH_BUFFER_BIT = _PyAnyCAD.GL_DEPTH_BUFFER_BIT
GL_STENCIL_BUFFER_BIT = _PyAnyCAD.GL_STENCIL_BUFFER_BIT
GL_COLOR_BUFFER_BIT = _PyAnyCAD.GL_COLOR_BUFFER_BIT
GL_POINTS = _PyAnyCAD.GL_POINTS
GL_LINES = _PyAnyCAD.GL_LINES
GL_LINE_LOOP = _PyAnyCAD.GL_LINE_LOOP
GL_LINE_STRIP = _PyAnyCAD.GL_LINE_STRIP
GL_TRIANGLES = _PyAnyCAD.GL_TRIANGLES
GL_TRIANGLE_STRIP = _PyAnyCAD.GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN = _PyAnyCAD.GL_TRIANGLE_FAN
GL_SRC_COLOR = _PyAnyCAD.GL_SRC_COLOR
GL_ONE_MINUS_SRC_COLOR = _PyAnyCAD.GL_ONE_MINUS_SRC_COLOR
GL_SRC_ALPHA = _PyAnyCAD.GL_SRC_ALPHA
GL_ONE_MINUS_SRC_ALPHA = _PyAnyCAD.GL_ONE_MINUS_SRC_ALPHA
GL_DST_ALPHA = _PyAnyCAD.GL_DST_ALPHA
GL_ONE_MINUS_DST_ALPHA = _PyAnyCAD.GL_ONE_MINUS_DST_ALPHA
GL_DST_COLOR = _PyAnyCAD.GL_DST_COLOR
GL_ONE_MINUS_DST_COLOR = _PyAnyCAD.GL_ONE_MINUS_DST_COLOR
GL_SRC_ALPHA_SATURATE = _PyAnyCAD.GL_SRC_ALPHA_SATURATE
GL_FUNC_ADD = _PyAnyCAD.GL_FUNC_ADD
GL_BLEND_EQUATION = _PyAnyCAD.GL_BLEND_EQUATION
GL_BLEND_EQUATION_RGB = _PyAnyCAD.GL_BLEND_EQUATION_RGB
GL_BLEND_EQUATION_ALPHA = _PyAnyCAD.GL_BLEND_EQUATION_ALPHA
GL_FUNC_SUBTRACT = _PyAnyCAD.GL_FUNC_SUBTRACT
GL_FUNC_REVERSE_SUBTRACT = _PyAnyCAD.GL_FUNC_REVERSE_SUBTRACT
GL_BLEND_DST_RGB = _PyAnyCAD.GL_BLEND_DST_RGB
GL_BLEND_SRC_RGB = _PyAnyCAD.GL_BLEND_SRC_RGB
GL_BLEND_DST_ALPHA = _PyAnyCAD.GL_BLEND_DST_ALPHA
GL_BLEND_SRC_ALPHA = _PyAnyCAD.GL_BLEND_SRC_ALPHA
GL_CONSTANT_COLOR = _PyAnyCAD.GL_CONSTANT_COLOR
GL_ONE_MINUS_CONSTANT_COLOR = _PyAnyCAD.GL_ONE_MINUS_CONSTANT_COLOR
GL_CONSTANT_ALPHA = _PyAnyCAD.GL_CONSTANT_ALPHA
GL_ONE_MINUS_CONSTANT_ALPHA = _PyAnyCAD.GL_ONE_MINUS_CONSTANT_ALPHA
GL_BLEND_COLOR = _PyAnyCAD.GL_BLEND_COLOR
GL_ARRAY_BUFFER = _PyAnyCAD.GL_ARRAY_BUFFER
GL_ELEMENT_ARRAY_BUFFER = _PyAnyCAD.GL_ELEMENT_ARRAY_BUFFER
GL_ARRAY_BUFFER_BINDING = _PyAnyCAD.GL_ARRAY_BUFFER_BINDING
GL_ELEMENT_ARRAY_BUFFER_BINDING = _PyAnyCAD.GL_ELEMENT_ARRAY_BUFFER_BINDING
GL_STREAM_DRAW = _PyAnyCAD.GL_STREAM_DRAW
GL_STATIC_DRAW = _PyAnyCAD.GL_STATIC_DRAW
GL_DYNAMIC_DRAW = _PyAnyCAD.GL_DYNAMIC_DRAW
GL_BUFFER_SIZE = _PyAnyCAD.GL_BUFFER_SIZE
GL_BUFFER_USAGE = _PyAnyCAD.GL_BUFFER_USAGE
GL_CURRENT_VERTEX_ATTRIB = _PyAnyCAD.GL_CURRENT_VERTEX_ATTRIB
GL_FRONT = _PyAnyCAD.GL_FRONT
GL_BACK = _PyAnyCAD.GL_BACK
GL_FRONT_AND_BACK = _PyAnyCAD.GL_FRONT_AND_BACK
GL_TEXTURE_2D = _PyAnyCAD.GL_TEXTURE_2D
GL_CULL_FACE = _PyAnyCAD.GL_CULL_FACE
GL_BLEND = _PyAnyCAD.GL_BLEND
GL_DITHER = _PyAnyCAD.GL_DITHER
GL_STENCIL_TEST = _PyAnyCAD.GL_STENCIL_TEST
GL_DEPTH_TEST = _PyAnyCAD.GL_DEPTH_TEST
GL_SCISSOR_TEST = _PyAnyCAD.GL_SCISSOR_TEST
GL_POLYGON_OFFSET_FILL = _PyAnyCAD.GL_POLYGON_OFFSET_FILL
GL_SAMPLE_ALPHA_TO_COVERAGE = _PyAnyCAD.GL_SAMPLE_ALPHA_TO_COVERAGE
GL_SAMPLE_COVERAGE = _PyAnyCAD.GL_SAMPLE_COVERAGE
GL_INVALID_ENUM = _PyAnyCAD.GL_INVALID_ENUM
GL_INVALID_VALUE = _PyAnyCAD.GL_INVALID_VALUE
GL_INVALID_OPERATION = _PyAnyCAD.GL_INVALID_OPERATION
GL_OUT_OF_MEMORY = _PyAnyCAD.GL_OUT_OF_MEMORY
GL_CW = _PyAnyCAD.GL_CW
GL_CCW = _PyAnyCAD.GL_CCW
GL_LINE_WIDTH = _PyAnyCAD.GL_LINE_WIDTH
GL_ALIASED_POINT_SIZE_RANGE = _PyAnyCAD.GL_ALIASED_POINT_SIZE_RANGE
GL_ALIASED_LINE_WIDTH_RANGE = _PyAnyCAD.GL_ALIASED_LINE_WIDTH_RANGE
GL_CULL_FACE_MODE = _PyAnyCAD.GL_CULL_FACE_MODE
GL_FRONT_FACE = _PyAnyCAD.GL_FRONT_FACE
GL_DEPTH_RANGE = _PyAnyCAD.GL_DEPTH_RANGE
GL_DEPTH_WRITEMASK = _PyAnyCAD.GL_DEPTH_WRITEMASK
GL_DEPTH_CLEAR_VALUE = _PyAnyCAD.GL_DEPTH_CLEAR_VALUE
GL_DEPTH_FUNC = _PyAnyCAD.GL_DEPTH_FUNC
GL_STENCIL_CLEAR_VALUE = _PyAnyCAD.GL_STENCIL_CLEAR_VALUE
GL_STENCIL_FUNC = _PyAnyCAD.GL_STENCIL_FUNC
GL_STENCIL_FAIL = _PyAnyCAD.GL_STENCIL_FAIL
GL_STENCIL_PASS_DEPTH_FAIL = _PyAnyCAD.GL_STENCIL_PASS_DEPTH_FAIL
GL_STENCIL_PASS_DEPTH_PASS = _PyAnyCAD.GL_STENCIL_PASS_DEPTH_PASS
GL_STENCIL_REF = _PyAnyCAD.GL_STENCIL_REF
GL_STENCIL_VALUE_MASK = _PyAnyCAD.GL_STENCIL_VALUE_MASK
GL_STENCIL_WRITEMASK = _PyAnyCAD.GL_STENCIL_WRITEMASK
GL_STENCIL_BACK_FUNC = _PyAnyCAD.GL_STENCIL_BACK_FUNC
GL_STENCIL_BACK_FAIL = _PyAnyCAD.GL_STENCIL_BACK_FAIL
GL_STENCIL_BACK_PASS_DEPTH_FAIL = _PyAnyCAD.GL_STENCIL_BACK_PASS_DEPTH_FAIL
GL_STENCIL_BACK_PASS_DEPTH_PASS = _PyAnyCAD.GL_STENCIL_BACK_PASS_DEPTH_PASS
GL_STENCIL_BACK_REF = _PyAnyCAD.GL_STENCIL_BACK_REF
GL_STENCIL_BACK_VALUE_MASK = _PyAnyCAD.GL_STENCIL_BACK_VALUE_MASK
GL_STENCIL_BACK_WRITEMASK = _PyAnyCAD.GL_STENCIL_BACK_WRITEMASK
GL_VIEWPORT = _PyAnyCAD.GL_VIEWPORT
GL_SCISSOR_BOX = _PyAnyCAD.GL_SCISSOR_BOX
GL_COLOR_CLEAR_VALUE = _PyAnyCAD.GL_COLOR_CLEAR_VALUE
GL_COLOR_WRITEMASK = _PyAnyCAD.GL_COLOR_WRITEMASK
GL_UNPACK_ALIGNMENT = _PyAnyCAD.GL_UNPACK_ALIGNMENT
GL_PACK_ALIGNMENT = _PyAnyCAD.GL_PACK_ALIGNMENT
GL_MAX_TEXTURE_SIZE = _PyAnyCAD.GL_MAX_TEXTURE_SIZE
GL_MAX_VIEWPORT_DIMS = _PyAnyCAD.GL_MAX_VIEWPORT_DIMS
GL_SUBPIXEL_BITS = _PyAnyCAD.GL_SUBPIXEL_BITS
GL_RED_BITS = _PyAnyCAD.GL_RED_BITS
GL_GREEN_BITS = _PyAnyCAD.GL_GREEN_BITS
GL_BLUE_BITS = _PyAnyCAD.GL_BLUE_BITS
GL_ALPHA_BITS = _PyAnyCAD.GL_ALPHA_BITS
GL_DEPTH_BITS = _PyAnyCAD.GL_DEPTH_BITS
GL_STENCIL_BITS = _PyAnyCAD.GL_STENCIL_BITS
GL_POLYGON_OFFSET_UNITS = _PyAnyCAD.GL_POLYGON_OFFSET_UNITS
GL_POLYGON_OFFSET_FACTOR = _PyAnyCAD.GL_POLYGON_OFFSET_FACTOR
GL_TEXTURE_BINDING_2D = _PyAnyCAD.GL_TEXTURE_BINDING_2D
GL_SAMPLE_BUFFERS = _PyAnyCAD.GL_SAMPLE_BUFFERS
GL_SAMPLES = _PyAnyCAD.GL_SAMPLES
GL_SAMPLE_COVERAGE_VALUE = _PyAnyCAD.GL_SAMPLE_COVERAGE_VALUE
GL_SAMPLE_COVERAGE_INVERT = _PyAnyCAD.GL_SAMPLE_COVERAGE_INVERT
GL_NUM_COMPRESSED_TEXTURE_FORMATS = _PyAnyCAD.GL_NUM_COMPRESSED_TEXTURE_FORMATS
GL_COMPRESSED_TEXTURE_FORMATS = _PyAnyCAD.GL_COMPRESSED_TEXTURE_FORMATS
GL_DONT_CARE = _PyAnyCAD.GL_DONT_CARE
GL_FASTEST = _PyAnyCAD.GL_FASTEST
GL_NICEST = _PyAnyCAD.GL_NICEST
GL_GENERATE_MIPMAP_HINT = _PyAnyCAD.GL_GENERATE_MIPMAP_HINT
GL_BYTE = _PyAnyCAD.GL_BYTE
GL_UNSIGNED_BYTE = _PyAnyCAD.GL_UNSIGNED_BYTE
GL_SHORT = _PyAnyCAD.GL_SHORT
GL_UNSIGNED_SHORT = _PyAnyCAD.GL_UNSIGNED_SHORT
GL_INT = _PyAnyCAD.GL_INT
GL_UNSIGNED_INT = _PyAnyCAD.GL_UNSIGNED_INT
GL_FLOAT = _PyAnyCAD.GL_FLOAT
GL_FIXED = _PyAnyCAD.GL_FIXED
GL_DEPTH_COMPONENT = _PyAnyCAD.GL_DEPTH_COMPONENT
GL_ALPHA = _PyAnyCAD.GL_ALPHA
GL_RGB = _PyAnyCAD.GL_RGB
GL_RGBA = _PyAnyCAD.GL_RGBA
GL_LUMINANCE = _PyAnyCAD.GL_LUMINANCE
GL_LUMINANCE_ALPHA = _PyAnyCAD.GL_LUMINANCE_ALPHA
GL_UNSIGNED_SHORT_4_4_4_4 = _PyAnyCAD.GL_UNSIGNED_SHORT_4_4_4_4
GL_UNSIGNED_SHORT_5_5_5_1 = _PyAnyCAD.GL_UNSIGNED_SHORT_5_5_5_1
GL_UNSIGNED_SHORT_5_6_5 = _PyAnyCAD.GL_UNSIGNED_SHORT_5_6_5
GL_FRAGMENT_SHADER = _PyAnyCAD.GL_FRAGMENT_SHADER
GL_VERTEX_SHADER = _PyAnyCAD.GL_VERTEX_SHADER
GL_MAX_VERTEX_ATTRIBS = _PyAnyCAD.GL_MAX_VERTEX_ATTRIBS
GL_MAX_VERTEX_UNIFORM_VECTORS = _PyAnyCAD.GL_MAX_VERTEX_UNIFORM_VECTORS
GL_MAX_VARYING_VECTORS = _PyAnyCAD.GL_MAX_VARYING_VECTORS
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
GL_MAX_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_TEXTURE_IMAGE_UNITS
GL_MAX_FRAGMENT_UNIFORM_VECTORS = _PyAnyCAD.GL_MAX_FRAGMENT_UNIFORM_VECTORS
GL_SHADER_TYPE = _PyAnyCAD.GL_SHADER_TYPE
GL_DELETE_STATUS = _PyAnyCAD.GL_DELETE_STATUS
GL_LINK_STATUS = _PyAnyCAD.GL_LINK_STATUS
GL_VALIDATE_STATUS = _PyAnyCAD.GL_VALIDATE_STATUS
GL_ATTACHED_SHADERS = _PyAnyCAD.GL_ATTACHED_SHADERS
GL_ACTIVE_UNIFORMS = _PyAnyCAD.GL_ACTIVE_UNIFORMS
GL_ACTIVE_UNIFORM_MAX_LENGTH = _PyAnyCAD.GL_ACTIVE_UNIFORM_MAX_LENGTH
GL_ACTIVE_ATTRIBUTES = _PyAnyCAD.GL_ACTIVE_ATTRIBUTES
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = _PyAnyCAD.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
GL_SHADING_LANGUAGE_VERSION = _PyAnyCAD.GL_SHADING_LANGUAGE_VERSION
GL_CURRENT_PROGRAM = _PyAnyCAD.GL_CURRENT_PROGRAM
GL_NEVER = _PyAnyCAD.GL_NEVER
GL_LESS = _PyAnyCAD.GL_LESS
GL_EQUAL = _PyAnyCAD.GL_EQUAL
GL_LEQUAL = _PyAnyCAD.GL_LEQUAL
GL_GREATER = _PyAnyCAD.GL_GREATER
GL_NOTEQUAL = _PyAnyCAD.GL_NOTEQUAL
GL_GEQUAL = _PyAnyCAD.GL_GEQUAL
GL_ALWAYS = _PyAnyCAD.GL_ALWAYS
GL_KEEP = _PyAnyCAD.GL_KEEP
GL_REPLACE = _PyAnyCAD.GL_REPLACE
GL_INCR = _PyAnyCAD.GL_INCR
GL_DECR = _PyAnyCAD.GL_DECR
GL_INVERT = _PyAnyCAD.GL_INVERT
GL_INCR_WRAP = _PyAnyCAD.GL_INCR_WRAP
GL_DECR_WRAP = _PyAnyCAD.GL_DECR_WRAP
GL_VENDOR = _PyAnyCAD.GL_VENDOR
GL_RENDERER = _PyAnyCAD.GL_RENDERER
GL_VERSION = _PyAnyCAD.GL_VERSION
GL_EXTENSIONS = _PyAnyCAD.GL_EXTENSIONS
GL_NEAREST = _PyAnyCAD.GL_NEAREST
GL_LINEAR = _PyAnyCAD.GL_LINEAR
GL_NEAREST_MIPMAP_NEAREST = _PyAnyCAD.GL_NEAREST_MIPMAP_NEAREST
GL_LINEAR_MIPMAP_NEAREST = _PyAnyCAD.GL_LINEAR_MIPMAP_NEAREST
GL_NEAREST_MIPMAP_LINEAR = _PyAnyCAD.GL_NEAREST_MIPMAP_LINEAR
GL_LINEAR_MIPMAP_LINEAR = _PyAnyCAD.GL_LINEAR_MIPMAP_LINEAR
GL_TEXTURE_MAG_FILTER = _PyAnyCAD.GL_TEXTURE_MAG_FILTER
GL_TEXTURE_MIN_FILTER = _PyAnyCAD.GL_TEXTURE_MIN_FILTER
GL_TEXTURE_WRAP_S = _PyAnyCAD.GL_TEXTURE_WRAP_S
GL_TEXTURE_WRAP_T = _PyAnyCAD.GL_TEXTURE_WRAP_T
GL_TEXTURE = _PyAnyCAD.GL_TEXTURE
GL_TEXTURE_CUBE_MAP = _PyAnyCAD.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = _PyAnyCAD.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_MAX_CUBE_MAP_TEXTURE_SIZE = _PyAnyCAD.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_TEXTURE0 = _PyAnyCAD.GL_TEXTURE0
GL_TEXTURE1 = _PyAnyCAD.GL_TEXTURE1
GL_TEXTURE2 = _PyAnyCAD.GL_TEXTURE2
GL_TEXTURE3 = _PyAnyCAD.GL_TEXTURE3
GL_TEXTURE4 = _PyAnyCAD.GL_TEXTURE4
GL_TEXTURE5 = _PyAnyCAD.GL_TEXTURE5
GL_TEXTURE6 = _PyAnyCAD.GL_TEXTURE6
GL_TEXTURE7 = _PyAnyCAD.GL_TEXTURE7
GL_TEXTURE8 = _PyAnyCAD.GL_TEXTURE8
GL_TEXTURE9 = _PyAnyCAD.GL_TEXTURE9
GL_TEXTURE10 = _PyAnyCAD.GL_TEXTURE10
GL_TEXTURE11 = _PyAnyCAD.GL_TEXTURE11
GL_TEXTURE12 = _PyAnyCAD.GL_TEXTURE12
GL_TEXTURE13 = _PyAnyCAD.GL_TEXTURE13
GL_TEXTURE14 = _PyAnyCAD.GL_TEXTURE14
GL_TEXTURE15 = _PyAnyCAD.GL_TEXTURE15
GL_TEXTURE16 = _PyAnyCAD.GL_TEXTURE16
GL_TEXTURE17 = _PyAnyCAD.GL_TEXTURE17
GL_TEXTURE18 = _PyAnyCAD.GL_TEXTURE18
GL_TEXTURE19 = _PyAnyCAD.GL_TEXTURE19
GL_TEXTURE20 = _PyAnyCAD.GL_TEXTURE20
GL_TEXTURE21 = _PyAnyCAD.GL_TEXTURE21
GL_TEXTURE22 = _PyAnyCAD.GL_TEXTURE22
GL_TEXTURE23 = _PyAnyCAD.GL_TEXTURE23
GL_TEXTURE24 = _PyAnyCAD.GL_TEXTURE24
GL_TEXTURE25 = _PyAnyCAD.GL_TEXTURE25
GL_TEXTURE26 = _PyAnyCAD.GL_TEXTURE26
GL_TEXTURE27 = _PyAnyCAD.GL_TEXTURE27
GL_TEXTURE28 = _PyAnyCAD.GL_TEXTURE28
GL_TEXTURE29 = _PyAnyCAD.GL_TEXTURE29
GL_TEXTURE30 = _PyAnyCAD.GL_TEXTURE30
GL_TEXTURE31 = _PyAnyCAD.GL_TEXTURE31
GL_ACTIVE_TEXTURE = _PyAnyCAD.GL_ACTIVE_TEXTURE
GL_REPEAT = _PyAnyCAD.GL_REPEAT
GL_CLAMP_TO_EDGE = _PyAnyCAD.GL_CLAMP_TO_EDGE
GL_MIRRORED_REPEAT = _PyAnyCAD.GL_MIRRORED_REPEAT
GL_FLOAT_VEC2 = _PyAnyCAD.GL_FLOAT_VEC2
GL_FLOAT_VEC3 = _PyAnyCAD.GL_FLOAT_VEC3
GL_FLOAT_VEC4 = _PyAnyCAD.GL_FLOAT_VEC4
GL_INT_VEC2 = _PyAnyCAD.GL_INT_VEC2
GL_INT_VEC3 = _PyAnyCAD.GL_INT_VEC3
GL_INT_VEC4 = _PyAnyCAD.GL_INT_VEC4
GL_BOOL = _PyAnyCAD.GL_BOOL
GL_BOOL_VEC2 = _PyAnyCAD.GL_BOOL_VEC2
GL_BOOL_VEC3 = _PyAnyCAD.GL_BOOL_VEC3
GL_BOOL_VEC4 = _PyAnyCAD.GL_BOOL_VEC4
GL_FLOAT_MAT2 = _PyAnyCAD.GL_FLOAT_MAT2
GL_FLOAT_MAT3 = _PyAnyCAD.GL_FLOAT_MAT3
GL_FLOAT_MAT4 = _PyAnyCAD.GL_FLOAT_MAT4
GL_SAMPLER_2D = _PyAnyCAD.GL_SAMPLER_2D
GL_SAMPLER_CUBE = _PyAnyCAD.GL_SAMPLER_CUBE
GL_VERTEX_ATTRIB_ARRAY_ENABLED = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_ENABLED
GL_VERTEX_ATTRIB_ARRAY_SIZE = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_SIZE
GL_VERTEX_ATTRIB_ARRAY_STRIDE = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_STRIDE
GL_VERTEX_ATTRIB_ARRAY_TYPE = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_TYPE
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
GL_VERTEX_ATTRIB_ARRAY_POINTER = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_POINTER
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
GL_IMPLEMENTATION_COLOR_READ_TYPE = _PyAnyCAD.GL_IMPLEMENTATION_COLOR_READ_TYPE
GL_IMPLEMENTATION_COLOR_READ_FORMAT = _PyAnyCAD.GL_IMPLEMENTATION_COLOR_READ_FORMAT
GL_COMPILE_STATUS = _PyAnyCAD.GL_COMPILE_STATUS
GL_INFO_LOG_LENGTH = _PyAnyCAD.GL_INFO_LOG_LENGTH
GL_SHADER_SOURCE_LENGTH = _PyAnyCAD.GL_SHADER_SOURCE_LENGTH
GL_SHADER_COMPILER = _PyAnyCAD.GL_SHADER_COMPILER
GL_SHADER_BINARY_FORMATS = _PyAnyCAD.GL_SHADER_BINARY_FORMATS
GL_NUM_SHADER_BINARY_FORMATS = _PyAnyCAD.GL_NUM_SHADER_BINARY_FORMATS
GL_LOW_FLOAT = _PyAnyCAD.GL_LOW_FLOAT
GL_MEDIUM_FLOAT = _PyAnyCAD.GL_MEDIUM_FLOAT
GL_HIGH_FLOAT = _PyAnyCAD.GL_HIGH_FLOAT
GL_LOW_INT = _PyAnyCAD.GL_LOW_INT
GL_MEDIUM_INT = _PyAnyCAD.GL_MEDIUM_INT
GL_HIGH_INT = _PyAnyCAD.GL_HIGH_INT
GL_FRAMEBUFFER = _PyAnyCAD.GL_FRAMEBUFFER
GL_RENDERBUFFER = _PyAnyCAD.GL_RENDERBUFFER
GL_RGBA4 = _PyAnyCAD.GL_RGBA4
GL_RGB5_A1 = _PyAnyCAD.GL_RGB5_A1
GL_RGB565 = _PyAnyCAD.GL_RGB565
GL_DEPTH_COMPONENT16 = _PyAnyCAD.GL_DEPTH_COMPONENT16
GL_STENCIL_INDEX8 = _PyAnyCAD.GL_STENCIL_INDEX8
GL_RENDERBUFFER_WIDTH = _PyAnyCAD.GL_RENDERBUFFER_WIDTH
GL_RENDERBUFFER_HEIGHT = _PyAnyCAD.GL_RENDERBUFFER_HEIGHT
GL_RENDERBUFFER_INTERNAL_FORMAT = _PyAnyCAD.GL_RENDERBUFFER_INTERNAL_FORMAT
GL_RENDERBUFFER_RED_SIZE = _PyAnyCAD.GL_RENDERBUFFER_RED_SIZE
GL_RENDERBUFFER_GREEN_SIZE = _PyAnyCAD.GL_RENDERBUFFER_GREEN_SIZE
GL_RENDERBUFFER_BLUE_SIZE = _PyAnyCAD.GL_RENDERBUFFER_BLUE_SIZE
GL_RENDERBUFFER_ALPHA_SIZE = _PyAnyCAD.GL_RENDERBUFFER_ALPHA_SIZE
GL_RENDERBUFFER_DEPTH_SIZE = _PyAnyCAD.GL_RENDERBUFFER_DEPTH_SIZE
GL_RENDERBUFFER_STENCIL_SIZE = _PyAnyCAD.GL_RENDERBUFFER_STENCIL_SIZE
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
GL_COLOR_ATTACHMENT0 = _PyAnyCAD.GL_COLOR_ATTACHMENT0
GL_DEPTH_ATTACHMENT = _PyAnyCAD.GL_DEPTH_ATTACHMENT
GL_STENCIL_ATTACHMENT = _PyAnyCAD.GL_STENCIL_ATTACHMENT
GL_FRAMEBUFFER_COMPLETE = _PyAnyCAD.GL_FRAMEBUFFER_COMPLETE
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
GL_FRAMEBUFFER_UNSUPPORTED = _PyAnyCAD.GL_FRAMEBUFFER_UNSUPPORTED
GL_FRAMEBUFFER_BINDING = _PyAnyCAD.GL_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_BINDING = _PyAnyCAD.GL_RENDERBUFFER_BINDING
GL_MAX_RENDERBUFFER_SIZE = _PyAnyCAD.GL_MAX_RENDERBUFFER_SIZE
GL_INVALID_FRAMEBUFFER_OPERATION = _PyAnyCAD.GL_INVALID_FRAMEBUFFER_OPERATION
GL_READ_BUFFER = _PyAnyCAD.GL_READ_BUFFER
GL_UNPACK_ROW_LENGTH = _PyAnyCAD.GL_UNPACK_ROW_LENGTH
GL_UNPACK_SKIP_ROWS = _PyAnyCAD.GL_UNPACK_SKIP_ROWS
GL_UNPACK_SKIP_PIXELS = _PyAnyCAD.GL_UNPACK_SKIP_PIXELS
GL_PACK_ROW_LENGTH = _PyAnyCAD.GL_PACK_ROW_LENGTH
GL_PACK_SKIP_ROWS = _PyAnyCAD.GL_PACK_SKIP_ROWS
GL_PACK_SKIP_PIXELS = _PyAnyCAD.GL_PACK_SKIP_PIXELS
GL_COLOR = _PyAnyCAD.GL_COLOR
GL_DEPTH = _PyAnyCAD.GL_DEPTH
GL_STENCIL = _PyAnyCAD.GL_STENCIL
GL_RED = _PyAnyCAD.GL_RED
GL_RGB8 = _PyAnyCAD.GL_RGB8
GL_RGBA8 = _PyAnyCAD.GL_RGBA8
GL_RGB10_A2 = _PyAnyCAD.GL_RGB10_A2
GL_TEXTURE_BINDING_3D = _PyAnyCAD.GL_TEXTURE_BINDING_3D
GL_UNPACK_SKIP_IMAGES = _PyAnyCAD.GL_UNPACK_SKIP_IMAGES
GL_UNPACK_IMAGE_HEIGHT = _PyAnyCAD.GL_UNPACK_IMAGE_HEIGHT
GL_TEXTURE_3D = _PyAnyCAD.GL_TEXTURE_3D
GL_TEXTURE_WRAP_R = _PyAnyCAD.GL_TEXTURE_WRAP_R
GL_MAX_3D_TEXTURE_SIZE = _PyAnyCAD.GL_MAX_3D_TEXTURE_SIZE
GL_UNSIGNED_INT_2_10_10_10_REV = _PyAnyCAD.GL_UNSIGNED_INT_2_10_10_10_REV
GL_MAX_ELEMENTS_VERTICES = _PyAnyCAD.GL_MAX_ELEMENTS_VERTICES
GL_MAX_ELEMENTS_INDICES = _PyAnyCAD.GL_MAX_ELEMENTS_INDICES
GL_TEXTURE_MIN_LOD = _PyAnyCAD.GL_TEXTURE_MIN_LOD
GL_TEXTURE_MAX_LOD = _PyAnyCAD.GL_TEXTURE_MAX_LOD
GL_TEXTURE_BASE_LEVEL = _PyAnyCAD.GL_TEXTURE_BASE_LEVEL
GL_TEXTURE_MAX_LEVEL = _PyAnyCAD.GL_TEXTURE_MAX_LEVEL
GL_MIN = _PyAnyCAD.GL_MIN
GL_MAX = _PyAnyCAD.GL_MAX
GL_DEPTH_COMPONENT24 = _PyAnyCAD.GL_DEPTH_COMPONENT24
GL_MAX_TEXTURE_LOD_BIAS = _PyAnyCAD.GL_MAX_TEXTURE_LOD_BIAS
GL_TEXTURE_COMPARE_MODE = _PyAnyCAD.GL_TEXTURE_COMPARE_MODE
GL_TEXTURE_COMPARE_FUNC = _PyAnyCAD.GL_TEXTURE_COMPARE_FUNC
GL_CURRENT_QUERY = _PyAnyCAD.GL_CURRENT_QUERY
GL_QUERY_RESULT = _PyAnyCAD.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = _PyAnyCAD.GL_QUERY_RESULT_AVAILABLE
GL_BUFFER_MAPPED = _PyAnyCAD.GL_BUFFER_MAPPED
GL_BUFFER_MAP_POINTER = _PyAnyCAD.GL_BUFFER_MAP_POINTER
GL_STREAM_READ = _PyAnyCAD.GL_STREAM_READ
GL_STREAM_COPY = _PyAnyCAD.GL_STREAM_COPY
GL_STATIC_READ = _PyAnyCAD.GL_STATIC_READ
GL_STATIC_COPY = _PyAnyCAD.GL_STATIC_COPY
GL_DYNAMIC_READ = _PyAnyCAD.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = _PyAnyCAD.GL_DYNAMIC_COPY
GL_MAX_DRAW_BUFFERS = _PyAnyCAD.GL_MAX_DRAW_BUFFERS
GL_DRAW_BUFFER0 = _PyAnyCAD.GL_DRAW_BUFFER0
GL_DRAW_BUFFER1 = _PyAnyCAD.GL_DRAW_BUFFER1
GL_DRAW_BUFFER2 = _PyAnyCAD.GL_DRAW_BUFFER2
GL_DRAW_BUFFER3 = _PyAnyCAD.GL_DRAW_BUFFER3
GL_DRAW_BUFFER4 = _PyAnyCAD.GL_DRAW_BUFFER4
GL_DRAW_BUFFER5 = _PyAnyCAD.GL_DRAW_BUFFER5
GL_DRAW_BUFFER6 = _PyAnyCAD.GL_DRAW_BUFFER6
GL_DRAW_BUFFER7 = _PyAnyCAD.GL_DRAW_BUFFER7
GL_DRAW_BUFFER8 = _PyAnyCAD.GL_DRAW_BUFFER8
GL_DRAW_BUFFER9 = _PyAnyCAD.GL_DRAW_BUFFER9
GL_DRAW_BUFFER10 = _PyAnyCAD.GL_DRAW_BUFFER10
GL_DRAW_BUFFER11 = _PyAnyCAD.GL_DRAW_BUFFER11
GL_DRAW_BUFFER12 = _PyAnyCAD.GL_DRAW_BUFFER12
GL_DRAW_BUFFER13 = _PyAnyCAD.GL_DRAW_BUFFER13
GL_DRAW_BUFFER14 = _PyAnyCAD.GL_DRAW_BUFFER14
GL_DRAW_BUFFER15 = _PyAnyCAD.GL_DRAW_BUFFER15
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
GL_MAX_VERTEX_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_VERTEX_UNIFORM_COMPONENTS
GL_SAMPLER_3D = _PyAnyCAD.GL_SAMPLER_3D
GL_SAMPLER_2D_SHADOW = _PyAnyCAD.GL_SAMPLER_2D_SHADOW
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = _PyAnyCAD.GL_FRAGMENT_SHADER_DERIVATIVE_HINT
GL_PIXEL_PACK_BUFFER = _PyAnyCAD.GL_PIXEL_PACK_BUFFER
GL_PIXEL_UNPACK_BUFFER = _PyAnyCAD.GL_PIXEL_UNPACK_BUFFER
GL_PIXEL_PACK_BUFFER_BINDING = _PyAnyCAD.GL_PIXEL_PACK_BUFFER_BINDING
GL_PIXEL_UNPACK_BUFFER_BINDING = _PyAnyCAD.GL_PIXEL_UNPACK_BUFFER_BINDING
GL_FLOAT_MAT2x3 = _PyAnyCAD.GL_FLOAT_MAT2x3
GL_FLOAT_MAT2x4 = _PyAnyCAD.GL_FLOAT_MAT2x4
GL_FLOAT_MAT3x2 = _PyAnyCAD.GL_FLOAT_MAT3x2
GL_FLOAT_MAT3x4 = _PyAnyCAD.GL_FLOAT_MAT3x4
GL_FLOAT_MAT4x2 = _PyAnyCAD.GL_FLOAT_MAT4x2
GL_FLOAT_MAT4x3 = _PyAnyCAD.GL_FLOAT_MAT4x3
GL_SRGB = _PyAnyCAD.GL_SRGB
GL_SRGB8 = _PyAnyCAD.GL_SRGB8
GL_SRGB8_ALPHA8 = _PyAnyCAD.GL_SRGB8_ALPHA8
GL_COMPARE_REF_TO_TEXTURE = _PyAnyCAD.GL_COMPARE_REF_TO_TEXTURE
GL_MAJOR_VERSION = _PyAnyCAD.GL_MAJOR_VERSION
GL_MINOR_VERSION = _PyAnyCAD.GL_MINOR_VERSION
GL_NUM_EXTENSIONS = _PyAnyCAD.GL_NUM_EXTENSIONS
GL_RGBA32F = _PyAnyCAD.GL_RGBA32F
GL_RGB32F = _PyAnyCAD.GL_RGB32F
GL_RGBA16F = _PyAnyCAD.GL_RGBA16F
GL_RGB16F = _PyAnyCAD.GL_RGB16F
GL_VERTEX_ATTRIB_ARRAY_INTEGER = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_INTEGER
GL_MAX_ARRAY_TEXTURE_LAYERS = _PyAnyCAD.GL_MAX_ARRAY_TEXTURE_LAYERS
GL_MIN_PROGRAM_TEXEL_OFFSET = _PyAnyCAD.GL_MIN_PROGRAM_TEXEL_OFFSET
GL_MAX_PROGRAM_TEXEL_OFFSET = _PyAnyCAD.GL_MAX_PROGRAM_TEXEL_OFFSET
GL_MAX_VARYING_COMPONENTS = _PyAnyCAD.GL_MAX_VARYING_COMPONENTS
GL_TEXTURE_2D_ARRAY = _PyAnyCAD.GL_TEXTURE_2D_ARRAY
GL_TEXTURE_BINDING_2D_ARRAY = _PyAnyCAD.GL_TEXTURE_BINDING_2D_ARRAY
GL_R11F_G11F_B10F = _PyAnyCAD.GL_R11F_G11F_B10F
GL_UNSIGNED_INT_10F_11F_11F_REV = _PyAnyCAD.GL_UNSIGNED_INT_10F_11F_11F_REV
GL_RGB9_E5 = _PyAnyCAD.GL_RGB9_E5
GL_UNSIGNED_INT_5_9_9_9_REV = _PyAnyCAD.GL_UNSIGNED_INT_5_9_9_9_REV
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
GL_TRANSFORM_FEEDBACK_BUFFER_MODE = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_MODE
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = _PyAnyCAD.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
GL_TRANSFORM_FEEDBACK_VARYINGS = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_VARYINGS
GL_TRANSFORM_FEEDBACK_BUFFER_START = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_START
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
GL_RASTERIZER_DISCARD = _PyAnyCAD.GL_RASTERIZER_DISCARD
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = _PyAnyCAD.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = _PyAnyCAD.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
GL_INTERLEAVED_ATTRIBS = _PyAnyCAD.GL_INTERLEAVED_ATTRIBS
GL_SEPARATE_ATTRIBS = _PyAnyCAD.GL_SEPARATE_ATTRIBS
GL_TRANSFORM_FEEDBACK_BUFFER = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
GL_RGBA32UI = _PyAnyCAD.GL_RGBA32UI
GL_RGB32UI = _PyAnyCAD.GL_RGB32UI
GL_RGBA16UI = _PyAnyCAD.GL_RGBA16UI
GL_RGB16UI = _PyAnyCAD.GL_RGB16UI
GL_RGBA8UI = _PyAnyCAD.GL_RGBA8UI
GL_RGB8UI = _PyAnyCAD.GL_RGB8UI
GL_RGBA32I = _PyAnyCAD.GL_RGBA32I
GL_RGB32I = _PyAnyCAD.GL_RGB32I
GL_RGBA16I = _PyAnyCAD.GL_RGBA16I
GL_RGB16I = _PyAnyCAD.GL_RGB16I
GL_RGBA8I = _PyAnyCAD.GL_RGBA8I
GL_RGB8I = _PyAnyCAD.GL_RGB8I
GL_RED_INTEGER = _PyAnyCAD.GL_RED_INTEGER
GL_RGB_INTEGER = _PyAnyCAD.GL_RGB_INTEGER
GL_RGBA_INTEGER = _PyAnyCAD.GL_RGBA_INTEGER
GL_SAMPLER_2D_ARRAY = _PyAnyCAD.GL_SAMPLER_2D_ARRAY
GL_SAMPLER_2D_ARRAY_SHADOW = _PyAnyCAD.GL_SAMPLER_2D_ARRAY_SHADOW
GL_SAMPLER_CUBE_SHADOW = _PyAnyCAD.GL_SAMPLER_CUBE_SHADOW
GL_UNSIGNED_INT_VEC2 = _PyAnyCAD.GL_UNSIGNED_INT_VEC2
GL_UNSIGNED_INT_VEC3 = _PyAnyCAD.GL_UNSIGNED_INT_VEC3
GL_UNSIGNED_INT_VEC4 = _PyAnyCAD.GL_UNSIGNED_INT_VEC4
GL_INT_SAMPLER_2D = _PyAnyCAD.GL_INT_SAMPLER_2D
GL_INT_SAMPLER_3D = _PyAnyCAD.GL_INT_SAMPLER_3D
GL_INT_SAMPLER_CUBE = _PyAnyCAD.GL_INT_SAMPLER_CUBE
GL_INT_SAMPLER_2D_ARRAY = _PyAnyCAD.GL_INT_SAMPLER_2D_ARRAY
GL_UNSIGNED_INT_SAMPLER_2D = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D
GL_UNSIGNED_INT_SAMPLER_3D = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_3D
GL_UNSIGNED_INT_SAMPLER_CUBE = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_CUBE
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
GL_BUFFER_ACCESS_FLAGS = _PyAnyCAD.GL_BUFFER_ACCESS_FLAGS
GL_BUFFER_MAP_LENGTH = _PyAnyCAD.GL_BUFFER_MAP_LENGTH
GL_BUFFER_MAP_OFFSET = _PyAnyCAD.GL_BUFFER_MAP_OFFSET
GL_DEPTH_COMPONENT32F = _PyAnyCAD.GL_DEPTH_COMPONENT32F
GL_DEPTH32F_STENCIL8 = _PyAnyCAD.GL_DEPTH32F_STENCIL8
GL_FLOAT_32_UNSIGNED_INT_24_8_REV = _PyAnyCAD.GL_FLOAT_32_UNSIGNED_INT_24_8_REV
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
GL_FRAMEBUFFER_DEFAULT = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT
GL_FRAMEBUFFER_UNDEFINED = _PyAnyCAD.GL_FRAMEBUFFER_UNDEFINED
GL_DEPTH_STENCIL_ATTACHMENT = _PyAnyCAD.GL_DEPTH_STENCIL_ATTACHMENT
GL_DEPTH_STENCIL = _PyAnyCAD.GL_DEPTH_STENCIL
GL_UNSIGNED_INT_24_8 = _PyAnyCAD.GL_UNSIGNED_INT_24_8
GL_DEPTH24_STENCIL8 = _PyAnyCAD.GL_DEPTH24_STENCIL8
GL_UNSIGNED_NORMALIZED = _PyAnyCAD.GL_UNSIGNED_NORMALIZED
GL_DRAW_FRAMEBUFFER_BINDING = _PyAnyCAD.GL_DRAW_FRAMEBUFFER_BINDING
GL_READ_FRAMEBUFFER = _PyAnyCAD.GL_READ_FRAMEBUFFER
GL_DRAW_FRAMEBUFFER = _PyAnyCAD.GL_DRAW_FRAMEBUFFER
GL_READ_FRAMEBUFFER_BINDING = _PyAnyCAD.GL_READ_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_SAMPLES = _PyAnyCAD.GL_RENDERBUFFER_SAMPLES
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
GL_MAX_COLOR_ATTACHMENTS = _PyAnyCAD.GL_MAX_COLOR_ATTACHMENTS
GL_COLOR_ATTACHMENT1 = _PyAnyCAD.GL_COLOR_ATTACHMENT1
GL_COLOR_ATTACHMENT2 = _PyAnyCAD.GL_COLOR_ATTACHMENT2
GL_COLOR_ATTACHMENT3 = _PyAnyCAD.GL_COLOR_ATTACHMENT3
GL_COLOR_ATTACHMENT4 = _PyAnyCAD.GL_COLOR_ATTACHMENT4
GL_COLOR_ATTACHMENT5 = _PyAnyCAD.GL_COLOR_ATTACHMENT5
GL_COLOR_ATTACHMENT6 = _PyAnyCAD.GL_COLOR_ATTACHMENT6
GL_COLOR_ATTACHMENT7 = _PyAnyCAD.GL_COLOR_ATTACHMENT7
GL_COLOR_ATTACHMENT8 = _PyAnyCAD.GL_COLOR_ATTACHMENT8
GL_COLOR_ATTACHMENT9 = _PyAnyCAD.GL_COLOR_ATTACHMENT9
GL_COLOR_ATTACHMENT10 = _PyAnyCAD.GL_COLOR_ATTACHMENT10
GL_COLOR_ATTACHMENT11 = _PyAnyCAD.GL_COLOR_ATTACHMENT11
GL_COLOR_ATTACHMENT12 = _PyAnyCAD.GL_COLOR_ATTACHMENT12
GL_COLOR_ATTACHMENT13 = _PyAnyCAD.GL_COLOR_ATTACHMENT13
GL_COLOR_ATTACHMENT14 = _PyAnyCAD.GL_COLOR_ATTACHMENT14
GL_COLOR_ATTACHMENT15 = _PyAnyCAD.GL_COLOR_ATTACHMENT15
GL_COLOR_ATTACHMENT16 = _PyAnyCAD.GL_COLOR_ATTACHMENT16
GL_COLOR_ATTACHMENT17 = _PyAnyCAD.GL_COLOR_ATTACHMENT17
GL_COLOR_ATTACHMENT18 = _PyAnyCAD.GL_COLOR_ATTACHMENT18
GL_COLOR_ATTACHMENT19 = _PyAnyCAD.GL_COLOR_ATTACHMENT19
GL_COLOR_ATTACHMENT20 = _PyAnyCAD.GL_COLOR_ATTACHMENT20
GL_COLOR_ATTACHMENT21 = _PyAnyCAD.GL_COLOR_ATTACHMENT21
GL_COLOR_ATTACHMENT22 = _PyAnyCAD.GL_COLOR_ATTACHMENT22
GL_COLOR_ATTACHMENT23 = _PyAnyCAD.GL_COLOR_ATTACHMENT23
GL_COLOR_ATTACHMENT24 = _PyAnyCAD.GL_COLOR_ATTACHMENT24
GL_COLOR_ATTACHMENT25 = _PyAnyCAD.GL_COLOR_ATTACHMENT25
GL_COLOR_ATTACHMENT26 = _PyAnyCAD.GL_COLOR_ATTACHMENT26
GL_COLOR_ATTACHMENT27 = _PyAnyCAD.GL_COLOR_ATTACHMENT27
GL_COLOR_ATTACHMENT28 = _PyAnyCAD.GL_COLOR_ATTACHMENT28
GL_COLOR_ATTACHMENT29 = _PyAnyCAD.GL_COLOR_ATTACHMENT29
GL_COLOR_ATTACHMENT30 = _PyAnyCAD.GL_COLOR_ATTACHMENT30
GL_COLOR_ATTACHMENT31 = _PyAnyCAD.GL_COLOR_ATTACHMENT31
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
GL_MAX_SAMPLES = _PyAnyCAD.GL_MAX_SAMPLES
GL_HALF_FLOAT = _PyAnyCAD.GL_HALF_FLOAT
GL_MAP_READ_BIT = _PyAnyCAD.GL_MAP_READ_BIT
GL_MAP_WRITE_BIT = _PyAnyCAD.GL_MAP_WRITE_BIT
GL_MAP_INVALIDATE_RANGE_BIT = _PyAnyCAD.GL_MAP_INVALIDATE_RANGE_BIT
GL_MAP_INVALIDATE_BUFFER_BIT = _PyAnyCAD.GL_MAP_INVALIDATE_BUFFER_BIT
GL_MAP_FLUSH_EXPLICIT_BIT = _PyAnyCAD.GL_MAP_FLUSH_EXPLICIT_BIT
GL_MAP_UNSYNCHRONIZED_BIT = _PyAnyCAD.GL_MAP_UNSYNCHRONIZED_BIT
GL_RG = _PyAnyCAD.GL_RG
GL_RG_INTEGER = _PyAnyCAD.GL_RG_INTEGER
GL_R8 = _PyAnyCAD.GL_R8
GL_RG8 = _PyAnyCAD.GL_RG8
GL_R16F = _PyAnyCAD.GL_R16F
GL_R32F = _PyAnyCAD.GL_R32F
GL_RG16F = _PyAnyCAD.GL_RG16F
GL_RG32F = _PyAnyCAD.GL_RG32F
GL_R8I = _PyAnyCAD.GL_R8I
GL_R8UI = _PyAnyCAD.GL_R8UI
GL_R16I = _PyAnyCAD.GL_R16I
GL_R16UI = _PyAnyCAD.GL_R16UI
GL_R32I = _PyAnyCAD.GL_R32I
GL_R32UI = _PyAnyCAD.GL_R32UI
GL_RG8I = _PyAnyCAD.GL_RG8I
GL_RG8UI = _PyAnyCAD.GL_RG8UI
GL_RG16I = _PyAnyCAD.GL_RG16I
GL_RG16UI = _PyAnyCAD.GL_RG16UI
GL_RG32I = _PyAnyCAD.GL_RG32I
GL_RG32UI = _PyAnyCAD.GL_RG32UI
GL_VERTEX_ARRAY_BINDING = _PyAnyCAD.GL_VERTEX_ARRAY_BINDING
GL_R8_SNORM = _PyAnyCAD.GL_R8_SNORM
GL_RG8_SNORM = _PyAnyCAD.GL_RG8_SNORM
GL_RGB8_SNORM = _PyAnyCAD.GL_RGB8_SNORM
GL_RGBA8_SNORM = _PyAnyCAD.GL_RGBA8_SNORM
GL_SIGNED_NORMALIZED = _PyAnyCAD.GL_SIGNED_NORMALIZED
GL_PRIMITIVE_RESTART_FIXED_INDEX = _PyAnyCAD.GL_PRIMITIVE_RESTART_FIXED_INDEX
GL_COPY_READ_BUFFER = _PyAnyCAD.GL_COPY_READ_BUFFER
GL_COPY_WRITE_BUFFER = _PyAnyCAD.GL_COPY_WRITE_BUFFER
GL_COPY_READ_BUFFER_BINDING = _PyAnyCAD.GL_COPY_READ_BUFFER_BINDING
GL_COPY_WRITE_BUFFER_BINDING = _PyAnyCAD.GL_COPY_WRITE_BUFFER_BINDING
GL_UNIFORM_BUFFER = _PyAnyCAD.GL_UNIFORM_BUFFER
GL_UNIFORM_BUFFER_BINDING = _PyAnyCAD.GL_UNIFORM_BUFFER_BINDING
GL_UNIFORM_BUFFER_START = _PyAnyCAD.GL_UNIFORM_BUFFER_START
GL_UNIFORM_BUFFER_SIZE = _PyAnyCAD.GL_UNIFORM_BUFFER_SIZE
GL_MAX_VERTEX_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_VERTEX_UNIFORM_BLOCKS
GL_MAX_FRAGMENT_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_FRAGMENT_UNIFORM_BLOCKS
GL_MAX_COMBINED_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_COMBINED_UNIFORM_BLOCKS
GL_MAX_UNIFORM_BUFFER_BINDINGS = _PyAnyCAD.GL_MAX_UNIFORM_BUFFER_BINDINGS
GL_MAX_UNIFORM_BLOCK_SIZE = _PyAnyCAD.GL_MAX_UNIFORM_BLOCK_SIZE
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = _PyAnyCAD.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = _PyAnyCAD.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
GL_ACTIVE_UNIFORM_BLOCKS = _PyAnyCAD.GL_ACTIVE_UNIFORM_BLOCKS
GL_UNIFORM_TYPE = _PyAnyCAD.GL_UNIFORM_TYPE
GL_UNIFORM_SIZE = _PyAnyCAD.GL_UNIFORM_SIZE
GL_UNIFORM_NAME_LENGTH = _PyAnyCAD.GL_UNIFORM_NAME_LENGTH
GL_UNIFORM_BLOCK_INDEX = _PyAnyCAD.GL_UNIFORM_BLOCK_INDEX
GL_UNIFORM_OFFSET = _PyAnyCAD.GL_UNIFORM_OFFSET
GL_UNIFORM_ARRAY_STRIDE = _PyAnyCAD.GL_UNIFORM_ARRAY_STRIDE
GL_UNIFORM_MATRIX_STRIDE = _PyAnyCAD.GL_UNIFORM_MATRIX_STRIDE
GL_UNIFORM_IS_ROW_MAJOR = _PyAnyCAD.GL_UNIFORM_IS_ROW_MAJOR
GL_UNIFORM_BLOCK_BINDING = _PyAnyCAD.GL_UNIFORM_BLOCK_BINDING
GL_UNIFORM_BLOCK_DATA_SIZE = _PyAnyCAD.GL_UNIFORM_BLOCK_DATA_SIZE
GL_UNIFORM_BLOCK_NAME_LENGTH = _PyAnyCAD.GL_UNIFORM_BLOCK_NAME_LENGTH
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = _PyAnyCAD.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = _PyAnyCAD.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = _PyAnyCAD.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = _PyAnyCAD.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
GL_INVALID_INDEX = _PyAnyCAD.GL_INVALID_INDEX
GL_MAX_VERTEX_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_VERTEX_OUTPUT_COMPONENTS
GL_MAX_FRAGMENT_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_FRAGMENT_INPUT_COMPONENTS
GL_MAX_SERVER_WAIT_TIMEOUT = _PyAnyCAD.GL_MAX_SERVER_WAIT_TIMEOUT
GL_OBJECT_TYPE = _PyAnyCAD.GL_OBJECT_TYPE
GL_SYNC_CONDITION = _PyAnyCAD.GL_SYNC_CONDITION
GL_SYNC_STATUS = _PyAnyCAD.GL_SYNC_STATUS
GL_SYNC_FLAGS = _PyAnyCAD.GL_SYNC_FLAGS
GL_SYNC_FENCE = _PyAnyCAD.GL_SYNC_FENCE
GL_SYNC_GPU_COMMANDS_COMPLETE = _PyAnyCAD.GL_SYNC_GPU_COMMANDS_COMPLETE
GL_UNSIGNALED = _PyAnyCAD.GL_UNSIGNALED
GL_SIGNALED = _PyAnyCAD.GL_SIGNALED
GL_ALREADY_SIGNALED = _PyAnyCAD.GL_ALREADY_SIGNALED
GL_TIMEOUT_EXPIRED = _PyAnyCAD.GL_TIMEOUT_EXPIRED
GL_CONDITION_SATISFIED = _PyAnyCAD.GL_CONDITION_SATISFIED
GL_WAIT_FAILED = _PyAnyCAD.GL_WAIT_FAILED
GL_SYNC_FLUSH_COMMANDS_BIT = _PyAnyCAD.GL_SYNC_FLUSH_COMMANDS_BIT
GL_TIMEOUT_IGNORED = _PyAnyCAD.GL_TIMEOUT_IGNORED
GL_VERTEX_ATTRIB_ARRAY_DIVISOR = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_DIVISOR
GL_ANY_SAMPLES_PASSED = _PyAnyCAD.GL_ANY_SAMPLES_PASSED
GL_ANY_SAMPLES_PASSED_CONSERVATIVE = _PyAnyCAD.GL_ANY_SAMPLES_PASSED_CONSERVATIVE
GL_SAMPLER_BINDING = _PyAnyCAD.GL_SAMPLER_BINDING
GL_RGB10_A2UI = _PyAnyCAD.GL_RGB10_A2UI
GL_TEXTURE_SWIZZLE_R = _PyAnyCAD.GL_TEXTURE_SWIZZLE_R
GL_TEXTURE_SWIZZLE_G = _PyAnyCAD.GL_TEXTURE_SWIZZLE_G
GL_TEXTURE_SWIZZLE_B = _PyAnyCAD.GL_TEXTURE_SWIZZLE_B
GL_TEXTURE_SWIZZLE_A = _PyAnyCAD.GL_TEXTURE_SWIZZLE_A
GL_GREEN = _PyAnyCAD.GL_GREEN
GL_BLUE = _PyAnyCAD.GL_BLUE
GL_INT_2_10_10_10_REV = _PyAnyCAD.GL_INT_2_10_10_10_REV
GL_TRANSFORM_FEEDBACK = _PyAnyCAD.GL_TRANSFORM_FEEDBACK
GL_TRANSFORM_FEEDBACK_PAUSED = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_PAUSED
GL_TRANSFORM_FEEDBACK_ACTIVE = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_ACTIVE
GL_TRANSFORM_FEEDBACK_BINDING = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BINDING
GL_PROGRAM_BINARY_RETRIEVABLE_HINT = _PyAnyCAD.GL_PROGRAM_BINARY_RETRIEVABLE_HINT
GL_PROGRAM_BINARY_LENGTH = _PyAnyCAD.GL_PROGRAM_BINARY_LENGTH
GL_NUM_PROGRAM_BINARY_FORMATS = _PyAnyCAD.GL_NUM_PROGRAM_BINARY_FORMATS
GL_PROGRAM_BINARY_FORMATS = _PyAnyCAD.GL_PROGRAM_BINARY_FORMATS
GL_COMPRESSED_R11_EAC = _PyAnyCAD.GL_COMPRESSED_R11_EAC
GL_COMPRESSED_SIGNED_R11_EAC = _PyAnyCAD.GL_COMPRESSED_SIGNED_R11_EAC
GL_COMPRESSED_RG11_EAC = _PyAnyCAD.GL_COMPRESSED_RG11_EAC
GL_COMPRESSED_SIGNED_RG11_EAC = _PyAnyCAD.GL_COMPRESSED_SIGNED_RG11_EAC
GL_COMPRESSED_RGB8_ETC2 = _PyAnyCAD.GL_COMPRESSED_RGB8_ETC2
GL_COMPRESSED_SRGB8_ETC2 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ETC2
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = _PyAnyCAD.GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = _PyAnyCAD.GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
GL_COMPRESSED_RGBA8_ETC2_EAC = _PyAnyCAD.GL_COMPRESSED_RGBA8_ETC2_EAC
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
GL_TEXTURE_IMMUTABLE_FORMAT = _PyAnyCAD.GL_TEXTURE_IMMUTABLE_FORMAT
GL_MAX_ELEMENT_INDEX = _PyAnyCAD.GL_MAX_ELEMENT_INDEX
GL_NUM_SAMPLE_COUNTS = _PyAnyCAD.GL_NUM_SAMPLE_COUNTS
GL_TEXTURE_IMMUTABLE_LEVELS = _PyAnyCAD.GL_TEXTURE_IMMUTABLE_LEVELS
GL_COMPUTE_SHADER = _PyAnyCAD.GL_COMPUTE_SHADER
GL_MAX_COMPUTE_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_COMPUTE_UNIFORM_BLOCKS
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
GL_MAX_COMPUTE_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_COMPUTE_IMAGE_UNIFORMS
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = _PyAnyCAD.GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
GL_MAX_COMPUTE_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMPUTE_UNIFORM_COMPONENTS
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
GL_MAX_COMPUTE_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_COMPUTE_ATOMIC_COUNTERS
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = _PyAnyCAD.GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
GL_MAX_COMPUTE_WORK_GROUP_COUNT = _PyAnyCAD.GL_MAX_COMPUTE_WORK_GROUP_COUNT
GL_MAX_COMPUTE_WORK_GROUP_SIZE = _PyAnyCAD.GL_MAX_COMPUTE_WORK_GROUP_SIZE
GL_COMPUTE_WORK_GROUP_SIZE = _PyAnyCAD.GL_COMPUTE_WORK_GROUP_SIZE
GL_DISPATCH_INDIRECT_BUFFER = _PyAnyCAD.GL_DISPATCH_INDIRECT_BUFFER
GL_DISPATCH_INDIRECT_BUFFER_BINDING = _PyAnyCAD.GL_DISPATCH_INDIRECT_BUFFER_BINDING
GL_COMPUTE_SHADER_BIT = _PyAnyCAD.GL_COMPUTE_SHADER_BIT
GL_DRAW_INDIRECT_BUFFER = _PyAnyCAD.GL_DRAW_INDIRECT_BUFFER
GL_DRAW_INDIRECT_BUFFER_BINDING = _PyAnyCAD.GL_DRAW_INDIRECT_BUFFER_BINDING
GL_MAX_UNIFORM_LOCATIONS = _PyAnyCAD.GL_MAX_UNIFORM_LOCATIONS
GL_FRAMEBUFFER_DEFAULT_WIDTH = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_WIDTH
GL_FRAMEBUFFER_DEFAULT_HEIGHT = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_HEIGHT
GL_FRAMEBUFFER_DEFAULT_SAMPLES = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_SAMPLES
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
GL_MAX_FRAMEBUFFER_WIDTH = _PyAnyCAD.GL_MAX_FRAMEBUFFER_WIDTH
GL_MAX_FRAMEBUFFER_HEIGHT = _PyAnyCAD.GL_MAX_FRAMEBUFFER_HEIGHT
GL_MAX_FRAMEBUFFER_SAMPLES = _PyAnyCAD.GL_MAX_FRAMEBUFFER_SAMPLES
GL_UNIFORM = _PyAnyCAD.GL_UNIFORM
GL_UNIFORM_BLOCK = _PyAnyCAD.GL_UNIFORM_BLOCK
GL_PROGRAM_INPUT = _PyAnyCAD.GL_PROGRAM_INPUT
GL_PROGRAM_OUTPUT = _PyAnyCAD.GL_PROGRAM_OUTPUT
GL_BUFFER_VARIABLE = _PyAnyCAD.GL_BUFFER_VARIABLE
GL_SHADER_STORAGE_BLOCK = _PyAnyCAD.GL_SHADER_STORAGE_BLOCK
GL_ATOMIC_COUNTER_BUFFER = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER
GL_TRANSFORM_FEEDBACK_VARYING = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_VARYING
GL_ACTIVE_RESOURCES = _PyAnyCAD.GL_ACTIVE_RESOURCES
GL_MAX_NAME_LENGTH = _PyAnyCAD.GL_MAX_NAME_LENGTH
GL_MAX_NUM_ACTIVE_VARIABLES = _PyAnyCAD.GL_MAX_NUM_ACTIVE_VARIABLES
GL_NAME_LENGTH = _PyAnyCAD.GL_NAME_LENGTH
GL_TYPE = _PyAnyCAD.GL_TYPE
GL_ARRAY_SIZE = _PyAnyCAD.GL_ARRAY_SIZE
GL_OFFSET = _PyAnyCAD.GL_OFFSET
GL_BLOCK_INDEX = _PyAnyCAD.GL_BLOCK_INDEX
GL_ARRAY_STRIDE = _PyAnyCAD.GL_ARRAY_STRIDE
GL_MATRIX_STRIDE = _PyAnyCAD.GL_MATRIX_STRIDE
GL_IS_ROW_MAJOR = _PyAnyCAD.GL_IS_ROW_MAJOR
GL_ATOMIC_COUNTER_BUFFER_INDEX = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_INDEX
GL_BUFFER_BINDING = _PyAnyCAD.GL_BUFFER_BINDING
GL_BUFFER_DATA_SIZE = _PyAnyCAD.GL_BUFFER_DATA_SIZE
GL_NUM_ACTIVE_VARIABLES = _PyAnyCAD.GL_NUM_ACTIVE_VARIABLES
GL_ACTIVE_VARIABLES = _PyAnyCAD.GL_ACTIVE_VARIABLES
GL_REFERENCED_BY_VERTEX_SHADER = _PyAnyCAD.GL_REFERENCED_BY_VERTEX_SHADER
GL_REFERENCED_BY_FRAGMENT_SHADER = _PyAnyCAD.GL_REFERENCED_BY_FRAGMENT_SHADER
GL_REFERENCED_BY_COMPUTE_SHADER = _PyAnyCAD.GL_REFERENCED_BY_COMPUTE_SHADER
GL_TOP_LEVEL_ARRAY_SIZE = _PyAnyCAD.GL_TOP_LEVEL_ARRAY_SIZE
GL_TOP_LEVEL_ARRAY_STRIDE = _PyAnyCAD.GL_TOP_LEVEL_ARRAY_STRIDE
GL_LOCATION = _PyAnyCAD.GL_LOCATION
GL_VERTEX_SHADER_BIT = _PyAnyCAD.GL_VERTEX_SHADER_BIT
GL_FRAGMENT_SHADER_BIT = _PyAnyCAD.GL_FRAGMENT_SHADER_BIT
GL_ALL_SHADER_BITS = _PyAnyCAD.GL_ALL_SHADER_BITS
GL_PROGRAM_SEPARABLE = _PyAnyCAD.GL_PROGRAM_SEPARABLE
GL_ACTIVE_PROGRAM = _PyAnyCAD.GL_ACTIVE_PROGRAM
GL_PROGRAM_PIPELINE_BINDING = _PyAnyCAD.GL_PROGRAM_PIPELINE_BINDING
GL_ATOMIC_COUNTER_BUFFER_BINDING = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_BINDING
GL_ATOMIC_COUNTER_BUFFER_START = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_START
GL_ATOMIC_COUNTER_BUFFER_SIZE = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_SIZE
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
GL_MAX_VERTEX_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_VERTEX_ATOMIC_COUNTERS
GL_MAX_FRAGMENT_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_FRAGMENT_ATOMIC_COUNTERS
GL_MAX_COMBINED_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_COMBINED_ATOMIC_COUNTERS
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = _PyAnyCAD.GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = _PyAnyCAD.GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
GL_UNSIGNED_INT_ATOMIC_COUNTER = _PyAnyCAD.GL_UNSIGNED_INT_ATOMIC_COUNTER
GL_MAX_IMAGE_UNITS = _PyAnyCAD.GL_MAX_IMAGE_UNITS
GL_MAX_VERTEX_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_VERTEX_IMAGE_UNIFORMS
GL_MAX_FRAGMENT_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_FRAGMENT_IMAGE_UNIFORMS
GL_MAX_COMBINED_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_COMBINED_IMAGE_UNIFORMS
GL_IMAGE_BINDING_NAME = _PyAnyCAD.GL_IMAGE_BINDING_NAME
GL_IMAGE_BINDING_LEVEL = _PyAnyCAD.GL_IMAGE_BINDING_LEVEL
GL_IMAGE_BINDING_LAYERED = _PyAnyCAD.GL_IMAGE_BINDING_LAYERED
GL_IMAGE_BINDING_LAYER = _PyAnyCAD.GL_IMAGE_BINDING_LAYER
GL_IMAGE_BINDING_ACCESS = _PyAnyCAD.GL_IMAGE_BINDING_ACCESS
GL_IMAGE_BINDING_FORMAT = _PyAnyCAD.GL_IMAGE_BINDING_FORMAT
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
GL_ELEMENT_ARRAY_BARRIER_BIT = _PyAnyCAD.GL_ELEMENT_ARRAY_BARRIER_BIT
GL_UNIFORM_BARRIER_BIT = _PyAnyCAD.GL_UNIFORM_BARRIER_BIT
GL_TEXTURE_FETCH_BARRIER_BIT = _PyAnyCAD.GL_TEXTURE_FETCH_BARRIER_BIT
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = _PyAnyCAD.GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
GL_COMMAND_BARRIER_BIT = _PyAnyCAD.GL_COMMAND_BARRIER_BIT
GL_PIXEL_BUFFER_BARRIER_BIT = _PyAnyCAD.GL_PIXEL_BUFFER_BARRIER_BIT
GL_TEXTURE_UPDATE_BARRIER_BIT = _PyAnyCAD.GL_TEXTURE_UPDATE_BARRIER_BIT
GL_BUFFER_UPDATE_BARRIER_BIT = _PyAnyCAD.GL_BUFFER_UPDATE_BARRIER_BIT
GL_FRAMEBUFFER_BARRIER_BIT = _PyAnyCAD.GL_FRAMEBUFFER_BARRIER_BIT
GL_TRANSFORM_FEEDBACK_BARRIER_BIT = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BARRIER_BIT
GL_ATOMIC_COUNTER_BARRIER_BIT = _PyAnyCAD.GL_ATOMIC_COUNTER_BARRIER_BIT
GL_ALL_BARRIER_BITS = _PyAnyCAD.GL_ALL_BARRIER_BITS
GL_IMAGE_2D = _PyAnyCAD.GL_IMAGE_2D
GL_IMAGE_3D = _PyAnyCAD.GL_IMAGE_3D
GL_IMAGE_CUBE = _PyAnyCAD.GL_IMAGE_CUBE
GL_IMAGE_2D_ARRAY = _PyAnyCAD.GL_IMAGE_2D_ARRAY
GL_INT_IMAGE_2D = _PyAnyCAD.GL_INT_IMAGE_2D
GL_INT_IMAGE_3D = _PyAnyCAD.GL_INT_IMAGE_3D
GL_INT_IMAGE_CUBE = _PyAnyCAD.GL_INT_IMAGE_CUBE
GL_INT_IMAGE_2D_ARRAY = _PyAnyCAD.GL_INT_IMAGE_2D_ARRAY
GL_UNSIGNED_INT_IMAGE_2D = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_2D
GL_UNSIGNED_INT_IMAGE_3D = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_3D
GL_UNSIGNED_INT_IMAGE_CUBE = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_CUBE
GL_UNSIGNED_INT_IMAGE_2D_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_2D_ARRAY
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = _PyAnyCAD.GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = _PyAnyCAD.GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = _PyAnyCAD.GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
GL_READ_ONLY = _PyAnyCAD.GL_READ_ONLY
GL_WRITE_ONLY = _PyAnyCAD.GL_WRITE_ONLY
GL_READ_WRITE = _PyAnyCAD.GL_READ_WRITE
GL_SHADER_STORAGE_BUFFER = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER
GL_SHADER_STORAGE_BUFFER_BINDING = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_BINDING
GL_SHADER_STORAGE_BUFFER_START = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_START
GL_SHADER_STORAGE_BUFFER_SIZE = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_SIZE
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = _PyAnyCAD.GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
GL_MAX_SHADER_STORAGE_BLOCK_SIZE = _PyAnyCAD.GL_MAX_SHADER_STORAGE_BLOCK_SIZE
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
GL_SHADER_STORAGE_BARRIER_BIT = _PyAnyCAD.GL_SHADER_STORAGE_BARRIER_BIT
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = _PyAnyCAD.GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
GL_DEPTH_STENCIL_TEXTURE_MODE = _PyAnyCAD.GL_DEPTH_STENCIL_TEXTURE_MODE
GL_STENCIL_INDEX = _PyAnyCAD.GL_STENCIL_INDEX
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = _PyAnyCAD.GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = _PyAnyCAD.GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
GL_SAMPLE_POSITION = _PyAnyCAD.GL_SAMPLE_POSITION
GL_SAMPLE_MASK = _PyAnyCAD.GL_SAMPLE_MASK
GL_SAMPLE_MASK_VALUE = _PyAnyCAD.GL_SAMPLE_MASK_VALUE
GL_TEXTURE_2D_MULTISAMPLE = _PyAnyCAD.GL_TEXTURE_2D_MULTISAMPLE
GL_MAX_SAMPLE_MASK_WORDS = _PyAnyCAD.GL_MAX_SAMPLE_MASK_WORDS
GL_MAX_COLOR_TEXTURE_SAMPLES = _PyAnyCAD.GL_MAX_COLOR_TEXTURE_SAMPLES
GL_MAX_DEPTH_TEXTURE_SAMPLES = _PyAnyCAD.GL_MAX_DEPTH_TEXTURE_SAMPLES
GL_MAX_INTEGER_SAMPLES = _PyAnyCAD.GL_MAX_INTEGER_SAMPLES
GL_TEXTURE_BINDING_2D_MULTISAMPLE = _PyAnyCAD.GL_TEXTURE_BINDING_2D_MULTISAMPLE
GL_TEXTURE_SAMPLES = _PyAnyCAD.GL_TEXTURE_SAMPLES
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = _PyAnyCAD.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
GL_TEXTURE_WIDTH = _PyAnyCAD.GL_TEXTURE_WIDTH
GL_TEXTURE_HEIGHT = _PyAnyCAD.GL_TEXTURE_HEIGHT
GL_TEXTURE_DEPTH = _PyAnyCAD.GL_TEXTURE_DEPTH
GL_TEXTURE_INTERNAL_FORMAT = _PyAnyCAD.GL_TEXTURE_INTERNAL_FORMAT
GL_TEXTURE_RED_SIZE = _PyAnyCAD.GL_TEXTURE_RED_SIZE
GL_TEXTURE_GREEN_SIZE = _PyAnyCAD.GL_TEXTURE_GREEN_SIZE
GL_TEXTURE_BLUE_SIZE = _PyAnyCAD.GL_TEXTURE_BLUE_SIZE
GL_TEXTURE_ALPHA_SIZE = _PyAnyCAD.GL_TEXTURE_ALPHA_SIZE
GL_TEXTURE_DEPTH_SIZE = _PyAnyCAD.GL_TEXTURE_DEPTH_SIZE
GL_TEXTURE_STENCIL_SIZE = _PyAnyCAD.GL_TEXTURE_STENCIL_SIZE
GL_TEXTURE_SHARED_SIZE = _PyAnyCAD.GL_TEXTURE_SHARED_SIZE
GL_TEXTURE_RED_TYPE = _PyAnyCAD.GL_TEXTURE_RED_TYPE
GL_TEXTURE_GREEN_TYPE = _PyAnyCAD.GL_TEXTURE_GREEN_TYPE
GL_TEXTURE_BLUE_TYPE = _PyAnyCAD.GL_TEXTURE_BLUE_TYPE
GL_TEXTURE_ALPHA_TYPE = _PyAnyCAD.GL_TEXTURE_ALPHA_TYPE
GL_TEXTURE_DEPTH_TYPE = _PyAnyCAD.GL_TEXTURE_DEPTH_TYPE
GL_TEXTURE_COMPRESSED = _PyAnyCAD.GL_TEXTURE_COMPRESSED
GL_SAMPLER_2D_MULTISAMPLE = _PyAnyCAD.GL_SAMPLER_2D_MULTISAMPLE
GL_INT_SAMPLER_2D_MULTISAMPLE = _PyAnyCAD.GL_INT_SAMPLER_2D_MULTISAMPLE
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
GL_VERTEX_ATTRIB_BINDING = _PyAnyCAD.GL_VERTEX_ATTRIB_BINDING
GL_VERTEX_ATTRIB_RELATIVE_OFFSET = _PyAnyCAD.GL_VERTEX_ATTRIB_RELATIVE_OFFSET
GL_VERTEX_BINDING_DIVISOR = _PyAnyCAD.GL_VERTEX_BINDING_DIVISOR
GL_VERTEX_BINDING_OFFSET = _PyAnyCAD.GL_VERTEX_BINDING_OFFSET
GL_VERTEX_BINDING_STRIDE = _PyAnyCAD.GL_VERTEX_BINDING_STRIDE
GL_VERTEX_BINDING_BUFFER = _PyAnyCAD.GL_VERTEX_BINDING_BUFFER
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = _PyAnyCAD.GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
GL_MAX_VERTEX_ATTRIB_BINDINGS = _PyAnyCAD.GL_MAX_VERTEX_ATTRIB_BINDINGS
GL_MAX_VERTEX_ATTRIB_STRIDE = _PyAnyCAD.GL_MAX_VERTEX_ATTRIB_STRIDE
GL_MULTISAMPLE_LINE_WIDTH_RANGE = _PyAnyCAD.GL_MULTISAMPLE_LINE_WIDTH_RANGE
GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = _PyAnyCAD.GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY
GL_MULTIPLY = _PyAnyCAD.GL_MULTIPLY
GL_SCREEN = _PyAnyCAD.GL_SCREEN
GL_OVERLAY = _PyAnyCAD.GL_OVERLAY
GL_DARKEN = _PyAnyCAD.GL_DARKEN
GL_LIGHTEN = _PyAnyCAD.GL_LIGHTEN
GL_COLORDODGE = _PyAnyCAD.GL_COLORDODGE
GL_COLORBURN = _PyAnyCAD.GL_COLORBURN
GL_HARDLIGHT = _PyAnyCAD.GL_HARDLIGHT
GL_SOFTLIGHT = _PyAnyCAD.GL_SOFTLIGHT
GL_DIFFERENCE = _PyAnyCAD.GL_DIFFERENCE
GL_EXCLUSION = _PyAnyCAD.GL_EXCLUSION
GL_HSL_HUE = _PyAnyCAD.GL_HSL_HUE
GL_HSL_SATURATION = _PyAnyCAD.GL_HSL_SATURATION
GL_HSL_COLOR = _PyAnyCAD.GL_HSL_COLOR
GL_HSL_LUMINOSITY = _PyAnyCAD.GL_HSL_LUMINOSITY
GL_DEBUG_OUTPUT_SYNCHRONOUS = _PyAnyCAD.GL_DEBUG_OUTPUT_SYNCHRONOUS
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = _PyAnyCAD.GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
GL_DEBUG_CALLBACK_FUNCTION = _PyAnyCAD.GL_DEBUG_CALLBACK_FUNCTION
GL_DEBUG_CALLBACK_USER_PARAM = _PyAnyCAD.GL_DEBUG_CALLBACK_USER_PARAM
GL_DEBUG_SOURCE_API = _PyAnyCAD.GL_DEBUG_SOURCE_API
GL_DEBUG_SOURCE_WINDOW_SYSTEM = _PyAnyCAD.GL_DEBUG_SOURCE_WINDOW_SYSTEM
GL_DEBUG_SOURCE_SHADER_COMPILER = _PyAnyCAD.GL_DEBUG_SOURCE_SHADER_COMPILER
GL_DEBUG_SOURCE_THIRD_PARTY = _PyAnyCAD.GL_DEBUG_SOURCE_THIRD_PARTY
GL_DEBUG_SOURCE_APPLICATION = _PyAnyCAD.GL_DEBUG_SOURCE_APPLICATION
GL_DEBUG_SOURCE_OTHER = _PyAnyCAD.GL_DEBUG_SOURCE_OTHER
GL_DEBUG_TYPE_ERROR = _PyAnyCAD.GL_DEBUG_TYPE_ERROR
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = _PyAnyCAD.GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = _PyAnyCAD.GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
GL_DEBUG_TYPE_PORTABILITY = _PyAnyCAD.GL_DEBUG_TYPE_PORTABILITY
GL_DEBUG_TYPE_PERFORMANCE = _PyAnyCAD.GL_DEBUG_TYPE_PERFORMANCE
GL_DEBUG_TYPE_OTHER = _PyAnyCAD.GL_DEBUG_TYPE_OTHER
GL_DEBUG_TYPE_MARKER = _PyAnyCAD.GL_DEBUG_TYPE_MARKER
GL_DEBUG_TYPE_PUSH_GROUP = _PyAnyCAD.GL_DEBUG_TYPE_PUSH_GROUP
GL_DEBUG_TYPE_POP_GROUP = _PyAnyCAD.GL_DEBUG_TYPE_POP_GROUP
GL_DEBUG_SEVERITY_NOTIFICATION = _PyAnyCAD.GL_DEBUG_SEVERITY_NOTIFICATION
GL_MAX_DEBUG_GROUP_STACK_DEPTH = _PyAnyCAD.GL_MAX_DEBUG_GROUP_STACK_DEPTH
GL_DEBUG_GROUP_STACK_DEPTH = _PyAnyCAD.GL_DEBUG_GROUP_STACK_DEPTH
GL_BUFFER = _PyAnyCAD.GL_BUFFER
GL_SHADER = _PyAnyCAD.GL_SHADER
GL_PROGRAM = _PyAnyCAD.GL_PROGRAM
GL_VERTEX_ARRAY = _PyAnyCAD.GL_VERTEX_ARRAY
GL_QUERY = _PyAnyCAD.GL_QUERY
GL_PROGRAM_PIPELINE = _PyAnyCAD.GL_PROGRAM_PIPELINE
GL_SAMPLER = _PyAnyCAD.GL_SAMPLER
GL_MAX_LABEL_LENGTH = _PyAnyCAD.GL_MAX_LABEL_LENGTH
GL_MAX_DEBUG_MESSAGE_LENGTH = _PyAnyCAD.GL_MAX_DEBUG_MESSAGE_LENGTH
GL_MAX_DEBUG_LOGGED_MESSAGES = _PyAnyCAD.GL_MAX_DEBUG_LOGGED_MESSAGES
GL_DEBUG_LOGGED_MESSAGES = _PyAnyCAD.GL_DEBUG_LOGGED_MESSAGES
GL_DEBUG_SEVERITY_HIGH = _PyAnyCAD.GL_DEBUG_SEVERITY_HIGH
GL_DEBUG_SEVERITY_MEDIUM = _PyAnyCAD.GL_DEBUG_SEVERITY_MEDIUM
GL_DEBUG_SEVERITY_LOW = _PyAnyCAD.GL_DEBUG_SEVERITY_LOW
GL_DEBUG_OUTPUT = _PyAnyCAD.GL_DEBUG_OUTPUT
GL_CONTEXT_FLAG_DEBUG_BIT = _PyAnyCAD.GL_CONTEXT_FLAG_DEBUG_BIT
GL_STACK_OVERFLOW = _PyAnyCAD.GL_STACK_OVERFLOW
GL_STACK_UNDERFLOW = _PyAnyCAD.GL_STACK_UNDERFLOW
GL_GEOMETRY_SHADER = _PyAnyCAD.GL_GEOMETRY_SHADER
GL_GEOMETRY_SHADER_BIT = _PyAnyCAD.GL_GEOMETRY_SHADER_BIT
GL_GEOMETRY_VERTICES_OUT = _PyAnyCAD.GL_GEOMETRY_VERTICES_OUT
GL_GEOMETRY_INPUT_TYPE = _PyAnyCAD.GL_GEOMETRY_INPUT_TYPE
GL_GEOMETRY_OUTPUT_TYPE = _PyAnyCAD.GL_GEOMETRY_OUTPUT_TYPE
GL_GEOMETRY_SHADER_INVOCATIONS = _PyAnyCAD.GL_GEOMETRY_SHADER_INVOCATIONS
GL_LAYER_PROVOKING_VERTEX = _PyAnyCAD.GL_LAYER_PROVOKING_VERTEX
GL_LINES_ADJACENCY = _PyAnyCAD.GL_LINES_ADJACENCY
GL_LINE_STRIP_ADJACENCY = _PyAnyCAD.GL_LINE_STRIP_ADJACENCY
GL_TRIANGLES_ADJACENCY = _PyAnyCAD.GL_TRIANGLES_ADJACENCY
GL_TRIANGLE_STRIP_ADJACENCY = _PyAnyCAD.GL_TRIANGLE_STRIP_ADJACENCY
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
GL_MAX_GEOMETRY_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_GEOMETRY_UNIFORM_BLOCKS
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
GL_MAX_GEOMETRY_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_INPUT_COMPONENTS
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
GL_MAX_GEOMETRY_OUTPUT_VERTICES = _PyAnyCAD.GL_MAX_GEOMETRY_OUTPUT_VERTICES
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
GL_MAX_GEOMETRY_SHADER_INVOCATIONS = _PyAnyCAD.GL_MAX_GEOMETRY_SHADER_INVOCATIONS
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
GL_MAX_GEOMETRY_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_GEOMETRY_ATOMIC_COUNTERS
GL_MAX_GEOMETRY_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_GEOMETRY_IMAGE_UNIFORMS
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
GL_FIRST_VERTEX_CONVENTION = _PyAnyCAD.GL_FIRST_VERTEX_CONVENTION
GL_LAST_VERTEX_CONVENTION = _PyAnyCAD.GL_LAST_VERTEX_CONVENTION
GL_UNDEFINED_VERTEX = _PyAnyCAD.GL_UNDEFINED_VERTEX
GL_PRIMITIVES_GENERATED = _PyAnyCAD.GL_PRIMITIVES_GENERATED
GL_FRAMEBUFFER_DEFAULT_LAYERS = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_LAYERS
GL_MAX_FRAMEBUFFER_LAYERS = _PyAnyCAD.GL_MAX_FRAMEBUFFER_LAYERS
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
GL_FRAMEBUFFER_ATTACHMENT_LAYERED = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_LAYERED
GL_REFERENCED_BY_GEOMETRY_SHADER = _PyAnyCAD.GL_REFERENCED_BY_GEOMETRY_SHADER
GL_PRIMITIVE_BOUNDING_BOX = _PyAnyCAD.GL_PRIMITIVE_BOUNDING_BOX
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = _PyAnyCAD.GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
GL_CONTEXT_FLAGS = _PyAnyCAD.GL_CONTEXT_FLAGS
GL_LOSE_CONTEXT_ON_RESET = _PyAnyCAD.GL_LOSE_CONTEXT_ON_RESET
GL_GUILTY_CONTEXT_RESET = _PyAnyCAD.GL_GUILTY_CONTEXT_RESET
GL_INNOCENT_CONTEXT_RESET = _PyAnyCAD.GL_INNOCENT_CONTEXT_RESET
GL_UNKNOWN_CONTEXT_RESET = _PyAnyCAD.GL_UNKNOWN_CONTEXT_RESET
GL_RESET_NOTIFICATION_STRATEGY = _PyAnyCAD.GL_RESET_NOTIFICATION_STRATEGY
GL_NO_RESET_NOTIFICATION = _PyAnyCAD.GL_NO_RESET_NOTIFICATION
GL_CONTEXT_LOST = _PyAnyCAD.GL_CONTEXT_LOST
GL_SAMPLE_SHADING = _PyAnyCAD.GL_SAMPLE_SHADING
GL_MIN_SAMPLE_SHADING_VALUE = _PyAnyCAD.GL_MIN_SAMPLE_SHADING_VALUE
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = _PyAnyCAD.GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = _PyAnyCAD.GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = _PyAnyCAD.GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
GL_PATCHES = _PyAnyCAD.GL_PATCHES
GL_PATCH_VERTICES = _PyAnyCAD.GL_PATCH_VERTICES
GL_TESS_CONTROL_OUTPUT_VERTICES = _PyAnyCAD.GL_TESS_CONTROL_OUTPUT_VERTICES
GL_TESS_GEN_MODE = _PyAnyCAD.GL_TESS_GEN_MODE
GL_TESS_GEN_SPACING = _PyAnyCAD.GL_TESS_GEN_SPACING
GL_TESS_GEN_VERTEX_ORDER = _PyAnyCAD.GL_TESS_GEN_VERTEX_ORDER
GL_TESS_GEN_POINT_MODE = _PyAnyCAD.GL_TESS_GEN_POINT_MODE
GL_ISOLINES = _PyAnyCAD.GL_ISOLINES
GL_QUADS = _PyAnyCAD.GL_QUADS
GL_FRACTIONAL_ODD = _PyAnyCAD.GL_FRACTIONAL_ODD
GL_FRACTIONAL_EVEN = _PyAnyCAD.GL_FRACTIONAL_EVEN
GL_MAX_PATCH_VERTICES = _PyAnyCAD.GL_MAX_PATCH_VERTICES
GL_MAX_TESS_GEN_LEVEL = _PyAnyCAD.GL_MAX_TESS_GEN_LEVEL
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
GL_MAX_TESS_PATCH_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_PATCH_COMPONENTS
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = _PyAnyCAD.GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
GL_IS_PER_PATCH = _PyAnyCAD.GL_IS_PER_PATCH
GL_REFERENCED_BY_TESS_CONTROL_SHADER = _PyAnyCAD.GL_REFERENCED_BY_TESS_CONTROL_SHADER
GL_REFERENCED_BY_TESS_EVALUATION_SHADER = _PyAnyCAD.GL_REFERENCED_BY_TESS_EVALUATION_SHADER
GL_TESS_CONTROL_SHADER = _PyAnyCAD.GL_TESS_CONTROL_SHADER
GL_TESS_EVALUATION_SHADER = _PyAnyCAD.GL_TESS_EVALUATION_SHADER
GL_TESS_CONTROL_SHADER_BIT = _PyAnyCAD.GL_TESS_CONTROL_SHADER_BIT
GL_TESS_EVALUATION_SHADER_BIT = _PyAnyCAD.GL_TESS_EVALUATION_SHADER_BIT
GL_TEXTURE_BORDER_COLOR = _PyAnyCAD.GL_TEXTURE_BORDER_COLOR
GL_CLAMP_TO_BORDER = _PyAnyCAD.GL_CLAMP_TO_BORDER
GL_TEXTURE_BUFFER = _PyAnyCAD.GL_TEXTURE_BUFFER
GL_TEXTURE_BUFFER_BINDING = _PyAnyCAD.GL_TEXTURE_BUFFER_BINDING
GL_MAX_TEXTURE_BUFFER_SIZE = _PyAnyCAD.GL_MAX_TEXTURE_BUFFER_SIZE
GL_TEXTURE_BINDING_BUFFER = _PyAnyCAD.GL_TEXTURE_BINDING_BUFFER
GL_TEXTURE_BUFFER_DATA_STORE_BINDING = _PyAnyCAD.GL_TEXTURE_BUFFER_DATA_STORE_BINDING
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = _PyAnyCAD.GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
GL_SAMPLER_BUFFER = _PyAnyCAD.GL_SAMPLER_BUFFER
GL_INT_SAMPLER_BUFFER = _PyAnyCAD.GL_INT_SAMPLER_BUFFER
GL_UNSIGNED_INT_SAMPLER_BUFFER = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_BUFFER
GL_IMAGE_BUFFER = _PyAnyCAD.GL_IMAGE_BUFFER
GL_INT_IMAGE_BUFFER = _PyAnyCAD.GL_INT_IMAGE_BUFFER
GL_UNSIGNED_INT_IMAGE_BUFFER = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_BUFFER
GL_TEXTURE_BUFFER_OFFSET = _PyAnyCAD.GL_TEXTURE_BUFFER_OFFSET
GL_TEXTURE_BUFFER_SIZE = _PyAnyCAD.GL_TEXTURE_BUFFER_SIZE
GL_COMPRESSED_RGBA_ASTC_4x4 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_4x4
GL_COMPRESSED_RGBA_ASTC_5x4 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_5x4
GL_COMPRESSED_RGBA_ASTC_5x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_5x5
GL_COMPRESSED_RGBA_ASTC_6x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_6x5
GL_COMPRESSED_RGBA_ASTC_6x6 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_6x6
GL_COMPRESSED_RGBA_ASTC_8x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_8x5
GL_COMPRESSED_RGBA_ASTC_8x6 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_8x6
GL_COMPRESSED_RGBA_ASTC_8x8 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_8x8
GL_COMPRESSED_RGBA_ASTC_10x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x5
GL_COMPRESSED_RGBA_ASTC_10x6 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x6
GL_COMPRESSED_RGBA_ASTC_10x8 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x8
GL_COMPRESSED_RGBA_ASTC_10x10 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x10
GL_COMPRESSED_RGBA_ASTC_12x10 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_12x10
GL_COMPRESSED_RGBA_ASTC_12x12 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_12x12
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12
GL_TEXTURE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_ARRAY
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = _PyAnyCAD.GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
GL_SAMPLER_CUBE_MAP_ARRAY = _PyAnyCAD.GL_SAMPLER_CUBE_MAP_ARRAY
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = _PyAnyCAD.GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
GL_INT_SAMPLER_CUBE_MAP_ARRAY = _PyAnyCAD.GL_INT_SAMPLER_CUBE_MAP_ARRAY
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
GL_IMAGE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_IMAGE_CUBE_MAP_ARRAY
GL_INT_IMAGE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_INT_IMAGE_CUBE_MAP_ARRAY
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_TEXTURE_2D_MULTISAMPLE_ARRAY
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
GL_SAMPLER_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_SAMPLER_2D_MULTISAMPLE_ARRAY
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
class StringList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.StringList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.StringList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.StringList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.StringList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.StringList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.StringList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.StringList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.StringList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.StringList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.StringList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.StringList_pop(self)

    def append(self, x):
        return _PyAnyCAD.StringList_append(self, x)

    def empty(self):
        return _PyAnyCAD.StringList_empty(self)

    def size(self):
        return _PyAnyCAD.StringList_size(self)

    def swap(self, v):
        return _PyAnyCAD.StringList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.StringList_begin(self)

    def end(self):
        return _PyAnyCAD.StringList_end(self)

    def rbegin(self):
        return _PyAnyCAD.StringList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.StringList_rend(self)

    def clear(self):
        return _PyAnyCAD.StringList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.StringList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.StringList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.StringList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.StringList_swiginit(self, _PyAnyCAD.new_StringList(*args))

    def push_back(self, x):
        return _PyAnyCAD.StringList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.StringList_front(self)

    def back(self):
        return _PyAnyCAD.StringList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.StringList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.StringList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.StringList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.StringList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.StringList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_StringList

# Register StringList in _PyAnyCAD:
_PyAnyCAD.StringList_swigregister(StringList)

class StringWList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.StringWList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.StringWList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.StringWList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.StringWList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.StringWList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.StringWList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.StringWList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.StringWList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.StringWList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.StringWList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.StringWList_pop(self)

    def append(self, x):
        return _PyAnyCAD.StringWList_append(self, x)

    def empty(self):
        return _PyAnyCAD.StringWList_empty(self)

    def size(self):
        return _PyAnyCAD.StringWList_size(self)

    def swap(self, v):
        return _PyAnyCAD.StringWList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.StringWList_begin(self)

    def end(self):
        return _PyAnyCAD.StringWList_end(self)

    def rbegin(self):
        return _PyAnyCAD.StringWList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.StringWList_rend(self)

    def clear(self):
        return _PyAnyCAD.StringWList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.StringWList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.StringWList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.StringWList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.StringWList_swiginit(self, _PyAnyCAD.new_StringWList(*args))

    def push_back(self, x):
        return _PyAnyCAD.StringWList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.StringWList_front(self)

    def back(self):
        return _PyAnyCAD.StringWList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.StringWList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.StringWList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.StringWList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.StringWList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.StringWList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_StringWList

# Register StringWList in _PyAnyCAD:
_PyAnyCAD.StringWList_swigregister(StringWList)

class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.StringMap___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.StringMap___bool__(self)

    def __len__(self):
        return _PyAnyCAD.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _PyAnyCAD.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _PyAnyCAD.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _PyAnyCAD.StringMap_has_key(self, key)

    def keys(self):
        return _PyAnyCAD.StringMap_keys(self)

    def values(self):
        return _PyAnyCAD.StringMap_values(self)

    def items(self):
        return _PyAnyCAD.StringMap_items(self)

    def __contains__(self, key):
        return _PyAnyCAD.StringMap___contains__(self, key)

    def key_iterator(self):
        return _PyAnyCAD.StringMap_key_iterator(self)

    def value_iterator(self):
        return _PyAnyCAD.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _PyAnyCAD.StringMap___setitem__(self, *args)

    def asdict(self):
        return _PyAnyCAD.StringMap_asdict(self)

    def __init__(self, *args):
        _PyAnyCAD.StringMap_swiginit(self, _PyAnyCAD.new_StringMap(*args))

    def empty(self):
        return _PyAnyCAD.StringMap_empty(self)

    def size(self):
        return _PyAnyCAD.StringMap_size(self)

    def swap(self, v):
        return _PyAnyCAD.StringMap_swap(self, v)

    def begin(self):
        return _PyAnyCAD.StringMap_begin(self)

    def end(self):
        return _PyAnyCAD.StringMap_end(self)

    def rbegin(self):
        return _PyAnyCAD.StringMap_rbegin(self)

    def rend(self):
        return _PyAnyCAD.StringMap_rend(self)

    def clear(self):
        return _PyAnyCAD.StringMap_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.StringMap_get_allocator(self)

    def count(self, x):
        return _PyAnyCAD.StringMap_count(self, x)

    def erase(self, *args):
        return _PyAnyCAD.StringMap_erase(self, *args)

    def find(self, x):
        return _PyAnyCAD.StringMap_find(self, x)

    def lower_bound(self, x):
        return _PyAnyCAD.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _PyAnyCAD.StringMap_upper_bound(self, x)
    __swig_destroy__ = _PyAnyCAD.delete_StringMap

# Register StringMap in _PyAnyCAD:
_PyAnyCAD.StringMap_swigregister(StringMap)

EnumDataType_FLOAT = _PyAnyCAD.EnumDataType_FLOAT
EnumDataType_UNSIGNED_INT = _PyAnyCAD.EnumDataType_UNSIGNED_INT
EnumDataType_UNSIGNED_SHORT = _PyAnyCAD.EnumDataType_UNSIGNED_SHORT
EnumDataType_UNSIGNED_BYTE = _PyAnyCAD.EnumDataType_UNSIGNED_BYTE
EnumDataType_UNSIGNED_INT_24_8 = _PyAnyCAD.EnumDataType_UNSIGNED_INT_24_8
EnumDataType_FLOAT_32_UNSIGNED_INT_24_8_REV = _PyAnyCAD.EnumDataType_FLOAT_32_UNSIGNED_INT_24_8_REV

def SizeOfDataType(dt):
    return _PyAnyCAD.SizeOfDataType(dt)
class ArrayBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ArrayBuffer

    def GetBufferSize(self):
        return _PyAnyCAD.ArrayBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.ArrayBuffer_GetItemCount(self)

    def GetDataType(self):
        return _PyAnyCAD.ArrayBuffer_GetDataType(self)

    def Save(self, fleName):
        return _PyAnyCAD.ArrayBuffer_Save(self, fleName)

# Register ArrayBuffer in _PyAnyCAD:
_PyAnyCAD.ArrayBuffer_swigregister(ArrayBuffer)

class DoubleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.DoubleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.DoubleList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.DoubleList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.DoubleList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.DoubleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.DoubleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.DoubleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.DoubleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.DoubleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.DoubleList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.DoubleList_pop(self)

    def append(self, x):
        return _PyAnyCAD.DoubleList_append(self, x)

    def empty(self):
        return _PyAnyCAD.DoubleList_empty(self)

    def size(self):
        return _PyAnyCAD.DoubleList_size(self)

    def swap(self, v):
        return _PyAnyCAD.DoubleList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.DoubleList_begin(self)

    def end(self):
        return _PyAnyCAD.DoubleList_end(self)

    def rbegin(self):
        return _PyAnyCAD.DoubleList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.DoubleList_rend(self)

    def clear(self):
        return _PyAnyCAD.DoubleList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.DoubleList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.DoubleList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.DoubleList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.DoubleList_swiginit(self, _PyAnyCAD.new_DoubleList(*args))

    def push_back(self, x):
        return _PyAnyCAD.DoubleList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.DoubleList_front(self)

    def back(self):
        return _PyAnyCAD.DoubleList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.DoubleList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.DoubleList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.DoubleList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.DoubleList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.DoubleList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_DoubleList

# Register DoubleList in _PyAnyCAD:
_PyAnyCAD.DoubleList_swigregister(DoubleList)

class FloatList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.FloatList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.FloatList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.FloatList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.FloatList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.FloatList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.FloatList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.FloatList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.FloatList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.FloatList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.FloatList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.FloatList_pop(self)

    def append(self, x):
        return _PyAnyCAD.FloatList_append(self, x)

    def empty(self):
        return _PyAnyCAD.FloatList_empty(self)

    def size(self):
        return _PyAnyCAD.FloatList_size(self)

    def swap(self, v):
        return _PyAnyCAD.FloatList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.FloatList_begin(self)

    def end(self):
        return _PyAnyCAD.FloatList_end(self)

    def rbegin(self):
        return _PyAnyCAD.FloatList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.FloatList_rend(self)

    def clear(self):
        return _PyAnyCAD.FloatList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.FloatList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.FloatList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.FloatList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.FloatList_swiginit(self, _PyAnyCAD.new_FloatList(*args))

    def push_back(self, x):
        return _PyAnyCAD.FloatList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.FloatList_front(self)

    def back(self):
        return _PyAnyCAD.FloatList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.FloatList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.FloatList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.FloatList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.FloatList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.FloatList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_FloatList

# Register FloatList in _PyAnyCAD:
_PyAnyCAD.FloatList_swigregister(FloatList)

class Uint32List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Uint32List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Uint32List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Uint32List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Uint32List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Uint32List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Uint32List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Uint32List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Uint32List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Uint32List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Uint32List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Uint32List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Uint32List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Uint32List_empty(self)

    def size(self):
        return _PyAnyCAD.Uint32List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Uint32List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Uint32List_begin(self)

    def end(self):
        return _PyAnyCAD.Uint32List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Uint32List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Uint32List_rend(self)

    def clear(self):
        return _PyAnyCAD.Uint32List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Uint32List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Uint32List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Uint32List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Uint32List_swiginit(self, _PyAnyCAD.new_Uint32List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Uint32List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Uint32List_front(self)

    def back(self):
        return _PyAnyCAD.Uint32List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Uint32List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Uint32List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Uint32List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Uint32List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Uint32List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32List

# Register Uint32List in _PyAnyCAD:
_PyAnyCAD.Uint32List_swigregister(Uint32List)

class Int32List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Int32List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Int32List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Int32List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Int32List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Int32List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Int32List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Int32List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Int32List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Int32List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Int32List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Int32List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Int32List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Int32List_empty(self)

    def size(self):
        return _PyAnyCAD.Int32List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Int32List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Int32List_begin(self)

    def end(self):
        return _PyAnyCAD.Int32List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Int32List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Int32List_rend(self)

    def clear(self):
        return _PyAnyCAD.Int32List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Int32List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Int32List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Int32List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Int32List_swiginit(self, _PyAnyCAD.new_Int32List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Int32List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Int32List_front(self)

    def back(self):
        return _PyAnyCAD.Int32List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Int32List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Int32List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Int32List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Int32List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Int32List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Int32List

# Register Int32List in _PyAnyCAD:
_PyAnyCAD.Int32List_swigregister(Int32List)

class Uint16List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Uint16List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Uint16List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Uint16List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Uint16List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Uint16List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Uint16List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Uint16List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Uint16List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Uint16List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Uint16List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Uint16List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Uint16List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Uint16List_empty(self)

    def size(self):
        return _PyAnyCAD.Uint16List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Uint16List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Uint16List_begin(self)

    def end(self):
        return _PyAnyCAD.Uint16List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Uint16List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Uint16List_rend(self)

    def clear(self):
        return _PyAnyCAD.Uint16List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Uint16List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Uint16List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Uint16List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Uint16List_swiginit(self, _PyAnyCAD.new_Uint16List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Uint16List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Uint16List_front(self)

    def back(self):
        return _PyAnyCAD.Uint16List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Uint16List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Uint16List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Uint16List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Uint16List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Uint16List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16List

# Register Uint16List in _PyAnyCAD:
_PyAnyCAD.Uint16List_swigregister(Uint16List)

class Uint8List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Uint8List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Uint8List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Uint8List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Uint8List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Uint8List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Uint8List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Uint8List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Uint8List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Uint8List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Uint8List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Uint8List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Uint8List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Uint8List_empty(self)

    def size(self):
        return _PyAnyCAD.Uint8List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Uint8List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Uint8List_begin(self)

    def end(self):
        return _PyAnyCAD.Uint8List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Uint8List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Uint8List_rend(self)

    def clear(self):
        return _PyAnyCAD.Uint8List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Uint8List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Uint8List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Uint8List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Uint8List_swiginit(self, _PyAnyCAD.new_Uint8List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Uint8List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Uint8List_front(self)

    def back(self):
        return _PyAnyCAD.Uint8List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Uint8List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Uint8List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Uint8List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Uint8List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Uint8List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint8List

# Register Uint8List in _PyAnyCAD:
_PyAnyCAD.Uint8List_swigregister(Uint8List)

class Vec3List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Vec3List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Vec3List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Vec3List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Vec3List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Vec3List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Vec3List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Vec3List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Vec3List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Vec3List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Vec3List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Vec3List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Vec3List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Vec3List_empty(self)

    def size(self):
        return _PyAnyCAD.Vec3List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Vec3List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Vec3List_begin(self)

    def end(self):
        return _PyAnyCAD.Vec3List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Vec3List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Vec3List_rend(self)

    def clear(self):
        return _PyAnyCAD.Vec3List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Vec3List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Vec3List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Vec3List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Vec3List_swiginit(self, _PyAnyCAD.new_Vec3List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Vec3List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Vec3List_front(self)

    def back(self):
        return _PyAnyCAD.Vec3List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Vec3List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Vec3List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Vec3List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Vec3List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Vec3List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Vec3List

# Register Vec3List in _PyAnyCAD:
_PyAnyCAD.Vec3List_swigregister(Vec3List)

class Float32TypedBuffer(ArrayBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reserve(self, count):
        return _PyAnyCAD.Float32TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        return _PyAnyCAD.Float32TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        return _PyAnyCAD.Float32TypedBuffer_Get(self, idx)

    def Append(self, *args):
        return _PyAnyCAD.Float32TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        return _PyAnyCAD.Float32TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.Float32TypedBuffer_GetItemCount(self)

    def GetData(self):
        return _PyAnyCAD.Float32TypedBuffer_GetData(self)
    __swig_destroy__ = _PyAnyCAD.delete_Float32TypedBuffer

# Register Float32TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Float32TypedBuffer_swigregister(Float32TypedBuffer)

class Float32Buffer(Float32TypedBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Float32Buffer_swiginit(self, _PyAnyCAD.new_Float32Buffer(*args))

    def GetDataType(self):
        return _PyAnyCAD.Float32Buffer_GetDataType(self)

    def GetValue(self, idx):
        return _PyAnyCAD.Float32Buffer_GetValue(self, idx)

    def SetValue(self, *args):
        return _PyAnyCAD.Float32Buffer_SetValue(self, *args)

    def Append3(self, val):
        return _PyAnyCAD.Float32Buffer_Append3(self, val)

    def Append2(self, val):
        return _PyAnyCAD.Float32Buffer_Append2(self, val)

    def AddVector3(self, idx, v):
        return _PyAnyCAD.Float32Buffer_AddVector3(self, idx, v)
    __swig_destroy__ = _PyAnyCAD.delete_Float32Buffer

# Register Float32Buffer in _PyAnyCAD:
_PyAnyCAD.Float32Buffer_swigregister(Float32Buffer)

class Uint32TypedBuffer(ArrayBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reserve(self, count):
        return _PyAnyCAD.Uint32TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        return _PyAnyCAD.Uint32TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        return _PyAnyCAD.Uint32TypedBuffer_Get(self, idx)

    def Append(self, *args):
        return _PyAnyCAD.Uint32TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        return _PyAnyCAD.Uint32TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.Uint32TypedBuffer_GetItemCount(self)

    def GetData(self):
        return _PyAnyCAD.Uint32TypedBuffer_GetData(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32TypedBuffer

# Register Uint32TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Uint32TypedBuffer_swigregister(Uint32TypedBuffer)

class Uint32Buffer(Uint32TypedBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint32Buffer_swiginit(self, _PyAnyCAD.new_Uint32Buffer(*args))

    def GetDataType(self):
        return _PyAnyCAD.Uint32Buffer_GetDataType(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32Buffer

# Register Uint32Buffer in _PyAnyCAD:
_PyAnyCAD.Uint32Buffer_swigregister(Uint32Buffer)

class Uint16TypedBuffer(ArrayBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reserve(self, count):
        return _PyAnyCAD.Uint16TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        return _PyAnyCAD.Uint16TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        return _PyAnyCAD.Uint16TypedBuffer_Get(self, idx)

    def Append(self, *args):
        return _PyAnyCAD.Uint16TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        return _PyAnyCAD.Uint16TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.Uint16TypedBuffer_GetItemCount(self)

    def GetData(self):
        return _PyAnyCAD.Uint16TypedBuffer_GetData(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16TypedBuffer

# Register Uint16TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Uint16TypedBuffer_swigregister(Uint16TypedBuffer)

class Uint16Buffer(Uint16TypedBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint16Buffer_swiginit(self, _PyAnyCAD.new_Uint16Buffer(*args))

    def GetDataType(self):
        return _PyAnyCAD.Uint16Buffer_GetDataType(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16Buffer

# Register Uint16Buffer in _PyAnyCAD:
_PyAnyCAD.Uint16Buffer_swigregister(Uint16Buffer)

class Uint8TypedBuffer(ArrayBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reserve(self, count):
        return _PyAnyCAD.Uint8TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        return _PyAnyCAD.Uint8TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        return _PyAnyCAD.Uint8TypedBuffer_Get(self, idx)

    def Append(self, *args):
        return _PyAnyCAD.Uint8TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        return _PyAnyCAD.Uint8TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.Uint8TypedBuffer_GetItemCount(self)

    def GetData(self):
        return _PyAnyCAD.Uint8TypedBuffer_GetData(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint8TypedBuffer

# Register Uint8TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Uint8TypedBuffer_swigregister(Uint8TypedBuffer)

class Uint8Buffer(Uint8TypedBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint8Buffer_swiginit(self, _PyAnyCAD.new_Uint8Buffer(*args))

    def GetDataType(self):
        return _PyAnyCAD.Uint8Buffer_GetDataType(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint8Buffer

# Register Uint8Buffer in _PyAnyCAD:
_PyAnyCAD.Uint8Buffer_swigregister(Uint8Buffer)

class Int32TypedBuffer(ArrayBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reserve(self, count):
        return _PyAnyCAD.Int32TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        return _PyAnyCAD.Int32TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        return _PyAnyCAD.Int32TypedBuffer_Get(self, idx)

    def Append(self, *args):
        return _PyAnyCAD.Int32TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        return _PyAnyCAD.Int32TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.Int32TypedBuffer_GetItemCount(self)

    def GetData(self):
        return _PyAnyCAD.Int32TypedBuffer_GetData(self)
    __swig_destroy__ = _PyAnyCAD.delete_Int32TypedBuffer

# Register Int32TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Int32TypedBuffer_swigregister(Int32TypedBuffer)

class Int32Buffer(Int32TypedBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Int32Buffer_swiginit(self, _PyAnyCAD.new_Int32Buffer(*args))

    def GetDataType(self):
        return _PyAnyCAD.Int32Buffer_GetDataType(self)
    __swig_destroy__ = _PyAnyCAD.delete_Int32Buffer

# Register Int32Buffer in _PyAnyCAD:
_PyAnyCAD.Int32Buffer_swigregister(Int32Buffer)

class RawBuffer(ArrayBuffer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RawBuffer_swiginit(self, _PyAnyCAD.new_RawBuffer())
    __swig_destroy__ = _PyAnyCAD.delete_RawBuffer

    def GetByteLength(self):
        return _PyAnyCAD.RawBuffer_GetByteLength(self)

    @staticmethod
    def LoadFromFile(filename):
        return _PyAnyCAD.RawBuffer_LoadFromFile(filename)

    def GetBufferSize(self):
        return _PyAnyCAD.RawBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.RawBuffer_GetItemCount(self)

    def GetDataType(self):
        return _PyAnyCAD.RawBuffer_GetDataType(self)

# Register RawBuffer in _PyAnyCAD:
_PyAnyCAD.RawBuffer_swigregister(RawBuffer)

def RawBuffer_LoadFromFile(filename):
    return _PyAnyCAD.RawBuffer_LoadFromFile(filename)

class ArrayBufferView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, buffer, byteOffset, byteLength, dataType):
        _PyAnyCAD.ArrayBufferView_swiginit(self, _PyAnyCAD.new_ArrayBufferView(buffer, byteOffset, byteLength, dataType))
    __swig_destroy__ = _PyAnyCAD.delete_ArrayBufferView

    def GetBuffer(self):
        return _PyAnyCAD.ArrayBufferView_GetBuffer(self)

    def GetByteOffset(self):
        return _PyAnyCAD.ArrayBufferView_GetByteOffset(self)

    def GetByteLength(self):
        return _PyAnyCAD.ArrayBufferView_GetByteLength(self)

    def GetDataType(self):
        return _PyAnyCAD.ArrayBufferView_GetDataType(self)

# Register ArrayBufferView in _PyAnyCAD:
_PyAnyCAD.ArrayBufferView_swigregister(ArrayBufferView)

class Float32TypedArray(ArrayBufferView):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Float32TypedArray_swiginit(self, _PyAnyCAD.new_Float32TypedArray(*args))

    def GetValue(self, idx):
        return _PyAnyCAD.Float32TypedArray_GetValue(self, idx)

    def SetValue(self, *args):
        return _PyAnyCAD.Float32TypedArray_SetValue(self, *args)

    def GetItemCount(self):
        return _PyAnyCAD.Float32TypedArray_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Float32TypedArray

# Register Float32TypedArray in _PyAnyCAD:
_PyAnyCAD.Float32TypedArray_swigregister(Float32TypedArray)

class Float32Array(Float32TypedArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Float32Array_swiginit(self, _PyAnyCAD.new_Float32Array(*args))

    def GetVec3(self, *args):
        return _PyAnyCAD.Float32Array_GetVec3(self, *args)

    def SetVec3(self, idx, val):
        return _PyAnyCAD.Float32Array_SetVec3(self, idx, val)
    __swig_destroy__ = _PyAnyCAD.delete_Float32Array

# Register Float32Array in _PyAnyCAD:
_PyAnyCAD.Float32Array_swigregister(Float32Array)

class Uint32TypedArray(ArrayBufferView):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint32TypedArray_swiginit(self, _PyAnyCAD.new_Uint32TypedArray(*args))

    def GetValue(self, idx):
        return _PyAnyCAD.Uint32TypedArray_GetValue(self, idx)

    def SetValue(self, *args):
        return _PyAnyCAD.Uint32TypedArray_SetValue(self, *args)

    def GetItemCount(self):
        return _PyAnyCAD.Uint32TypedArray_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32TypedArray

# Register Uint32TypedArray in _PyAnyCAD:
_PyAnyCAD.Uint32TypedArray_swigregister(Uint32TypedArray)

class Uint32Array(Uint32TypedArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint32Array_swiginit(self, _PyAnyCAD.new_Uint32Array(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Uint32Array

# Register Uint32Array in _PyAnyCAD:
_PyAnyCAD.Uint32Array_swigregister(Uint32Array)

class Uint16TypedArray(ArrayBufferView):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint16TypedArray_swiginit(self, _PyAnyCAD.new_Uint16TypedArray(*args))

    def GetValue(self, idx):
        return _PyAnyCAD.Uint16TypedArray_GetValue(self, idx)

    def SetValue(self, *args):
        return _PyAnyCAD.Uint16TypedArray_SetValue(self, *args)

    def GetItemCount(self):
        return _PyAnyCAD.Uint16TypedArray_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16TypedArray

# Register Uint16TypedArray in _PyAnyCAD:
_PyAnyCAD.Uint16TypedArray_swigregister(Uint16TypedArray)

class Uint16Array(Uint16TypedArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint16Array_swiginit(self, _PyAnyCAD.new_Uint16Array(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Uint16Array

# Register Uint16Array in _PyAnyCAD:
_PyAnyCAD.Uint16Array_swigregister(Uint16Array)

class ClassId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, parent):
        _PyAnyCAD.ClassId_swiginit(self, _PyAnyCAD.new_ClassId(name, parent))
    __swig_destroy__ = _PyAnyCAD.delete_ClassId

    def GetName(self):
        return _PyAnyCAD.ClassId_GetName(self)

    def GetParent(self):
        return _PyAnyCAD.ClassId_GetParent(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ClassId_IsEqual(self, other)

    def IsTypeOf(self, other):
        return _PyAnyCAD.ClassId_IsTypeOf(self, other)

# Register ClassId in _PyAnyCAD:
_PyAnyCAD.ClassId_swigregister(ClassId)

class AObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.AObject_swiginit(self, _PyAnyCAD.new_AObject())
    __swig_destroy__ = _PyAnyCAD.delete_AObject

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.AObject_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.AObject_GetClassId(self)

    def IsEqual(self, other):
        return _PyAnyCAD.AObject_IsEqual(self, other)

# Register AObject in _PyAnyCAD:
_PyAnyCAD.AObject_swigregister(AObject)

def AObject_GetStaticClassId():
    return _PyAnyCAD.AObject_GetStaticClassId()

class Path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Path_swiginit(self, _PyAnyCAD.new_Path(*args))

    @staticmethod
    def ToUtf8(filePath):
        return _PyAnyCAD.Path_ToUtf8(filePath)

    def SetString(self, path):
        return _PyAnyCAD.Path_SetString(self, path)

    def GetString(self):
        return _PyAnyCAD.Path_GetString(self)

    @staticmethod
    def GetFolderPath(fileName):
        return _PyAnyCAD.Path_GetFolderPath(fileName)

    @staticmethod
    def GetFileName(fileName):
        return _PyAnyCAD.Path_GetFileName(fileName)

    @staticmethod
    def Extension(fileName):
        return _PyAnyCAD.Path_Extension(fileName)
    __swig_destroy__ = _PyAnyCAD.delete_Path

# Register Path in _PyAnyCAD:
_PyAnyCAD.Path_swigregister(Path)

def Path_ToUtf8(filePath):
    return _PyAnyCAD.Path_ToUtf8(filePath)

def Path_GetFolderPath(fileName):
    return _PyAnyCAD.Path_GetFolderPath(fileName)

def Path_GetFileName(fileName):
    return _PyAnyCAD.Path_GetFileName(fileName)

def Path_Extension(fileName):
    return _PyAnyCAD.Path_Extension(fileName)

class Sphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Sphere_swiginit(self, _PyAnyCAD.new_Sphere(*args))

    def getRadius(self):
        return _PyAnyCAD.Sphere_getRadius(self)

    def setRadius(self, radius):
        return _PyAnyCAD.Sphere_setRadius(self, radius)

    def getCenter(self):
        return _PyAnyCAD.Sphere_getCenter(self)

    def setCenter(self, center):
        return _PyAnyCAD.Sphere_setCenter(self, center)

    def intersects(self, *args):
        return _PyAnyCAD.Sphere_intersects(self, *args)

    def merge(self, oth):
        return _PyAnyCAD.Sphere_merge(self, oth)
    __swig_destroy__ = _PyAnyCAD.delete_Sphere

# Register Sphere in _PyAnyCAD:
_PyAnyCAD.Sphere_swigregister(Sphere)

class Plane(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    normal = property(_PyAnyCAD.Plane_normal_get, _PyAnyCAD.Plane_normal_set)
    d = property(_PyAnyCAD.Plane_d_get, _PyAnyCAD.Plane_d_set)

    def __init__(self, *args):
        _PyAnyCAD.Plane_swiginit(self, _PyAnyCAD.new_Plane(*args))
    NO_SIDE = _PyAnyCAD.Plane_NO_SIDE
    POSITIVE_SIDE = _PyAnyCAD.Plane_POSITIVE_SIDE
    NEGATIVE_SIDE = _PyAnyCAD.Plane_NEGATIVE_SIDE
    BOTH_SIDE = _PyAnyCAD.Plane_BOTH_SIDE

    def getSide(self, *args):
        return _PyAnyCAD.Plane_getSide(self, *args)

    def getDistance(self, rkPoint):
        return _PyAnyCAD.Plane_getDistance(self, rkPoint)

    def redefine(self, *args):
        return _PyAnyCAD.Plane_redefine(self, *args)

    def projectVector(self, v):
        return _PyAnyCAD.Plane_projectVector(self, v)

    def normalise(self):
        return _PyAnyCAD.Plane_normalise(self)

    def coplanarPoint(self):
        return _PyAnyCAD.Plane_coplanarPoint(self)

    def applyMatrix(self, *args):
        return _PyAnyCAD.Plane_applyMatrix(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_Plane

# Register Plane in _PyAnyCAD:
_PyAnyCAD.Plane_swigregister(Plane)

class Ray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Ray_swiginit(self, _PyAnyCAD.new_Ray(*args))

    def setOrigin(self, origin):
        return _PyAnyCAD.Ray_setOrigin(self, origin)

    def getOrigin(self):
        return _PyAnyCAD.Ray_getOrigin(self)

    def setDirection(self, dir):
        return _PyAnyCAD.Ray_setDirection(self, dir)

    def getDirection(self):
        return _PyAnyCAD.Ray_getDirection(self)

    def getPoint(self, t):
        return _PyAnyCAD.Ray_getPoint(self, t)

    def intersects(self, *args):
        return _PyAnyCAD.Ray_intersects(self, *args)

    def IsVertexOn(self, vertex):
        return _PyAnyCAD.Ray_IsVertexOn(self, vertex)

    def applyMatrix(self, trf):
        return _PyAnyCAD.Ray_applyMatrix(self, trf)

    def projectPoint(self, pt):
        return _PyAnyCAD.Ray_projectPoint(self, pt)
    __swig_destroy__ = _PyAnyCAD.delete_Ray

# Register Ray in _PyAnyCAD:
_PyAnyCAD.Ray_swigregister(Ray)

class RayIntersect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RayIntersect_swiginit(self, _PyAnyCAD.new_RayIntersect(*args))
    first = property(_PyAnyCAD.RayIntersect_first_get, _PyAnyCAD.RayIntersect_first_set)
    second = property(_PyAnyCAD.RayIntersect_second_get, _PyAnyCAD.RayIntersect_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _PyAnyCAD.delete_RayIntersect

# Register RayIntersect in _PyAnyCAD:
_PyAnyCAD.RayIntersect_swigregister(RayIntersect)

class PlaneList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.PlaneList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.PlaneList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.PlaneList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.PlaneList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.PlaneList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.PlaneList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.PlaneList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.PlaneList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.PlaneList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.PlaneList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.PlaneList_pop(self)

    def append(self, x):
        return _PyAnyCAD.PlaneList_append(self, x)

    def empty(self):
        return _PyAnyCAD.PlaneList_empty(self)

    def size(self):
        return _PyAnyCAD.PlaneList_size(self)

    def swap(self, v):
        return _PyAnyCAD.PlaneList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.PlaneList_begin(self)

    def end(self):
        return _PyAnyCAD.PlaneList_end(self)

    def rbegin(self):
        return _PyAnyCAD.PlaneList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.PlaneList_rend(self)

    def clear(self):
        return _PyAnyCAD.PlaneList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.PlaneList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.PlaneList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.PlaneList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.PlaneList_swiginit(self, _PyAnyCAD.new_PlaneList(*args))

    def push_back(self, x):
        return _PyAnyCAD.PlaneList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.PlaneList_front(self)

    def back(self):
        return _PyAnyCAD.PlaneList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.PlaneList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.PlaneList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.PlaneList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.PlaneList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.PlaneList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_PlaneList

# Register PlaneList in _PyAnyCAD:
_PyAnyCAD.PlaneList_swigregister(PlaneList)

class AxisAlignedBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Extent_EXTENT_NULL = _PyAnyCAD.AxisAlignedBox_Extent_EXTENT_NULL
    Extent_EXTENT_FINITE = _PyAnyCAD.AxisAlignedBox_Extent_EXTENT_FINITE
    Extent_EXTENT_INFINITE = _PyAnyCAD.AxisAlignedBox_Extent_EXTENT_INFINITE
    CornerEnum_FAR_LEFT_BOTTOM = _PyAnyCAD.AxisAlignedBox_CornerEnum_FAR_LEFT_BOTTOM
    CornerEnum_FAR_LEFT_TOP = _PyAnyCAD.AxisAlignedBox_CornerEnum_FAR_LEFT_TOP
    CornerEnum_FAR_RIGHT_TOP = _PyAnyCAD.AxisAlignedBox_CornerEnum_FAR_RIGHT_TOP
    CornerEnum_FAR_RIGHT_BOTTOM = _PyAnyCAD.AxisAlignedBox_CornerEnum_FAR_RIGHT_BOTTOM
    CornerEnum_NEAR_RIGHT_BOTTOM = _PyAnyCAD.AxisAlignedBox_CornerEnum_NEAR_RIGHT_BOTTOM
    CornerEnum_NEAR_LEFT_BOTTOM = _PyAnyCAD.AxisAlignedBox_CornerEnum_NEAR_LEFT_BOTTOM
    CornerEnum_NEAR_LEFT_TOP = _PyAnyCAD.AxisAlignedBox_CornerEnum_NEAR_LEFT_TOP
    CornerEnum_NEAR_RIGHT_TOP = _PyAnyCAD.AxisAlignedBox_CornerEnum_NEAR_RIGHT_TOP

    def __init__(self, *args):
        _PyAnyCAD.AxisAlignedBox_swiginit(self, _PyAnyCAD.new_AxisAlignedBox(*args))

    def getMinimum(self):
        return _PyAnyCAD.AxisAlignedBox_getMinimum(self)

    def getMaximum(self):
        return _PyAnyCAD.AxisAlignedBox_getMaximum(self)

    def setMinimum(self, *args):
        return _PyAnyCAD.AxisAlignedBox_setMinimum(self, *args)

    def setMinimumX(self, x):
        return _PyAnyCAD.AxisAlignedBox_setMinimumX(self, x)

    def setMinimumY(self, y):
        return _PyAnyCAD.AxisAlignedBox_setMinimumY(self, y)

    def setMinimumZ(self, z):
        return _PyAnyCAD.AxisAlignedBox_setMinimumZ(self, z)

    def setMaximum(self, *args):
        return _PyAnyCAD.AxisAlignedBox_setMaximum(self, *args)

    def setMaximumX(self, x):
        return _PyAnyCAD.AxisAlignedBox_setMaximumX(self, x)

    def setMaximumY(self, y):
        return _PyAnyCAD.AxisAlignedBox_setMaximumY(self, y)

    def setMaximumZ(self, z):
        return _PyAnyCAD.AxisAlignedBox_setMaximumZ(self, z)

    def setExtents(self, *args):
        return _PyAnyCAD.AxisAlignedBox_setExtents(self, *args)

    def getAllCorners(self):
        return _PyAnyCAD.AxisAlignedBox_getAllCorners(self)

    def getCorner(self, cornerToGet):
        return _PyAnyCAD.AxisAlignedBox_getCorner(self, cornerToGet)

    def merge(self, *args):
        return _PyAnyCAD.AxisAlignedBox_merge(self, *args)

    def matPlusVec3(self, m, v):
        return _PyAnyCAD.AxisAlignedBox_matPlusVec3(self, m, v)

    def transform(self, matrix):
        return _PyAnyCAD.AxisAlignedBox_transform(self, matrix)

    def setNull(self):
        return _PyAnyCAD.AxisAlignedBox_setNull(self)

    def isNull(self):
        return _PyAnyCAD.AxisAlignedBox_isNull(self)

    def isFinite(self):
        return _PyAnyCAD.AxisAlignedBox_isFinite(self)

    def setInfinite(self):
        return _PyAnyCAD.AxisAlignedBox_setInfinite(self)

    def isInfinite(self):
        return _PyAnyCAD.AxisAlignedBox_isInfinite(self)

    def intersection(self, b2):
        return _PyAnyCAD.AxisAlignedBox_intersection(self, b2)

    def volume(self):
        return _PyAnyCAD.AxisAlignedBox_volume(self)

    def scale(self, s):
        return _PyAnyCAD.AxisAlignedBox_scale(self, s)

    def intersects(self, *args):
        return _PyAnyCAD.AxisAlignedBox_intersects(self, *args)

    def getCenter(self):
        return _PyAnyCAD.AxisAlignedBox_getCenter(self)

    def getSize(self):
        return _PyAnyCAD.AxisAlignedBox_getSize(self)

    def getHalfSize(self):
        return _PyAnyCAD.AxisAlignedBox_getHalfSize(self)

    def squaredDistance(self, v):
        return _PyAnyCAD.AxisAlignedBox_squaredDistance(self, v)

    def distance(self, v):
        return _PyAnyCAD.AxisAlignedBox_distance(self, v)

    def contains(self, *args):
        return _PyAnyCAD.AxisAlignedBox_contains(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_AxisAlignedBox

# Register AxisAlignedBox in _PyAnyCAD:
_PyAnyCAD.AxisAlignedBox_swigregister(AxisAlignedBox)
cvar = _PyAnyCAD.cvar
AxisAlignedBox.BOX_NULL = _PyAnyCAD.cvar.AxisAlignedBox_BOX_NULL
AxisAlignedBox.BOX_INFINITE = _PyAnyCAD.cvar.AxisAlignedBox_BOX_INFINITE

class PlaneBoundedVolume(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    planes = property(_PyAnyCAD.PlaneBoundedVolume_planes_get, _PyAnyCAD.PlaneBoundedVolume_planes_set)
    outside = property(_PyAnyCAD.PlaneBoundedVolume_outside_get, _PyAnyCAD.PlaneBoundedVolume_outside_set)

    def __init__(self, *args):
        _PyAnyCAD.PlaneBoundedVolume_swiginit(self, _PyAnyCAD.new_PlaneBoundedVolume(*args))

    def intersects(self, *args):
        return _PyAnyCAD.PlaneBoundedVolume_intersects(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_PlaneBoundedVolume

# Register PlaneBoundedVolume in _PyAnyCAD:
_PyAnyCAD.PlaneBoundedVolume_swigregister(PlaneBoundedVolume)

class ValueRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ValueRange_swiginit(self, _PyAnyCAD.new_ValueRange(*args))

    def SetValue(self, val):
        return _PyAnyCAD.ValueRange_SetValue(self, val)

    def GetValue(self):
        return _PyAnyCAD.ValueRange_GetValue(self)

    def GetMinValue(self):
        return _PyAnyCAD.ValueRange_GetMinValue(self)

    def SetMinValue(self, val):
        return _PyAnyCAD.ValueRange_SetMinValue(self, val)

    def GetMaxValue(self):
        return _PyAnyCAD.ValueRange_GetMaxValue(self)

    def SetMaxValue(self, val):
        return _PyAnyCAD.ValueRange_SetMaxValue(self, val)

    def SetRange(self, minV, maxV):
        return _PyAnyCAD.ValueRange_SetRange(self, minV, maxV)

    def IsValidValue(self, val):
        return _PyAnyCAD.ValueRange_IsValidValue(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_ValueRange

# Register ValueRange in _PyAnyCAD:
_PyAnyCAD.ValueRange_swigregister(ValueRange)

class ElementId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ElementId_swiginit(self, _PyAnyCAD.new_ElementId(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ElementId

    def GetInteger(self):
        return _PyAnyCAD.ElementId_GetInteger(self)

    def SetInteger(self, val):
        return _PyAnyCAD.ElementId_SetInteger(self, val)

    @staticmethod
    def NewId():
        return _PyAnyCAD.ElementId_NewId()

    def IsValid(self):
        return _PyAnyCAD.ElementId_IsValid(self)

# Register ElementId in _PyAnyCAD:
_PyAnyCAD.ElementId_swigregister(ElementId)
ElementId.InvalidId = _PyAnyCAD.cvar.ElementId_InvalidId

def ElementId_NewId():
    return _PyAnyCAD.ElementId_NewId()

class ElementIdSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.ElementIdSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.ElementIdSet___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.ElementIdSet___bool__(self)

    def __len__(self):
        return _PyAnyCAD.ElementIdSet___len__(self)

    def append(self, x):
        return _PyAnyCAD.ElementIdSet_append(self, x)

    def __contains__(self, x):
        return _PyAnyCAD.ElementIdSet___contains__(self, x)

    def __getitem__(self, i):
        return _PyAnyCAD.ElementIdSet___getitem__(self, i)

    def add(self, x):
        return _PyAnyCAD.ElementIdSet_add(self, x)

    def discard(self, x):
        return _PyAnyCAD.ElementIdSet_discard(self, x)

    def __init__(self, *args):
        _PyAnyCAD.ElementIdSet_swiginit(self, _PyAnyCAD.new_ElementIdSet(*args))

    def empty(self):
        return _PyAnyCAD.ElementIdSet_empty(self)

    def size(self):
        return _PyAnyCAD.ElementIdSet_size(self)

    def clear(self):
        return _PyAnyCAD.ElementIdSet_clear(self)

    def swap(self, v):
        return _PyAnyCAD.ElementIdSet_swap(self, v)

    def count(self, x):
        return _PyAnyCAD.ElementIdSet_count(self, x)

    def begin(self):
        return _PyAnyCAD.ElementIdSet_begin(self)

    def end(self):
        return _PyAnyCAD.ElementIdSet_end(self)

    def rbegin(self):
        return _PyAnyCAD.ElementIdSet_rbegin(self)

    def rend(self):
        return _PyAnyCAD.ElementIdSet_rend(self)

    def erase(self, *args):
        return _PyAnyCAD.ElementIdSet_erase(self, *args)

    def find(self, x):
        return _PyAnyCAD.ElementIdSet_find(self, x)

    def lower_bound(self, x):
        return _PyAnyCAD.ElementIdSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _PyAnyCAD.ElementIdSet_upper_bound(self, x)

    def equal_range(self, x):
        return _PyAnyCAD.ElementIdSet_equal_range(self, x)

    def insert(self, __x):
        return _PyAnyCAD.ElementIdSet_insert(self, __x)
    __swig_destroy__ = _PyAnyCAD.delete_ElementIdSet

# Register ElementIdSet in _PyAnyCAD:
_PyAnyCAD.ElementIdSet_swigregister(ElementIdSet)

class ElementIdList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.ElementIdList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.ElementIdList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.ElementIdList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.ElementIdList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.ElementIdList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.ElementIdList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.ElementIdList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.ElementIdList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.ElementIdList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.ElementIdList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.ElementIdList_pop(self)

    def append(self, x):
        return _PyAnyCAD.ElementIdList_append(self, x)

    def empty(self):
        return _PyAnyCAD.ElementIdList_empty(self)

    def size(self):
        return _PyAnyCAD.ElementIdList_size(self)

    def swap(self, v):
        return _PyAnyCAD.ElementIdList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.ElementIdList_begin(self)

    def end(self):
        return _PyAnyCAD.ElementIdList_end(self)

    def rbegin(self):
        return _PyAnyCAD.ElementIdList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.ElementIdList_rend(self)

    def clear(self):
        return _PyAnyCAD.ElementIdList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.ElementIdList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.ElementIdList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.ElementIdList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.ElementIdList_swiginit(self, _PyAnyCAD.new_ElementIdList(*args))

    def push_back(self, x):
        return _PyAnyCAD.ElementIdList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.ElementIdList_front(self)

    def back(self):
        return _PyAnyCAD.ElementIdList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.ElementIdList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.ElementIdList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.ElementIdList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.ElementIdList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.ElementIdList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_ElementIdList

# Register ElementIdList in _PyAnyCAD:
_PyAnyCAD.ElementIdList_swigregister(ElementIdList)

class GfxObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.GfxObject_swiginit(self, _PyAnyCAD.new_GfxObject())
    __swig_destroy__ = _PyAnyCAD.delete_GfxObject

    def GetUuid(self):
        return _PyAnyCAD.GfxObject_GetUuid(self)

    def SetUuid(self, val):
        return _PyAnyCAD.GfxObject_SetUuid(self, val)

# Register GfxObject in _PyAnyCAD:
_PyAnyCAD.GfxObject_swigregister(GfxObject)

EnumShapeFilter_Zero = _PyAnyCAD.EnumShapeFilter_Zero
EnumShapeFilter_Vertex = _PyAnyCAD.EnumShapeFilter_Vertex
EnumShapeFilter_Edge = _PyAnyCAD.EnumShapeFilter_Edge
EnumShapeFilter_Face = _PyAnyCAD.EnumShapeFilter_Face
EnumShapeFilter_EdgeFace = _PyAnyCAD.EnumShapeFilter_EdgeFace
EnumShapeFilter_VertexEdgeFace = _PyAnyCAD.EnumShapeFilter_VertexEdgeFace
EnumShapeFilter_LeafNode = _PyAnyCAD.EnumShapeFilter_LeafNode
EnumShapeFilter_RootNode = _PyAnyCAD.EnumShapeFilter_RootNode
class IntersectPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.IntersectPoint_swiginit(self, _PyAnyCAD.new_IntersectPoint(*args))

    def GetShapeType(self):
        return _PyAnyCAD.IntersectPoint_GetShapeType(self)

    def SetShapeType(self, val):
        return _PyAnyCAD.IntersectPoint_SetShapeType(self, val)

    def GetPrimitiveIndex(self):
        return _PyAnyCAD.IntersectPoint_GetPrimitiveIndex(self)

    def SetPrimitiveIndex(self, val):
        return _PyAnyCAD.IntersectPoint_SetPrimitiveIndex(self, val)

    def GetDistance(self):
        return _PyAnyCAD.IntersectPoint_GetDistance(self)

    def SetDistance(self, val):
        return _PyAnyCAD.IntersectPoint_SetDistance(self, val)

    def GetPosition(self):
        return _PyAnyCAD.IntersectPoint_GetPosition(self)

    def GetLocalPosition(self):
        return _PyAnyCAD.IntersectPoint_GetLocalPosition(self)

    def SetLocalPosition(self, val):
        return _PyAnyCAD.IntersectPoint_SetLocalPosition(self, val)

    def GetShapeIndex(self):
        return _PyAnyCAD.IntersectPoint_GetShapeIndex(self)

    def SetShapeIndex(self, val):
        return _PyAnyCAD.IntersectPoint_SetShapeIndex(self, val)

    def GetTopoShapeId(self):
        return _PyAnyCAD.IntersectPoint_GetTopoShapeId(self)

    def SetTopoShapeId(self, val):
        return _PyAnyCAD.IntersectPoint_SetTopoShapeId(self, val)

    def IsNull(self):
        return _PyAnyCAD.IntersectPoint_IsNull(self)

    def Transform(self, trf):
        return _PyAnyCAD.IntersectPoint_Transform(self, trf)
    __swig_destroy__ = _PyAnyCAD.delete_IntersectPoint

# Register IntersectPoint in _PyAnyCAD:
_PyAnyCAD.IntersectPoint_swigregister(IntersectPoint)

EnumPrimitiveType_POINTS = _PyAnyCAD.EnumPrimitiveType_POINTS
EnumPrimitiveType_LINES = _PyAnyCAD.EnumPrimitiveType_LINES
EnumPrimitiveType_LINE_STRIP = _PyAnyCAD.EnumPrimitiveType_LINE_STRIP
EnumPrimitiveType_LINE_LOOP = _PyAnyCAD.EnumPrimitiveType_LINE_LOOP
EnumPrimitiveType_TRIANGLES = _PyAnyCAD.EnumPrimitiveType_TRIANGLES
EnumPrimitiveType_TRIANGLE_STRIP = _PyAnyCAD.EnumPrimitiveType_TRIANGLE_STRIP
EnumPrimitiveType_TRIANGLE_FAN = _PyAnyCAD.EnumPrimitiveType_TRIANGLE_FAN
EnumAttributeComponents_One = _PyAnyCAD.EnumAttributeComponents_One
EnumAttributeComponents_Two = _PyAnyCAD.EnumAttributeComponents_Two
EnumAttributeComponents_Three = _PyAnyCAD.EnumAttributeComponents_Three
EnumAttributeComponents_Four = _PyAnyCAD.EnumAttributeComponents_Four
EnumBufferDataUsage_STATIC_DRAW = _PyAnyCAD.EnumBufferDataUsage_STATIC_DRAW
EnumBufferDataUsage_STATIC_READ = _PyAnyCAD.EnumBufferDataUsage_STATIC_READ
EnumBufferDataUsage_STATIC_COPY = _PyAnyCAD.EnumBufferDataUsage_STATIC_COPY
EnumBufferDataUsage_DYNAMIC_DRAW = _PyAnyCAD.EnumBufferDataUsage_DYNAMIC_DRAW
EnumBufferDataUsage_DYNAMIC_READ = _PyAnyCAD.EnumBufferDataUsage_DYNAMIC_READ
EnumBufferDataUsage_DYNAMIC_COPY = _PyAnyCAD.EnumBufferDataUsage_DYNAMIC_COPY
EnumBufferDataUsage_STREAM_DRAW = _PyAnyCAD.EnumBufferDataUsage_STREAM_DRAW
EnumBufferDataUsage_STREAM_READ = _PyAnyCAD.EnumBufferDataUsage_STREAM_READ
EnumBufferDataUsage_STREAM_COPY = _PyAnyCAD.EnumBufferDataUsage_STREAM_COPY
EnumAttributeSemantic_Position = _PyAnyCAD.EnumAttributeSemantic_Position
EnumAttributeSemantic_Normal = _PyAnyCAD.EnumAttributeSemantic_Normal
EnumAttributeSemantic_TextureCoord = _PyAnyCAD.EnumAttributeSemantic_TextureCoord
EnumAttributeSemantic_Color = _PyAnyCAD.EnumAttributeSemantic_Color
EnumAttributeSemantic_TextureCoord2 = _PyAnyCAD.EnumAttributeSemantic_TextureCoord2
EnumAttributeSemantic_MorphTarget0 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget0
EnumAttributeSemantic_MorphTarget1 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget1
EnumAttributeSemantic_MorphTarget2 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget2
EnumAttributeSemantic_MorphTarget3 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget3
EnumAttributeSemantic_MorphTarget4 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget4
EnumAttributeSemantic_MorphTarget5 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget5
EnumAttributeSemantic_MorphTarget6 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget6
EnumAttributeSemantic_MorphTarget7 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget7
EnumAttributeSemantic_MorphNormal0 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal0
EnumAttributeSemantic_MorphNormal1 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal1
EnumAttributeSemantic_MorphNormal2 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal2
EnumAttributeSemantic_MorphNormal3 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal3
EnumAttributeSemantic_SkinIndex = _PyAnyCAD.EnumAttributeSemantic_SkinIndex
EnumAttributeSemantic_SkinWeight = _PyAnyCAD.EnumAttributeSemantic_SkinWeight
EnumAttributeSemantic_InstanceMatrix = _PyAnyCAD.EnumAttributeSemantic_InstanceMatrix
EnumAttributeSemantic_Tangent = _PyAnyCAD.EnumAttributeSemantic_Tangent
EnumAttributeSemantic_Customized1 = _PyAnyCAD.EnumAttributeSemantic_Customized1
EnumAttributeSemantic_Customized2 = _PyAnyCAD.EnumAttributeSemantic_Customized2
EnumAttributeSemantic_Customized3 = _PyAnyCAD.EnumAttributeSemantic_Customized3
EnumAttributeSemantic_LineDistance = _PyAnyCAD.EnumAttributeSemantic_LineDistance
EnumVertexAttributeLayout_SoA = _PyAnyCAD.EnumVertexAttributeLayout_SoA
EnumVertexAttributeLayout_AoSPCPC = _PyAnyCAD.EnumVertexAttributeLayout_AoSPCPC
EnumVertexAttributeLayout_AoSPPCC = _PyAnyCAD.EnumVertexAttributeLayout_AoSPPCC
class BufferAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.BufferAttribute_GetData(self)

    def SetData(self, val):
        return _PyAnyCAD.BufferAttribute_SetData(self, val)

    def GetSemantic(self):
        return _PyAnyCAD.BufferAttribute_GetSemantic(self)

    def SetSemantic(self, val):
        return _PyAnyCAD.BufferAttribute_SetSemantic(self, val)

    def GetComponents(self):
        return _PyAnyCAD.BufferAttribute_GetComponents(self)

    def SetComponents(self, val):
        return _PyAnyCAD.BufferAttribute_SetComponents(self, val)

    def GetByteStride(self):
        return _PyAnyCAD.BufferAttribute_GetByteStride(self)

    def SetByteStride(self, val):
        return _PyAnyCAD.BufferAttribute_SetByteStride(self, val)

    def GetByteOffset(self):
        return _PyAnyCAD.BufferAttribute_GetByteOffset(self)

    def SetByteOffset(self, val):
        return _PyAnyCAD.BufferAttribute_SetByteOffset(self, val)

    def GetDataUsage(self):
        return _PyAnyCAD.BufferAttribute_GetDataUsage(self)

    def SetDataUsage(self, val):
        return _PyAnyCAD.BufferAttribute_SetDataUsage(self, val)

    def GetDivisor(self):
        return _PyAnyCAD.BufferAttribute_GetDivisor(self)

    def SetDivisor(self, val):
        return _PyAnyCAD.BufferAttribute_SetDivisor(self, val)

    def GetNormalized(self):
        return _PyAnyCAD.BufferAttribute_GetNormalized(self)

    def SetNormalized(self, val):
        return _PyAnyCAD.BufferAttribute_SetNormalized(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.BufferAttribute_GetUpdateVersion(self)

    def GetDataType(self):
        return _PyAnyCAD.BufferAttribute_GetDataType(self)

    def GetCount(self):
        return _PyAnyCAD.BufferAttribute_GetCount(self)

    def GetByteSize(self):
        return _PyAnyCAD.BufferAttribute_GetByteSize(self)

    def RequestUpdate(self):
        return _PyAnyCAD.BufferAttribute_RequestUpdate(self)
    __swig_destroy__ = _PyAnyCAD.delete_BufferAttribute

# Register BufferAttribute in _PyAnyCAD:
_PyAnyCAD.BufferAttribute_swigregister(BufferAttribute)

class ElementAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.ElementAttribute_GetData(self)

    def SetData(self, val):
        return _PyAnyCAD.ElementAttribute_SetData(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.ElementAttribute_GetUpdateVersion(self)

    def GetCount(self):
        return _PyAnyCAD.ElementAttribute_GetCount(self)

    def GetByteSize(self):
        return _PyAnyCAD.ElementAttribute_GetByteSize(self)

    def GetDataType(self):
        return _PyAnyCAD.ElementAttribute_GetDataType(self)

    def RequestUpdate(self):
        return _PyAnyCAD.ElementAttribute_RequestUpdate(self)
    __swig_destroy__ = _PyAnyCAD.delete_ElementAttribute

# Register ElementAttribute in _PyAnyCAD:
_PyAnyCAD.ElementAttribute_swigregister(ElementAttribute)

class BufferGeometryList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.BufferGeometryList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.BufferGeometryList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.BufferGeometryList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.BufferGeometryList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.BufferGeometryList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.BufferGeometryList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.BufferGeometryList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.BufferGeometryList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.BufferGeometryList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.BufferGeometryList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.BufferGeometryList_pop(self)

    def append(self, x):
        return _PyAnyCAD.BufferGeometryList_append(self, x)

    def empty(self):
        return _PyAnyCAD.BufferGeometryList_empty(self)

    def size(self):
        return _PyAnyCAD.BufferGeometryList_size(self)

    def swap(self, v):
        return _PyAnyCAD.BufferGeometryList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.BufferGeometryList_begin(self)

    def end(self):
        return _PyAnyCAD.BufferGeometryList_end(self)

    def rbegin(self):
        return _PyAnyCAD.BufferGeometryList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.BufferGeometryList_rend(self)

    def clear(self):
        return _PyAnyCAD.BufferGeometryList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.BufferGeometryList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.BufferGeometryList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.BufferGeometryList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.BufferGeometryList_swiginit(self, _PyAnyCAD.new_BufferGeometryList(*args))

    def push_back(self, x):
        return _PyAnyCAD.BufferGeometryList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.BufferGeometryList_front(self)

    def back(self):
        return _PyAnyCAD.BufferGeometryList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.BufferGeometryList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.BufferGeometryList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.BufferGeometryList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.BufferGeometryList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.BufferGeometryList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_BufferGeometryList

# Register BufferGeometryList in _PyAnyCAD:
_PyAnyCAD.BufferGeometryList_swigregister(BufferGeometryList)

class BufferGeometry(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, instanceCount=1):
        _PyAnyCAD.BufferGeometry_swiginit(self, _PyAnyCAD.new_BufferGeometry(type, instanceCount))
    __swig_destroy__ = _PyAnyCAD.delete_BufferGeometry

    def GetPrimitiveType(self):
        return _PyAnyCAD.BufferGeometry_GetPrimitiveType(self)

    def SetPrimitiveType(self, val):
        return _PyAnyCAD.BufferGeometry_SetPrimitiveType(self, val)

    def GetIndex(self):
        return _PyAnyCAD.BufferGeometry_GetIndex(self)

    def GetInstanceCount(self):
        return _PyAnyCAD.BufferGeometry_GetInstanceCount(self)

    def SetInstanceCount(self, val):
        return _PyAnyCAD.BufferGeometry_SetInstanceCount(self, val)

    def GetMultiDraw(self):
        return _PyAnyCAD.BufferGeometry_GetMultiDraw(self)

    def SetMultiDraw(self, val):
        return _PyAnyCAD.BufferGeometry_SetMultiDraw(self, val)

    def GetSubDrawIndex(self):
        return _PyAnyCAD.BufferGeometry_GetSubDrawIndex(self)

    def SetSubDrawIndex(self, val):
        return _PyAnyCAD.BufferGeometry_SetSubDrawIndex(self, val)

    def GetSubDrawCount(self):
        return _PyAnyCAD.BufferGeometry_GetSubDrawCount(self)

    def SetSubDrawCount(self, val):
        return _PyAnyCAD.BufferGeometry_SetSubDrawCount(self, val)

    def GetBoundingBox(self):
        return _PyAnyCAD.BufferGeometry_GetBoundingBox(self)

    def SetBoundingBox(self, val):
        return _PyAnyCAD.BufferGeometry_SetBoundingBox(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.BufferGeometry_GetUpdateVersion(self)

    def GetVertexCount(self):
        return _PyAnyCAD.BufferGeometry_GetVertexCount(self)

    def IsEmpty(self):
        return _PyAnyCAD.BufferGeometry_IsEmpty(self)

    def RequestUpdate(self):
        return _PyAnyCAD.BufferGeometry_RequestUpdate(self)

    def GetAttribute(self, idx):
        return _PyAnyCAD.BufferGeometry_GetAttribute(self, idx)

    def AddAttribute(self, loc, component, data):
        return _PyAnyCAD.BufferGeometry_AddAttribute(self, loc, component, data)

    def SetIndex(self, data):
        return _PyAnyCAD.BufferGeometry_SetIndex(self, data)

    def FindAttribute(self, location):
        return _PyAnyCAD.BufferGeometry_FindAttribute(self, location)

    def HasColorAttribute(self):
        return _PyAnyCAD.BufferGeometry_HasColorAttribute(self)

    def HasAttribute(self, semantic):
        return _PyAnyCAD.BufferGeometry_HasAttribute(self, semantic)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.BufferGeometry_ComputeBoundingBox(self)

    def GetSafeBoudingBox(self):
        return _PyAnyCAD.BufferGeometry_GetSafeBoudingBox(self)

# Register BufferGeometry in _PyAnyCAD:
_PyAnyCAD.BufferGeometry_swigregister(BufferGeometry)

class NormalCalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ComputeVertexNormals(pGeometry):
        return _PyAnyCAD.NormalCalculator_ComputeVertexNormals(pGeometry)

    def __init__(self):
        _PyAnyCAD.NormalCalculator_swiginit(self, _PyAnyCAD.new_NormalCalculator())
    __swig_destroy__ = _PyAnyCAD.delete_NormalCalculator

# Register NormalCalculator in _PyAnyCAD:
_PyAnyCAD.NormalCalculator_swigregister(NormalCalculator)

def NormalCalculator_ComputeVertexNormals(pGeometry):
    return _PyAnyCAD.NormalCalculator_ComputeVertexNormals(pGeometry)

class Uniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Uniform

    @staticmethod
    def CreateTextureUnit(val):
        return _PyAnyCAD.Uniform_CreateTextureUnit(val)

    @staticmethod
    def Create(*args):
        return _PyAnyCAD.Uniform_Create(*args)

    def Clone(self):
        return _PyAnyCAD.Uniform_Clone(self)

# Register Uniform in _PyAnyCAD:
_PyAnyCAD.Uniform_swigregister(Uniform)

def Uniform_CreateTextureUnit(val):
    return _PyAnyCAD.Uniform_CreateTextureUnit(val)

def Uniform_Create(*args):
    return _PyAnyCAD.Uniform_Create(*args)

class UniformSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.UniformSet_swiginit(self, _PyAnyCAD.new_UniformSet())
    __swig_destroy__ = _PyAnyCAD.delete_UniformSet

    def SetUniform(self, name, val):
        return _PyAnyCAD.UniformSet_SetUniform(self, name, val)

    def Find(self, name):
        return _PyAnyCAD.UniformSet_Find(self, name)

    def Append(self, uniformSet):
        return _PyAnyCAD.UniformSet_Append(self, uniformSet)

# Register UniformSet in _PyAnyCAD:
_PyAnyCAD.UniformSet_swigregister(UniformSet)

class RawShader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniqueName, vs, fs):
        _PyAnyCAD.RawShader_swiginit(self, _PyAnyCAD.new_RawShader(uniqueName, vs, fs))
    __swig_destroy__ = _PyAnyCAD.delete_RawShader

    def GetName(self):
        return _PyAnyCAD.RawShader_GetName(self)

    def GetUniqueId(self):
        return _PyAnyCAD.RawShader_GetUniqueId(self)

    def GetUniforms(self):
        return _PyAnyCAD.RawShader_GetUniforms(self)

    def GetVertexShader(self):
        return _PyAnyCAD.RawShader_GetVertexShader(self)

    def GetFragmentShader(self):
        return _PyAnyCAD.RawShader_GetFragmentShader(self)

    def GetStatic(self):
        return _PyAnyCAD.RawShader_GetStatic(self)

    def SetStatic(self, val):
        return _PyAnyCAD.RawShader_SetStatic(self, val)

    def SetUniform(self, name, val):
        return _PyAnyCAD.RawShader_SetUniform(self, name, val)

    def BindUniformBlock(self, blockname, bindingPoint):
        return _PyAnyCAD.RawShader_BindUniformBlock(self, blockname, bindingPoint)

    def HasBindingPoint(self, bindingPoint):
        return _PyAnyCAD.RawShader_HasBindingPoint(self, bindingPoint)

    def Dump(self, outdir):
        return _PyAnyCAD.RawShader_Dump(self, outdir)

    @staticmethod
    def Load(name, fileNameVS, fileNameFS, fileNameUniforms):
        return _PyAnyCAD.RawShader_Load(name, fileNameVS, fileNameFS, fileNameUniforms)

# Register RawShader in _PyAnyCAD:
_PyAnyCAD.RawShader_swigregister(RawShader)

def RawShader_Load(name, fileNameVS, fileNameFS, fileNameUniforms):
    return _PyAnyCAD.RawShader_Load(name, fileNameVS, fileNameFS, fileNameUniforms)

EnumTextureTarget_TEXTURE_2D = _PyAnyCAD.EnumTextureTarget_TEXTURE_2D
EnumTextureTarget_TEXTURE_3D = _PyAnyCAD.EnumTextureTarget_TEXTURE_3D
EnumTextureTarget_TEXTURE_2D_ARRAY = _PyAnyCAD.EnumTextureTarget_TEXTURE_2D_ARRAY
EnumTextureTarget_TEXTURE_CUBE_MAP = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP
EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_X = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_X
EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_X = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_X
EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Y = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Y
EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Y = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Y
EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Z = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Z
EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Z = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Z
EnumEncoding_LinearEncoding = _PyAnyCAD.EnumEncoding_LinearEncoding
EnumEncoding_sRGBEncoding = _PyAnyCAD.EnumEncoding_sRGBEncoding
EnumEncoding_GammaEncoding = _PyAnyCAD.EnumEncoding_GammaEncoding
EnumEncoding_RGBEEncoding = _PyAnyCAD.EnumEncoding_RGBEEncoding
EnumEncoding_LogLuvEncoding = _PyAnyCAD.EnumEncoding_LogLuvEncoding
EnumEncoding_RGBM7Encoding = _PyAnyCAD.EnumEncoding_RGBM7Encoding
EnumEncoding_RGBM16Encoding = _PyAnyCAD.EnumEncoding_RGBM16Encoding
EnumEncoding_RGBDEncoding = _PyAnyCAD.EnumEncoding_RGBDEncoding
EnumDepthPacking_NoPacking = _PyAnyCAD.EnumDepthPacking_NoPacking
EnumDepthPacking_BasicDepthPacking = _PyAnyCAD.EnumDepthPacking_BasicDepthPacking
EnumDepthPacking_RGBADepthPacking = _PyAnyCAD.EnumDepthPacking_RGBADepthPacking
EnumNormalMapType_ObjectSpace = _PyAnyCAD.EnumNormalMapType_ObjectSpace
EnumNormalMapType_TangentSpace = _PyAnyCAD.EnumNormalMapType_TangentSpace
EnumEnvBlendingMode_NoBlend = _PyAnyCAD.EnumEnvBlendingMode_NoBlend
EnumEnvBlendingMode_MultiplyOperation = _PyAnyCAD.EnumEnvBlendingMode_MultiplyOperation
EnumEnvBlendingMode_MixOperation = _PyAnyCAD.EnumEnvBlendingMode_MixOperation
EnumEnvBlendingMode_AddOperation = _PyAnyCAD.EnumEnvBlendingMode_AddOperation
EnumMapping_UVMapping = _PyAnyCAD.EnumMapping_UVMapping
EnumMapping_CubeReflectionMapping = _PyAnyCAD.EnumMapping_CubeReflectionMapping
EnumMapping_CubeRefractionMapping = _PyAnyCAD.EnumMapping_CubeRefractionMapping
EnumMapping_EquirectangularReflectionMapping = _PyAnyCAD.EnumMapping_EquirectangularReflectionMapping
EnumMapping_EquirectangularRefractionMapping = _PyAnyCAD.EnumMapping_EquirectangularRefractionMapping
EnumMapping_CubeUVReflectionMapping = _PyAnyCAD.EnumMapping_CubeUVReflectionMapping
EnumMapping_CubeUVRefractionMapping = _PyAnyCAD.EnumMapping_CubeUVRefractionMapping
EnumTextureFilterType_NEAREST = _PyAnyCAD.EnumTextureFilterType_NEAREST
EnumTextureFilterType_LINEAR = _PyAnyCAD.EnumTextureFilterType_LINEAR
EnumTextureFilterType_NEAREST_MIPMAP_NEAREST = _PyAnyCAD.EnumTextureFilterType_NEAREST_MIPMAP_NEAREST
EnumTextureFilterType_LINEAR_MIPMAP_NEARES = _PyAnyCAD.EnumTextureFilterType_LINEAR_MIPMAP_NEARES
EnumTextureFilterType_NEAREST_MIPMAP_LINEAR = _PyAnyCAD.EnumTextureFilterType_NEAREST_MIPMAP_LINEAR
EnumTextureFilterType_LINEAR_MIPMAP_LINEAR = _PyAnyCAD.EnumTextureFilterType_LINEAR_MIPMAP_LINEAR
EnumTextureWrappingType_REPEAT = _PyAnyCAD.EnumTextureWrappingType_REPEAT
EnumTextureWrappingType_MIRRORED_REPEAT = _PyAnyCAD.EnumTextureWrappingType_MIRRORED_REPEAT
EnumTextureWrappingType_CLAMP_TO_EDGE = _PyAnyCAD.EnumTextureWrappingType_CLAMP_TO_EDGE
EnumTextureWrappingType_CLAMP_TO_BORDER = _PyAnyCAD.EnumTextureWrappingType_CLAMP_TO_BORDER
EnumTextureInternalFormat_RGB = _PyAnyCAD.EnumTextureInternalFormat_RGB
EnumTextureInternalFormat_RGBA = _PyAnyCAD.EnumTextureInternalFormat_RGBA
EnumTextureInternalFormat_LUMINANCE_ALPHA = _PyAnyCAD.EnumTextureInternalFormat_LUMINANCE_ALPHA
EnumTextureInternalFormat_LUMINANCE = _PyAnyCAD.EnumTextureInternalFormat_LUMINANCE
EnumTextureInternalFormat_ALPHA = _PyAnyCAD.EnumTextureInternalFormat_ALPHA
EnumTextureInternalFormat_R8 = _PyAnyCAD.EnumTextureInternalFormat_R8
EnumTextureInternalFormat_R8_SNORM = _PyAnyCAD.EnumTextureInternalFormat_R8_SNORM
EnumTextureInternalFormat_R16F = _PyAnyCAD.EnumTextureInternalFormat_R16F
EnumTextureInternalFormat_R32F = _PyAnyCAD.EnumTextureInternalFormat_R32F
EnumTextureInternalFormat_RG8 = _PyAnyCAD.EnumTextureInternalFormat_RG8
EnumTextureInternalFormat_RG8_SNORM = _PyAnyCAD.EnumTextureInternalFormat_RG8_SNORM
EnumTextureInternalFormat_RG16F = _PyAnyCAD.EnumTextureInternalFormat_RG16F
EnumTextureInternalFormat_RG32F = _PyAnyCAD.EnumTextureInternalFormat_RG32F
EnumTextureInternalFormat_RGB16F = _PyAnyCAD.EnumTextureInternalFormat_RGB16F
EnumTextureInternalFormat_RGB32F = _PyAnyCAD.EnumTextureInternalFormat_RGB32F
EnumTextureInternalFormat_RGBA16F = _PyAnyCAD.EnumTextureInternalFormat_RGBA16F
EnumTextureInternalFormat_RGBA8 = _PyAnyCAD.EnumTextureInternalFormat_RGBA8
EnumTextureInternalFormat_DEPTH_COMPONENT = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT
EnumTextureInternalFormat_DEPTH_COMPONENT16 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT16
EnumTextureInternalFormat_DEPTH_COMPONENT24 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT24
EnumTextureInternalFormat_DEPTH_COMPONENT32F = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT32F
EnumTextureInternalFormat_DEPTH24_STENCIL8 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH24_STENCIL8
EnumTextureInternalFormat_DEPTH32F_STENCIL8 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH32F_STENCIL8
EnumTextureFormat_NOT_USED = _PyAnyCAD.EnumTextureFormat_NOT_USED
EnumTextureFormat_RGB = _PyAnyCAD.EnumTextureFormat_RGB
EnumTextureFormat_RGBA = _PyAnyCAD.EnumTextureFormat_RGBA
EnumTextureFormat_LUMINANCE_ALPHA = _PyAnyCAD.EnumTextureFormat_LUMINANCE_ALPHA
EnumTextureFormat_LUMINANCE = _PyAnyCAD.EnumTextureFormat_LUMINANCE
EnumTextureFormat_ALPHA = _PyAnyCAD.EnumTextureFormat_ALPHA
EnumTextureFormat_RED = _PyAnyCAD.EnumTextureFormat_RED
EnumTextureFormat_RED_INTEGER = _PyAnyCAD.EnumTextureFormat_RED_INTEGER
EnumTextureFormat_RG = _PyAnyCAD.EnumTextureFormat_RG
EnumTextureFormat_RG_INTEGER = _PyAnyCAD.EnumTextureFormat_RG_INTEGER
EnumTextureFormat_DEPTH_COMPONENT = _PyAnyCAD.EnumTextureFormat_DEPTH_COMPONENT
EnumTextureFormat_DEPTH_STENCIL = _PyAnyCAD.EnumTextureFormat_DEPTH_STENCIL
class Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Image

    def GetWidth(self):
        return _PyAnyCAD.Image_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.Image_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.Image_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.Image_SetHeight(self, val)

    def GetChannel(self):
        return _PyAnyCAD.Image_GetChannel(self)

    def SetChannel(self, val):
        return _PyAnyCAD.Image_SetChannel(self, val)

    def GetInternalFormat(self):
        return _PyAnyCAD.Image_GetInternalFormat(self)

    def SetInternalFormat(self, val):
        return _PyAnyCAD.Image_SetInternalFormat(self, val)

    def GetFormat(self):
        return _PyAnyCAD.Image_GetFormat(self)

    def SetFormat(self, val):
        return _PyAnyCAD.Image_SetFormat(self, val)

    def GetDataType(self):
        return _PyAnyCAD.Image_GetDataType(self)

    def SetDataType(self, val):
        return _PyAnyCAD.Image_SetDataType(self, val)

# Register Image in _PyAnyCAD:
_PyAnyCAD.Image_swigregister(Image)

class FileImage(Image):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_FileImage

    def GetFileName(self):
        return _PyAnyCAD.FileImage_GetFileName(self)

    def SetFileName(self, val):
        return _PyAnyCAD.FileImage_SetFileName(self, val)

    @staticmethod
    def Create(fileName):
        return _PyAnyCAD.FileImage_Create(fileName)

    def Load(self):
        return _PyAnyCAD.FileImage_Load(self)

    def Unload(self):
        return _PyAnyCAD.FileImage_Unload(self)

# Register FileImage in _PyAnyCAD:
_PyAnyCAD.FileImage_swigregister(FileImage)

def FileImage_Create(fileName):
    return _PyAnyCAD.FileImage_Create(fileName)

class MemoryImage(Image):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arrayBuffer, width, height, internalFormat, format, dataType):
        _PyAnyCAD.MemoryImage_swiginit(self, _PyAnyCAD.new_MemoryImage(arrayBuffer, width, height, internalFormat, format, dataType))
    __swig_destroy__ = _PyAnyCAD.delete_MemoryImage

    def GetData(self):
        return _PyAnyCAD.MemoryImage_GetData(self)

# Register MemoryImage in _PyAnyCAD:
_PyAnyCAD.MemoryImage_swigregister(MemoryImage)

class ImageList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.ImageList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.ImageList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.ImageList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.ImageList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.ImageList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.ImageList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.ImageList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.ImageList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.ImageList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.ImageList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.ImageList_pop(self)

    def append(self, x):
        return _PyAnyCAD.ImageList_append(self, x)

    def empty(self):
        return _PyAnyCAD.ImageList_empty(self)

    def size(self):
        return _PyAnyCAD.ImageList_size(self)

    def swap(self, v):
        return _PyAnyCAD.ImageList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.ImageList_begin(self)

    def end(self):
        return _PyAnyCAD.ImageList_end(self)

    def rbegin(self):
        return _PyAnyCAD.ImageList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.ImageList_rend(self)

    def clear(self):
        return _PyAnyCAD.ImageList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.ImageList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.ImageList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.ImageList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.ImageList_swiginit(self, _PyAnyCAD.new_ImageList(*args))

    def push_back(self, x):
        return _PyAnyCAD.ImageList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.ImageList_front(self)

    def back(self):
        return _PyAnyCAD.ImageList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.ImageList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.ImageList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.ImageList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.ImageList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.ImageList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_ImageList

# Register ImageList in _PyAnyCAD:
_PyAnyCAD.ImageList_swigregister(ImageList)

EnumTextureUnit_Null = _PyAnyCAD.EnumTextureUnit_Null
EnumTextureUnit_TU0 = _PyAnyCAD.EnumTextureUnit_TU0
EnumTextureUnit_TU1 = _PyAnyCAD.EnumTextureUnit_TU1
EnumTextureUnit_TU2 = _PyAnyCAD.EnumTextureUnit_TU2
EnumTextureUnit_TU3 = _PyAnyCAD.EnumTextureUnit_TU3
EnumTextureUnit_TU4 = _PyAnyCAD.EnumTextureUnit_TU4
EnumTextureUnit_TU5 = _PyAnyCAD.EnumTextureUnit_TU5
EnumTextureUnit_TU6 = _PyAnyCAD.EnumTextureUnit_TU6
EnumTextureUnit_TU7 = _PyAnyCAD.EnumTextureUnit_TU7
EnumTextureUnit_TU8 = _PyAnyCAD.EnumTextureUnit_TU8
class TextureDesc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.TextureDesc_swiginit(self, _PyAnyCAD.new_TextureDesc(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TextureDesc

    def GetInternalFormat(self):
        return _PyAnyCAD.TextureDesc_GetInternalFormat(self)

    def SetInternalFormat(self, val):
        return _PyAnyCAD.TextureDesc_SetInternalFormat(self, val)

    def GetFormat(self):
        return _PyAnyCAD.TextureDesc_GetFormat(self)

    def SetFormat(self, val):
        return _PyAnyCAD.TextureDesc_SetFormat(self, val)

    def GetDataType(self):
        return _PyAnyCAD.TextureDesc_GetDataType(self)

    def SetDataType(self, val):
        return _PyAnyCAD.TextureDesc_SetDataType(self, val)

    def GetWrapS(self):
        return _PyAnyCAD.TextureDesc_GetWrapS(self)

    def SetWrapS(self, val):
        return _PyAnyCAD.TextureDesc_SetWrapS(self, val)

    def GetWrapT(self):
        return _PyAnyCAD.TextureDesc_GetWrapT(self)

    def SetWrapT(self, val):
        return _PyAnyCAD.TextureDesc_SetWrapT(self, val)

    def GetMinFilter(self):
        return _PyAnyCAD.TextureDesc_GetMinFilter(self)

    def SetMinFilter(self, val):
        return _PyAnyCAD.TextureDesc_SetMinFilter(self, val)

    def GetMagFilter(self):
        return _PyAnyCAD.TextureDesc_GetMagFilter(self)

    def SetMagFilter(self, val):
        return _PyAnyCAD.TextureDesc_SetMagFilter(self, val)

    def GetTarget(self):
        return _PyAnyCAD.TextureDesc_GetTarget(self)

    def SetTarget(self, val):
        return _PyAnyCAD.TextureDesc_SetTarget(self, val)

    def GetLevel(self):
        return _PyAnyCAD.TextureDesc_GetLevel(self)

    def SetLevel(self, val):
        return _PyAnyCAD.TextureDesc_SetLevel(self, val)

    def GetPixelStorei(self):
        return _PyAnyCAD.TextureDesc_GetPixelStorei(self)

    def SetPixelStorei(self, val):
        return _PyAnyCAD.TextureDesc_SetPixelStorei(self, val)

    @staticmethod
    def GetFormatByChannels(nrChannels):
        return _PyAnyCAD.TextureDesc_GetFormatByChannels(nrChannels)

    @staticmethod
    def GetInternalFormatByChannels(format):
        return _PyAnyCAD.TextureDesc_GetInternalFormatByChannels(format)

# Register TextureDesc in _PyAnyCAD:
_PyAnyCAD.TextureDesc_swigregister(TextureDesc)

def TextureDesc_GetFormatByChannels(nrChannels):
    return _PyAnyCAD.TextureDesc_GetFormatByChannels(nrChannels)

def TextureDesc_GetInternalFormatByChannels(format):
    return _PyAnyCAD.TextureDesc_GetInternalFormatByChannels(format)

class Texture(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Texture_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Texture_swiginit(self, _PyAnyCAD.new_Texture(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Texture

    def GetDesc(self):
        return _PyAnyCAD.Texture_GetDesc(self)

    def SetDesc(self, val):
        return _PyAnyCAD.Texture_SetDesc(self, val)

    def GetUniforms(self):
        return _PyAnyCAD.Texture_GetUniforms(self)

    def GetUpdateVersion(self):
        return _PyAnyCAD.Texture_GetUpdateVersion(self)

    def GetEncoding(self):
        return _PyAnyCAD.Texture_GetEncoding(self)

    def SetEncoding(self, val):
        return _PyAnyCAD.Texture_SetEncoding(self, val)

    def GetMapping(self):
        return _PyAnyCAD.Texture_GetMapping(self)

    def SetMapping(self, val):
        return _PyAnyCAD.Texture_SetMapping(self, val)

    def GetTextureType(self):
        return _PyAnyCAD.Texture_GetTextureType(self)

    def SetUniform(self, name, uniform):
        return _PyAnyCAD.Texture_SetUniform(self, name, uniform)

    def IsValid(self):
        return _PyAnyCAD.Texture_IsValid(self)

    def RequestUpdate(self):
        return _PyAnyCAD.Texture_RequestUpdate(self)

# Register Texture in _PyAnyCAD:
_PyAnyCAD.Texture_swigregister(Texture)

def Texture_Cast(obj):
    return _PyAnyCAD.Texture_Cast(obj)

class Texture2D(Texture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Texture2D_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Texture2D_swiginit(self, _PyAnyCAD.new_Texture2D(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Texture2D

    def GetWidth(self):
        return _PyAnyCAD.Texture2D_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.Texture2D_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.Texture2D_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.Texture2D_SetHeight(self, val)

    def GetOffset(self):
        return _PyAnyCAD.Texture2D_GetOffset(self)

    def SetOffset(self, val):
        return _PyAnyCAD.Texture2D_SetOffset(self, val)

    def GetAngle(self):
        return _PyAnyCAD.Texture2D_GetAngle(self)

    def SetAngle(self, val):
        return _PyAnyCAD.Texture2D_SetAngle(self, val)

    def GetRepeat(self):
        return _PyAnyCAD.Texture2D_GetRepeat(self)

    def SetRepeat(self, val):
        return _PyAnyCAD.Texture2D_SetRepeat(self, val)

    def GetCenter(self):
        return _PyAnyCAD.Texture2D_GetCenter(self)

    def SetCenter(self, val):
        return _PyAnyCAD.Texture2D_SetCenter(self, val)

    def GetGenerateMipmap(self):
        return _PyAnyCAD.Texture2D_GetGenerateMipmap(self)

    def SetGenerateMipmap(self, val):
        return _PyAnyCAD.Texture2D_SetGenerateMipmap(self, val)

    def UpdateTransform(self):
        return _PyAnyCAD.Texture2D_UpdateTransform(self)

    def Resize(self, width, height):
        return _PyAnyCAD.Texture2D_Resize(self, width, height)

# Register Texture2D in _PyAnyCAD:
_PyAnyCAD.Texture2D_swigregister(Texture2D)

def Texture2D_Cast(obj):
    return _PyAnyCAD.Texture2D_Cast(obj)

class TextureCube(Texture):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TextureCube_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.TextureCube_swiginit(self, _PyAnyCAD.new_TextureCube(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TextureCube

    def GetWidth(self):
        return _PyAnyCAD.TextureCube_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.TextureCube_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.TextureCube_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.TextureCube_SetHeight(self, val)

    def IsValid(self):
        return _PyAnyCAD.TextureCube_IsValid(self)

# Register TextureCube in _PyAnyCAD:
_PyAnyCAD.TextureCube_swigregister(TextureCube)

def TextureCube_Cast(obj):
    return _PyAnyCAD.TextureCube_Cast(obj)

class ImageTexture2D(Texture2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ImageTexture2D_swiginit(self, _PyAnyCAD.new_ImageTexture2D(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ImageTexture2D

    def GetSource(self):
        return _PyAnyCAD.ImageTexture2D_GetSource(self)

    @staticmethod
    def Create(fileName):
        return _PyAnyCAD.ImageTexture2D_Create(fileName)

    def AsyncLoad(self, url):
        return _PyAnyCAD.ImageTexture2D_AsyncLoad(self, url)

    def SetSource(self, image):
        return _PyAnyCAD.ImageTexture2D_SetSource(self, image)

    def IsValid(self):
        return _PyAnyCAD.ImageTexture2D_IsValid(self)

# Register ImageTexture2D in _PyAnyCAD:
_PyAnyCAD.ImageTexture2D_swigregister(ImageTexture2D)

def ImageTexture2D_Create(fileName):
    return _PyAnyCAD.ImageTexture2D_Create(fileName)

class ImageTextureCube(TextureCube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ImageTextureCube_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ImageTextureCube_swiginit(self, _PyAnyCAD.new_ImageTextureCube(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ImageTextureCube

    def GetSources(self):
        return _PyAnyCAD.ImageTextureCube_GetSources(self)

    @staticmethod
    def LoadFromFile(fileNames):
        return _PyAnyCAD.ImageTextureCube_LoadFromFile(fileNames)

    def LoadAsync(self, fileNames):
        return _PyAnyCAD.ImageTextureCube_LoadAsync(self, fileNames)

    def AddSource(self, source):
        return _PyAnyCAD.ImageTextureCube_AddSource(self, source)

    def IsValid(self):
        return _PyAnyCAD.ImageTextureCube_IsValid(self)

# Register ImageTextureCube in _PyAnyCAD:
_PyAnyCAD.ImageTextureCube_swigregister(ImageTextureCube)

def ImageTextureCube_Cast(obj):
    return _PyAnyCAD.ImageTextureCube_Cast(obj)

def ImageTextureCube_LoadFromFile(fileNames):
    return _PyAnyCAD.ImageTextureCube_LoadFromFile(fileNames)

EnumFramebufferTarget_FRAMEBUFFER = _PyAnyCAD.EnumFramebufferTarget_FRAMEBUFFER
EnumFramebufferTarget_DRAW_FRAMEBUFFER = _PyAnyCAD.EnumFramebufferTarget_DRAW_FRAMEBUFFER
EnumFramebufferTarget_READ_FRAMEBUFFER = _PyAnyCAD.EnumFramebufferTarget_READ_FRAMEBUFFER
EnumFramebufferAttachment_COLOR_ATTACHMENT0 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT0
EnumFramebufferAttachment_COLOR_ATTACHMENT1 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT1
EnumFramebufferAttachment_COLOR_ATTACHMENT2 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT2
EnumFramebufferAttachment_COLOR_ATTACHMENT3 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT3
EnumFramebufferAttachment_DEPTH_ATTACHMENT = _PyAnyCAD.EnumFramebufferAttachment_DEPTH_ATTACHMENT
EnumFramebufferAttachment_STENCIL_ATTACHMENT = _PyAnyCAD.EnumFramebufferAttachment_STENCIL_ATTACHMENT
EnumFramebufferAttachment_DEPTH_STENCIL_ATTACHMENT = _PyAnyCAD.EnumFramebufferAttachment_DEPTH_STENCIL_ATTACHMENT
EnumFramebufferAttachment_NONE = _PyAnyCAD.EnumFramebufferAttachment_NONE
EnumFramebufferAttachment_BACK = _PyAnyCAD.EnumFramebufferAttachment_BACK
EnumBufferType_ARRAY_BUFFER = _PyAnyCAD.EnumBufferType_ARRAY_BUFFER
EnumBufferType_ELEMENT_ARRAY_BUFFER = _PyAnyCAD.EnumBufferType_ELEMENT_ARRAY_BUFFER
EnumBufferType_COPY_READ_BUFFER = _PyAnyCAD.EnumBufferType_COPY_READ_BUFFER
EnumBufferType_COPY_WRITE_BUFFER = _PyAnyCAD.EnumBufferType_COPY_WRITE_BUFFER
EnumBufferType_PIXEL_PACK_BUFFER = _PyAnyCAD.EnumBufferType_PIXEL_PACK_BUFFER
EnumBufferType_PIXEL_UNPACK_BUFFER = _PyAnyCAD.EnumBufferType_PIXEL_UNPACK_BUFFER
EnumBufferType_TRANSFORM_FEEDBACK_BUFFER = _PyAnyCAD.EnumBufferType_TRANSFORM_FEEDBACK_BUFFER
EnumBufferType_UNIFORM_BUFFER = _PyAnyCAD.EnumBufferType_UNIFORM_BUFFER
EnumBufferType_RENDERBUFFER = _PyAnyCAD.EnumBufferType_RENDERBUFFER
EnumBufferBit_COLOR_BUFFER_BIT = _PyAnyCAD.EnumBufferBit_COLOR_BUFFER_BIT
EnumBufferBit_DEPTH_BUFFER_BIT = _PyAnyCAD.EnumBufferBit_DEPTH_BUFFER_BIT
EnumBufferBit_STENCIL_BUFFER_BIT = _PyAnyCAD.EnumBufferBit_STENCIL_BUFFER_BIT
EnumBufferBit_COLOR_DEPTH_BITS = _PyAnyCAD.EnumBufferBit_COLOR_DEPTH_BITS
EnumBufferBit_COLOR_STENCIL_BITS = _PyAnyCAD.EnumBufferBit_COLOR_STENCIL_BITS
EnumBufferBit_DEPTH_STENCIL_BITS = _PyAnyCAD.EnumBufferBit_DEPTH_STENCIL_BITS
EnumBufferBit_COLOR_DEPTH_STENCIL_BITS = _PyAnyCAD.EnumBufferBit_COLOR_DEPTH_STENCIL_BITS
EnumToneMapping_NoToneMapping = _PyAnyCAD.EnumToneMapping_NoToneMapping
EnumToneMapping_LinearToneMapping = _PyAnyCAD.EnumToneMapping_LinearToneMapping
EnumToneMapping_ReinhardToneMapping = _PyAnyCAD.EnumToneMapping_ReinhardToneMapping
EnumToneMapping_Uncharted2ToneMapping = _PyAnyCAD.EnumToneMapping_Uncharted2ToneMapping
EnumToneMapping_CineonToneMapping = _PyAnyCAD.EnumToneMapping_CineonToneMapping
EnumShadowMapType_BasicShadowMap = _PyAnyCAD.EnumShadowMapType_BasicShadowMap
EnumShadowMapType_PCFShadowMap = _PyAnyCAD.EnumShadowMapType_PCFShadowMap
EnumShadowMapType_PCFSoftShadowMap = _PyAnyCAD.EnumShadowMapType_PCFSoftShadowMap
EnumDepthFunction_Never = _PyAnyCAD.EnumDepthFunction_Never
EnumDepthFunction_LESS = _PyAnyCAD.EnumDepthFunction_LESS
EnumDepthFunction_EQUAL = _PyAnyCAD.EnumDepthFunction_EQUAL
EnumDepthFunction_LEQUAL = _PyAnyCAD.EnumDepthFunction_LEQUAL
EnumDepthFunction_GREATER = _PyAnyCAD.EnumDepthFunction_GREATER
EnumDepthFunction_NOTEQUAL = _PyAnyCAD.EnumDepthFunction_NOTEQUAL
EnumDepthFunction_GEQUAL = _PyAnyCAD.EnumDepthFunction_GEQUAL
EnumDepthFunction_ALWAYS = _PyAnyCAD.EnumDepthFunction_ALWAYS
EnumBlendingMode_NoBlending = _PyAnyCAD.EnumBlendingMode_NoBlending
EnumBlendingMode_CustomBlending = _PyAnyCAD.EnumBlendingMode_CustomBlending
EnumBlendingMode_NormalBlending = _PyAnyCAD.EnumBlendingMode_NormalBlending
EnumBlendingMode_AdditiveBlending = _PyAnyCAD.EnumBlendingMode_AdditiveBlending
EnumBlendingMode_SubtractiveBlending = _PyAnyCAD.EnumBlendingMode_SubtractiveBlending
EnumBlendingMode_MultiplyBlending = _PyAnyCAD.EnumBlendingMode_MultiplyBlending
EnumBlendEquation_FUNC_ADD = _PyAnyCAD.EnumBlendEquation_FUNC_ADD
EnumBlendEquation_FUNC_SUBTRACT = _PyAnyCAD.EnumBlendEquation_FUNC_SUBTRACT
EnumBlendEquation_FUNC_REVERSE_SUBTRACT = _PyAnyCAD.EnumBlendEquation_FUNC_REVERSE_SUBTRACT
EnumBlendEquation_MIN = _PyAnyCAD.EnumBlendEquation_MIN
EnumBlendEquation_MAX = _PyAnyCAD.EnumBlendEquation_MAX
EnumBlendFactor_ZERO = _PyAnyCAD.EnumBlendFactor_ZERO
EnumBlendFactor_ONE = _PyAnyCAD.EnumBlendFactor_ONE
EnumBlendFactor_SRC_COLOR = _PyAnyCAD.EnumBlendFactor_SRC_COLOR
EnumBlendFactor_ONE_MINUS_SRC_COLOR = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_SRC_COLOR
EnumBlendFactor_SRC_ALPHA = _PyAnyCAD.EnumBlendFactor_SRC_ALPHA
EnumBlendFactor_ONE_MINUS_SRC_ALPHA = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_SRC_ALPHA
EnumBlendFactor_DST_COLOR = _PyAnyCAD.EnumBlendFactor_DST_COLOR
EnumBlendFactor_ONE_MINUS_DST_COLOR = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_DST_COLOR
EnumBlendFactor_DST_ALPHA = _PyAnyCAD.EnumBlendFactor_DST_ALPHA
EnumBlendFactor_ONE_MINUS_DST_ALPHA = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_DST_ALPHA
EnumBlendFactor_CONSTANT_COLOR = _PyAnyCAD.EnumBlendFactor_CONSTANT_COLOR
EnumBlendFactor_ONE_MINUS_CONSTANT_COLOR = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_CONSTANT_COLOR
EnumBlendFactor_CONSTANT_ALPHA = _PyAnyCAD.EnumBlendFactor_CONSTANT_ALPHA
EnumBlendFactor_ONE_MINUS_CONSTANT_ALPHA = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_CONSTANT_ALPHA
EnumBlendFactor_SRC_ALPHA_SATURATE = _PyAnyCAD.EnumBlendFactor_SRC_ALPHA_SATURATE
EnumFaceSide_FrontSide = _PyAnyCAD.EnumFaceSide_FrontSide
EnumFaceSide_BackSide = _PyAnyCAD.EnumFaceSide_BackSide
EnumFaceSide_DoubleSide = _PyAnyCAD.EnumFaceSide_DoubleSide
class MaterialTemplate(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MaterialTemplate_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MaterialTemplate

    def GetUpdateVersion(self):
        return _PyAnyCAD.MaterialTemplate_GetUpdateVersion(self)

    def GetName(self):
        return _PyAnyCAD.MaterialTemplate_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.MaterialTemplate_SetName(self, val)

    def GetShaderTemplateName(self):
        return _PyAnyCAD.MaterialTemplate_GetShaderTemplateName(self)

    def SetShaderTemplateName(self, val):
        return _PyAnyCAD.MaterialTemplate_SetShaderTemplateName(self, val)

    def GetRawShader(self):
        return _PyAnyCAD.MaterialTemplate_GetRawShader(self)

    def SetRawShader(self, val):
        return _PyAnyCAD.MaterialTemplate_SetRawShader(self, val)

    def SetNormalMapType(self, type):
        return _PyAnyCAD.MaterialTemplate_SetNormalMapType(self, type)

    def GetNormalMapType(self):
        return _PyAnyCAD.MaterialTemplate_GetNormalMapType(self)

    def SetEnvBlendingMode(self, type):
        return _PyAnyCAD.MaterialTemplate_SetEnvBlendingMode(self, type)

    def GetEnvBlendingMode(self):
        return _PyAnyCAD.MaterialTemplate_GetEnvBlendingMode(self)

    def GetFaceSide(self):
        return _PyAnyCAD.MaterialTemplate_GetFaceSide(self)

    def SetFaceSide(self, val):
        return _PyAnyCAD.MaterialTemplate_SetFaceSide(self, val)

    def GetAlphaTest(self):
        return _PyAnyCAD.MaterialTemplate_GetAlphaTest(self)

    def SetAlphaTest(self, val):
        return _PyAnyCAD.MaterialTemplate_SetAlphaTest(self, val)

    def GetDepthPacking(self):
        return _PyAnyCAD.MaterialTemplate_GetDepthPacking(self)

    def SetDepthPacking(self, val):
        return _PyAnyCAD.MaterialTemplate_SetDepthPacking(self, val)

    def SetDithering(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetDithering(self, enable)

    def GetDithering(self):
        return _PyAnyCAD.MaterialTemplate_GetDithering(self)

    def SetVertexColors(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetVertexColors(self, enable)

    def GetVertexColors(self):
        return _PyAnyCAD.MaterialTemplate_GetVertexColors(self)

    def SetVertexColors4(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetVertexColors4(self, enable)

    def GetVertexColors4(self):
        return _PyAnyCAD.MaterialTemplate_GetVertexColors4(self)

    def SetVertexTangents(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetVertexTangents(self, enable)

    def GetVertexTangents(self):
        return _PyAnyCAD.MaterialTemplate_GetVertexTangents(self)

    def SetFlatShading(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetFlatShading(self, enable)

    def GetFlatShading(self):
        return _PyAnyCAD.MaterialTemplate_GetFlatShading(self)

    def SetFlipSided(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetFlipSided(self, enable)

    def GetFlipSided(self):
        return _PyAnyCAD.MaterialTemplate_GetFlipSided(self)

    def SetSkinning(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetSkinning(self, enable)

    def GetSkinning(self):
        return _PyAnyCAD.MaterialTemplate_GetSkinning(self)

    def SetMorphTargets(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetMorphTargets(self, enable)

    def GetMorphTargets(self):
        return _PyAnyCAD.MaterialTemplate_GetMorphTargets(self)

    def SetMorphNormals(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetMorphNormals(self, enable)

    def GetMorphNormals(self):
        return _PyAnyCAD.MaterialTemplate_GetMorphNormals(self)

    def SetSizeAttenuation(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetSizeAttenuation(self, enable)

    def GetSizeAttenuation(self):
        return _PyAnyCAD.MaterialTemplate_GetSizeAttenuation(self)

    def SetReceiveShadow(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetReceiveShadow(self, enable)

    def GetReceiveShadow(self):
        return _PyAnyCAD.MaterialTemplate_GetReceiveShadow(self)

    def SetClipping(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetClipping(self, enable)

    def GetClipping(self):
        return _PyAnyCAD.MaterialTemplate_GetClipping(self)

    def AddDefine(self, key, value):
        return _PyAnyCAD.MaterialTemplate_AddDefine(self, key, value)

    def RemoveDefine(self, key):
        return _PyAnyCAD.MaterialTemplate_RemoveDefine(self, key)

    def AddMap(self, mapId, encodeing, mapping):
        return _PyAnyCAD.MaterialTemplate_AddMap(self, mapId, encodeing, mapping)

    def RequestUpdate(self):
        return _PyAnyCAD.MaterialTemplate_RequestUpdate(self)

    def ComputeHashCode(self):
        return _PyAnyCAD.MaterialTemplate_ComputeHashCode(self)

# Register MaterialTemplate in _PyAnyCAD:
_PyAnyCAD.MaterialTemplate_swigregister(MaterialTemplate)

def MaterialTemplate_Cast(obj):
    return _PyAnyCAD.MaterialTemplate_Cast(obj)

class MaterialInstance(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MaterialInstance_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MaterialInstance

    def GetName(self):
        return _PyAnyCAD.MaterialInstance_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.MaterialInstance_SetName(self, val)

    def GetHashCodeId(self):
        return _PyAnyCAD.MaterialInstance_GetHashCodeId(self)

    def GetTemplate(self):
        return _PyAnyCAD.MaterialInstance_GetTemplate(self)

    def SetTemplate(self, val):
        return _PyAnyCAD.MaterialInstance_SetTemplate(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.MaterialInstance_GetUpdateVersion(self)

    def GetLineWidth(self):
        return _PyAnyCAD.MaterialInstance_GetLineWidth(self)

    def SetLineWidth(self, val):
        return _PyAnyCAD.MaterialInstance_SetLineWidth(self, val)

    def GetDepthTest(self):
        return _PyAnyCAD.MaterialInstance_GetDepthTest(self)

    def SetDepthTest(self, val):
        return _PyAnyCAD.MaterialInstance_SetDepthTest(self, val)

    def GetDepthWrite(self):
        return _PyAnyCAD.MaterialInstance_GetDepthWrite(self)

    def SetDepthWrite(self, val):
        return _PyAnyCAD.MaterialInstance_SetDepthWrite(self, val)

    def GetUniforms(self):
        return _PyAnyCAD.MaterialInstance_GetUniforms(self)

    def GetBlending(self):
        return _PyAnyCAD.MaterialInstance_GetBlending(self)

    def SetBlending(self, val):
        return _PyAnyCAD.MaterialInstance_SetBlending(self, val)

    def GetColor(self):
        return _PyAnyCAD.MaterialInstance_GetColor(self)

    def SetOpacity(self, val):
        return _PyAnyCAD.MaterialInstance_SetOpacity(self, val)

    def GetOpacity(self):
        return _PyAnyCAD.MaterialInstance_GetOpacity(self)

    def SetFaceSide(self, val):
        return _PyAnyCAD.MaterialInstance_SetFaceSide(self, val)

    def GetFaceSide(self):
        return _PyAnyCAD.MaterialInstance_GetFaceSide(self)

    def SetVertexColors(self, val):
        return _PyAnyCAD.MaterialInstance_SetVertexColors(self, val)

    def GetVertexColors(self):
        return _PyAnyCAD.MaterialInstance_GetVertexColors(self)

    def SetVertexColors4(self, val):
        return _PyAnyCAD.MaterialInstance_SetVertexColors4(self, val)

    def GetVertexColors4(self):
        return _PyAnyCAD.MaterialInstance_GetVertexColors4(self)

    def SetColor(self, *args):
        return _PyAnyCAD.MaterialInstance_SetColor(self, *args)

    def SetTransparent(self, enabled):
        return _PyAnyCAD.MaterialInstance_SetTransparent(self, enabled)

    def GetTransparent(self):
        return _PyAnyCAD.MaterialInstance_GetTransparent(self)

    def GetReceiveShadow(self):
        return _PyAnyCAD.MaterialInstance_GetReceiveShadow(self)

    def GetStatic(self):
        return _PyAnyCAD.MaterialInstance_GetStatic(self)

    def GetMorphTargetCount(self):
        return _PyAnyCAD.MaterialInstance_GetMorphTargetCount(self)

    def RequestUpdate(self):
        return _PyAnyCAD.MaterialInstance_RequestUpdate(self)

    def ComputeHashCode(self):
        return _PyAnyCAD.MaterialInstance_ComputeHashCode(self)

    def AddDefine(self, key, value):
        return _PyAnyCAD.MaterialInstance_AddDefine(self, key, value)

    def AddTexture(self, name, texture):
        return _PyAnyCAD.MaterialInstance_AddTexture(self, name, texture)

    def GetTexture(self, name):
        return _PyAnyCAD.MaterialInstance_GetTexture(self, name)

    def SetUniform(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniform(self, name, val)

# Register MaterialInstance in _PyAnyCAD:
_PyAnyCAD.MaterialInstance_swigregister(MaterialInstance)

def MaterialInstance_Cast(obj):
    return _PyAnyCAD.MaterialInstance_Cast(obj)

class BasicMaterial(MaterialInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.BasicMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_BasicMaterial

    def SetColorMap(self, map):
        return _PyAnyCAD.BasicMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.BasicMaterial_GetColorMap(self)

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.BasicMaterial_Create(templateName)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.BasicMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.BasicMaterial_GetMorphTargets(self)

# Register BasicMaterial in _PyAnyCAD:
_PyAnyCAD.BasicMaterial_swigregister(BasicMaterial)

def BasicMaterial_Cast(obj):
    return _PyAnyCAD.BasicMaterial_Cast(obj)

def BasicMaterial_Create(templateName):
    return _PyAnyCAD.BasicMaterial_Create(templateName)

class FontMaterial(MaterialInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.FontMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_FontMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.FontMaterial_Create(templateName)

    def SetText(self, *args):
        return _PyAnyCAD.FontMaterial_SetText(self, *args)

    def SetBillboard(self, bEnabled):
        return _PyAnyCAD.FontMaterial_SetBillboard(self, bEnabled)

    def ClearBackground(self):
        return _PyAnyCAD.FontMaterial_ClearBackground(self)

    def SetBackground(self, val):
        return _PyAnyCAD.FontMaterial_SetBackground(self, val)

    def GetBackground(self):
        return _PyAnyCAD.FontMaterial_GetBackground(self)

    def SetAlphaTest(self, val):
        return _PyAnyCAD.FontMaterial_SetAlphaTest(self, val)

    def GetAlphaTest(self):
        return _PyAnyCAD.FontMaterial_GetAlphaTest(self)

    def GetBillboard(self):
        return _PyAnyCAD.FontMaterial_GetBillboard(self)

# Register FontMaterial in _PyAnyCAD:
_PyAnyCAD.FontMaterial_swigregister(FontMaterial)

def FontMaterial_Cast(obj):
    return _PyAnyCAD.FontMaterial_Cast(obj)

def FontMaterial_Create(templateName):
    return _PyAnyCAD.FontMaterial_Create(templateName)

class LineDashedMaterial(BasicMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.LineDashedMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_LineDashedMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.LineDashedMaterial_Create(templateName)

    def SetScale(self, val):
        return _PyAnyCAD.LineDashedMaterial_SetScale(self, val)

    def GetScale(self):
        return _PyAnyCAD.LineDashedMaterial_GetScale(self)

    def SetDashSize(self, val):
        return _PyAnyCAD.LineDashedMaterial_SetDashSize(self, val)

    def GetDashSize(self):
        return _PyAnyCAD.LineDashedMaterial_GetDashSize(self)

    def SetTotalSize(self, val):
        return _PyAnyCAD.LineDashedMaterial_SetTotalSize(self, val)

    def GetTotalSize(self):
        return _PyAnyCAD.LineDashedMaterial_GetTotalSize(self)

# Register LineDashedMaterial in _PyAnyCAD:
_PyAnyCAD.LineDashedMaterial_swigregister(LineDashedMaterial)

def LineDashedMaterial_Cast(obj):
    return _PyAnyCAD.LineDashedMaterial_Cast(obj)

def LineDashedMaterial_Create(templateName):
    return _PyAnyCAD.LineDashedMaterial_Create(templateName)

class MeshMaterial(MaterialInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MeshMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MeshMaterial

    def SetColorMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.MeshMaterial_GetColorMap(self)

    def SetEnviornmentMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetEnviornmentMap(self, map)

    def GetEnviornmentMap(self):
        return _PyAnyCAD.MeshMaterial_GetEnviornmentMap(self)

    def SetRefractionRatio(self, val):
        return _PyAnyCAD.MeshMaterial_SetRefractionRatio(self, val)

    def GetRefractionRatio(self):
        return _PyAnyCAD.MeshMaterial_GetRefractionRatio(self)

    def SetAoMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetAoMap(self, map)

    def GetAoMap(self):
        return _PyAnyCAD.MeshMaterial_GetAoMap(self)

    def SetAoMapIntensity(self, val):
        return _PyAnyCAD.MeshMaterial_SetAoMapIntensity(self, val)

    def GetAoMapIntensity(self):
        return _PyAnyCAD.MeshMaterial_GetAoMapIntensity(self)

    def SetLightMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetLightMap(self, map)

    def GetLightMap(self):
        return _PyAnyCAD.MeshMaterial_GetLightMap(self)

    def SetLightMapIntensity(self, val):
        return _PyAnyCAD.MeshMaterial_SetLightMapIntensity(self, val)

    def GetLightMapIntensity(self):
        return _PyAnyCAD.MeshMaterial_GetLightMapIntensity(self)

    def SetEmissive(self, val):
        return _PyAnyCAD.MeshMaterial_SetEmissive(self, val)

    def GetEmissive(self):
        return _PyAnyCAD.MeshMaterial_GetEmissive(self)

    def SetEmissiveIntensity(self, val):
        return _PyAnyCAD.MeshMaterial_SetEmissiveIntensity(self, val)

    def GetEmissiveIntensity(self):
        return _PyAnyCAD.MeshMaterial_GetEmissiveIntensity(self)

    def SetEmissiveMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetEmissiveMap(self, map)

    def GetEmissiveMap(self):
        return _PyAnyCAD.MeshMaterial_GetEmissiveMap(self)

    def SetBumpMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetBumpMap(self, map)

    def GetBumpMap(self):
        return _PyAnyCAD.MeshMaterial_GetBumpMap(self)

    def SetBumpScale(self, val):
        return _PyAnyCAD.MeshMaterial_SetBumpScale(self, val)

    def GetBumpScale(self):
        return _PyAnyCAD.MeshMaterial_GetBumpScale(self)

    def SetNormalMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetNormalMap(self, map)

    def GetNormalMap(self):
        return _PyAnyCAD.MeshMaterial_GetNormalMap(self)

    def SetNormalScale(self, val):
        return _PyAnyCAD.MeshMaterial_SetNormalScale(self, val)

    def GetNormalScale(self):
        return _PyAnyCAD.MeshMaterial_GetNormalScale(self)

    def SetNormalMapType(self, val):
        return _PyAnyCAD.MeshMaterial_SetNormalMapType(self, val)

    def GetNormalMapType(self):
        return _PyAnyCAD.MeshMaterial_GetNormalMapType(self)

    def SetDisplacementMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetDisplacementMap(self, map)

    def GetDisplacementMap(self):
        return _PyAnyCAD.MeshMaterial_GetDisplacementMap(self)

    def SetDisplacementScale(self, val):
        return _PyAnyCAD.MeshMaterial_SetDisplacementScale(self, val)

    def GetDisplacementScale(self):
        return _PyAnyCAD.MeshMaterial_GetDisplacementScale(self)

    def SetDisplacementBias(self, val):
        return _PyAnyCAD.MeshMaterial_SetDisplacementBias(self, val)

    def GetDisplacementBias(self):
        return _PyAnyCAD.MeshMaterial_GetDisplacementBias(self)

    def SetAlphaMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetAlphaMap(self, map)

    def GetAlphaMap(self):
        return _PyAnyCAD.MeshMaterial_GetAlphaMap(self)

    def SetSkinning(self, val):
        return _PyAnyCAD.MeshMaterial_SetSkinning(self, val)

    def GetSkinning(self):
        return _PyAnyCAD.MeshMaterial_GetSkinning(self)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.MeshMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.MeshMaterial_GetMorphTargets(self)

    def SetMorphNormals(self, val):
        return _PyAnyCAD.MeshMaterial_SetMorphNormals(self, val)

    def GetMorphNormals(self):
        return _PyAnyCAD.MeshMaterial_GetMorphNormals(self)

# Register MeshMaterial in _PyAnyCAD:
_PyAnyCAD.MeshMaterial_swigregister(MeshMaterial)

def MeshMaterial_Cast(obj):
    return _PyAnyCAD.MeshMaterial_Cast(obj)

class MeshPhongMaterial(MeshMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_MeshPhongMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.MeshPhongMaterial_Create(templateName)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.MeshPhongMaterial_Cast(*args)

    def SetSpecular(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetSpecular(self, val)

    def GetSpecular(self):
        return _PyAnyCAD.MeshPhongMaterial_GetSpecular(self)

    def SetSpecularMap(self, map):
        return _PyAnyCAD.MeshPhongMaterial_SetSpecularMap(self, map)

    def GetSpecularMap(self):
        return _PyAnyCAD.MeshPhongMaterial_GetSpecularMap(self)

    def SetShininess(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetShininess(self, val)

    def GetShininess(self):
        return _PyAnyCAD.MeshPhongMaterial_GetShininess(self)

    def SetEnvBlendingMode(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetEnvBlendingMode(self, val)

    def GetEnvBlendingMode(self):
        return _PyAnyCAD.MeshPhongMaterial_GetEnvBlendingMode(self)

    def SetReflectivity(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetReflectivity(self, val)

    def GetReflectivity(self):
        return _PyAnyCAD.MeshPhongMaterial_GetReflectivity(self)

# Register MeshPhongMaterial in _PyAnyCAD:
_PyAnyCAD.MeshPhongMaterial_swigregister(MeshPhongMaterial)

def MeshPhongMaterial_Create(templateName):
    return _PyAnyCAD.MeshPhongMaterial_Create(templateName)

def MeshPhongMaterial_Cast(*args):
    return _PyAnyCAD.MeshPhongMaterial_Cast(*args)

class MeshStandardMaterial(MeshMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_MeshStandardMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.MeshStandardMaterial_Create(templateName)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.MeshStandardMaterial_Cast(*args)

    def SetRoughness(self, val):
        return _PyAnyCAD.MeshStandardMaterial_SetRoughness(self, val)

    def GetRoughness(self):
        return _PyAnyCAD.MeshStandardMaterial_GetRoughness(self)

    def SetRoughnessMap(self, map):
        return _PyAnyCAD.MeshStandardMaterial_SetRoughnessMap(self, map)

    def GetRoughnessMap(self):
        return _PyAnyCAD.MeshStandardMaterial_GetRoughnessMap(self)

    def SetMetalness(self, val):
        return _PyAnyCAD.MeshStandardMaterial_SetMetalness(self, val)

    def GetMetalness(self):
        return _PyAnyCAD.MeshStandardMaterial_GetMetalness(self)

    def SetMetalnessMap(self, map):
        return _PyAnyCAD.MeshStandardMaterial_SetMetalnessMap(self, map)

    def GetMetalnessMap(self):
        return _PyAnyCAD.MeshStandardMaterial_GetMetalnessMap(self)

    def SetEnvMapIntensity(self, val):
        return _PyAnyCAD.MeshStandardMaterial_SetEnvMapIntensity(self, val)

    def GetEnvMapIntensity(self):
        return _PyAnyCAD.MeshStandardMaterial_GetEnvMapIntensity(self)

# Register MeshStandardMaterial in _PyAnyCAD:
_PyAnyCAD.MeshStandardMaterial_swigregister(MeshStandardMaterial)

def MeshStandardMaterial_Create(templateName):
    return _PyAnyCAD.MeshStandardMaterial_Create(templateName)

def MeshStandardMaterial_Cast(*args):
    return _PyAnyCAD.MeshStandardMaterial_Cast(*args)

class PointsMaterial(MaterialInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PointsMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_PointsMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.PointsMaterial_Create(templateName)

    def SetColorMap(self, map):
        return _PyAnyCAD.PointsMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.PointsMaterial_GetColorMap(self)

    def SetAlphaMap(self, map):
        return _PyAnyCAD.PointsMaterial_SetAlphaMap(self, map)

    def GetAlphaMap(self):
        return _PyAnyCAD.PointsMaterial_GetAlphaMap(self)

    def SetPointSize(self, val):
        return _PyAnyCAD.PointsMaterial_SetPointSize(self, val)

    def GetPointSize(self):
        return _PyAnyCAD.PointsMaterial_GetPointSize(self)

    def SetSizeAttenuation(self, val):
        return _PyAnyCAD.PointsMaterial_SetSizeAttenuation(self, val)

    def GetSizeAttenuation(self):
        return _PyAnyCAD.PointsMaterial_GetSizeAttenuation(self)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.PointsMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.PointsMaterial_GetMorphTargets(self)

# Register PointsMaterial in _PyAnyCAD:
_PyAnyCAD.PointsMaterial_swigregister(PointsMaterial)

def PointsMaterial_Cast(obj):
    return _PyAnyCAD.PointsMaterial_Cast(obj)

def PointsMaterial_Create(templateName):
    return _PyAnyCAD.PointsMaterial_Create(templateName)

class SpriteMaterial(MaterialInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SpriteMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_SpriteMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.SpriteMaterial_Create(templateName)

    def SetColorMap(self, map):
        return _PyAnyCAD.SpriteMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.SpriteMaterial_GetColorMap(self)

    def SetAlphaMap(self, map):
        return _PyAnyCAD.SpriteMaterial_SetAlphaMap(self, map)

    def GetAlphaMap(self):
        return _PyAnyCAD.SpriteMaterial_GetAlphaMap(self)

    def SetRotation(self, val):
        return _PyAnyCAD.SpriteMaterial_SetRotation(self, val)

    def GetRotation(self):
        return _PyAnyCAD.SpriteMaterial_GetRotation(self)

    def SetSizeAttenuation(self, val):
        return _PyAnyCAD.SpriteMaterial_SetSizeAttenuation(self, val)

    def GetSizeAttenuation(self):
        return _PyAnyCAD.SpriteMaterial_GetSizeAttenuation(self)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.SpriteMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.SpriteMaterial_GetMorphTargets(self)

# Register SpriteMaterial in _PyAnyCAD:
_PyAnyCAD.SpriteMaterial_swigregister(SpriteMaterial)

def SpriteMaterial_Cast(obj):
    return _PyAnyCAD.SpriteMaterial_Cast(obj)

def SpriteMaterial_Create(templateName):
    return _PyAnyCAD.SpriteMaterial_Create(templateName)

class MeshNormalMaterial(MaterialInstance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MeshNormalMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MeshNormalMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.MeshNormalMaterial_Create(templateName)

# Register MeshNormalMaterial in _PyAnyCAD:
_PyAnyCAD.MeshNormalMaterial_swigregister(MeshNormalMaterial)

def MeshNormalMaterial_Cast(obj):
    return _PyAnyCAD.MeshNormalMaterial_Cast(obj)

def MeshNormalMaterial_Create(templateName):
    return _PyAnyCAD.MeshNormalMaterial_Create(templateName)

class ShaderTemplate(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ShaderTemplate_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ShaderTemplate_swiginit(self, _PyAnyCAD.new_ShaderTemplate(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ShaderTemplate

    def GetName(self):
        return _PyAnyCAD.ShaderTemplate_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.ShaderTemplate_SetName(self, val)

    def AddDefine(self, name, value):
        return _PyAnyCAD.ShaderTemplate_AddDefine(self, name, value)

# Register ShaderTemplate in _PyAnyCAD:
_PyAnyCAD.ShaderTemplate_swigregister(ShaderTemplate)

def ShaderTemplate_Cast(obj):
    return _PyAnyCAD.ShaderTemplate_Cast(obj)

class ShaderTemplateManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.ShaderTemplateManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_ShaderTemplateManager

    def Add(self, shader):
        return _PyAnyCAD.ShaderTemplateManager_Add(self, shader)

    def Find(self, name):
        return _PyAnyCAD.ShaderTemplateManager_Find(self, name)

    def IsExist(self, name):
        return _PyAnyCAD.ShaderTemplateManager_IsExist(self, name)

    def Clear(self):
        return _PyAnyCAD.ShaderTemplateManager_Clear(self)

    def AddSemantic(self, name, val):
        return _PyAnyCAD.ShaderTemplateManager_AddSemantic(self, name, val)

    def GetSemantic(self, name):
        return _PyAnyCAD.ShaderTemplateManager_GetSemantic(self, name)

# Register ShaderTemplateManager in _PyAnyCAD:
_PyAnyCAD.ShaderTemplateManager_swigregister(ShaderTemplateManager)

def ShaderTemplateManager_Instance():
    return _PyAnyCAD.ShaderTemplateManager_Instance()

class MaterialManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.MaterialManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_MaterialManager

    def GetUpdateVersion(self):
        return _PyAnyCAD.MaterialManager_GetUpdateVersion(self)

    def RequestUpdate(self):
        return _PyAnyCAD.MaterialManager_RequestUpdate(self)

    def CreateTemplate(self, name, shader):
        return _PyAnyCAD.MaterialManager_CreateTemplate(self, name, shader)

    def CreateTemplateByName(self, name, shaderTemplateName):
        return _PyAnyCAD.MaterialManager_CreateTemplateByName(self, name, shaderTemplateName)

    def AddTemplate(self, material):
        return _PyAnyCAD.MaterialManager_AddTemplate(self, material)

    def FindTemplate(self, name):
        return _PyAnyCAD.MaterialManager_FindTemplate(self, name)

    def Create(self, *args):
        return _PyAnyCAD.MaterialManager_Create(self, *args)

    def FindInstance(self, name):
        return _PyAnyCAD.MaterialManager_FindInstance(self, name)

    def AddInstance(self, material):
        return _PyAnyCAD.MaterialManager_AddInstance(self, material)

    def Clear(self):
        return _PyAnyCAD.MaterialManager_Clear(self)

# Register MaterialManager in _PyAnyCAD:
_PyAnyCAD.MaterialManager_swigregister(MaterialManager)

def MaterialManager_Instance():
    return _PyAnyCAD.MaterialManager_Instance()

EnumProjectionType_Orthographic = _PyAnyCAD.EnumProjectionType_Orthographic
EnumProjectionType_Perspective = _PyAnyCAD.EnumProjectionType_Perspective
EnumPositionType_Relative = _PyAnyCAD.EnumPositionType_Relative
EnumPositionType_Absolute = _PyAnyCAD.EnumPositionType_Absolute
EnumPositionType_Window = _PyAnyCAD.EnumPositionType_Window
class ViewPosition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ViewPosition_swiginit(self, _PyAnyCAD.new_ViewPosition(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ViewPosition

    def GetValue(self):
        return _PyAnyCAD.ViewPosition_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ViewPosition_SetValue(self, val)

    def GetPositionType(self):
        return _PyAnyCAD.ViewPosition_GetPositionType(self)

    def SetPositionType(self, val):
        return _PyAnyCAD.ViewPosition_SetPositionType(self, val)

    def GetAbsoluteValue(self, winWidth, winHeight):
        return _PyAnyCAD.ViewPosition_GetAbsoluteValue(self, winWidth, winHeight)

# Register ViewPosition in _PyAnyCAD:
_PyAnyCAD.ViewPosition_swigregister(ViewPosition)

class Camera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Camera_swiginit(self, _PyAnyCAD.new_Camera(*args))

    @staticmethod
    def CreateOrthographic(width, height, zoom, zNear, zFar):
        return _PyAnyCAD.Camera_CreateOrthographic(width, height, zoom, zNear, zFar)

    def Clone(self):
        return _PyAnyCAD.Camera_Clone(self)

    def GetPosition(self):
        return _PyAnyCAD.Camera_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.Camera_SetPosition(self, val)

    def GetUp(self):
        return _PyAnyCAD.Camera_GetUp(self)

    def SetUp(self, val):
        return _PyAnyCAD.Camera_SetUp(self, val)

    def GetTarget(self):
        return _PyAnyCAD.Camera_GetTarget(self)

    def SetTarget(self, val):
        return _PyAnyCAD.Camera_SetTarget(self, val)

    def GetViewMatrix(self):
        return _PyAnyCAD.Camera_GetViewMatrix(self)

    def GetNear(self):
        return _PyAnyCAD.Camera_GetNear(self)

    def SetNear(self, val):
        return _PyAnyCAD.Camera_SetNear(self, val)

    def GetFar(self):
        return _PyAnyCAD.Camera_GetFar(self)

    def SetFar(self, val):
        return _PyAnyCAD.Camera_SetFar(self, val)

    def GetFovy(self):
        return _PyAnyCAD.Camera_GetFovy(self)

    def SetFovy(self, val):
        return _PyAnyCAD.Camera_SetFovy(self, val)

    def GetOrigin(self):
        return _PyAnyCAD.Camera_GetOrigin(self)

    def SetOrigin(self, val):
        return _PyAnyCAD.Camera_SetOrigin(self, val)

    def GetSize(self):
        return _PyAnyCAD.Camera_GetSize(self)

    def SetSize(self, val):
        return _PyAnyCAD.Camera_SetSize(self, val)

    def GetWidth(self):
        return _PyAnyCAD.Camera_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.Camera_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.Camera_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.Camera_SetHeight(self, val)

    def GetOrthoZoomFactor(self):
        return _PyAnyCAD.Camera_GetOrthoZoomFactor(self)

    def SetOrthoZoomFactor(self, val):
        return _PyAnyCAD.Camera_SetOrthoZoomFactor(self, val)

    def GetProjectionType(self):
        return _PyAnyCAD.Camera_GetProjectionType(self)

    def SetProjectionType(self, val):
        return _PyAnyCAD.Camera_SetProjectionType(self, val)

    def GetProjectionMatrix(self):
        return _PyAnyCAD.Camera_GetProjectionMatrix(self)

    def GetLockNearFar(self):
        return _PyAnyCAD.Camera_GetLockNearFar(self)

    def SetLockNearFar(self, val):
        return _PyAnyCAD.Camera_SetLockNearFar(self, val)

    def GetDirection(self):
        return _PyAnyCAD.Camera_GetDirection(self)

    def GetRight(self):
        return _PyAnyCAD.Camera_GetRight(self)

    def UpdateNearFar(self, sceneBox):
        return _PyAnyCAD.Camera_UpdateNearFar(self, sceneBox)

    def GetNearFarHalfSize(self, nearSize, farSize):
        return _PyAnyCAD.Camera_GetNearFarHalfSize(self, nearSize, farSize)

    def GetDistance(self):
        return _PyAnyCAD.Camera_GetDistance(self)

    def LookAt(self, position, target, up):
        return _PyAnyCAD.Camera_LookAt(self, position, target, up)

    def LookByDirection(self, target, dir, up):
        return _PyAnyCAD.Camera_LookByDirection(self, target, dir, up)

    def UpdateViewMatrix(self):
        return _PyAnyCAD.Camera_UpdateViewMatrix(self)

    def UpdateProjectionMatrix(self):
        return _PyAnyCAD.Camera_UpdateProjectionMatrix(self)

    def GetViewportSize(self):
        return _PyAnyCAD.Camera_GetViewportSize(self)

    def GetViewportOrigin(self):
        return _PyAnyCAD.Camera_GetViewportOrigin(self)

    def GetViewport(self):
        return _PyAnyCAD.Camera_GetViewport(self)

    def GetViewportCenter(self):
        return _PyAnyCAD.Camera_GetViewportCenter(self)

    def Resize(self, width, height):
        return _PyAnyCAD.Camera_Resize(self, width, height)

    def Zoom(self, ratio, distance):
        return _PyAnyCAD.Camera_Zoom(self, ratio, distance)

    def ComputeOrthoMatrix(self, zoomFactor):
        return _PyAnyCAD.Camera_ComputeOrthoMatrix(self, zoomFactor)

    def Dump(self):
        return _PyAnyCAD.Camera_Dump(self)

    def Contain(self, winX, winY):
        return _PyAnyCAD.Camera_Contain(self, winX, winY)
    __swig_destroy__ = _PyAnyCAD.delete_Camera

# Register Camera in _PyAnyCAD:
_PyAnyCAD.Camera_swigregister(Camera)

def Camera_CreateOrthographic(width, height, zoom, zNear, zFar):
    return _PyAnyCAD.Camera_CreateOrthographic(width, height, zoom, zNear, zFar)

EnumStandardView_VertexNxPyPz = _PyAnyCAD.EnumStandardView_VertexNxPyPz
EnumStandardView_VertexNxNyPz = _PyAnyCAD.EnumStandardView_VertexNxNyPz
EnumStandardView_VertexPxNyPz = _PyAnyCAD.EnumStandardView_VertexPxNyPz
EnumStandardView_VertexPxPyPz = _PyAnyCAD.EnumStandardView_VertexPxPyPz
EnumStandardView_VertexNxPyNz = _PyAnyCAD.EnumStandardView_VertexNxPyNz
EnumStandardView_VertexNxNyNz = _PyAnyCAD.EnumStandardView_VertexNxNyNz
EnumStandardView_VertexPxNyNz = _PyAnyCAD.EnumStandardView_VertexPxNyNz
EnumStandardView_VertexPxPyNz = _PyAnyCAD.EnumStandardView_VertexPxPyNz
EnumStandardView_EdgeDxPyPz = _PyAnyCAD.EnumStandardView_EdgeDxPyPz
EnumStandardView_EdgeDxNyPz = _PyAnyCAD.EnumStandardView_EdgeDxNyPz
EnumStandardView_EdgeDxNyNz = _PyAnyCAD.EnumStandardView_EdgeDxNyNz
EnumStandardView_EdgeDxPyNz = _PyAnyCAD.EnumStandardView_EdgeDxPyNz
EnumStandardView_EdgePxDyPz = _PyAnyCAD.EnumStandardView_EdgePxDyPz
EnumStandardView_EdgeNxDyPz = _PyAnyCAD.EnumStandardView_EdgeNxDyPz
EnumStandardView_EdgeNxDyNz = _PyAnyCAD.EnumStandardView_EdgeNxDyNz
EnumStandardView_EdgePxDyNz = _PyAnyCAD.EnumStandardView_EdgePxDyNz
EnumStandardView_EdgePxPyDz = _PyAnyCAD.EnumStandardView_EdgePxPyDz
EnumStandardView_EdgeNxPyDz = _PyAnyCAD.EnumStandardView_EdgeNxPyDz
EnumStandardView_EdgeNxNyDz = _PyAnyCAD.EnumStandardView_EdgeNxNyDz
EnumStandardView_EdgePxNyDz = _PyAnyCAD.EnumStandardView_EdgePxNyDz
EnumStandardView_FacePx = _PyAnyCAD.EnumStandardView_FacePx
EnumStandardView_FaceNx = _PyAnyCAD.EnumStandardView_FaceNx
EnumStandardView_FacePy = _PyAnyCAD.EnumStandardView_FacePy
EnumStandardView_FaceNy = _PyAnyCAD.EnumStandardView_FaceNy
EnumStandardView_FacePz = _PyAnyCAD.EnumStandardView_FacePz
EnumStandardView_FaceNz = _PyAnyCAD.EnumStandardView_FaceNz
EnumStandardView_DefaultView = _PyAnyCAD.EnumStandardView_DefaultView
EnumStandardView_X_Positive = _PyAnyCAD.EnumStandardView_X_Positive
EnumStandardView_X_Negative = _PyAnyCAD.EnumStandardView_X_Negative
EnumStandardView_Y_Positive = _PyAnyCAD.EnumStandardView_Y_Positive
EnumStandardView_Y_Negative = _PyAnyCAD.EnumStandardView_Y_Negative
EnumStandardView_Z_Positive = _PyAnyCAD.EnumStandardView_Z_Positive
EnumStandardView_Z_Negative = _PyAnyCAD.EnumStandardView_Z_Negative
EnumStandardView_Front = _PyAnyCAD.EnumStandardView_Front
EnumStandardView_Back = _PyAnyCAD.EnumStandardView_Back
EnumStandardView_Right = _PyAnyCAD.EnumStandardView_Right
EnumStandardView_Left = _PyAnyCAD.EnumStandardView_Left
EnumStandardView_Top = _PyAnyCAD.EnumStandardView_Top
EnumStandardView_Bottom = _PyAnyCAD.EnumStandardView_Bottom
EnumSystemColorMap_Rainbow = _PyAnyCAD.EnumSystemColorMap_Rainbow
EnumSystemColorMap_Cooltowarm = _PyAnyCAD.EnumSystemColorMap_Cooltowarm
EnumSystemColorMap_Blackbody = _PyAnyCAD.EnumSystemColorMap_Blackbody
EnumSystemColorMap_Grayscale = _PyAnyCAD.EnumSystemColorMap_Grayscale
class ColorMapKeyword(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ColorMapKeyword_swiginit(self, _PyAnyCAD.new_ColorMapKeyword())

    @staticmethod
    def Create(name):
        return _PyAnyCAD.ColorMapKeyword_Create(name)

    def Reserve(self, count):
        return _PyAnyCAD.ColorMapKeyword_Reserve(self, count)

    def AddItem(self, key, color):
        return _PyAnyCAD.ColorMapKeyword_AddItem(self, key, color)

    def GetCount(self):
        return _PyAnyCAD.ColorMapKeyword_GetCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_ColorMapKeyword

# Register ColorMapKeyword in _PyAnyCAD:
_PyAnyCAD.ColorMapKeyword_swigregister(ColorMapKeyword)

def ColorMapKeyword_Create(name):
    return _PyAnyCAD.ColorMapKeyword_Create(name)

class ColorLookupTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ColorLookupTable_swiginit(self, _PyAnyCAD.new_ColorLookupTable(*args))

    def GetMinValue(self):
        return _PyAnyCAD.ColorLookupTable_GetMinValue(self)

    def SetMinValue(self, val):
        return _PyAnyCAD.ColorLookupTable_SetMinValue(self, val)

    def GetMaxValue(self):
        return _PyAnyCAD.ColorLookupTable_GetMaxValue(self)

    def SetMaxValue(self, val):
        return _PyAnyCAD.ColorLookupTable_SetMaxValue(self, val)

    def GetColorNumber(self):
        return _PyAnyCAD.ColorLookupTable_GetColorNumber(self)

    def SetColorNumber(self, val):
        return _PyAnyCAD.ColorLookupTable_SetColorNumber(self, val)

    def GetColorTable(self):
        return _PyAnyCAD.ColorLookupTable_GetColorTable(self)

    def GetColorMap(self):
        return _PyAnyCAD.ColorLookupTable_GetColorMap(self)

    def SetColorMap(self, keyword):
        return _PyAnyCAD.ColorLookupTable_SetColorMap(self, keyword)

    def GetValueRange(self):
        return _PyAnyCAD.ColorLookupTable_GetValueRange(self)

    def CreateImage(self):
        return _PyAnyCAD.ColorLookupTable_CreateImage(self)

    def GetColor(self, alpha):
        return _PyAnyCAD.ColorLookupTable_GetColor(self, alpha)
    __swig_destroy__ = _PyAnyCAD.delete_ColorLookupTable

# Register ColorLookupTable in _PyAnyCAD:
_PyAnyCAD.ColorLookupTable_swigregister(ColorLookupTable)

class PrimitiveShapeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.PrimitiveShapeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.PrimitiveShapeList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.PrimitiveShapeList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.PrimitiveShapeList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.PrimitiveShapeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.PrimitiveShapeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.PrimitiveShapeList_pop(self)

    def append(self, x):
        return _PyAnyCAD.PrimitiveShapeList_append(self, x)

    def empty(self):
        return _PyAnyCAD.PrimitiveShapeList_empty(self)

    def size(self):
        return _PyAnyCAD.PrimitiveShapeList_size(self)

    def swap(self, v):
        return _PyAnyCAD.PrimitiveShapeList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.PrimitiveShapeList_begin(self)

    def end(self):
        return _PyAnyCAD.PrimitiveShapeList_end(self)

    def rbegin(self):
        return _PyAnyCAD.PrimitiveShapeList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.PrimitiveShapeList_rend(self)

    def clear(self):
        return _PyAnyCAD.PrimitiveShapeList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.PrimitiveShapeList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.PrimitiveShapeList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.PrimitiveShapeList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.PrimitiveShapeList_swiginit(self, _PyAnyCAD.new_PrimitiveShapeList(*args))

    def push_back(self, x):
        return _PyAnyCAD.PrimitiveShapeList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.PrimitiveShapeList_front(self)

    def back(self):
        return _PyAnyCAD.PrimitiveShapeList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.PrimitiveShapeList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.PrimitiveShapeList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.PrimitiveShapeList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.PrimitiveShapeList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.PrimitiveShapeList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_PrimitiveShapeList

# Register PrimitiveShapeList in _PyAnyCAD:
_PyAnyCAD.PrimitiveShapeList_swigregister(PrimitiveShapeList)

class PrimitiveShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PrimitiveShape_swiginit(self, _PyAnyCAD.new_PrimitiveShape(*args))
    __swig_destroy__ = _PyAnyCAD.delete_PrimitiveShape
    NullPtr = property(_PyAnyCAD.PrimitiveShape_NullPtr_get, _PyAnyCAD.PrimitiveShape_NullPtr_set)

    def GetUserId(self):
        return _PyAnyCAD.PrimitiveShape_GetUserId(self)

    def SetUserId(self, val):
        return _PyAnyCAD.PrimitiveShape_SetUserId(self, val)

    def GetGeometry(self):
        return _PyAnyCAD.PrimitiveShape_GetGeometry(self)

    def SetGeometry(self, val):
        return _PyAnyCAD.PrimitiveShape_SetGeometry(self, val)

    def GetMaterial(self):
        return _PyAnyCAD.PrimitiveShape_GetMaterial(self)

    def SetMaterial(self, val):
        return _PyAnyCAD.PrimitiveShape_SetMaterial(self, val)

    def GetMorphTargetInfluences(self):
        return _PyAnyCAD.PrimitiveShape_GetMorphTargetInfluences(self)

    def SetMorphTargetInfluences(self, val):
        return _PyAnyCAD.PrimitiveShape_SetMorphTargetInfluences(self, val)

    def GetDrawCount(self):
        return _PyAnyCAD.PrimitiveShape_GetDrawCount(self)

    def SetDrawCount(self, val):
        return _PyAnyCAD.PrimitiveShape_SetDrawCount(self, val)

    def Clone(self):
        return _PyAnyCAD.PrimitiveShape_Clone(self)

    def GetPrimitiveType(self):
        return _PyAnyCAD.PrimitiveShape_GetPrimitiveType(self)

    def GetPositions(self):
        return _PyAnyCAD.PrimitiveShape_GetPositions(self)

    def GetNormals(self):
        return _PyAnyCAD.PrimitiveShape_GetNormals(self)

    def GetTexCoords(self):
        return _PyAnyCAD.PrimitiveShape_GetTexCoords(self)

    def GetColors(self):
        return _PyAnyCAD.PrimitiveShape_GetColors(self)

    def GetIndex(self):
        return _PyAnyCAD.PrimitiveShape_GetIndex(self)

    def GetBoundingBox(self):
        return _PyAnyCAD.PrimitiveShape_GetBoundingBox(self)

    def HasMorphTargets(self):
        return _PyAnyCAD.PrimitiveShape_HasMorphTargets(self)

    def HasMorphNormals(self):
        return _PyAnyCAD.PrimitiveShape_HasMorphNormals(self)

    def HasColorAttribute(self):
        return _PyAnyCAD.PrimitiveShape_HasColorAttribute(self)

    def GetMorphTargets(self):
        return _PyAnyCAD.PrimitiveShape_GetMorphTargets(self)

    def ComputeLineDistances(self):
        return _PyAnyCAD.PrimitiveShape_ComputeLineDistances(self)

    def RequestUpdate(self):
        return _PyAnyCAD.PrimitiveShape_RequestUpdate(self)

# Register PrimitiveShape in _PyAnyCAD:
_PyAnyCAD.PrimitiveShape_swigregister(PrimitiveShape)

class CompoundShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.CompoundShape_swiginit(self, _PyAnyCAD.new_CompoundShape())
    __swig_destroy__ = _PyAnyCAD.delete_CompoundShape

    def GetName(self):
        return _PyAnyCAD.CompoundShape_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.CompoundShape_SetName(self, val)

    def GetShapes(self):
        return _PyAnyCAD.CompoundShape_GetShapes(self)

    def GetBoundingBox(self):
        return _PyAnyCAD.CompoundShape_GetBoundingBox(self)

    def SetBoundingBox(self, val):
        return _PyAnyCAD.CompoundShape_SetBoundingBox(self, val)

    def Clone(self):
        return _PyAnyCAD.CompoundShape_Clone(self)

    def SetMaterial(self, material):
        return _PyAnyCAD.CompoundShape_SetMaterial(self, material)

    def AddTargetName(self, name, id):
        return _PyAnyCAD.CompoundShape_AddTargetName(self, name, id)

    def UpdateMorphTargets(self):
        return _PyAnyCAD.CompoundShape_UpdateMorphTargets(self)

    def Clear(self):
        return _PyAnyCAD.CompoundShape_Clear(self)

    def Add(self, *args):
        return _PyAnyCAD.CompoundShape_Add(self, *args)

    def GetCount(self):
        return _PyAnyCAD.CompoundShape_GetCount(self)

    def GetPrimitive(self, idx):
        return _PyAnyCAD.CompoundShape_GetPrimitive(self, idx)

# Register CompoundShape in _PyAnyCAD:
_PyAnyCAD.CompoundShape_swigregister(CompoundShape)

class GeometryBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateGeometry(*args):
        return _PyAnyCAD.GeometryBuilder_CreateGeometry(*args)

    @staticmethod
    def CreateBox(widthX, widthY, heightZ, widthSegments=1, heightSegments=1, depthSegments=1):
        return _PyAnyCAD.GeometryBuilder_CreateBox(widthX, widthY, heightZ, widthSegments, heightSegments, depthSegments)

    @staticmethod
    def CreateSphere(*args):
        return _PyAnyCAD.GeometryBuilder_CreateSphere(*args)

    @staticmethod
    def CreateCylinder(*args):
        return _PyAnyCAD.GeometryBuilder_CreateCylinder(*args)

    @staticmethod
    def CreatePlane(width, height, widthSegments=1, heightSegments=1):
        return _PyAnyCAD.GeometryBuilder_CreatePlane(width, height, widthSegments, heightSegments)

    @staticmethod
    def CreatePoints(positions, color3):
        return _PyAnyCAD.GeometryBuilder_CreatePoints(positions, color3)

    @staticmethod
    def CreateLines(positions, ib, color3):
        return _PyAnyCAD.GeometryBuilder_CreateLines(positions, ib, color3)

    @staticmethod
    def CreatePoint(position):
        return _PyAnyCAD.GeometryBuilder_CreatePoint(position)

    @staticmethod
    def CreateLine(start, end):
        return _PyAnyCAD.GeometryBuilder_CreateLine(start, end)

    @staticmethod
    def CreateRectangle():
        return _PyAnyCAD.GeometryBuilder_CreateRectangle()

    @staticmethod
    def CreateUnitCircle():
        return _PyAnyCAD.GeometryBuilder_CreateUnitCircle()

    @staticmethod
    def CreateArrowHead():
        return _PyAnyCAD.GeometryBuilder_CreateArrowHead()

    @staticmethod
    def UpdateLine(line, start, end):
        return _PyAnyCAD.GeometryBuilder_UpdateLine(line, start, end)

    @staticmethod
    def CreateFrustumOutline(points):
        return _PyAnyCAD.GeometryBuilder_CreateFrustumOutline(points)

    @staticmethod
    def CreateBoxOutline(*args):
        return _PyAnyCAD.GeometryBuilder_CreateBoxOutline(*args)

    @staticmethod
    def UpdateBoxOutline(shape, points):
        return _PyAnyCAD.GeometryBuilder_UpdateBoxOutline(shape, points)

    @staticmethod
    def Transform(pGeometry, trf):
        return _PyAnyCAD.GeometryBuilder_Transform(pGeometry, trf)

    @staticmethod
    def CreateArrow(heightHand, heightHead, radius, material):
        return _PyAnyCAD.GeometryBuilder_CreateArrow(heightHand, heightHead, radius, material)

    @staticmethod
    def ComputeLineDistances(line):
        return _PyAnyCAD.GeometryBuilder_ComputeLineDistances(line)

    @staticmethod
    def AtomCone():
        return _PyAnyCAD.GeometryBuilder_AtomCone()

    @staticmethod
    def AtomBox():
        return _PyAnyCAD.GeometryBuilder_AtomBox()

    @staticmethod
    def AtomCylinder():
        return _PyAnyCAD.GeometryBuilder_AtomCylinder()

    @staticmethod
    def AtomSphere():
        return _PyAnyCAD.GeometryBuilder_AtomSphere()

    @staticmethod
    def AtomQuadShape():
        return _PyAnyCAD.GeometryBuilder_AtomQuadShape()

    @staticmethod
    def AtomPoint():
        return _PyAnyCAD.GeometryBuilder_AtomPoint()

    @staticmethod
    def UnitArrowTemplate():
        return _PyAnyCAD.GeometryBuilder_UnitArrowTemplate()

    def __init__(self):
        _PyAnyCAD.GeometryBuilder_swiginit(self, _PyAnyCAD.new_GeometryBuilder())
    __swig_destroy__ = _PyAnyCAD.delete_GeometryBuilder

# Register GeometryBuilder in _PyAnyCAD:
_PyAnyCAD.GeometryBuilder_swigregister(GeometryBuilder)

def GeometryBuilder_CreateGeometry(*args):
    return _PyAnyCAD.GeometryBuilder_CreateGeometry(*args)

def GeometryBuilder_CreateBox(widthX, widthY, heightZ, widthSegments=1, heightSegments=1, depthSegments=1):
    return _PyAnyCAD.GeometryBuilder_CreateBox(widthX, widthY, heightZ, widthSegments, heightSegments, depthSegments)

def GeometryBuilder_CreateSphere(*args):
    return _PyAnyCAD.GeometryBuilder_CreateSphere(*args)

def GeometryBuilder_CreateCylinder(*args):
    return _PyAnyCAD.GeometryBuilder_CreateCylinder(*args)

def GeometryBuilder_CreatePlane(width, height, widthSegments=1, heightSegments=1):
    return _PyAnyCAD.GeometryBuilder_CreatePlane(width, height, widthSegments, heightSegments)

def GeometryBuilder_CreatePoints(positions, color3):
    return _PyAnyCAD.GeometryBuilder_CreatePoints(positions, color3)

def GeometryBuilder_CreateLines(positions, ib, color3):
    return _PyAnyCAD.GeometryBuilder_CreateLines(positions, ib, color3)

def GeometryBuilder_CreatePoint(position):
    return _PyAnyCAD.GeometryBuilder_CreatePoint(position)

def GeometryBuilder_CreateLine(start, end):
    return _PyAnyCAD.GeometryBuilder_CreateLine(start, end)

def GeometryBuilder_CreateRectangle():
    return _PyAnyCAD.GeometryBuilder_CreateRectangle()

def GeometryBuilder_CreateUnitCircle():
    return _PyAnyCAD.GeometryBuilder_CreateUnitCircle()

def GeometryBuilder_CreateArrowHead():
    return _PyAnyCAD.GeometryBuilder_CreateArrowHead()

def GeometryBuilder_UpdateLine(line, start, end):
    return _PyAnyCAD.GeometryBuilder_UpdateLine(line, start, end)

def GeometryBuilder_CreateFrustumOutline(points):
    return _PyAnyCAD.GeometryBuilder_CreateFrustumOutline(points)

def GeometryBuilder_CreateBoxOutline(*args):
    return _PyAnyCAD.GeometryBuilder_CreateBoxOutline(*args)

def GeometryBuilder_UpdateBoxOutline(shape, points):
    return _PyAnyCAD.GeometryBuilder_UpdateBoxOutline(shape, points)

def GeometryBuilder_Transform(pGeometry, trf):
    return _PyAnyCAD.GeometryBuilder_Transform(pGeometry, trf)

def GeometryBuilder_CreateArrow(heightHand, heightHead, radius, material):
    return _PyAnyCAD.GeometryBuilder_CreateArrow(heightHand, heightHead, radius, material)

def GeometryBuilder_ComputeLineDistances(line):
    return _PyAnyCAD.GeometryBuilder_ComputeLineDistances(line)

def GeometryBuilder_AtomCone():
    return _PyAnyCAD.GeometryBuilder_AtomCone()

def GeometryBuilder_AtomBox():
    return _PyAnyCAD.GeometryBuilder_AtomBox()

def GeometryBuilder_AtomCylinder():
    return _PyAnyCAD.GeometryBuilder_AtomCylinder()

def GeometryBuilder_AtomSphere():
    return _PyAnyCAD.GeometryBuilder_AtomSphere()

def GeometryBuilder_AtomQuadShape():
    return _PyAnyCAD.GeometryBuilder_AtomQuadShape()

def GeometryBuilder_AtomPoint():
    return _PyAnyCAD.GeometryBuilder_AtomPoint()

def GeometryBuilder_UnitArrowTemplate():
    return _PyAnyCAD.GeometryBuilder_UnitArrowTemplate()

class FontManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.FontManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_FontManager

    def GetDefaultFont(self):
        return _PyAnyCAD.FontManager_GetDefaultFont(self)

    def CreateTexture(self, *args):
        return _PyAnyCAD.FontManager_CreateTexture(self, *args)

    def CreateMesh(self, *args):
        return _PyAnyCAD.FontManager_CreateMesh(self, *args)

    def AddFont(self, fontName, fontPath):
        return _PyAnyCAD.FontManager_AddFont(self, fontName, fontPath)

    def SetDefaultFont(self, fontName):
        return _PyAnyCAD.FontManager_SetDefaultFont(self, fontName)

# Register FontManager in _PyAnyCAD:
_PyAnyCAD.FontManager_swigregister(FontManager)

def FontManager_Instance():
    return _PyAnyCAD.FontManager_Instance()

class RenderSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RenderSettings_swiginit(self, _PyAnyCAD.new_RenderSettings())
    __swig_destroy__ = _PyAnyCAD.delete_RenderSettings

    def GetId(self):
        return _PyAnyCAD.RenderSettings_GetId(self)

    def GetGammaFactor(self):
        return _PyAnyCAD.RenderSettings_GetGammaFactor(self)

    def SetGammaFactor(self, val):
        return _PyAnyCAD.RenderSettings_SetGammaFactor(self, val)

    def GetGammaOutput(self):
        return _PyAnyCAD.RenderSettings_GetGammaOutput(self)

    def SetGammaOutput(self, val):
        return _PyAnyCAD.RenderSettings_SetGammaOutput(self, val)

    def GetGammaInput(self):
        return _PyAnyCAD.RenderSettings_GetGammaInput(self)

    def SetGammaInput(self, val):
        return _PyAnyCAD.RenderSettings_SetGammaInput(self, val)

    def GetOutputEncoding(self):
        return _PyAnyCAD.RenderSettings_GetOutputEncoding(self)

    def SetOutputEncoding(self, val):
        return _PyAnyCAD.RenderSettings_SetOutputEncoding(self, val)

    def GetSupportsVertexTextures(self):
        return _PyAnyCAD.RenderSettings_GetSupportsVertexTextures(self)

    def SetSupportsVertexTextures(self, val):
        return _PyAnyCAD.RenderSettings_SetSupportsVertexTextures(self, val)

    def GetFloatVertexTextures(self):
        return _PyAnyCAD.RenderSettings_GetFloatVertexTextures(self)

    def SetFloatVertexTextures(self, val):
        return _PyAnyCAD.RenderSettings_SetFloatVertexTextures(self, val)

    def GetMaxVertexUniforms(self):
        return _PyAnyCAD.RenderSettings_GetMaxVertexUniforms(self)

    def SetMaxVertexUniforms(self, val):
        return _PyAnyCAD.RenderSettings_SetMaxVertexUniforms(self, val)

    def GetLogarithmicDepthBuffer(self):
        return _PyAnyCAD.RenderSettings_GetLogarithmicDepthBuffer(self)

    def SetLogarithmicDepthBuffer(self, val):
        return _PyAnyCAD.RenderSettings_SetLogarithmicDepthBuffer(self, val)

    def GetFog(self):
        return _PyAnyCAD.RenderSettings_GetFog(self)

    def SetFog(self, val):
        return _PyAnyCAD.RenderSettings_SetFog(self, val)

    def GetFogExp2(self):
        return _PyAnyCAD.RenderSettings_GetFogExp2(self)

    def SetFogExp2(self, val):
        return _PyAnyCAD.RenderSettings_SetFogExp2(self, val)

    def GetShadowMapEnabled(self):
        return _PyAnyCAD.RenderSettings_GetShadowMapEnabled(self)

    def SetShadowMapEnabled(self, val):
        return _PyAnyCAD.RenderSettings_SetShadowMapEnabled(self, val)

    def GetShadowMapType(self):
        return _PyAnyCAD.RenderSettings_GetShadowMapType(self)

    def SetShadowMapType(self, val):
        return _PyAnyCAD.RenderSettings_SetShadowMapType(self, val)

    def GetContactShadow(self):
        return _PyAnyCAD.RenderSettings_GetContactShadow(self)

    def SetContactShadow(self, val):
        return _PyAnyCAD.RenderSettings_SetContactShadow(self, val)

    def GetContactShadowBlur(self):
        return _PyAnyCAD.RenderSettings_GetContactShadowBlur(self)

    def SetContactShadowBlur(self, val):
        return _PyAnyCAD.RenderSettings_SetContactShadowBlur(self, val)

    def GetContactShadowZ(self):
        return _PyAnyCAD.RenderSettings_GetContactShadowZ(self)

    def SetContactShadowZ(self, val):
        return _PyAnyCAD.RenderSettings_SetContactShadowZ(self, val)

    def GetPhysicallyCorrectLights(self):
        return _PyAnyCAD.RenderSettings_GetPhysicallyCorrectLights(self)

    def SetPhysicallyCorrectLights(self, val):
        return _PyAnyCAD.RenderSettings_SetPhysicallyCorrectLights(self, val)

    def GetToneMapping(self):
        return _PyAnyCAD.RenderSettings_GetToneMapping(self)

    def SetToneMapping(self, val):
        return _PyAnyCAD.RenderSettings_SetToneMapping(self, val)

    def GetToneMappingExposure(self):
        return _PyAnyCAD.RenderSettings_GetToneMappingExposure(self)

    def SetToneMappingExposure(self, val):
        return _PyAnyCAD.RenderSettings_SetToneMappingExposure(self, val)

    def GetDiretionalLightCount(self):
        return _PyAnyCAD.RenderSettings_GetDiretionalLightCount(self)

    def SetDiretionalLightCount(self, val):
        return _PyAnyCAD.RenderSettings_SetDiretionalLightCount(self, val)

    def GetDiretionalLightShadowCount(self):
        return _PyAnyCAD.RenderSettings_GetDiretionalLightShadowCount(self)

    def SetDiretionalLightShadowCount(self, val):
        return _PyAnyCAD.RenderSettings_SetDiretionalLightShadowCount(self, val)

    def GetHemisphereLight(self):
        return _PyAnyCAD.RenderSettings_GetHemisphereLight(self)

    def SetHemisphereLight(self, val):
        return _PyAnyCAD.RenderSettings_SetHemisphereLight(self, val)

    def GetClippingPlanesNum(self):
        return _PyAnyCAD.RenderSettings_GetClippingPlanesNum(self)

    def SetClippingPlanesNum(self, val):
        return _PyAnyCAD.RenderSettings_SetClippingPlanesNum(self, val)

    def GetClippingIntersection(self):
        return _PyAnyCAD.RenderSettings_GetClippingIntersection(self)

    def SetClippingIntersection(self, val):
        return _PyAnyCAD.RenderSettings_SetClippingIntersection(self, val)

# Register RenderSettings in _PyAnyCAD:
_PyAnyCAD.RenderSettings_swigregister(RenderSettings)

EnumUpdateFlags_Model = _PyAnyCAD.EnumUpdateFlags_Model
EnumUpdateFlags_Scene = _PyAnyCAD.EnumUpdateFlags_Scene
EnumUpdateFlags_Material = _PyAnyCAD.EnumUpdateFlags_Material
EnumUpdateFlags_Camera = _PyAnyCAD.EnumUpdateFlags_Camera
EnumUpdateFlags_Light = _PyAnyCAD.EnumUpdateFlags_Light
EnumUpdateFlags_Selection = _PyAnyCAD.EnumUpdateFlags_Selection
EnumUpdateFlags_Scene2D = _PyAnyCAD.EnumUpdateFlags_Scene2D
EnumViewCoordinateType_Empty = _PyAnyCAD.EnumViewCoordinateType_Empty
EnumViewCoordinateType_Axis = _PyAnyCAD.EnumViewCoordinateType_Axis
EnumViewCoordinateType_Cube = _PyAnyCAD.EnumViewCoordinateType_Cube
class SceneNode(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SceneNode_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_SceneNode

    def GetUserId(self):
        return _PyAnyCAD.SceneNode_GetUserId(self)

    def SetUserId(self, val):
        return _PyAnyCAD.SceneNode_SetUserId(self, val)

    def GetTransform(self):
        return _PyAnyCAD.SceneNode_GetTransform(self)

    def SetTransform(self, val):
        return _PyAnyCAD.SceneNode_SetTransform(self, val)

    def GetBoundingBox(self):
        return _PyAnyCAD.SceneNode_GetBoundingBox(self)

    def SetBoundingBox(self, val):
        return _PyAnyCAD.SceneNode_SetBoundingBox(self, val)

    def GetWorldTransform(self):
        return _PyAnyCAD.SceneNode_GetWorldTransform(self)

    def GetWorldBBox(self):
        return _PyAnyCAD.SceneNode_GetWorldBBox(self)

    def GetCastShadow(self):
        return _PyAnyCAD.SceneNode_GetCastShadow(self)

    def SetCastShadow(self, val):
        return _PyAnyCAD.SceneNode_SetCastShadow(self, val)

    def GetPickable(self):
        return _PyAnyCAD.SceneNode_GetPickable(self)

    def SetPickable(self, val):
        return _PyAnyCAD.SceneNode_SetPickable(self, val)

    def GetCulling(self):
        return _PyAnyCAD.SceneNode_GetCulling(self)

    def SetCulling(self, val):
        return _PyAnyCAD.SceneNode_SetCulling(self, val)

    def GetVisible(self):
        return _PyAnyCAD.SceneNode_GetVisible(self)

    def SetVisible(self, val):
        return _PyAnyCAD.SceneNode_SetVisible(self, val)

    def GetParent(self):
        return _PyAnyCAD.SceneNode_GetParent(self)

    def SetParent(self, val):
        return _PyAnyCAD.SceneNode_SetParent(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.SceneNode_GetUpdateVersion(self)

    def SetUpdateVersion(self, val):
        return _PyAnyCAD.SceneNode_SetUpdateVersion(self, val)

    def GetOverrideFaceMaterial(self):
        return _PyAnyCAD.SceneNode_GetOverrideFaceMaterial(self)

    def SetOverrideFaceMaterial(self, val):
        return _PyAnyCAD.SceneNode_SetOverrideFaceMaterial(self, val)

    def GetOverrideEdgeMaterial(self):
        return _PyAnyCAD.SceneNode_GetOverrideEdgeMaterial(self)

    def SetOverrideEdgeMaterial(self, val):
        return _PyAnyCAD.SceneNode_SetOverrideEdgeMaterial(self, val)

    def Clone(self):
        return _PyAnyCAD.SceneNode_Clone(self)

    def RequstUpdate(self):
        return _PyAnyCAD.SceneNode_RequstUpdate(self)

    def UpdateTransform(self, parent):
        return _PyAnyCAD.SceneNode_UpdateTransform(self, parent)

    def ComputeBoundingBox(self, parent):
        return _PyAnyCAD.SceneNode_ComputeBoundingBox(self, parent)

    def IsVisiblePath(self):
        return _PyAnyCAD.SceneNode_IsVisiblePath(self)

# Register SceneNode in _PyAnyCAD:
_PyAnyCAD.SceneNode_swigregister(SceneNode)

def SceneNode_Cast(obj):
    return _PyAnyCAD.SceneNode_Cast(obj)

class SceneNodeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.SceneNodeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.SceneNodeList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.SceneNodeList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.SceneNodeList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.SceneNodeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.SceneNodeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.SceneNodeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.SceneNodeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.SceneNodeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.SceneNodeList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.SceneNodeList_pop(self)

    def append(self, x):
        return _PyAnyCAD.SceneNodeList_append(self, x)

    def empty(self):
        return _PyAnyCAD.SceneNodeList_empty(self)

    def size(self):
        return _PyAnyCAD.SceneNodeList_size(self)

    def swap(self, v):
        return _PyAnyCAD.SceneNodeList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.SceneNodeList_begin(self)

    def end(self):
        return _PyAnyCAD.SceneNodeList_end(self)

    def rbegin(self):
        return _PyAnyCAD.SceneNodeList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.SceneNodeList_rend(self)

    def clear(self):
        return _PyAnyCAD.SceneNodeList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.SceneNodeList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.SceneNodeList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.SceneNodeList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.SceneNodeList_swiginit(self, _PyAnyCAD.new_SceneNodeList(*args))

    def push_back(self, x):
        return _PyAnyCAD.SceneNodeList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.SceneNodeList_front(self)

    def back(self):
        return _PyAnyCAD.SceneNodeList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.SceneNodeList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.SceneNodeList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.SceneNodeList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.SceneNodeList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.SceneNodeList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_SceneNodeList

# Register SceneNodeList in _PyAnyCAD:
_PyAnyCAD.SceneNodeList_swigregister(SceneNodeList)

class PickedItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PickedItem_swiginit(self, _PyAnyCAD.new_PickedItem(*args))

    def GetPoint(self):
        return _PyAnyCAD.PickedItem_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.PickedItem_SetPoint(self, val)

    def GetNode(self):
        return _PyAnyCAD.PickedItem_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.PickedItem_SetNode(self, val)

    def GetElementId(self):
        return _PyAnyCAD.PickedItem_GetElementId(self)

    def SetElementId(self, val):
        return _PyAnyCAD.PickedItem_SetElementId(self, val)

    def IsNull(self):
        return _PyAnyCAD.PickedItem_IsNull(self)

    def GetNodeId(self):
        return _PyAnyCAD.PickedItem_GetNodeId(self)

    def GetRootNode(self):
        return _PyAnyCAD.PickedItem_GetRootNode(self)

    def GetPosition(self):
        return _PyAnyCAD.PickedItem_GetPosition(self)

    def GetShapeType(self):
        return _PyAnyCAD.PickedItem_GetShapeType(self)

    def GetShapeIndex(self):
        return _PyAnyCAD.PickedItem_GetShapeIndex(self)

    def GetTopoShapeId(self):
        return _PyAnyCAD.PickedItem_GetTopoShapeId(self)

    def GetPrimitiveIndex(self):
        return _PyAnyCAD.PickedItem_GetPrimitiveIndex(self)

    def ResetByFilter(self, filter):
        return _PyAnyCAD.PickedItem_ResetByFilter(self, filter)
    __swig_destroy__ = _PyAnyCAD.delete_PickedItem

# Register PickedItem in _PyAnyCAD:
_PyAnyCAD.PickedItem_swigregister(PickedItem)

class PickedResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PickedResult_swiginit(self, _PyAnyCAD.new_PickedResult(*args))

    def GetItem(self):
        return _PyAnyCAD.PickedResult_GetItem(self)

    def GetCount(self):
        return _PyAnyCAD.PickedResult_GetCount(self)

    def GetMulitPick(self):
        return _PyAnyCAD.PickedResult_GetMulitPick(self)

    def GetSelectionSet(self):
        return _PyAnyCAD.PickedResult_GetSelectionSet(self)

    def IsEmpty(self):
        return _PyAnyCAD.PickedResult_IsEmpty(self)
    __swig_destroy__ = _PyAnyCAD.delete_PickedResult

# Register PickedResult in _PyAnyCAD:
_PyAnyCAD.PickedResult_swigregister(PickedResult)

class PickedItemIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_PickedItemIterator

    def Next(self):
        return _PyAnyCAD.PickedItemIterator_Next(self)

    def More(self):
        return _PyAnyCAD.PickedItemIterator_More(self)

    def Current(self):
        return _PyAnyCAD.PickedItemIterator_Current(self)

# Register PickedItemIterator in _PyAnyCAD:
_PyAnyCAD.PickedItemIterator_swigregister(PickedItemIterator)

class PickListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PickListener:
            _self = None
        else:
            _self = self
        _PyAnyCAD.PickListener_swiginit(self, _PyAnyCAD.new_PickListener(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_PickListener

    def BeforeSelect(self, item):
        return _PyAnyCAD.PickListener_BeforeSelect(self, item)

    def AfterSelect(self, item):
        return _PyAnyCAD.PickListener_AfterSelect(self, item)

    def BeforeHilight(self, item):
        return _PyAnyCAD.PickListener_BeforeHilight(self, item)

    def AfterHilight(self, item):
        return _PyAnyCAD.PickListener_AfterHilight(self, item)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_PickListener(self)
        return weakref.proxy(self)

# Register PickListener in _PyAnyCAD:
_PyAnyCAD.PickListener_swigregister(PickListener)

class SceneNodeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_SceneNodeIterator

    def Next(self):
        return _PyAnyCAD.SceneNodeIterator_Next(self)

    def More(self):
        return _PyAnyCAD.SceneNodeIterator_More(self)

    def Current(self):
        return _PyAnyCAD.SceneNodeIterator_Current(self)

# Register SceneNodeIterator in _PyAnyCAD:
_PyAnyCAD.SceneNodeIterator_swigregister(SceneNodeIterator)

class Scene(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Scene_Cast(obj)

    def __init__(self):
        _PyAnyCAD.Scene_swiginit(self, _PyAnyCAD.new_Scene())
    __swig_destroy__ = _PyAnyCAD.delete_Scene

    def GetWorldBBox(self):
        return _PyAnyCAD.Scene_GetWorldBBox(self)

    def GetWorldTransform(self):
        return _PyAnyCAD.Scene_GetWorldTransform(self)

    def SetWorldTransform(self, val):
        return _PyAnyCAD.Scene_SetWorldTransform(self, val)

    def CreateIterator(self):
        return _PyAnyCAD.Scene_CreateIterator(self)

    def AddNode(self, node):
        return _PyAnyCAD.Scene_AddNode(self, node)

    def RemoveNode(self, nodeId):
        return _PyAnyCAD.Scene_RemoveNode(self, nodeId)

    def FindNode(self, nodeId):
        return _PyAnyCAD.Scene_FindNode(self, nodeId)

    def Clear(self):
        return _PyAnyCAD.Scene_Clear(self)

    def UpdateWorld(self):
        return _PyAnyCAD.Scene_UpdateWorld(self)

# Register Scene in _PyAnyCAD:
_PyAnyCAD.Scene_swigregister(Scene)

def Scene_Cast(obj):
    return _PyAnyCAD.Scene_Cast(obj)

class GroupSceneNode(SceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.GroupSceneNode_Cast(obj)

    def __init__(self):
        _PyAnyCAD.GroupSceneNode_swiginit(self, _PyAnyCAD.new_GroupSceneNode())
    __swig_destroy__ = _PyAnyCAD.delete_GroupSceneNode

    def CreateIterator(self):
        return _PyAnyCAD.GroupSceneNode_CreateIterator(self)

    def AddNode(self, node):
        return _PyAnyCAD.GroupSceneNode_AddNode(self, node)

    def RemoveNode(self, nodeId):
        return _PyAnyCAD.GroupSceneNode_RemoveNode(self, nodeId)

    def FindNode(self, nodeId):
        return _PyAnyCAD.GroupSceneNode_FindNode(self, nodeId)

    def FindNodeByUserId(self, userId):
        return _PyAnyCAD.GroupSceneNode_FindNodeByUserId(self, userId)

    def GetCount(self):
        return _PyAnyCAD.GroupSceneNode_GetCount(self)

    def UpdateTransform(self, parent):
        return _PyAnyCAD.GroupSceneNode_UpdateTransform(self, parent)

    def Clone(self):
        return _PyAnyCAD.GroupSceneNode_Clone(self)

# Register GroupSceneNode in _PyAnyCAD:
_PyAnyCAD.GroupSceneNode_swigregister(GroupSceneNode)

def GroupSceneNode_Cast(obj):
    return _PyAnyCAD.GroupSceneNode_Cast(obj)

class PrimitiveSceneNode(SceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PrimitiveSceneNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.PrimitiveSceneNode_swiginit(self, _PyAnyCAD.new_PrimitiveSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_PrimitiveSceneNode

    def GetPrimitive(self):
        return _PyAnyCAD.PrimitiveSceneNode_GetPrimitive(self)

    def GetMaterial(self):
        return _PyAnyCAD.PrimitiveSceneNode_GetMaterial(self)

    def SetMaterial(self, material):
        return _PyAnyCAD.PrimitiveSceneNode_SetMaterial(self, material)

    def SetPrimitive(self, shape):
        return _PyAnyCAD.PrimitiveSceneNode_SetPrimitive(self, shape)

    def Clone(self):
        return _PyAnyCAD.PrimitiveSceneNode_Clone(self)

    def UpdateBoundingBox(self):
        return _PyAnyCAD.PrimitiveSceneNode_UpdateBoundingBox(self)

# Register PrimitiveSceneNode in _PyAnyCAD:
_PyAnyCAD.PrimitiveSceneNode_swigregister(PrimitiveSceneNode)

def PrimitiveSceneNode_Cast(obj):
    return _PyAnyCAD.PrimitiveSceneNode_Cast(obj)

class TextSceneNode(PrimitiveSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.TextSceneNode_swiginit(self, _PyAnyCAD.new_TextSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TextSceneNode

    def GetFontHeight(self):
        return _PyAnyCAD.TextSceneNode_GetFontHeight(self)

    def GetScale(self):
        return _PyAnyCAD.TextSceneNode_GetScale(self)

    def SetText(self, text):
        return _PyAnyCAD.TextSceneNode_SetText(self, text)

    def CloneTextSceneNode(self):
        return _PyAnyCAD.TextSceneNode_CloneTextSceneNode(self)

    def Clone(self):
        return _PyAnyCAD.TextSceneNode_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.TextSceneNode_Cast(*args)

    @staticmethod
    def Create(text, color, fontHeight, autoTransform):
        return _PyAnyCAD.TextSceneNode_Create(text, color, fontHeight, autoTransform)

# Register TextSceneNode in _PyAnyCAD:
_PyAnyCAD.TextSceneNode_swigregister(TextSceneNode)

def TextSceneNode_Cast(*args):
    return _PyAnyCAD.TextSceneNode_Cast(*args)

def TextSceneNode_Create(text, color, fontHeight, autoTransform):
    return _PyAnyCAD.TextSceneNode_Create(text, color, fontHeight, autoTransform)

class ShapeSceneNode(SceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ShapeSceneNode_Cast(obj)

    def __init__(self, shape):
        _PyAnyCAD.ShapeSceneNode_swiginit(self, _PyAnyCAD.new_ShapeSceneNode(shape))
    __swig_destroy__ = _PyAnyCAD.delete_ShapeSceneNode

    def GetShape(self):
        return _PyAnyCAD.ShapeSceneNode_GetShape(self)

    def SetShape(self, val):
        return _PyAnyCAD.ShapeSceneNode_SetShape(self, val)

    def GetPrimitives(self):
        return _PyAnyCAD.ShapeSceneNode_GetPrimitives(self)

    def GetPrimitive(self, idx):
        return _PyAnyCAD.ShapeSceneNode_GetPrimitive(self, idx)

    def Clone(self):
        return _PyAnyCAD.ShapeSceneNode_Clone(self)

# Register ShapeSceneNode in _PyAnyCAD:
_PyAnyCAD.ShapeSceneNode_swigregister(ShapeSceneNode)

def ShapeSceneNode_Cast(obj):
    return _PyAnyCAD.ShapeSceneNode_Cast(obj)

class GeneralSceneNode(SceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.GeneralSceneNode_Cast(obj)

    def __init__(self):
        _PyAnyCAD.GeneralSceneNode_swiginit(self, _PyAnyCAD.new_GeneralSceneNode())
    __swig_destroy__ = _PyAnyCAD.delete_GeneralSceneNode

    def IsDocumentNode(self):
        return _PyAnyCAD.GeneralSceneNode_IsDocumentNode(self)

# Register GeneralSceneNode in _PyAnyCAD:
_PyAnyCAD.GeneralSceneNode_swigregister(GeneralSceneNode)

def GeneralSceneNode_Cast(obj):
    return _PyAnyCAD.GeneralSceneNode_Cast(obj)

class ParticleSceneNode(PrimitiveSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ParticleSceneNode_swiginit(self, _PyAnyCAD.new_ParticleSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParticleSceneNode

    def GetSeedCount(self):
        return _PyAnyCAD.ParticleSceneNode_GetSeedCount(self)

    def SetPosition(self, seedId, position):
        return _PyAnyCAD.ParticleSceneNode_SetPosition(self, seedId, position)

    def GetPosition(self, seedId):
        return _PyAnyCAD.ParticleSceneNode_GetPosition(self, seedId)

    def SetColor(self, seedId, color):
        return _PyAnyCAD.ParticleSceneNode_SetColor(self, seedId, color)

    def GetColor(self, seedId):
        return _PyAnyCAD.ParticleSceneNode_GetColor(self, seedId)

    def UpdateBoundingBox(self):
        return _PyAnyCAD.ParticleSceneNode_UpdateBoundingBox(self)

    def Clone(self):
        return _PyAnyCAD.ParticleSceneNode_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.ParticleSceneNode_Cast(*args)

# Register ParticleSceneNode in _PyAnyCAD:
_PyAnyCAD.ParticleSceneNode_swigregister(ParticleSceneNode)

def ParticleSceneNode_Cast(*args):
    return _PyAnyCAD.ParticleSceneNode_Cast(*args)

class SegmentsSceneNode(PrimitiveSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.SegmentsSceneNode_swiginit(self, _PyAnyCAD.new_SegmentsSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_SegmentsSceneNode

    def GetSegmentCount(self):
        return _PyAnyCAD.SegmentsSceneNode_GetSegmentCount(self)

    def SetPositions(self, idx, start, end):
        return _PyAnyCAD.SegmentsSceneNode_SetPositions(self, idx, start, end)

    def SetColors(self, idx, color1, color2):
        return _PyAnyCAD.SegmentsSceneNode_SetColors(self, idx, color1, color2)

    def UpdateBoundingBox(self):
        return _PyAnyCAD.SegmentsSceneNode_UpdateBoundingBox(self)

    def Clone(self):
        return _PyAnyCAD.SegmentsSceneNode_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.SegmentsSceneNode_Cast(*args)

# Register SegmentsSceneNode in _PyAnyCAD:
_PyAnyCAD.SegmentsSceneNode_swigregister(SegmentsSceneNode)

def SegmentsSceneNode_Cast(*args):
    return _PyAnyCAD.SegmentsSceneNode_Cast(*args)

class CoordinateWidget(GeneralSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.CoordinateWidget_swiginit(self, _PyAnyCAD.new_CoordinateWidget())
    __swig_destroy__ = _PyAnyCAD.delete_CoordinateWidget

    def GetSensitiveNodeId(self):
        return _PyAnyCAD.CoordinateWidget_GetSensitiveNodeId(self)

    def SetSensitiveNodeId(self, val):
        return _PyAnyCAD.CoordinateWidget_SetSensitiveNodeId(self, val)

    def GetSensitiveNode(self):
        return _PyAnyCAD.CoordinateWidget_GetSensitiveNode(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.CoordinateWidget_Cast(*args)

# Register CoordinateWidget in _PyAnyCAD:
_PyAnyCAD.CoordinateWidget_swigregister(CoordinateWidget)

def CoordinateWidget_Cast(*args):
    return _PyAnyCAD.CoordinateWidget_Cast(*args)

class ArrowWidget(ShapeSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ArrowWidget

    def GetRadius(self):
        return _PyAnyCAD.ArrowWidget_GetRadius(self)

    def SetRadius(self, val):
        return _PyAnyCAD.ArrowWidget_SetRadius(self, val)

    def GetLength(self):
        return _PyAnyCAD.ArrowWidget_GetLength(self)

    def SetLength(self, val):
        return _PyAnyCAD.ArrowWidget_SetLength(self, val)

    def GetPosition(self):
        return _PyAnyCAD.ArrowWidget_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.ArrowWidget_SetPosition(self, val)

    def GetDirection(self):
        return _PyAnyCAD.ArrowWidget_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.ArrowWidget_SetDirection(self, val)

    @staticmethod
    def Create(radius, length, material):
        return _PyAnyCAD.ArrowWidget_Create(radius, length, material)

    def SetLocation(self, position, direction):
        return _PyAnyCAD.ArrowWidget_SetLocation(self, position, direction)

    def Update(self):
        return _PyAnyCAD.ArrowWidget_Update(self)

    def Clone(self):
        return _PyAnyCAD.ArrowWidget_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.ArrowWidget_Cast(*args)

# Register ArrowWidget in _PyAnyCAD:
_PyAnyCAD.ArrowWidget_swigregister(ArrowWidget)

def ArrowWidget_Create(radius, length, material):
    return _PyAnyCAD.ArrowWidget_Create(radius, length, material)

def ArrowWidget_Cast(*args):
    return _PyAnyCAD.ArrowWidget_Cast(*args)

class AxisWidget(CoordinateWidget):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_AxisWidget

    def GetRadius(self):
        return _PyAnyCAD.AxisWidget_GetRadius(self)

    def GetLength(self):
        return _PyAnyCAD.AxisWidget_GetLength(self)

    def GetNodes(self):
        return _PyAnyCAD.AxisWidget_GetNodes(self)

    @staticmethod
    def Create(radius, length):
        return _PyAnyCAD.AxisWidget_Create(radius, length)

    def ShowText(self, bShow):
        return _PyAnyCAD.AxisWidget_ShowText(self, bShow)

    def SetTextForAxisX(self, text):
        return _PyAnyCAD.AxisWidget_SetTextForAxisX(self, text)

    def SetTextForAxisY(self, text):
        return _PyAnyCAD.AxisWidget_SetTextForAxisY(self, text)

    def SetTextForAxisZ(self, text):
        return _PyAnyCAD.AxisWidget_SetTextForAxisZ(self, text)

    def ShowArrow(self, userId):
        return _PyAnyCAD.AxisWidget_ShowArrow(self, userId)

    def CloneAxisWidget(self):
        return _PyAnyCAD.AxisWidget_CloneAxisWidget(self)

    def Clone(self):
        return _PyAnyCAD.AxisWidget_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.AxisWidget_Cast(*args)

# Register AxisWidget in _PyAnyCAD:
_PyAnyCAD.AxisWidget_swigregister(AxisWidget)

def AxisWidget_Create(radius, length):
    return _PyAnyCAD.AxisWidget_Create(radius, length)

def AxisWidget_Cast(*args):
    return _PyAnyCAD.AxisWidget_Cast(*args)

class PlotCurveFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_PlotCurveFunctor

    def f(self, idx, t):
        return _PyAnyCAD.PlotCurveFunctor_f(self, idx, t)

    def __init__(self):
        if self.__class__ == PlotCurveFunctor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.PlotCurveFunctor_swiginit(self, _PyAnyCAD.new_PlotCurveFunctor(_self, ))
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_PlotCurveFunctor(self)
        return weakref.proxy(self)

# Register PlotCurveFunctor in _PyAnyCAD:
_PyAnyCAD.PlotCurveFunctor_swigregister(PlotCurveFunctor)

class PlotSurfaceFunctor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_PlotSurfaceFunctor

    def f(self, idxU, idxV, u, v):
        return _PyAnyCAD.PlotSurfaceFunctor_f(self, idxU, idxV, u, v)

    def __init__(self):
        if self.__class__ == PlotSurfaceFunctor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.PlotSurfaceFunctor_swiginit(self, _PyAnyCAD.new_PlotSurfaceFunctor(_self, ))
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_PlotSurfaceFunctor(self)
        return weakref.proxy(self)

# Register PlotSurfaceFunctor in _PyAnyCAD:
_PyAnyCAD.PlotSurfaceFunctor_swigregister(PlotSurfaceFunctor)

class PlotRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PlotRange_swiginit(self, _PyAnyCAD.new_PlotRange(*args))

    def GetMin(self):
        return _PyAnyCAD.PlotRange_GetMin(self)

    def SetMin(self, val):
        return _PyAnyCAD.PlotRange_SetMin(self, val)

    def GetMax(self):
        return _PyAnyCAD.PlotRange_GetMax(self)

    def SetMax(self, val):
        return _PyAnyCAD.PlotRange_SetMax(self, val)

    def GetStep(self):
        return _PyAnyCAD.PlotRange_GetStep(self)

    def SetStep(self, val):
        return _PyAnyCAD.PlotRange_SetStep(self, val)

    def IsValid(self):
        return _PyAnyCAD.PlotRange_IsValid(self)

    def GetSteps(self):
        return _PyAnyCAD.PlotRange_GetSteps(self)

    def GetRange(self):
        return _PyAnyCAD.PlotRange_GetRange(self)

    def Contains(self, val):
        return _PyAnyCAD.PlotRange_Contains(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_PlotRange

# Register PlotRange in _PyAnyCAD:
_PyAnyCAD.PlotRange_swigregister(PlotRange)

class Matplot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, title):
        _PyAnyCAD.Matplot_swiginit(self, _PyAnyCAD.new_Matplot(title))
    __swig_destroy__ = _PyAnyCAD.delete_Matplot

    def GetTitle(self):
        return _PyAnyCAD.Matplot_GetTitle(self)

    def SetTitle(self, val):
        return _PyAnyCAD.Matplot_SetTitle(self, val)

    def GetMaterial(self):
        return _PyAnyCAD.Matplot_GetMaterial(self)

    def GetColorTable(self):
        return _PyAnyCAD.Matplot_GetColorTable(self)

    def AddCurve(self, range, func, clr):
        return _PyAnyCAD.Matplot_AddCurve(self, range, func, clr)

    def AddSurface(self, uRange, vRange, func, showEdge):
        return _PyAnyCAD.Matplot_AddSurface(self, uRange, vRange, func, showEdge)

    def Build(self, *args):
        return _PyAnyCAD.Matplot_Build(self, *args)

    def GetSurface(self, idx):
        return _PyAnyCAD.Matplot_GetSurface(self, idx)

# Register Matplot in _PyAnyCAD:
_PyAnyCAD.Matplot_swigregister(Matplot)

class SceneNode2D(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SceneNode2D_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.SceneNode2D_swiginit(self, _PyAnyCAD.new_SceneNode2D(*args))
    __swig_destroy__ = _PyAnyCAD.delete_SceneNode2D

    def GetVisible(self):
        return _PyAnyCAD.SceneNode2D_GetVisible(self)

    def SetVisible(self, val):
        return _PyAnyCAD.SceneNode2D_SetVisible(self, val)

    def GetNode(self):
        return _PyAnyCAD.SceneNode2D_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.SceneNode2D_SetNode(self, val)

    def UpdatePosition(self, camera):
        return _PyAnyCAD.SceneNode2D_UpdatePosition(self, camera)

# Register SceneNode2D in _PyAnyCAD:
_PyAnyCAD.SceneNode2D_swigregister(SceneNode2D)

def SceneNode2D_Cast(obj):
    return _PyAnyCAD.SceneNode2D_Cast(obj)

class Scene2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.Scene2D_swiginit(self, _PyAnyCAD.new_Scene2D())
    __swig_destroy__ = _PyAnyCAD.delete_Scene2D

    def AddNode(self, node):
        return _PyAnyCAD.Scene2D_AddNode(self, node)

    def RemoveNode(self, nodeId):
        return _PyAnyCAD.Scene2D_RemoveNode(self, nodeId)

    def Clear(self):
        return _PyAnyCAD.Scene2D_Clear(self)

# Register Scene2D in _PyAnyCAD:
_PyAnyCAD.Scene2D_swigregister(Scene2D)

class TagNode2D(SceneNode2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, text, handle):
        _PyAnyCAD.TagNode2D_swiginit(self, _PyAnyCAD.new_TagNode2D(text, handle))
    __swig_destroy__ = _PyAnyCAD.delete_TagNode2D

    @staticmethod
    def Create(text, position, target):
        return _PyAnyCAD.TagNode2D_Create(text, position, target)

    def GetPosition(self):
        return _PyAnyCAD.TagNode2D_GetPosition(self)

    def GetWorldPosition(self):
        return _PyAnyCAD.TagNode2D_GetWorldPosition(self)

    def SetWorldPosition(self, val):
        return _PyAnyCAD.TagNode2D_SetWorldPosition(self, val)

    def GetTarget(self):
        return _PyAnyCAD.TagNode2D_GetTarget(self)

    def SetTarget(self, val):
        return _PyAnyCAD.TagNode2D_SetTarget(self, val)

    def GetTextNode(self):
        return _PyAnyCAD.TagNode2D_GetTextNode(self)

    def GetHandleNode(self):
        return _PyAnyCAD.TagNode2D_GetHandleNode(self)

    def GetViewportPosition(self):
        return _PyAnyCAD.TagNode2D_GetViewportPosition(self)

    def SetPosition(self, *args):
        return _PyAnyCAD.TagNode2D_SetPosition(self, *args)

    def SetLineWidth(self, width):
        return _PyAnyCAD.TagNode2D_SetLineWidth(self, width)

    def SetLineColor(self, color):
        return _PyAnyCAD.TagNode2D_SetLineColor(self, color)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.TagNode2D_Cast(*args)

# Register TagNode2D in _PyAnyCAD:
_PyAnyCAD.TagNode2D_swigregister(TagNode2D)

def TagNode2D_Create(text, position, target):
    return _PyAnyCAD.TagNode2D_Create(text, position, target)

def TagNode2D_Cast(*args):
    return _PyAnyCAD.TagNode2D_Cast(*args)

class PaletteWidget(SceneNode2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PaletteWidget_Cast(obj)

    def __init__(self):
        _PyAnyCAD.PaletteWidget_swiginit(self, _PyAnyCAD.new_PaletteWidget())
    __swig_destroy__ = _PyAnyCAD.delete_PaletteWidget

    def GetPosition(self):
        return _PyAnyCAD.PaletteWidget_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.PaletteWidget_SetPosition(self, val)

    def GetWidth(self):
        return _PyAnyCAD.PaletteWidget_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.PaletteWidget_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.PaletteWidget_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.PaletteWidget_SetHeight(self, val)

    def Update(self, colorTable):
        return _PyAnyCAD.PaletteWidget_Update(self, colorTable)

    def UpdatePosition(self, camera):
        return _PyAnyCAD.PaletteWidget_UpdatePosition(self, camera)

# Register PaletteWidget in _PyAnyCAD:
_PyAnyCAD.PaletteWidget_swigregister(PaletteWidget)

def PaletteWidget_Cast(obj):
    return _PyAnyCAD.PaletteWidget_Cast(obj)

class CoordinateGridWidget(ShapeSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_CoordinateGridWidget

    def FitToBoundingBox(self, bbox):
        return _PyAnyCAD.CoordinateGridWidget_FitToBoundingBox(self, bbox)

    def Clone(self):
        return _PyAnyCAD.CoordinateGridWidget_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.CoordinateGridWidget_Cast(*args)

# Register CoordinateGridWidget in _PyAnyCAD:
_PyAnyCAD.CoordinateGridWidget_swigregister(CoordinateGridWidget)

def CoordinateGridWidget_Cast(*args):
    return _PyAnyCAD.CoordinateGridWidget_Cast(*args)

class PlanarGridWidget(CoordinateGridWidget):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, cellSize, cellCountX, cellCountY):
        _PyAnyCAD.PlanarGridWidget_swiginit(self, _PyAnyCAD.new_PlanarGridWidget(cellSize, cellCountX, cellCountY))
    __swig_destroy__ = _PyAnyCAD.delete_PlanarGridWidget

    def GetCellSize(self):
        return _PyAnyCAD.PlanarGridWidget_GetCellSize(self)

    def SetCellSize(self, val):
        return _PyAnyCAD.PlanarGridWidget_SetCellSize(self, val)

    def GetCellCountX(self):
        return _PyAnyCAD.PlanarGridWidget_GetCellCountX(self)

    def SetCellCountX(self, val):
        return _PyAnyCAD.PlanarGridWidget_SetCellCountX(self, val)

    def GetCellCountY(self):
        return _PyAnyCAD.PlanarGridWidget_GetCellCountY(self)

    def SetCellCountY(self, val):
        return _PyAnyCAD.PlanarGridWidget_SetCellCountY(self, val)

    def Update(self):
        return _PyAnyCAD.PlanarGridWidget_Update(self)

    def FitToBoundingBox(self, bbox):
        return _PyAnyCAD.PlanarGridWidget_FitToBoundingBox(self, bbox)

    def Clone(self):
        return _PyAnyCAD.PlanarGridWidget_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.PlanarGridWidget_Cast(*args)

    @staticmethod
    def PrimaryColor():
        return _PyAnyCAD.PlanarGridWidget_PrimaryColor()

    @staticmethod
    def SecondaryColor():
        return _PyAnyCAD.PlanarGridWidget_SecondaryColor()

# Register PlanarGridWidget in _PyAnyCAD:
_PyAnyCAD.PlanarGridWidget_swigregister(PlanarGridWidget)

def PlanarGridWidget_Cast(*args):
    return _PyAnyCAD.PlanarGridWidget_Cast(*args)

def PlanarGridWidget_PrimaryColor():
    return _PyAnyCAD.PlanarGridWidget_PrimaryColor()

def PlanarGridWidget_SecondaryColor():
    return _PyAnyCAD.PlanarGridWidget_SecondaryColor()

class PickedItemSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.PickedItemSet_swiginit(self, _PyAnyCAD.new_PickedItemSet())
    __swig_destroy__ = _PyAnyCAD.delete_PickedItemSet

    def CreateIterator(self):
        return _PyAnyCAD.PickedItemSet_CreateIterator(self)

    def Set(self, item):
        return _PyAnyCAD.PickedItemSet_Set(self, item)

    def Add(self, item, removeExisting):
        return _PyAnyCAD.PickedItemSet_Add(self, item, removeExisting)

    def GetCount(self):
        return _PyAnyCAD.PickedItemSet_GetCount(self)

    def Clear(self):
        return _PyAnyCAD.PickedItemSet_Clear(self)

    def IsExsiting(self, item):
        return _PyAnyCAD.PickedItemSet_IsExsiting(self, item)

    def Remove(self, id):
        return _PyAnyCAD.PickedItemSet_Remove(self, id)

    def RemoveById(self, *args):
        return _PyAnyCAD.PickedItemSet_RemoveById(self, *args)

# Register PickedItemSet in _PyAnyCAD:
_PyAnyCAD.PickedItemSet_swigregister(PickedItemSet)

class SelectionManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.SelectionManager_swiginit(self, _PyAnyCAD.new_SelectionManager())
    __swig_destroy__ = _PyAnyCAD.delete_SelectionManager

    def GetListener(self):
        return _PyAnyCAD.SelectionManager_GetListener(self)

    def SetListener(self, val):
        return _PyAnyCAD.SelectionManager_SetListener(self, val)

    def GetDepthTest(self):
        return _PyAnyCAD.SelectionManager_GetDepthTest(self)

    def SetDepthTest(self, enabled):
        return _PyAnyCAD.SelectionManager_SetDepthTest(self, enabled)

    def GetHilighting(self):
        return _PyAnyCAD.SelectionManager_GetHilighting(self)

    def SetHilighting(self, val):
        return _PyAnyCAD.SelectionManager_SetHilighting(self, val)

    def GetAllowPickNull(self):
        return _PyAnyCAD.SelectionManager_GetAllowPickNull(self)

    def SetAllowPickNull(self, val):
        return _PyAnyCAD.SelectionManager_SetAllowPickNull(self, val)

    def GetSelection(self):
        return _PyAnyCAD.SelectionManager_GetSelection(self)

    def GetHilight(self):
        return _PyAnyCAD.SelectionManager_GetHilight(self)

    def GetPickFilter(self):
        return _PyAnyCAD.SelectionManager_GetPickFilter(self)

    def SetPickFilter(self, val):
        return _PyAnyCAD.SelectionManager_SetPickFilter(self, val)

    def Select(self, *args):
        return _PyAnyCAD.SelectionManager_Select(self, *args)

    def SelectSubShape(self, *args):
        return _PyAnyCAD.SelectionManager_SelectSubShape(self, *args)

    def DeSelectById(self, nodeId):
        return _PyAnyCAD.SelectionManager_DeSelectById(self, nodeId)

    def DeSelect(self, id):
        return _PyAnyCAD.SelectionManager_DeSelect(self, id)

    def Clear(self):
        return _PyAnyCAD.SelectionManager_Clear(self)

    def ClearPickFilters(self):
        return _PyAnyCAD.SelectionManager_ClearPickFilters(self)

    def ResetPickFilters(self):
        return _PyAnyCAD.SelectionManager_ResetPickFilters(self)

    def AddPickFilter(self, filter):
        return _PyAnyCAD.SelectionManager_AddPickFilter(self, filter)

    def ClearPickFilter(self, filter):
        return _PyAnyCAD.SelectionManager_ClearPickFilter(self, filter)

    def SetSelectionColor(self, color):
        return _PyAnyCAD.SelectionManager_SetSelectionColor(self, color)

    def SetHilightingColor(self, color):
        return _PyAnyCAD.SelectionManager_SetHilightingColor(self, color)

# Register SelectionManager in _PyAnyCAD:
_PyAnyCAD.SelectionManager_swigregister(SelectionManager)

class NodeCollisionDetector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nodeA):
        _PyAnyCAD.NodeCollisionDetector_swiginit(self, _PyAnyCAD.new_NodeCollisionDetector(nodeA))
    __swig_destroy__ = _PyAnyCAD.delete_NodeCollisionDetector

    def Prepare(self):
        return _PyAnyCAD.NodeCollisionDetector_Prepare(self)

    def Test(self, *args):
        return _PyAnyCAD.NodeCollisionDetector_Test(self, *args)

# Register NodeCollisionDetector in _PyAnyCAD:
_PyAnyCAD.NodeCollisionDetector_swigregister(NodeCollisionDetector)

class Background(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Background

# Register Background in _PyAnyCAD:
_PyAnyCAD.Background_swigregister(Background)

class ColorBackground(Background):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ColorBackground_swiginit(self, _PyAnyCAD.new_ColorBackground(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ColorBackground

    def GetColor(self):
        return _PyAnyCAD.ColorBackground_GetColor(self)

    def SetColor(self, val):
        return _PyAnyCAD.ColorBackground_SetColor(self, val)

    @staticmethod
    def Cast(object):
        return _PyAnyCAD.ColorBackground_Cast(object)

# Register ColorBackground in _PyAnyCAD:
_PyAnyCAD.ColorBackground_swigregister(ColorBackground)

def ColorBackground_Cast(object):
    return _PyAnyCAD.ColorBackground_Cast(object)

class ImageBackground(Background):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, texture):
        _PyAnyCAD.ImageBackground_swiginit(self, _PyAnyCAD.new_ImageBackground(texture))
    __swig_destroy__ = _PyAnyCAD.delete_ImageBackground

    def GetTexture(self):
        return _PyAnyCAD.ImageBackground_GetTexture(self)

    @staticmethod
    def Cast(object):
        return _PyAnyCAD.ImageBackground_Cast(object)

    def SetTexture(self, texture):
        return _PyAnyCAD.ImageBackground_SetTexture(self, texture)

# Register ImageBackground in _PyAnyCAD:
_PyAnyCAD.ImageBackground_swigregister(ImageBackground)

def ImageBackground_Cast(object):
    return _PyAnyCAD.ImageBackground_Cast(object)

class SkyboxBackground(Background):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, texture):
        _PyAnyCAD.SkyboxBackground_swiginit(self, _PyAnyCAD.new_SkyboxBackground(texture))
    __swig_destroy__ = _PyAnyCAD.delete_SkyboxBackground

    def GetTexture(self):
        return _PyAnyCAD.SkyboxBackground_GetTexture(self)

    @staticmethod
    def Cast(object):
        return _PyAnyCAD.SkyboxBackground_Cast(object)

    @staticmethod
    def Create(name):
        return _PyAnyCAD.SkyboxBackground_Create(name)

    def SetTexture(self, texture):
        return _PyAnyCAD.SkyboxBackground_SetTexture(self, texture)

# Register SkyboxBackground in _PyAnyCAD:
_PyAnyCAD.SkyboxBackground_swigregister(SkyboxBackground)

def SkyboxBackground_Cast(object):
    return _PyAnyCAD.SkyboxBackground_Cast(object)

def SkyboxBackground_Create(name):
    return _PyAnyCAD.SkyboxBackground_Create(name)

class SceneManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, width, height):
        _PyAnyCAD.SceneManager_swiginit(self, _PyAnyCAD.new_SceneManager(width, height))
    __swig_destroy__ = _PyAnyCAD.delete_SceneManager

    def GetCamera(self):
        return _PyAnyCAD.SceneManager_GetCamera(self)

    def GetSelection(self):
        return _PyAnyCAD.SceneManager_GetSelection(self)

    def SetSelection(self, val):
        return _PyAnyCAD.SceneManager_SetSelection(self, val)

    def GetWorldBBox(self):
        return _PyAnyCAD.SceneManager_GetWorldBBox(self)

    def GetSceneBBox(self):
        return _PyAnyCAD.SceneManager_GetSceneBBox(self)

    def GetScene2D(self):
        return _PyAnyCAD.SceneManager_GetScene2D(self)

    def GetCoodinateGrid(self):
        return _PyAnyCAD.SceneManager_GetCoodinateGrid(self)

    def SetCoodinateGrid(self, val):
        return _PyAnyCAD.SceneManager_SetCoodinateGrid(self, val)

    def GetBackground(self):
        return _PyAnyCAD.SceneManager_GetBackground(self)

    def SetBackground(self, val):
        return _PyAnyCAD.SceneManager_SetBackground(self, val)

    def GetDisplayFilter(self):
        return _PyAnyCAD.SceneManager_GetDisplayFilter(self)

    def SetDisplayFilter(self, val):
        return _PyAnyCAD.SceneManager_SetDisplayFilter(self, val)

    def AddScene(self, scene):
        return _PyAnyCAD.SceneManager_AddScene(self, scene)

    def RemoveScene(self, sceneId):
        return _PyAnyCAD.SceneManager_RemoveScene(self, sceneId)

    def FindScene(self, sceneId):
        return _PyAnyCAD.SceneManager_FindScene(self, sceneId)

    def GetScene(self):
        return _PyAnyCAD.SceneManager_GetScene(self)

    def GetTempScene(self):
        return _PyAnyCAD.SceneManager_GetTempScene(self)

    def ResetDisplayFilters(self):
        return _PyAnyCAD.SceneManager_ResetDisplayFilters(self)

    def AddDisplayFilter(self, filter):
        return _PyAnyCAD.SceneManager_AddDisplayFilter(self, filter)

    def ClearDisplayFilter(self, filter):
        return _PyAnyCAD.SceneManager_ClearDisplayFilter(self, filter)

    def Select(self, *args):
        return _PyAnyCAD.SceneManager_Select(self, *args)

    def SelectSubShape(self, *args):
        return _PyAnyCAD.SceneManager_SelectSubShape(self, *args)

    def UpdateWorld(self, forced):
        return _PyAnyCAD.SceneManager_UpdateWorld(self, forced)

    def Clear(self):
        return _PyAnyCAD.SceneManager_Clear(self)

# Register SceneManager in _PyAnyCAD:
_PyAnyCAD.SceneManager_swigregister(SceneManager)

class SceneIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Load(fileName):
        return _PyAnyCAD.SceneIO_Load(fileName)

    @staticmethod
    def FormatFilters():
        return _PyAnyCAD.SceneIO_FormatFilters()

    def __init__(self):
        _PyAnyCAD.SceneIO_swiginit(self, _PyAnyCAD.new_SceneIO())
    __swig_destroy__ = _PyAnyCAD.delete_SceneIO

# Register SceneIO in _PyAnyCAD:
_PyAnyCAD.SceneIO_swigregister(SceneIO)

def SceneIO_Load(fileName):
    return _PyAnyCAD.SceneIO_Load(fileName)

def SceneIO_FormatFilters():
    return _PyAnyCAD.SceneIO_FormatFilters()

class SceneReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Load(self, fileName):
        return _PyAnyCAD.SceneReader_Load(self, fileName)

    def Support(self, extention):
        return _PyAnyCAD.SceneReader_Support(self, extention)

    def __init__(self):
        _PyAnyCAD.SceneReader_swiginit(self, _PyAnyCAD.new_SceneReader())
    __swig_destroy__ = _PyAnyCAD.delete_SceneReader

# Register SceneReader in _PyAnyCAD:
_PyAnyCAD.SceneReader_swigregister(SceneReader)

class STLReader(SceneReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.STLReader_swiginit(self, _PyAnyCAD.new_STLReader())
    __swig_destroy__ = _PyAnyCAD.delete_STLReader

    def Support(self, extention):
        return _PyAnyCAD.STLReader_Support(self, extention)

    def Load(self, *args):
        return _PyAnyCAD.STLReader_Load(self, *args)

# Register STLReader in _PyAnyCAD:
_PyAnyCAD.STLReader_swigregister(STLReader)

class Animation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.Animation_swiginit(self, _PyAnyCAD.new_Animation())
    __swig_destroy__ = _PyAnyCAD.delete_Animation

    def GetEnabled(self):
        return _PyAnyCAD.Animation_GetEnabled(self)

    def SetEnabled(self, val):
        return _PyAnyCAD.Animation_SetEnabled(self, val)

    def GetPaused(self):
        return _PyAnyCAD.Animation_GetPaused(self)

    def SetPaused(self, val):
        return _PyAnyCAD.Animation_SetPaused(self, val)

    def GetLoop(self):
        return _PyAnyCAD.Animation_GetLoop(self)

    def SetLoop(self, val):
        return _PyAnyCAD.Animation_SetLoop(self, val)

    def GetDuration(self):
        return _PyAnyCAD.Animation_GetDuration(self)

    def Play(self, time):
        return _PyAnyCAD.Animation_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.Animation_Reset(self)

# Register Animation in _PyAnyCAD:
_PyAnyCAD.Animation_swigregister(Animation)

EnumRobotJointType_Undefined = _PyAnyCAD.EnumRobotJointType_Undefined
EnumRobotJointType_Revolute = _PyAnyCAD.EnumRobotJointType_Revolute
EnumRobotJointType_Prismatic = _PyAnyCAD.EnumRobotJointType_Prismatic
EnumRobotJointType_Fixed = _PyAnyCAD.EnumRobotJointType_Fixed
class RobotDH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotDH_swiginit(self, _PyAnyCAD.new_RobotDH(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotDH

    def GetAlpha_VR(self):
        return _PyAnyCAD.RobotDH_GetAlpha_VR(self)

    def SetAlpha_VR(self, val):
        return _PyAnyCAD.RobotDH_SetAlpha_VR(self, val)

    def GetA_VR(self):
        return _PyAnyCAD.RobotDH_GetA_VR(self)

    def SetA_VR(self, val):
        return _PyAnyCAD.RobotDH_SetA_VR(self, val)

    def GetD_VR(self):
        return _PyAnyCAD.RobotDH_GetD_VR(self)

    def SetD_VR(self, val):
        return _PyAnyCAD.RobotDH_SetD_VR(self, val)

    def GetTheta_VR(self):
        return _PyAnyCAD.RobotDH_GetTheta_VR(self)

    def SetTheta_VR(self, val):
        return _PyAnyCAD.RobotDH_SetTheta_VR(self, val)

    def GetFrame(self):
        return _PyAnyCAD.RobotDH_GetFrame(self)

    def SetFrame(self, val):
        return _PyAnyCAD.RobotDH_SetFrame(self, val)

    def GetWorldFrame(self):
        return _PyAnyCAD.RobotDH_GetWorldFrame(self)

    def SetWorldFrame(self, val):
        return _PyAnyCAD.RobotDH_SetWorldFrame(self, val)

    def SetAlpha(self, val):
        return _PyAnyCAD.RobotDH_SetAlpha(self, val)

    def GetAlpha(self):
        return _PyAnyCAD.RobotDH_GetAlpha(self)

    def SetA(self, val):
        return _PyAnyCAD.RobotDH_SetA(self, val)

    def GetA(self):
        return _PyAnyCAD.RobotDH_GetA(self)

    def SetD(self, val):
        return _PyAnyCAD.RobotDH_SetD(self, val)

    def GetD(self):
        return _PyAnyCAD.RobotDH_GetD(self)

    def SetTheta(self, val):
        return _PyAnyCAD.RobotDH_SetTheta(self, val)

    def GetTheta(self):
        return _PyAnyCAD.RobotDH_GetTheta(self)

    def Update(self):
        return _PyAnyCAD.RobotDH_Update(self)

    def Clone(self):
        return _PyAnyCAD.RobotDH_Clone(self)

# Register RobotDH in _PyAnyCAD:
_PyAnyCAD.RobotDH_swigregister(RobotDH)

class RobotJoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotJoint_swiginit(self, _PyAnyCAD.new_RobotJoint(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotJoint

    def GetJointType(self):
        return _PyAnyCAD.RobotJoint_GetJointType(self)

    def SetJointType(self, val):
        return _PyAnyCAD.RobotJoint_SetJointType(self, val)

    def GetIndex(self):
        return _PyAnyCAD.RobotJoint_GetIndex(self)

    def SetIndex(self, val):
        return _PyAnyCAD.RobotJoint_SetIndex(self, val)

    def GetParameters(self):
        return _PyAnyCAD.RobotJoint_GetParameters(self)

    def GetNeedUpdate(self):
        return _PyAnyCAD.RobotJoint_GetNeedUpdate(self)

    def GetAxisNode(self):
        return _PyAnyCAD.RobotJoint_GetAxisNode(self)

    def SetAxisNode(self, val):
        return _PyAnyCAD.RobotJoint_SetAxisNode(self, val)

    def GetVirtualLink(self):
        return _PyAnyCAD.RobotJoint_GetVirtualLink(self)

    def GetBiasDH(self):
        return _PyAnyCAD.RobotJoint_GetBiasDH(self)

    def Clone(self):
        return _PyAnyCAD.RobotJoint_Clone(self)

    def Initialize(self, parent, lineMaterial):
        return _PyAnyCAD.RobotJoint_Initialize(self, parent, lineMaterial)

    def SetVariable(self, v):
        return _PyAnyCAD.RobotJoint_SetVariable(self, v)

    def GetVariable(self):
        return _PyAnyCAD.RobotJoint_GetVariable(self)

    def SetBiasDH(self, biasDH):
        return _PyAnyCAD.RobotJoint_SetBiasDH(self, biasDH)

    def CalculateFrame(self):
        return _PyAnyCAD.RobotJoint_CalculateFrame(self)

    def GetLocalFrame(self):
        return _PyAnyCAD.RobotJoint_GetLocalFrame(self)

    def GetWorldFrame(self):
        return _PyAnyCAD.RobotJoint_GetWorldFrame(self)

    def RequstUpdate(self):
        return _PyAnyCAD.RobotJoint_RequstUpdate(self)

    def Update(self):
        return _PyAnyCAD.RobotJoint_Update(self)

    def SetLinkVisible(self, bShow):
        return _PyAnyCAD.RobotJoint_SetLinkVisible(self, bShow)

    def SetAxisVisible(self, bShow):
        return _PyAnyCAD.RobotJoint_SetAxisVisible(self, bShow)

# Register RobotJoint in _PyAnyCAD:
_PyAnyCAD.RobotJoint_swigregister(RobotJoint)

class RobotLink(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotLink_swiginit(self, _PyAnyCAD.new_RobotLink(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotLink

    def GetWorldToDH(self):
        return _PyAnyCAD.RobotLink_GetWorldToDH(self)

    def SetWorldToDH(self, val):
        return _PyAnyCAD.RobotLink_SetWorldToDH(self, val)

    def GetJointIndex(self):
        return _PyAnyCAD.RobotLink_GetJointIndex(self)

    def SetJointIndex(self, val):
        return _PyAnyCAD.RobotLink_SetJointIndex(self, val)

    def GetVisualNode(self):
        return _PyAnyCAD.RobotLink_GetVisualNode(self)

    def SetVisualNode(self, val):
        return _PyAnyCAD.RobotLink_SetVisualNode(self, val)

    def SetVisible(self, bShow):
        return _PyAnyCAD.RobotLink_SetVisible(self, bShow)

    def UpdateTransform(self, world):
        return _PyAnyCAD.RobotLink_UpdateTransform(self, world)

    def GetWorldTransform(self):
        return _PyAnyCAD.RobotLink_GetWorldTransform(self)

    def Clone(self):
        return _PyAnyCAD.RobotLink_Clone(self)

# Register RobotLink in _PyAnyCAD:
_PyAnyCAD.RobotLink_swigregister(RobotLink)

class RobotArm(GroupSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.RobotArm_Cast(obj)

    def __init__(self):
        _PyAnyCAD.RobotArm_swiginit(self, _PyAnyCAD.new_RobotArm())
    __swig_destroy__ = _PyAnyCAD.delete_RobotArm

    def GetAxisSize(self):
        return _PyAnyCAD.RobotArm_GetAxisSize(self)

    def SetAxisSize(self, val):
        return _PyAnyCAD.RobotArm_SetAxisSize(self, val)

    def GetName(self):
        return _PyAnyCAD.RobotArm_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.RobotArm_SetName(self, val)

    def AddJoint(self, jointType, alpha, a, d, theta, biasDH=0):
        return _PyAnyCAD.RobotArm_AddJoint(self, jointType, alpha, a, d, theta, biasDH)

    def GetJoint(self, idx):
        return _PyAnyCAD.RobotArm_GetJoint(self, idx)

    def RemoveTailJoint(self):
        return _PyAnyCAD.RobotArm_RemoveTailJoint(self)

    def GetJointCount(self):
        return _PyAnyCAD.RobotArm_GetJointCount(self)

    def AddLink(self, jointIdx, bone):
        return _PyAnyCAD.RobotArm_AddLink(self, jointIdx, bone)

    def GetLink(self, idx):
        return _PyAnyCAD.RobotArm_GetLink(self, idx)

    def GetLinkCount(self):
        return _PyAnyCAD.RobotArm_GetLinkCount(self)

    def ResetInitialState(self):
        return _PyAnyCAD.RobotArm_ResetInitialState(self)

    def SetVariable(self, idx, v):
        return _PyAnyCAD.RobotArm_SetVariable(self, idx, v)

    def GetVariable(self, idx):
        return _PyAnyCAD.RobotArm_GetVariable(self, idx)

    def UpdateFrames(self):
        return _PyAnyCAD.RobotArm_UpdateFrames(self)

    def GetFinalTransform(self):
        return _PyAnyCAD.RobotArm_GetFinalTransform(self)

    def ShowVirtualLinks(self, bShow):
        return _PyAnyCAD.RobotArm_ShowVirtualLinks(self, bShow)

    def ShowLinks(self, bShow):
        return _PyAnyCAD.RobotArm_ShowLinks(self, bShow)

    def ShowJoints(self, bShow):
        return _PyAnyCAD.RobotArm_ShowJoints(self, bShow)

    def SelfCollisionTest(self):
        return _PyAnyCAD.RobotArm_SelfCollisionTest(self)

    def CloneRobotArm(self):
        return _PyAnyCAD.RobotArm_CloneRobotArm(self)

    def Clone(self):
        return _PyAnyCAD.RobotArm_Clone(self)

# Register RobotArm in _PyAnyCAD:
_PyAnyCAD.RobotArm_swigregister(RobotArm)

def RobotArm_Cast(obj):
    return _PyAnyCAD.RobotArm_Cast(obj)

class RobotBody(GroupSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.RobotBody_Cast(obj)

    def __init__(self):
        _PyAnyCAD.RobotBody_swiginit(self, _PyAnyCAD.new_RobotBody())
    __swig_destroy__ = _PyAnyCAD.delete_RobotBody

    def GetName(self):
        return _PyAnyCAD.RobotBody_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.RobotBody_SetName(self, val)

    def Reset(self):
        return _PyAnyCAD.RobotBody_Reset(self)

    def AddArm(self, arm):
        return _PyAnyCAD.RobotBody_AddArm(self, arm)

    def RemoveArm(self, arm):
        return _PyAnyCAD.RobotBody_RemoveArm(self, arm)

    def GetArmCount(self):
        return _PyAnyCAD.RobotBody_GetArmCount(self)

    def GetArm(self, idx):
        return _PyAnyCAD.RobotBody_GetArm(self, idx)

    def SetVariable(self, idxArm, idxJoint, v):
        return _PyAnyCAD.RobotBody_SetVariable(self, idxArm, idxJoint, v)

    def GetVariable(self, idxArm, idxJoint):
        return _PyAnyCAD.RobotBody_GetVariable(self, idxArm, idxJoint)

    def UpdateFrames(self):
        return _PyAnyCAD.RobotBody_UpdateFrames(self)

    def GetFinalTransform(self, idxArm):
        return _PyAnyCAD.RobotBody_GetFinalTransform(self, idxArm)

    def ShowVirtualLinks(self, bShow):
        return _PyAnyCAD.RobotBody_ShowVirtualLinks(self, bShow)

    def ShowLinks(self, bShow):
        return _PyAnyCAD.RobotBody_ShowLinks(self, bShow)

    def ShowJoints(self, bShow):
        return _PyAnyCAD.RobotBody_ShowJoints(self, bShow)

    def CloneRobot(self):
        return _PyAnyCAD.RobotBody_CloneRobot(self)

    def Clone(self):
        return _PyAnyCAD.RobotBody_Clone(self)

# Register RobotBody in _PyAnyCAD:
_PyAnyCAD.RobotBody_swigregister(RobotBody)

def RobotBody_Cast(obj):
    return _PyAnyCAD.RobotBody_Cast(obj)

class RobotAnimationClip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotAnimationClip_swiginit(self, _PyAnyCAD.new_RobotAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotAnimationClip

    def GetJointIndex(self):
        return _PyAnyCAD.RobotAnimationClip_GetJointIndex(self)

    def SetJointIndex(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetJointIndex(self, val)

    def GetStartVar(self):
        return _PyAnyCAD.RobotAnimationClip_GetStartVar(self)

    def SetStartVar(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetStartVar(self, val)

    def GetEndVar(self):
        return _PyAnyCAD.RobotAnimationClip_GetEndVar(self)

    def SetEndVar(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetEndVar(self, val)

    def GetStartTime(self):
        return _PyAnyCAD.RobotAnimationClip_GetStartTime(self)

    def SetStartTime(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetStartTime(self, val)

    def GetEndTime(self):
        return _PyAnyCAD.RobotAnimationClip_GetEndTime(self)

    def SetEndTime(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetEndTime(self, val)

    def GetEnabled(self):
        return _PyAnyCAD.RobotAnimationClip_GetEnabled(self)

    def SetEnabled(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetEnabled(self, val)

    def ComputeSpeed(self):
        return _PyAnyCAD.RobotAnimationClip_ComputeSpeed(self)

    def Play(self, arm, time):
        return _PyAnyCAD.RobotAnimationClip_Play(self, arm, time)

# Register RobotAnimationClip in _PyAnyCAD:
_PyAnyCAD.RobotAnimationClip_swigregister(RobotAnimationClip)

class RobotAnimation(Animation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotAnimation_swiginit(self, _PyAnyCAD.new_RobotAnimation(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotAnimation

    def GetName(self):
        return _PyAnyCAD.RobotAnimation_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.RobotAnimation_SetName(self, val)

    def GetArm(self):
        return _PyAnyCAD.RobotAnimation_GetArm(self)

    def SetArm(self, val):
        return _PyAnyCAD.RobotAnimation_SetArm(self, val)

    def AddClip(self, clip):
        return _PyAnyCAD.RobotAnimation_AddClip(self, clip)

    def RemoveClip(self, clip):
        return _PyAnyCAD.RobotAnimation_RemoveClip(self, clip)

    def GetClipCountOfJoint(self, jointIdx):
        return _PyAnyCAD.RobotAnimation_GetClipCountOfJoint(self, jointIdx)

    def GetClip(self, jointIdx, clipIdx):
        return _PyAnyCAD.RobotAnimation_GetClip(self, jointIdx, clipIdx)

    def Play(self, time):
        return _PyAnyCAD.RobotAnimation_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.RobotAnimation_Reset(self)

# Register RobotAnimation in _PyAnyCAD:
_PyAnyCAD.RobotAnimation_swigregister(RobotAnimation)

class RigidAnimationClip(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RigidAnimationClip_swiginit(self, _PyAnyCAD.new_RigidAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RigidAnimationClip

    def GetStartTime(self):
        return _PyAnyCAD.RigidAnimationClip_GetStartTime(self)

    def SetStartTime(self, val):
        return _PyAnyCAD.RigidAnimationClip_SetStartTime(self, val)

    def GetEndTime(self):
        return _PyAnyCAD.RigidAnimationClip_GetEndTime(self)

    def SetEndTime(self, val):
        return _PyAnyCAD.RigidAnimationClip_SetEndTime(self, val)

    def GetEnabled(self):
        return _PyAnyCAD.RigidAnimationClip_GetEnabled(self)

    def SetEnabled(self, val):
        return _PyAnyCAD.RigidAnimationClip_SetEnabled(self, val)

    def Play(self, time):
        return _PyAnyCAD.RigidAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.RigidAnimationClip_Reset(self)

# Register RigidAnimationClip in _PyAnyCAD:
_PyAnyCAD.RigidAnimationClip_swigregister(RigidAnimationClip)

class RigidAnimation(Animation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RigidAnimation_swiginit(self, _PyAnyCAD.new_RigidAnimation())
    __swig_destroy__ = _PyAnyCAD.delete_RigidAnimation

    def GetName(self):
        return _PyAnyCAD.RigidAnimation_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.RigidAnimation_SetName(self, val)

    def Add(self, clip):
        return _PyAnyCAD.RigidAnimation_Add(self, clip)

    def Play(self, time):
        return _PyAnyCAD.RigidAnimation_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.RigidAnimation_Reset(self)

# Register RigidAnimation in _PyAnyCAD:
_PyAnyCAD.RigidAnimation_swigregister(RigidAnimation)

class MatrixAnimationClip(RigidAnimationClip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node, startTrf, endTrf, startTime, endTime):
        _PyAnyCAD.MatrixAnimationClip_swiginit(self, _PyAnyCAD.new_MatrixAnimationClip(node, startTrf, endTrf, startTime, endTime))
    __swig_destroy__ = _PyAnyCAD.delete_MatrixAnimationClip

    def GetStartMatrix(self):
        return _PyAnyCAD.MatrixAnimationClip_GetStartMatrix(self)

    def SetStartMatrix(self, val):
        return _PyAnyCAD.MatrixAnimationClip_SetStartMatrix(self, val)

    def GetEndMatrix(self):
        return _PyAnyCAD.MatrixAnimationClip_GetEndMatrix(self)

    def SetEndMatrix(self, val):
        return _PyAnyCAD.MatrixAnimationClip_SetEndMatrix(self, val)

    def GetNode(self):
        return _PyAnyCAD.MatrixAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.MatrixAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.MatrixAnimationClip_Play(self, time)

# Register MatrixAnimationClip in _PyAnyCAD:
_PyAnyCAD.MatrixAnimationClip_swigregister(MatrixAnimationClip)

class RotateAnimationClip(RigidAnimationClip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RotateAnimationClip_swiginit(self, _PyAnyCAD.new_RotateAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RotateAnimationClip

    def GetDirection(self):
        return _PyAnyCAD.RotateAnimationClip_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.RotateAnimationClip_SetDirection(self, val)

    def GetAngle(self):
        return _PyAnyCAD.RotateAnimationClip_GetAngle(self)

    def SetAngle(self, val):
        return _PyAnyCAD.RotateAnimationClip_SetAngle(self, val)

    def GetNode(self):
        return _PyAnyCAD.RotateAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.RotateAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.RotateAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.RotateAnimationClip_Reset(self)

# Register RotateAnimationClip in _PyAnyCAD:
_PyAnyCAD.RotateAnimationClip_swigregister(RotateAnimationClip)

class MaterialAnimationClip(RigidAnimationClip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node, faceMaterial, edgeMaterial, duration, startTime, endTime):
        _PyAnyCAD.MaterialAnimationClip_swiginit(self, _PyAnyCAD.new_MaterialAnimationClip(node, faceMaterial, edgeMaterial, duration, startTime, endTime))
    __swig_destroy__ = _PyAnyCAD.delete_MaterialAnimationClip

    def GetDuration(self):
        return _PyAnyCAD.MaterialAnimationClip_GetDuration(self)

    def SetDuration(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetDuration(self, val)

    def GetFaceMaterial(self):
        return _PyAnyCAD.MaterialAnimationClip_GetFaceMaterial(self)

    def SetFaceMaterial(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetFaceMaterial(self, val)

    def GetEdgeMaterial(self):
        return _PyAnyCAD.MaterialAnimationClip_GetEdgeMaterial(self)

    def SetEdgeMaterial(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetEdgeMaterial(self, val)

    def GetNode(self):
        return _PyAnyCAD.MaterialAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.MaterialAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.MaterialAnimationClip_Reset(self)

# Register MaterialAnimationClip in _PyAnyCAD:
_PyAnyCAD.MaterialAnimationClip_swigregister(MaterialAnimationClip)

class MoveAnimationClip(RigidAnimationClip):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.MoveAnimationClip_swiginit(self, _PyAnyCAD.new_MoveAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_MoveAnimationClip

    def GetDirection(self):
        return _PyAnyCAD.MoveAnimationClip_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.MoveAnimationClip_SetDirection(self, val)

    def GetDistance(self):
        return _PyAnyCAD.MoveAnimationClip_GetDistance(self)

    def SetDistance(self, val):
        return _PyAnyCAD.MoveAnimationClip_SetDistance(self, val)

    def GetNode(self):
        return _PyAnyCAD.MoveAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.MoveAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.MoveAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.MoveAnimationClip_Reset(self)

# Register MoveAnimationClip in _PyAnyCAD:
_PyAnyCAD.MoveAnimationClip_swigregister(MoveAnimationClip)

EnumDimensionArrowStyle_DOT_SMALL = _PyAnyCAD.EnumDimensionArrowStyle_DOT_SMALL
EnumDimensionArrowStyle_DOT = _PyAnyCAD.EnumDimensionArrowStyle_DOT
EnumDimensionArrowStyle_ARCHTICK = _PyAnyCAD.EnumDimensionArrowStyle_ARCHTICK
EnumDimensionArrowStyle_ARROW = _PyAnyCAD.EnumDimensionArrowStyle_ARROW
EnumDimensionArrowStyle_ARROW_BLANK = _PyAnyCAD.EnumDimensionArrowStyle_ARROW_BLANK
EnumDimensionArrowStyle_ARROW_FILLED = _PyAnyCAD.EnumDimensionArrowStyle_ARROW_FILLED
class DimensionNode(GroupSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.DimensionNode_swiginit(self, _PyAnyCAD.new_DimensionNode())
    __swig_destroy__ = _PyAnyCAD.delete_DimensionNode

    def GetFontHeight(self):
        return _PyAnyCAD.DimensionNode_GetFontHeight(self)

    def SetFontHeight(self, val):
        return _PyAnyCAD.DimensionNode_SetFontHeight(self, val)

    def GetExtensionBeyond(self):
        return _PyAnyCAD.DimensionNode_GetExtensionBeyond(self)

    def SetExtensionBeyond(self, val):
        return _PyAnyCAD.DimensionNode_SetExtensionBeyond(self, val)

    def GetExtensionOffset(self):
        return _PyAnyCAD.DimensionNode_GetExtensionOffset(self)

    def SetExtensionOffset(self, val):
        return _PyAnyCAD.DimensionNode_SetExtensionOffset(self, val)

    def GetArrowStyle(self):
        return _PyAnyCAD.DimensionNode_GetArrowStyle(self)

    def SetArrowStyle(self, val):
        return _PyAnyCAD.DimensionNode_SetArrowStyle(self, val)

    def GetArrowLength(self):
        return _PyAnyCAD.DimensionNode_GetArrowLength(self)

    def SetArrowLength(self, val):
        return _PyAnyCAD.DimensionNode_SetArrowLength(self, val)

    def GetMaterial(self):
        return _PyAnyCAD.DimensionNode_GetMaterial(self)

    def SetMaterial(self, val):
        return _PyAnyCAD.DimensionNode_SetMaterial(self, val)

    def Clone(self):
        return _PyAnyCAD.DimensionNode_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.DimensionNode_Cast(*args)

# Register DimensionNode in _PyAnyCAD:
_PyAnyCAD.DimensionNode_swigregister(DimensionNode)

def DimensionNode_Cast(*args):
    return _PyAnyCAD.DimensionNode_Cast(*args)

class AlignedDimensionNode(DimensionNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.AlignedDimensionNode_swiginit(self, _PyAnyCAD.new_AlignedDimensionNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_AlignedDimensionNode

    def GetText(self):
        return _PyAnyCAD.AlignedDimensionNode_GetText(self)

    def SetText(self, val):
        return _PyAnyCAD.AlignedDimensionNode_SetText(self, val)

    def GetStartPoint(self):
        return _PyAnyCAD.AlignedDimensionNode_GetStartPoint(self)

    def SetStartPoint(self, val):
        return _PyAnyCAD.AlignedDimensionNode_SetStartPoint(self, val)

    def GetEndPoint(self):
        return _PyAnyCAD.AlignedDimensionNode_GetEndPoint(self)

    def SetEndPoint(self, val):
        return _PyAnyCAD.AlignedDimensionNode_SetEndPoint(self, val)

    def GetDistance(self):
        return _PyAnyCAD.AlignedDimensionNode_GetDistance(self)

    def SetDistance(self, val):
        return _PyAnyCAD.AlignedDimensionNode_SetDistance(self, val)

    def GetDirection(self):
        return _PyAnyCAD.AlignedDimensionNode_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.AlignedDimensionNode_SetDirection(self, val)

    def Update(self):
        return _PyAnyCAD.AlignedDimensionNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.AlignedDimensionNode_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.AlignedDimensionNode_Cast(*args)

# Register AlignedDimensionNode in _PyAnyCAD:
_PyAnyCAD.AlignedDimensionNode_swigregister(AlignedDimensionNode)

def AlignedDimensionNode_Cast(*args):
    return _PyAnyCAD.AlignedDimensionNode_Cast(*args)

class LinearDimensionNode(DimensionNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.LinearDimensionNode_swiginit(self, _PyAnyCAD.new_LinearDimensionNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_LinearDimensionNode

    def GetPoints(self):
        return _PyAnyCAD.LinearDimensionNode_GetPoints(self)

    def SetPoints(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetPoints(self, val)

    def GetLocation(self):
        return _PyAnyCAD.LinearDimensionNode_GetLocation(self)

    def SetLocation(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetLocation(self, val)

    def GetAngle(self):
        return _PyAnyCAD.LinearDimensionNode_GetAngle(self)

    def SetAngle(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetAngle(self, val)

    def GetAxisX(self):
        return _PyAnyCAD.LinearDimensionNode_GetAxisX(self)

    def SetAxisX(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetAxisX(self, val)

    def GetAxisZ(self):
        return _PyAnyCAD.LinearDimensionNode_GetAxisZ(self)

    def SetAxisZ(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetAxisZ(self, val)

    def Update(self):
        return _PyAnyCAD.LinearDimensionNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.LinearDimensionNode_Clone(self)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.LinearDimensionNode_Cast(*args)

# Register LinearDimensionNode in _PyAnyCAD:
_PyAnyCAD.LinearDimensionNode_swigregister(LinearDimensionNode)

def LinearDimensionNode_Cast(*args):
    return _PyAnyCAD.LinearDimensionNode_Cast(*args)

class GXYZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GXYZ_swiginit(self, _PyAnyCAD.new_GXYZ(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GXYZ_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GXYZ_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GXYZ_SetY(self, theY)

    def SetZ(self, theZ):
        return _PyAnyCAD.GXYZ_SetZ(self, theZ)

    def Coord(self, *args):
        return _PyAnyCAD.GXYZ_Coord(self, *args)

    def X(self):
        return _PyAnyCAD.GXYZ_X(self)

    def Y(self):
        return _PyAnyCAD.GXYZ_Y(self)

    def Z(self):
        return _PyAnyCAD.GXYZ_Z(self)

    def Modulus(self):
        return _PyAnyCAD.GXYZ_Modulus(self)

    def SquareModulus(self):
        return _PyAnyCAD.GXYZ_SquareModulus(self)

    def IsEqual(self, theOther, theTolerance):
        return _PyAnyCAD.GXYZ_IsEqual(self, theOther, theTolerance)

    def Add(self, theOther):
        return _PyAnyCAD.GXYZ_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GXYZ___iadd__(self, theOther)

    def Added(self, theOther):
        return _PyAnyCAD.GXYZ_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GXYZ___add__(self, theOther)

    def Cross(self, theOther):
        return _PyAnyCAD.GXYZ_Cross(self, theOther)

    def __ixor__(self, theOther):
        return _PyAnyCAD.GXYZ___ixor__(self, theOther)

    def Crossed(self, theOther):
        return _PyAnyCAD.GXYZ_Crossed(self, theOther)

    def __xor__(self, theOther):
        return _PyAnyCAD.GXYZ___xor__(self, theOther)

    def CrossMagnitude(self, theRight):
        return _PyAnyCAD.GXYZ_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        return _PyAnyCAD.GXYZ_CrossSquareMagnitude(self, theRight)

    def CrossCross(self, theCoord1, theCoord2):
        return _PyAnyCAD.GXYZ_CrossCross(self, theCoord1, theCoord2)

    def CrossCrossed(self, theCoord1, theCoord2):
        return _PyAnyCAD.GXYZ_CrossCrossed(self, theCoord1, theCoord2)

    def Divide(self, theScalar):
        return _PyAnyCAD.GXYZ_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GXYZ___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        return _PyAnyCAD.GXYZ_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GXYZ___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, theOther):
        return _PyAnyCAD.GXYZ_Dot(self, theOther)

    def DotCross(self, theCoord1, theCoord2):
        return _PyAnyCAD.GXYZ_DotCross(self, theCoord1, theCoord2)

    def Multiply(self, *args):
        return _PyAnyCAD.GXYZ_Multiply(self, *args)

    def __imul__(self, *args):
        return _PyAnyCAD.GXYZ___imul__(self, *args)

    def Multiplied(self, *args):
        return _PyAnyCAD.GXYZ_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GXYZ___mul__(self, *args)

    def Normalize(self):
        return _PyAnyCAD.GXYZ_Normalize(self)

    def Normalized(self):
        return _PyAnyCAD.GXYZ_Normalized(self)

    def Reverse(self):
        return _PyAnyCAD.GXYZ_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GXYZ_Reversed(self)

    def Subtract(self, theOther):
        return _PyAnyCAD.GXYZ_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GXYZ___isub__(self, theOther)

    def Subtracted(self, theOther):
        return _PyAnyCAD.GXYZ_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GXYZ___sub__(self, theOther)

    def SetLinearForm(self, *args):
        return _PyAnyCAD.GXYZ_SetLinearForm(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GXYZ

# Register GXYZ in _PyAnyCAD:
_PyAnyCAD.GXYZ_swigregister(GXYZ)

class GPnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GPnt_swiginit(self, _PyAnyCAD.new_GPnt(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GPnt_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GPnt_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GPnt_SetY(self, theY)

    def SetZ(self, theZ):
        return _PyAnyCAD.GPnt_SetZ(self, theZ)

    def SetXYZ(self, theCoord):
        return _PyAnyCAD.GPnt_SetXYZ(self, theCoord)

    def X(self):
        return _PyAnyCAD.GPnt_X(self)

    def Y(self):
        return _PyAnyCAD.GPnt_Y(self)

    def Z(self):
        return _PyAnyCAD.GPnt_Z(self)

    def XYZ(self):
        return _PyAnyCAD.GPnt_XYZ(self)

    def Coord(self, *args):
        return _PyAnyCAD.GPnt_Coord(self, *args)

    def ChangeCoord(self):
        return _PyAnyCAD.GPnt_ChangeCoord(self)

    def BaryCenter(self, theAlpha, theP, theBeta):
        return _PyAnyCAD.GPnt_BaryCenter(self, theAlpha, theP, theBeta)

    def IsEqual(self, theOther, theLinearTolerance):
        return _PyAnyCAD.GPnt_IsEqual(self, theOther, theLinearTolerance)

    def Distance(self, theOther):
        return _PyAnyCAD.GPnt_Distance(self, theOther)

    def SquareDistance(self, theOther):
        return _PyAnyCAD.GPnt_SquareDistance(self, theOther)

    def Mirror(self, *args):
        return _PyAnyCAD.GPnt_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GPnt_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GPnt_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GPnt_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GPnt_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GPnt_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GPnt_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GPnt_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GPnt_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GPnt_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GPnt

# Register GPnt in _PyAnyCAD:
_PyAnyCAD.GPnt_swigregister(GPnt)

class GDir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GDir_swiginit(self, _PyAnyCAD.new_GDir(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GDir_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GDir_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GDir_SetY(self, theY)

    def SetZ(self, theZ):
        return _PyAnyCAD.GDir_SetZ(self, theZ)

    def SetXYZ(self, theCoord):
        return _PyAnyCAD.GDir_SetXYZ(self, theCoord)

    def Coord(self, *args):
        return _PyAnyCAD.GDir_Coord(self, *args)

    def X(self):
        return _PyAnyCAD.GDir_X(self)

    def Y(self):
        return _PyAnyCAD.GDir_Y(self)

    def Z(self):
        return _PyAnyCAD.GDir_Z(self)

    def XYZ(self):
        return _PyAnyCAD.GDir_XYZ(self)

    def IsEqual(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir_IsEqual(self, theOther, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        return _PyAnyCAD.GDir_Angle(self, theOther)

    def AngleWithRef(self, theOther, theVRef):
        return _PyAnyCAD.GDir_AngleWithRef(self, theOther, theVRef)

    def Cross(self, theRight):
        return _PyAnyCAD.GDir_Cross(self, theRight)

    def __ixor__(self, theRight):
        return _PyAnyCAD.GDir___ixor__(self, theRight)

    def Crossed(self, theRight):
        return _PyAnyCAD.GDir_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GDir___xor__(self, theRight)

    def CrossCross(self, theV1, theV2):
        return _PyAnyCAD.GDir_CrossCross(self, theV1, theV2)

    def CrossCrossed(self, theV1, theV2):
        return _PyAnyCAD.GDir_CrossCrossed(self, theV1, theV2)

    def Dot(self, theOther):
        return _PyAnyCAD.GDir_Dot(self, theOther)

    def __mul__(self, theOther):
        return _PyAnyCAD.GDir___mul__(self, theOther)

    def DotCross(self, theV1, theV2):
        return _PyAnyCAD.GDir_DotCross(self, theV1, theV2)

    def Reverse(self):
        return _PyAnyCAD.GDir_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GDir_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GDir___neg__(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GDir_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GDir_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GDir_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GDir_Rotated(self, theA1, theAng)

    def Transform(self, theT):
        return _PyAnyCAD.GDir_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GDir_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GDir

# Register GDir in _PyAnyCAD:
_PyAnyCAD.GDir_swigregister(GDir)

class GVec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GVec_swiginit(self, _PyAnyCAD.new_GVec(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GVec_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GVec_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GVec_SetY(self, theY)

    def SetZ(self, theZ):
        return _PyAnyCAD.GVec_SetZ(self, theZ)

    def SetXYZ(self, theCoord):
        return _PyAnyCAD.GVec_SetXYZ(self, theCoord)

    def Coord(self, *args):
        return _PyAnyCAD.GVec_Coord(self, *args)

    def X(self):
        return _PyAnyCAD.GVec_X(self)

    def Y(self):
        return _PyAnyCAD.GVec_Y(self)

    def Z(self):
        return _PyAnyCAD.GVec_Z(self)

    def XYZ(self):
        return _PyAnyCAD.GVec_XYZ(self)

    def IsEqual(self, theOther, theLinearTolerance, theAngularTolerance):
        return _PyAnyCAD.GVec_IsEqual(self, theOther, theLinearTolerance, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GVec_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GVec_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GVec_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        return _PyAnyCAD.GVec_Angle(self, theOther)

    def AngleWithRef(self, theOther, theVRef):
        return _PyAnyCAD.GVec_AngleWithRef(self, theOther, theVRef)

    def Magnitude(self):
        return _PyAnyCAD.GVec_Magnitude(self)

    def SquareMagnitude(self):
        return _PyAnyCAD.GVec_SquareMagnitude(self)

    def Add(self, theOther):
        return _PyAnyCAD.GVec_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GVec___iadd__(self, theOther)

    def Added(self, theOther):
        return _PyAnyCAD.GVec_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GVec___add__(self, theOther)

    def Subtract(self, theRight):
        return _PyAnyCAD.GVec_Subtract(self, theRight)

    def __isub__(self, theRight):
        return _PyAnyCAD.GVec___isub__(self, theRight)

    def Subtracted(self, theRight):
        return _PyAnyCAD.GVec_Subtracted(self, theRight)

    def __sub__(self, theRight):
        return _PyAnyCAD.GVec___sub__(self, theRight)

    def Multiply(self, theScalar):
        return _PyAnyCAD.GVec_Multiply(self, theScalar)

    def __imul__(self, theScalar):
        return _PyAnyCAD.GVec___imul__(self, theScalar)

    def Multiplied(self, theScalar):
        return _PyAnyCAD.GVec_Multiplied(self, theScalar)

    def Divide(self, theScalar):
        return _PyAnyCAD.GVec_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GVec___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        return _PyAnyCAD.GVec_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GVec___truediv__(self, *args)
    __div__ = __truediv__



    def Cross(self, theRight):
        return _PyAnyCAD.GVec_Cross(self, theRight)

    def __ixor__(self, theRight):
        return _PyAnyCAD.GVec___ixor__(self, theRight)

    def Crossed(self, theRight):
        return _PyAnyCAD.GVec_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GVec___xor__(self, theRight)

    def CrossMagnitude(self, theRight):
        return _PyAnyCAD.GVec_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        return _PyAnyCAD.GVec_CrossSquareMagnitude(self, theRight)

    def CrossCross(self, theV1, theV2):
        return _PyAnyCAD.GVec_CrossCross(self, theV1, theV2)

    def CrossCrossed(self, theV1, theV2):
        return _PyAnyCAD.GVec_CrossCrossed(self, theV1, theV2)

    def Dot(self, theOther):
        return _PyAnyCAD.GVec_Dot(self, theOther)

    def __mul__(self, *args):
        return _PyAnyCAD.GVec___mul__(self, *args)

    def DotCross(self, theV1, theV2):
        return _PyAnyCAD.GVec_DotCross(self, theV1, theV2)

    def Normalize(self):
        return _PyAnyCAD.GVec_Normalize(self)

    def Normalized(self):
        return _PyAnyCAD.GVec_Normalized(self)

    def Reverse(self):
        return _PyAnyCAD.GVec_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GVec_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GVec___neg__(self)

    def SetLinearForm(self, *args):
        return _PyAnyCAD.GVec_SetLinearForm(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GVec_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GVec_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GVec_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GVec_Rotated(self, theA1, theAng)

    def Scale(self, theS):
        return _PyAnyCAD.GVec_Scale(self, theS)

    def Scaled(self, theS):
        return _PyAnyCAD.GVec_Scaled(self, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GVec_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GVec_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GVec

# Register GVec in _PyAnyCAD:
_PyAnyCAD.GVec_swigregister(GVec)

class GQuaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GQuaternion_swiginit(self, _PyAnyCAD.new_GQuaternion(*args))

    def IsEqual(self, theOther):
        return _PyAnyCAD.GQuaternion_IsEqual(self, theOther)

    def SetRotation(self, *args):
        return _PyAnyCAD.GQuaternion_SetRotation(self, *args)

    def SetVectorAndAngle(self, theAxis, theAngle):
        return _PyAnyCAD.GQuaternion_SetVectorAndAngle(self, theAxis, theAngle)

    def GetVectorAndAngle(self, theAxis, theAngle):
        return _PyAnyCAD.GQuaternion_GetVectorAndAngle(self, theAxis, theAngle)

    def SetMatrix(self, theMat):
        return _PyAnyCAD.GQuaternion_SetMatrix(self, theMat)

    def GetMatrix(self):
        return _PyAnyCAD.GQuaternion_GetMatrix(self)

    def SetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma):
        return _PyAnyCAD.GQuaternion_SetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma)

    def GetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma):
        return _PyAnyCAD.GQuaternion_GetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma)

    def Set(self, *args):
        return _PyAnyCAD.GQuaternion_Set(self, *args)

    def X(self):
        return _PyAnyCAD.GQuaternion_X(self)

    def Y(self):
        return _PyAnyCAD.GQuaternion_Y(self)

    def Z(self):
        return _PyAnyCAD.GQuaternion_Z(self)

    def W(self):
        return _PyAnyCAD.GQuaternion_W(self)

    def SetIdent(self):
        return _PyAnyCAD.GQuaternion_SetIdent(self)

    def Reverse(self):
        return _PyAnyCAD.GQuaternion_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GQuaternion_Reversed(self)

    def Invert(self):
        return _PyAnyCAD.GQuaternion_Invert(self)

    def Inverted(self):
        return _PyAnyCAD.GQuaternion_Inverted(self)

    def SquareNorm(self):
        return _PyAnyCAD.GQuaternion_SquareNorm(self)

    def Norm(self):
        return _PyAnyCAD.GQuaternion_Norm(self)

    def Scale(self, theScale):
        return _PyAnyCAD.GQuaternion_Scale(self, theScale)

    def Scaled(self, theScale):
        return _PyAnyCAD.GQuaternion_Scaled(self, theScale)

    def StabilizeLength(self):
        return _PyAnyCAD.GQuaternion_StabilizeLength(self)

    def Normalize(self):
        return _PyAnyCAD.GQuaternion_Normalize(self)

    def Normalized(self):
        return _PyAnyCAD.GQuaternion_Normalized(self)

    def Negated(self):
        return _PyAnyCAD.GQuaternion_Negated(self)

    def __neg__(self):
        return _PyAnyCAD.GQuaternion___neg__(self)

    def Added(self, theOther):
        return _PyAnyCAD.GQuaternion_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GQuaternion___add__(self, theOther)

    def Subtracted(self, theOther):
        return _PyAnyCAD.GQuaternion_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GQuaternion___sub__(self, theOther)

    def Multiplied(self, theOther):
        return _PyAnyCAD.GQuaternion_Multiplied(self, theOther)

    def Add(self, theOther):
        return _PyAnyCAD.GQuaternion_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GQuaternion___iadd__(self, theOther)

    def Subtract(self, theOther):
        return _PyAnyCAD.GQuaternion_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GQuaternion___isub__(self, theOther)

    def __imul__(self, *args):
        return _PyAnyCAD.GQuaternion___imul__(self, *args)

    def Dot(self, theOther):
        return _PyAnyCAD.GQuaternion_Dot(self, theOther)

    def GetRotationAngle(self):
        return _PyAnyCAD.GQuaternion_GetRotationAngle(self)

    def Multiply(self, *args):
        return _PyAnyCAD.GQuaternion_Multiply(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GQuaternion___mul__(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GQuaternion

# Register GQuaternion in _PyAnyCAD:
_PyAnyCAD.GQuaternion_swigregister(GQuaternion)

gp_EulerAngles = _PyAnyCAD.gp_EulerAngles
gp_YawPitchRoll = _PyAnyCAD.gp_YawPitchRoll
gp_Extrinsic_XYZ = _PyAnyCAD.gp_Extrinsic_XYZ
gp_Extrinsic_XZY = _PyAnyCAD.gp_Extrinsic_XZY
gp_Extrinsic_YZX = _PyAnyCAD.gp_Extrinsic_YZX
gp_Extrinsic_YXZ = _PyAnyCAD.gp_Extrinsic_YXZ
gp_Extrinsic_ZXY = _PyAnyCAD.gp_Extrinsic_ZXY
gp_Extrinsic_ZYX = _PyAnyCAD.gp_Extrinsic_ZYX
gp_Intrinsic_XYZ = _PyAnyCAD.gp_Intrinsic_XYZ
gp_Intrinsic_XZY = _PyAnyCAD.gp_Intrinsic_XZY
gp_Intrinsic_YZX = _PyAnyCAD.gp_Intrinsic_YZX
gp_Intrinsic_YXZ = _PyAnyCAD.gp_Intrinsic_YXZ
gp_Intrinsic_ZXY = _PyAnyCAD.gp_Intrinsic_ZXY
gp_Intrinsic_ZYX = _PyAnyCAD.gp_Intrinsic_ZYX
gp_Extrinsic_XYX = _PyAnyCAD.gp_Extrinsic_XYX
gp_Extrinsic_XZX = _PyAnyCAD.gp_Extrinsic_XZX
gp_Extrinsic_YZY = _PyAnyCAD.gp_Extrinsic_YZY
gp_Extrinsic_YXY = _PyAnyCAD.gp_Extrinsic_YXY
gp_Extrinsic_ZYZ = _PyAnyCAD.gp_Extrinsic_ZYZ
gp_Extrinsic_ZXZ = _PyAnyCAD.gp_Extrinsic_ZXZ
gp_Intrinsic_XYX = _PyAnyCAD.gp_Intrinsic_XYX
gp_Intrinsic_XZX = _PyAnyCAD.gp_Intrinsic_XZX
gp_Intrinsic_YZY = _PyAnyCAD.gp_Intrinsic_YZY
gp_Intrinsic_YXY = _PyAnyCAD.gp_Intrinsic_YXY
gp_Intrinsic_ZXZ = _PyAnyCAD.gp_Intrinsic_ZXZ
gp_Intrinsic_ZYZ = _PyAnyCAD.gp_Intrinsic_ZYZ
class GPln(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GPln_swiginit(self, _PyAnyCAD.new_GPln(*args))

    def Coefficients(self, theA, theB, theC, theD):
        return _PyAnyCAD.GPln_Coefficients(self, theA, theB, theC, theD)

    def SetAxis(self, theA1):
        return _PyAnyCAD.GPln_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        return _PyAnyCAD.GPln_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        return _PyAnyCAD.GPln_SetPosition(self, theA3)

    def UReverse(self):
        return _PyAnyCAD.GPln_UReverse(self)

    def VReverse(self):
        return _PyAnyCAD.GPln_VReverse(self)

    def Direct(self):
        return _PyAnyCAD.GPln_Direct(self)

    def Axis(self):
        return _PyAnyCAD.GPln_Axis(self)

    def Location(self):
        return _PyAnyCAD.GPln_Location(self)

    def Position(self):
        return _PyAnyCAD.GPln_Position(self)

    def Distance(self, *args):
        return _PyAnyCAD.GPln_Distance(self, *args)

    def SquareDistance(self, *args):
        return _PyAnyCAD.GPln_SquareDistance(self, *args)

    def XAxis(self):
        return _PyAnyCAD.GPln_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GPln_YAxis(self)

    def Contains(self, *args):
        return _PyAnyCAD.GPln_Contains(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GPln_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GPln_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GPln_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GPln_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GPln_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GPln_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GPln_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GPln_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GPln_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GPln_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GPln

# Register GPln in _PyAnyCAD:
_PyAnyCAD.GPln_swigregister(GPln)

class GLin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GLin_swiginit(self, _PyAnyCAD.new_GLin(*args))

    def Reverse(self):
        return _PyAnyCAD.GLin_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GLin_Reversed(self)

    def SetDirection(self, theV):
        return _PyAnyCAD.GLin_SetDirection(self, theV)

    def SetLocation(self, theP):
        return _PyAnyCAD.GLin_SetLocation(self, theP)

    def SetPosition(self, theA1):
        return _PyAnyCAD.GLin_SetPosition(self, theA1)

    def Direction(self):
        return _PyAnyCAD.GLin_Direction(self)

    def Location(self):
        return _PyAnyCAD.GLin_Location(self)

    def Position(self):
        return _PyAnyCAD.GLin_Position(self)

    def Angle(self, theOther):
        return _PyAnyCAD.GLin_Angle(self, theOther)

    def Contains(self, theP, theLinearTolerance):
        return _PyAnyCAD.GLin_Contains(self, theP, theLinearTolerance)

    def Distance(self, *args):
        return _PyAnyCAD.GLin_Distance(self, *args)

    def SquareDistance(self, *args):
        return _PyAnyCAD.GLin_SquareDistance(self, *args)

    def Normal(self, theP):
        return _PyAnyCAD.GLin_Normal(self, theP)

    def Mirror(self, *args):
        return _PyAnyCAD.GLin_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GLin_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GLin_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GLin_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GLin_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GLin_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GLin_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GLin_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GLin_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GLin_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GLin

# Register GLin in _PyAnyCAD:
_PyAnyCAD.GLin_swigregister(GLin)

class GDir2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GDir2d_swiginit(self, _PyAnyCAD.new_GDir2d(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GDir2d_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GDir2d_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GDir2d_SetY(self, theY)

    def SetXY(self, theCoord):
        return _PyAnyCAD.GDir2d_SetXY(self, theCoord)

    def Coord(self, *args):
        return _PyAnyCAD.GDir2d_Coord(self, *args)

    def X(self):
        return _PyAnyCAD.GDir2d_X(self)

    def Y(self):
        return _PyAnyCAD.GDir2d_Y(self)

    def XY(self):
        return _PyAnyCAD.GDir2d_XY(self)

    def IsEqual(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir2d_IsEqual(self, theOther, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir2d_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir2d_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GDir2d_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        return _PyAnyCAD.GDir2d_Angle(self, theOther)

    def Crossed(self, theRight):
        return _PyAnyCAD.GDir2d_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GDir2d___xor__(self, theRight)

    def Dot(self, theOther):
        return _PyAnyCAD.GDir2d_Dot(self, theOther)

    def __mul__(self, theOther):
        return _PyAnyCAD.GDir2d___mul__(self, theOther)

    def Reverse(self):
        return _PyAnyCAD.GDir2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GDir2d_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GDir2d___neg__(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GDir2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GDir2d_Mirrored(self, *args)

    def Rotate(self, Ang):
        return _PyAnyCAD.GDir2d_Rotate(self, Ang)

    def Rotated(self, theAng):
        return _PyAnyCAD.GDir2d_Rotated(self, theAng)

    def Transform(self, theT):
        return _PyAnyCAD.GDir2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GDir2d_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GDir2d

# Register GDir2d in _PyAnyCAD:
_PyAnyCAD.GDir2d_swigregister(GDir2d)

class GPnt2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GPnt2d_swiginit(self, _PyAnyCAD.new_GPnt2d(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GPnt2d_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GPnt2d_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GPnt2d_SetY(self, theY)

    def SetXY(self, theCoord):
        return _PyAnyCAD.GPnt2d_SetXY(self, theCoord)

    def X(self):
        return _PyAnyCAD.GPnt2d_X(self)

    def Y(self):
        return _PyAnyCAD.GPnt2d_Y(self)

    def XY(self):
        return _PyAnyCAD.GPnt2d_XY(self)

    def Coord(self, *args):
        return _PyAnyCAD.GPnt2d_Coord(self, *args)

    def ChangeCoord(self):
        return _PyAnyCAD.GPnt2d_ChangeCoord(self)

    def IsEqual(self, theOther, theLinearTolerance):
        return _PyAnyCAD.GPnt2d_IsEqual(self, theOther, theLinearTolerance)

    def Distance(self, theOther):
        return _PyAnyCAD.GPnt2d_Distance(self, theOther)

    def SquareDistance(self, theOther):
        return _PyAnyCAD.GPnt2d_SquareDistance(self, theOther)

    def Mirror(self, *args):
        return _PyAnyCAD.GPnt2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GPnt2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GPnt2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GPnt2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GPnt2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GPnt2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GPnt2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GPnt2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GPnt2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GPnt2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GPnt2d

# Register GPnt2d in _PyAnyCAD:
_PyAnyCAD.GPnt2d_swigregister(GPnt2d)

class GVec2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GVec2d_swiginit(self, _PyAnyCAD.new_GVec2d(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GVec2d_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GVec2d_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GVec2d_SetY(self, theY)

    def SetXY(self, theCoord):
        return _PyAnyCAD.GVec2d_SetXY(self, theCoord)

    def Coord(self, *args):
        return _PyAnyCAD.GVec2d_Coord(self, *args)

    def X(self):
        return _PyAnyCAD.GVec2d_X(self)

    def Y(self):
        return _PyAnyCAD.GVec2d_Y(self)

    def XY(self):
        return _PyAnyCAD.GVec2d_XY(self)

    def IsEqual(self, theOther, theLinearTolerance, theAngularTolerance):
        return _PyAnyCAD.GVec2d_IsEqual(self, theOther, theLinearTolerance, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GVec2d_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GVec2d_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GVec2d_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        return _PyAnyCAD.GVec2d_Angle(self, theOther)

    def Magnitude(self):
        return _PyAnyCAD.GVec2d_Magnitude(self)

    def SquareMagnitude(self):
        return _PyAnyCAD.GVec2d_SquareMagnitude(self)

    def Add(self, theOther):
        return _PyAnyCAD.GVec2d_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GVec2d___iadd__(self, theOther)

    def Added(self, theOther):
        return _PyAnyCAD.GVec2d_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GVec2d___add__(self, theOther)

    def Crossed(self, theRight):
        return _PyAnyCAD.GVec2d_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GVec2d___xor__(self, theRight)

    def CrossMagnitude(self, theRight):
        return _PyAnyCAD.GVec2d_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        return _PyAnyCAD.GVec2d_CrossSquareMagnitude(self, theRight)

    def Divide(self, theScalar):
        return _PyAnyCAD.GVec2d_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GVec2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        return _PyAnyCAD.GVec2d_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GVec2d___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, theOther):
        return _PyAnyCAD.GVec2d_Dot(self, theOther)

    def GetNormal(self):
        return _PyAnyCAD.GVec2d_GetNormal(self)

    def Multiply(self, theScalar):
        return _PyAnyCAD.GVec2d_Multiply(self, theScalar)

    def __imul__(self, theScalar):
        return _PyAnyCAD.GVec2d___imul__(self, theScalar)

    def Multiplied(self, theScalar):
        return _PyAnyCAD.GVec2d_Multiplied(self, theScalar)

    def __mul__(self, *args):
        return _PyAnyCAD.GVec2d___mul__(self, *args)

    def Normalize(self):
        return _PyAnyCAD.GVec2d_Normalize(self)

    def Normalized(self):
        return _PyAnyCAD.GVec2d_Normalized(self)

    def Reverse(self):
        return _PyAnyCAD.GVec2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GVec2d_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GVec2d___neg__(self)

    def Subtract(self, theRight):
        return _PyAnyCAD.GVec2d_Subtract(self, theRight)

    def __isub__(self, theRight):
        return _PyAnyCAD.GVec2d___isub__(self, theRight)

    def Subtracted(self, theRight):
        return _PyAnyCAD.GVec2d_Subtracted(self, theRight)

    def __sub__(self, theRight):
        return _PyAnyCAD.GVec2d___sub__(self, theRight)

    def SetLinearForm(self, *args):
        return _PyAnyCAD.GVec2d_SetLinearForm(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GVec2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GVec2d_Mirrored(self, *args)

    def Rotate(self, theAng):
        return _PyAnyCAD.GVec2d_Rotate(self, theAng)

    def Rotated(self, theAng):
        return _PyAnyCAD.GVec2d_Rotated(self, theAng)

    def Scale(self, theS):
        return _PyAnyCAD.GVec2d_Scale(self, theS)

    def Scaled(self, theS):
        return _PyAnyCAD.GVec2d_Scaled(self, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GVec2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GVec2d_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GVec2d

# Register GVec2d in _PyAnyCAD:
_PyAnyCAD.GVec2d_swigregister(GVec2d)

class GAx22d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GAx22d_swiginit(self, _PyAnyCAD.new_GAx22d(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GAx22d_SetAxis(self, theA1)

    def SetXAxis(self, theA1):
        return _PyAnyCAD.GAx22d_SetXAxis(self, theA1)

    def SetYAxis(self, theA1):
        return _PyAnyCAD.GAx22d_SetYAxis(self, theA1)

    def SetLocation(self, theP):
        return _PyAnyCAD.GAx22d_SetLocation(self, theP)

    def SetXDirection(self, theVx):
        return _PyAnyCAD.GAx22d_SetXDirection(self, theVx)

    def SetYDirection(self, theVy):
        return _PyAnyCAD.GAx22d_SetYDirection(self, theVy)

    def XAxis(self):
        return _PyAnyCAD.GAx22d_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GAx22d_YAxis(self)

    def Location(self):
        return _PyAnyCAD.GAx22d_Location(self)

    def XDirection(self):
        return _PyAnyCAD.GAx22d_XDirection(self)

    def YDirection(self):
        return _PyAnyCAD.GAx22d_YDirection(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx22d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GAx22d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GAx22d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GAx22d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GAx22d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GAx22d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx22d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GAx22d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx22d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GAx22d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx22d

# Register GAx22d in _PyAnyCAD:
_PyAnyCAD.GAx22d_swigregister(GAx22d)

class GXY(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GXY_swiginit(self, _PyAnyCAD.new_GXY(*args))

    def SetCoord(self, *args):
        return _PyAnyCAD.GXY_SetCoord(self, *args)

    def SetX(self, theX):
        return _PyAnyCAD.GXY_SetX(self, theX)

    def SetY(self, theY):
        return _PyAnyCAD.GXY_SetY(self, theY)

    def Coord(self, *args):
        return _PyAnyCAD.GXY_Coord(self, *args)

    def X(self):
        return _PyAnyCAD.GXY_X(self)

    def Y(self):
        return _PyAnyCAD.GXY_Y(self)

    def Modulus(self):
        return _PyAnyCAD.GXY_Modulus(self)

    def SquareModulus(self):
        return _PyAnyCAD.GXY_SquareModulus(self)

    def IsEqual(self, theOther, theTolerance):
        return _PyAnyCAD.GXY_IsEqual(self, theOther, theTolerance)

    def Add(self, theOther):
        return _PyAnyCAD.GXY_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GXY___iadd__(self, theOther)

    def Added(self, theOther):
        return _PyAnyCAD.GXY_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GXY___add__(self, theOther)

    def Crossed(self, theOther):
        return _PyAnyCAD.GXY_Crossed(self, theOther)

    def __xor__(self, theOther):
        return _PyAnyCAD.GXY___xor__(self, theOther)

    def CrossMagnitude(self, theRight):
        return _PyAnyCAD.GXY_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        return _PyAnyCAD.GXY_CrossSquareMagnitude(self, theRight)

    def Divide(self, theScalar):
        return _PyAnyCAD.GXY_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GXY___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        return _PyAnyCAD.GXY_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GXY___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, theOther):
        return _PyAnyCAD.GXY_Dot(self, theOther)

    def Multiply(self, *args):
        return _PyAnyCAD.GXY_Multiply(self, *args)

    def __imul__(self, *args):
        return _PyAnyCAD.GXY___imul__(self, *args)

    def Multiplied(self, *args):
        return _PyAnyCAD.GXY_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GXY___mul__(self, *args)

    def Normalize(self):
        return _PyAnyCAD.GXY_Normalize(self)

    def Normalized(self):
        return _PyAnyCAD.GXY_Normalized(self)

    def Reverse(self):
        return _PyAnyCAD.GXY_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GXY_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GXY___neg__(self)

    def SetLinearForm(self, *args):
        return _PyAnyCAD.GXY_SetLinearForm(self, *args)

    def Subtract(self, theOther):
        return _PyAnyCAD.GXY_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GXY___isub__(self, theOther)

    def Subtracted(self, theOther):
        return _PyAnyCAD.GXY_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GXY___sub__(self, theOther)
    __swig_destroy__ = _PyAnyCAD.delete_GXY

# Register GXY in _PyAnyCAD:
_PyAnyCAD.GXY_swigregister(GXY)

class GMat2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GMat2d_swiginit(self, _PyAnyCAD.new_GMat2d(*args))

    def SetCol(self, theCol, theValue):
        return _PyAnyCAD.GMat2d_SetCol(self, theCol, theValue)

    def SetCols(self, theCol1, theCol2):
        return _PyAnyCAD.GMat2d_SetCols(self, theCol1, theCol2)

    def SetDiagonal(self, theX1, theX2):
        return _PyAnyCAD.GMat2d_SetDiagonal(self, theX1, theX2)

    def SetIdentity(self):
        return _PyAnyCAD.GMat2d_SetIdentity(self)

    def SetRotation(self, theAng):
        return _PyAnyCAD.GMat2d_SetRotation(self, theAng)

    def SetRow(self, theRow, theValue):
        return _PyAnyCAD.GMat2d_SetRow(self, theRow, theValue)

    def SetRows(self, theRow1, theRow2):
        return _PyAnyCAD.GMat2d_SetRows(self, theRow1, theRow2)

    def SetScale(self, theS):
        return _PyAnyCAD.GMat2d_SetScale(self, theS)

    def SetValue(self, theRow, theCol, theValue):
        return _PyAnyCAD.GMat2d_SetValue(self, theRow, theCol, theValue)

    def Column(self, theCol):
        return _PyAnyCAD.GMat2d_Column(self, theCol)

    def Determinant(self):
        return _PyAnyCAD.GMat2d_Determinant(self)

    def Diagonal(self):
        return _PyAnyCAD.GMat2d_Diagonal(self)

    def Row(self, theRow):
        return _PyAnyCAD.GMat2d_Row(self, theRow)

    def Value(self, theRow, theCol):
        return _PyAnyCAD.GMat2d_Value(self, theRow, theCol)

    def __call__(self, *args):
        return _PyAnyCAD.GMat2d___call__(self, *args)

    def IsSingular(self):
        return _PyAnyCAD.GMat2d_IsSingular(self)

    def Add(self, Other):
        return _PyAnyCAD.GMat2d_Add(self, Other)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GMat2d___iadd__(self, theOther)

    def Added(self, theOther):
        return _PyAnyCAD.GMat2d_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GMat2d___add__(self, theOther)

    def Divide(self, theScalar):
        return _PyAnyCAD.GMat2d_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GMat2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        return _PyAnyCAD.GMat2d_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GMat2d___truediv__(self, *args)
    __div__ = __truediv__



    def Invert(self):
        return _PyAnyCAD.GMat2d_Invert(self)

    def Inverted(self):
        return _PyAnyCAD.GMat2d_Inverted(self)

    def PreMultiply(self, theOther):
        return _PyAnyCAD.GMat2d_PreMultiply(self, theOther)

    def Multiplied(self, *args):
        return _PyAnyCAD.GMat2d_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GMat2d___mul__(self, *args)

    def Multiply(self, *args):
        return _PyAnyCAD.GMat2d_Multiply(self, *args)

    def __imul__(self, theScalar):
        return _PyAnyCAD.GMat2d___imul__(self, theScalar)

    def Power(self, theN):
        return _PyAnyCAD.GMat2d_Power(self, theN)

    def Powered(self, theN):
        return _PyAnyCAD.GMat2d_Powered(self, theN)

    def Subtract(self, theOther):
        return _PyAnyCAD.GMat2d_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GMat2d___isub__(self, theOther)

    def Subtracted(self, theOther):
        return _PyAnyCAD.GMat2d_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GMat2d___sub__(self, theOther)

    def Transpose(self):
        return _PyAnyCAD.GMat2d_Transpose(self)

    def Transposed(self):
        return _PyAnyCAD.GMat2d_Transposed(self)
    __swig_destroy__ = _PyAnyCAD.delete_GMat2d

# Register GMat2d in _PyAnyCAD:
_PyAnyCAD.GMat2d_swigregister(GMat2d)

class GAx2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GAx2d_swiginit(self, _PyAnyCAD.new_GAx2d(*args))

    def SetLocation(self, theP):
        return _PyAnyCAD.GAx2d_SetLocation(self, theP)

    def SetDirection(self, theV):
        return _PyAnyCAD.GAx2d_SetDirection(self, theV)

    def Location(self):
        return _PyAnyCAD.GAx2d_Location(self)

    def Direction(self):
        return _PyAnyCAD.GAx2d_Direction(self)

    def IsCoaxial(self, Other, AngularTolerance, LinearTolerance):
        return _PyAnyCAD.GAx2d_IsCoaxial(self, Other, AngularTolerance, LinearTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GAx2d_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GAx2d_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GAx2d_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        return _PyAnyCAD.GAx2d_Angle(self, theOther)

    def Reverse(self):
        return _PyAnyCAD.GAx2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GAx2d_Reversed(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GAx2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GAx2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GAx2d_Rotated(self, theP, theAng)

    def Scale(self, P, S):
        return _PyAnyCAD.GAx2d_Scale(self, P, S)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GAx2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GAx2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GAx2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx2d

# Register GAx2d in _PyAnyCAD:
_PyAnyCAD.GAx2d_swigregister(GAx2d)

class GAx1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GAx1_swiginit(self, _PyAnyCAD.new_GAx1(*args))

    def SetDirection(self, theV):
        return _PyAnyCAD.GAx1_SetDirection(self, theV)

    def SetLocation(self, theP):
        return _PyAnyCAD.GAx1_SetLocation(self, theP)

    def Direction(self):
        return _PyAnyCAD.GAx1_Direction(self)

    def Location(self):
        return _PyAnyCAD.GAx1_Location(self)

    def IsCoaxial(self, Other, AngularTolerance, LinearTolerance):
        return _PyAnyCAD.GAx1_IsCoaxial(self, Other, AngularTolerance, LinearTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GAx1_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GAx1_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        return _PyAnyCAD.GAx1_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        return _PyAnyCAD.GAx1_Angle(self, theOther)

    def Reverse(self):
        return _PyAnyCAD.GAx1_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GAx1_Reversed(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx1_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GAx1_Mirrored(self, *args)

    def Rotate(self, theA1, theAngRad):
        return _PyAnyCAD.GAx1_Rotate(self, theA1, theAngRad)

    def Rotated(self, theA1, theAngRad):
        return _PyAnyCAD.GAx1_Rotated(self, theA1, theAngRad)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GAx1_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GAx1_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx1_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GAx1_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx1_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GAx1_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx1

# Register GAx1 in _PyAnyCAD:
_PyAnyCAD.GAx1_swigregister(GAx1)

class GAx2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GAx2_swiginit(self, _PyAnyCAD.new_GAx2(*args))

    def SetAxis(self, A1):
        return _PyAnyCAD.GAx2_SetAxis(self, A1)

    def SetDirection(self, V):
        return _PyAnyCAD.GAx2_SetDirection(self, V)

    def SetLocation(self, theP):
        return _PyAnyCAD.GAx2_SetLocation(self, theP)

    def SetXDirection(self, theVx):
        return _PyAnyCAD.GAx2_SetXDirection(self, theVx)

    def SetYDirection(self, theVy):
        return _PyAnyCAD.GAx2_SetYDirection(self, theVy)

    def Angle(self, theOther):
        return _PyAnyCAD.GAx2_Angle(self, theOther)

    def Axis(self):
        return _PyAnyCAD.GAx2_Axis(self)

    def Direction(self):
        return _PyAnyCAD.GAx2_Direction(self)

    def Location(self):
        return _PyAnyCAD.GAx2_Location(self)

    def XDirection(self):
        return _PyAnyCAD.GAx2_XDirection(self)

    def YDirection(self):
        return _PyAnyCAD.GAx2_YDirection(self)

    def IsCoplanar(self, *args):
        return _PyAnyCAD.GAx2_IsCoplanar(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx2_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GAx2_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GAx2_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GAx2_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GAx2_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GAx2_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx2_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GAx2_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx2_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GAx2_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx2

# Register GAx2 in _PyAnyCAD:
_PyAnyCAD.GAx2_swigregister(GAx2)

class GAx3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GAx3_swiginit(self, _PyAnyCAD.new_GAx3(*args))

    def XReverse(self):
        return _PyAnyCAD.GAx3_XReverse(self)

    def YReverse(self):
        return _PyAnyCAD.GAx3_YReverse(self)

    def ZReverse(self):
        return _PyAnyCAD.GAx3_ZReverse(self)

    def SetAxis(self, theA1):
        return _PyAnyCAD.GAx3_SetAxis(self, theA1)

    def SetDirection(self, theV):
        return _PyAnyCAD.GAx3_SetDirection(self, theV)

    def SetLocation(self, theP):
        return _PyAnyCAD.GAx3_SetLocation(self, theP)

    def SetXDirection(self, theVx):
        return _PyAnyCAD.GAx3_SetXDirection(self, theVx)

    def SetYDirection(self, theVy):
        return _PyAnyCAD.GAx3_SetYDirection(self, theVy)

    def Angle(self, theOther):
        return _PyAnyCAD.GAx3_Angle(self, theOther)

    def Axis(self):
        return _PyAnyCAD.GAx3_Axis(self)

    def Ax2(self):
        return _PyAnyCAD.GAx3_Ax2(self)

    def Direction(self):
        return _PyAnyCAD.GAx3_Direction(self)

    def Location(self):
        return _PyAnyCAD.GAx3_Location(self)

    def XDirection(self):
        return _PyAnyCAD.GAx3_XDirection(self)

    def YDirection(self):
        return _PyAnyCAD.GAx3_YDirection(self)

    def Direct(self):
        return _PyAnyCAD.GAx3_Direct(self)

    def IsCoplanar(self, *args):
        return _PyAnyCAD.GAx3_IsCoplanar(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx3_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GAx3_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GAx3_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GAx3_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GAx3_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GAx3_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx3_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GAx3_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx3_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GAx3_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx3

# Register GAx3 in _PyAnyCAD:
_PyAnyCAD.GAx3_swigregister(GAx3)

class GMat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GMat_swiginit(self, _PyAnyCAD.new_GMat(*args))

    def SetCol(self, theCol, theValue):
        return _PyAnyCAD.GMat_SetCol(self, theCol, theValue)

    def SetCols(self, theCol1, theCol2, theCol3):
        return _PyAnyCAD.GMat_SetCols(self, theCol1, theCol2, theCol3)

    def SetCross(self, theRef):
        return _PyAnyCAD.GMat_SetCross(self, theRef)

    def SetDiagonal(self, theX1, theX2, theX3):
        return _PyAnyCAD.GMat_SetDiagonal(self, theX1, theX2, theX3)

    def SetDot(self, theRef):
        return _PyAnyCAD.GMat_SetDot(self, theRef)

    def SetIdentity(self):
        return _PyAnyCAD.GMat_SetIdentity(self)

    def SetRotation(self, theAxis, theAng):
        return _PyAnyCAD.GMat_SetRotation(self, theAxis, theAng)

    def SetRow(self, theRow, theValue):
        return _PyAnyCAD.GMat_SetRow(self, theRow, theValue)

    def SetRows(self, theRow1, theRow2, theRow3):
        return _PyAnyCAD.GMat_SetRows(self, theRow1, theRow2, theRow3)

    def SetScale(self, theS):
        return _PyAnyCAD.GMat_SetScale(self, theS)

    def SetValue(self, theRow, theCol, theValue):
        return _PyAnyCAD.GMat_SetValue(self, theRow, theCol, theValue)

    def Column(self, theCol):
        return _PyAnyCAD.GMat_Column(self, theCol)

    def Determinant(self):
        return _PyAnyCAD.GMat_Determinant(self)

    def Diagonal(self):
        return _PyAnyCAD.GMat_Diagonal(self)

    def Row(self, theRow):
        return _PyAnyCAD.GMat_Row(self, theRow)

    def Value(self, theRow, theCol):
        return _PyAnyCAD.GMat_Value(self, theRow, theCol)

    def __call__(self, *args):
        return _PyAnyCAD.GMat___call__(self, *args)

    def IsSingular(self):
        return _PyAnyCAD.GMat_IsSingular(self)

    def Add(self, theOther):
        return _PyAnyCAD.GMat_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GMat___iadd__(self, theOther)

    def Added(self, theOther):
        return _PyAnyCAD.GMat_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GMat___add__(self, theOther)

    def Divide(self, theScalar):
        return _PyAnyCAD.GMat_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GMat___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        return _PyAnyCAD.GMat_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GMat___truediv__(self, *args)
    __div__ = __truediv__



    def Invert(self):
        return _PyAnyCAD.GMat_Invert(self)

    def Inverted(self):
        return _PyAnyCAD.GMat_Inverted(self)

    def PreMultiply(self, theOther):
        return _PyAnyCAD.GMat_PreMultiply(self, theOther)

    def Multiplied(self, *args):
        return _PyAnyCAD.GMat_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GMat___mul__(self, *args)

    def Multiply(self, *args):
        return _PyAnyCAD.GMat_Multiply(self, *args)

    def __imul__(self, *args):
        return _PyAnyCAD.GMat___imul__(self, *args)

    def Power(self, N):
        return _PyAnyCAD.GMat_Power(self, N)

    def Powered(self, theN):
        return _PyAnyCAD.GMat_Powered(self, theN)

    def Subtract(self, theOther):
        return _PyAnyCAD.GMat_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GMat___isub__(self, theOther)

    def Subtracted(self, theOther):
        return _PyAnyCAD.GMat_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GMat___sub__(self, theOther)

    def Transpose(self):
        return _PyAnyCAD.GMat_Transpose(self)

    def Transposed(self):
        return _PyAnyCAD.GMat_Transposed(self)
    __swig_destroy__ = _PyAnyCAD.delete_GMat

# Register GMat in _PyAnyCAD:
_PyAnyCAD.GMat_swigregister(GMat)

gp_Identity = _PyAnyCAD.gp_Identity
gp_Rotation = _PyAnyCAD.gp_Rotation
gp_Translation = _PyAnyCAD.gp_Translation
gp_PntMirror = _PyAnyCAD.gp_PntMirror
gp_Ax1Mirror = _PyAnyCAD.gp_Ax1Mirror
gp_Ax2Mirror = _PyAnyCAD.gp_Ax2Mirror
gp_Scale = _PyAnyCAD.gp_Scale
gp_CompoundTrsf = _PyAnyCAD.gp_CompoundTrsf
gp_Other = _PyAnyCAD.gp_Other
class GTrsf2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GTrsf2d_swiginit(self, _PyAnyCAD.new_GTrsf2d(*args))

    def SetMirror(self, *args):
        return _PyAnyCAD.GTrsf2d_SetMirror(self, *args)

    def SetRotation(self, theP, theAng):
        return _PyAnyCAD.GTrsf2d_SetRotation(self, theP, theAng)

    def SetScale(self, theP, theS):
        return _PyAnyCAD.GTrsf2d_SetScale(self, theP, theS)

    def SetTransformation(self, *args):
        return _PyAnyCAD.GTrsf2d_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        return _PyAnyCAD.GTrsf2d_SetTranslation(self, *args)

    def SetTranslationPart(self, theV):
        return _PyAnyCAD.GTrsf2d_SetTranslationPart(self, theV)

    def SetScaleFactor(self, theS):
        return _PyAnyCAD.GTrsf2d_SetScaleFactor(self, theS)

    def IsNegative(self):
        return _PyAnyCAD.GTrsf2d_IsNegative(self)

    def Form(self):
        return _PyAnyCAD.GTrsf2d_Form(self)

    def ScaleFactor(self):
        return _PyAnyCAD.GTrsf2d_ScaleFactor(self)

    def TranslationPart(self):
        return _PyAnyCAD.GTrsf2d_TranslationPart(self)

    def VectorialPart(self):
        return _PyAnyCAD.GTrsf2d_VectorialPart(self)

    def HVectorialPart(self):
        return _PyAnyCAD.GTrsf2d_HVectorialPart(self)

    def RotationPart(self):
        return _PyAnyCAD.GTrsf2d_RotationPart(self)

    def Value(self, theRow, theCol):
        return _PyAnyCAD.GTrsf2d_Value(self, theRow, theCol)

    def Invert(self):
        return _PyAnyCAD.GTrsf2d_Invert(self)

    def Inverted(self):
        return _PyAnyCAD.GTrsf2d_Inverted(self)

    def Multiplied(self, theT):
        return _PyAnyCAD.GTrsf2d_Multiplied(self, theT)

    def __mul__(self, theT):
        return _PyAnyCAD.GTrsf2d___mul__(self, theT)

    def Multiply(self, theT):
        return _PyAnyCAD.GTrsf2d_Multiply(self, theT)

    def __imul__(self, theT):
        return _PyAnyCAD.GTrsf2d___imul__(self, theT)

    def PreMultiply(self, theT):
        return _PyAnyCAD.GTrsf2d_PreMultiply(self, theT)

    def Power(self, theN):
        return _PyAnyCAD.GTrsf2d_Power(self, theN)

    def Powered(self, theN):
        return _PyAnyCAD.GTrsf2d_Powered(self, theN)

    def Transforms(self, *args):
        return _PyAnyCAD.GTrsf2d_Transforms(self, *args)

    def SetValues(self, a11, a12, a13, a21, a22, a23):
        return _PyAnyCAD.GTrsf2d_SetValues(self, a11, a12, a13, a21, a22, a23)
    __swig_destroy__ = _PyAnyCAD.delete_GTrsf2d

# Register GTrsf2d in _PyAnyCAD:
_PyAnyCAD.GTrsf2d_swigregister(GTrsf2d)

class GTrsf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GTrsf_swiginit(self, _PyAnyCAD.new_GTrsf(*args))

    def SetMirror(self, *args):
        return _PyAnyCAD.GTrsf_SetMirror(self, *args)

    def SetRotation(self, *args):
        return _PyAnyCAD.GTrsf_SetRotation(self, *args)

    def SetRotationPart(self, theR):
        return _PyAnyCAD.GTrsf_SetRotationPart(self, theR)

    def SetScale(self, theP, theS):
        return _PyAnyCAD.GTrsf_SetScale(self, theP, theS)

    def SetDisplacement(self, theFromSystem1, theToSystem2):
        return _PyAnyCAD.GTrsf_SetDisplacement(self, theFromSystem1, theToSystem2)

    def SetTransformation(self, *args):
        return _PyAnyCAD.GTrsf_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        return _PyAnyCAD.GTrsf_SetTranslation(self, *args)

    def SetTranslationPart(self, theV):
        return _PyAnyCAD.GTrsf_SetTranslationPart(self, theV)

    def SetScaleFactor(self, theS):
        return _PyAnyCAD.GTrsf_SetScaleFactor(self, theS)

    def SetForm(self, theP):
        return _PyAnyCAD.GTrsf_SetForm(self, theP)

    def SetValues(self, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34):
        return _PyAnyCAD.GTrsf_SetValues(self, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34)

    def IsNegative(self):
        return _PyAnyCAD.GTrsf_IsNegative(self)

    def Form(self):
        return _PyAnyCAD.GTrsf_Form(self)

    def ScaleFactor(self):
        return _PyAnyCAD.GTrsf_ScaleFactor(self)

    def TranslationPart(self):
        return _PyAnyCAD.GTrsf_TranslationPart(self)

    def GetRotation(self, *args):
        return _PyAnyCAD.GTrsf_GetRotation(self, *args)

    def VectorialPart(self):
        return _PyAnyCAD.GTrsf_VectorialPart(self)

    def HVectorialPart(self):
        return _PyAnyCAD.GTrsf_HVectorialPart(self)

    def Value(self, theRow, theCol):
        return _PyAnyCAD.GTrsf_Value(self, theRow, theCol)

    def Invert(self):
        return _PyAnyCAD.GTrsf_Invert(self)

    def Inverted(self):
        return _PyAnyCAD.GTrsf_Inverted(self)

    def Multiplied(self, theT):
        return _PyAnyCAD.GTrsf_Multiplied(self, theT)

    def __mul__(self, theT):
        return _PyAnyCAD.GTrsf___mul__(self, theT)

    def Multiply(self, theT):
        return _PyAnyCAD.GTrsf_Multiply(self, theT)

    def __imul__(self, theT):
        return _PyAnyCAD.GTrsf___imul__(self, theT)

    def PreMultiply(self, theT):
        return _PyAnyCAD.GTrsf_PreMultiply(self, theT)

    def Power(self, theN):
        return _PyAnyCAD.GTrsf_Power(self, theN)

    def Powered(self, theN):
        return _PyAnyCAD.GTrsf_Powered(self, theN)

    def Transforms(self, *args):
        return _PyAnyCAD.GTrsf_Transforms(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GTrsf

# Register GTrsf in _PyAnyCAD:
_PyAnyCAD.GTrsf_swigregister(GTrsf)

class GBBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GBBox_swiginit(self, _PyAnyCAD.new_GBBox(*args))

    def SetWhole(self):
        return _PyAnyCAD.GBBox_SetWhole(self)

    def SetVoid(self):
        return _PyAnyCAD.GBBox_SetVoid(self)

    def Set(self, *args):
        return _PyAnyCAD.GBBox_Set(self, *args)

    def Update(self, *args):
        return _PyAnyCAD.GBBox_Update(self, *args)

    def GetGap(self):
        return _PyAnyCAD.GBBox_GetGap(self)

    def SetGap(self, Tol):
        return _PyAnyCAD.GBBox_SetGap(self, Tol)

    def Enlarge(self, Tol):
        return _PyAnyCAD.GBBox_Enlarge(self, Tol)

    def Get(self, theXmin, theYmin, theZmin, theXmax, theYmax, theZmax):
        return _PyAnyCAD.GBBox_Get(self, theXmin, theYmin, theZmin, theXmax, theYmax, theZmax)

    def CornerMin(self):
        return _PyAnyCAD.GBBox_CornerMin(self)

    def CornerMax(self):
        return _PyAnyCAD.GBBox_CornerMax(self)

    def OpenXmin(self):
        return _PyAnyCAD.GBBox_OpenXmin(self)

    def OpenXmax(self):
        return _PyAnyCAD.GBBox_OpenXmax(self)

    def OpenYmin(self):
        return _PyAnyCAD.GBBox_OpenYmin(self)

    def OpenYmax(self):
        return _PyAnyCAD.GBBox_OpenYmax(self)

    def OpenZmin(self):
        return _PyAnyCAD.GBBox_OpenZmin(self)

    def OpenZmax(self):
        return _PyAnyCAD.GBBox_OpenZmax(self)

    def IsOpen(self):
        return _PyAnyCAD.GBBox_IsOpen(self)

    def IsOpenXmin(self):
        return _PyAnyCAD.GBBox_IsOpenXmin(self)

    def IsOpenXmax(self):
        return _PyAnyCAD.GBBox_IsOpenXmax(self)

    def IsOpenYmin(self):
        return _PyAnyCAD.GBBox_IsOpenYmin(self)

    def IsOpenYmax(self):
        return _PyAnyCAD.GBBox_IsOpenYmax(self)

    def IsOpenZmin(self):
        return _PyAnyCAD.GBBox_IsOpenZmin(self)

    def IsOpenZmax(self):
        return _PyAnyCAD.GBBox_IsOpenZmax(self)

    def IsWhole(self):
        return _PyAnyCAD.GBBox_IsWhole(self)

    def IsVoid(self):
        return _PyAnyCAD.GBBox_IsVoid(self)

    def IsXThin(self, tol):
        return _PyAnyCAD.GBBox_IsXThin(self, tol)

    def IsYThin(self, tol):
        return _PyAnyCAD.GBBox_IsYThin(self, tol)

    def IsZThin(self, tol):
        return _PyAnyCAD.GBBox_IsZThin(self, tol)

    def IsThin(self, tol):
        return _PyAnyCAD.GBBox_IsThin(self, tol)

    def Transformed(self, T):
        return _PyAnyCAD.GBBox_Transformed(self, T)

    def Add(self, *args):
        return _PyAnyCAD.GBBox_Add(self, *args)

    def IsOut(self, *args):
        return _PyAnyCAD.GBBox_IsOut(self, *args)

    def Distance(self, Other):
        return _PyAnyCAD.GBBox_Distance(self, Other)

    def Dump(self):
        return _PyAnyCAD.GBBox_Dump(self)

    def SquareExtent(self):
        return _PyAnyCAD.GBBox_SquareExtent(self)

    def FinitePart(self):
        return _PyAnyCAD.GBBox_FinitePart(self)

    def HasFinitePart(self):
        return _PyAnyCAD.GBBox_HasFinitePart(self)
    __swig_destroy__ = _PyAnyCAD.delete_GBBox

# Register GBBox in _PyAnyCAD:
_PyAnyCAD.GBBox_swigregister(GBBox)

class GCirc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GCirc_swiginit(self, _PyAnyCAD.new_GCirc(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GCirc_SetAxis(self, theA1)

    def SetLocation(self, theP):
        return _PyAnyCAD.GCirc_SetLocation(self, theP)

    def SetPosition(self, theA2):
        return _PyAnyCAD.GCirc_SetPosition(self, theA2)

    def SetRadius(self, theRadius):
        return _PyAnyCAD.GCirc_SetRadius(self, theRadius)

    def Area(self):
        return _PyAnyCAD.GCirc_Area(self)

    def Axis(self):
        return _PyAnyCAD.GCirc_Axis(self)

    def Length(self):
        return _PyAnyCAD.GCirc_Length(self)

    def Location(self):
        return _PyAnyCAD.GCirc_Location(self)

    def Position(self):
        return _PyAnyCAD.GCirc_Position(self)

    def Radius(self):
        return _PyAnyCAD.GCirc_Radius(self)

    def XAxis(self):
        return _PyAnyCAD.GCirc_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GCirc_YAxis(self)

    def Distance(self, theP):
        return _PyAnyCAD.GCirc_Distance(self, theP)

    def SquareDistance(self, theP):
        return _PyAnyCAD.GCirc_SquareDistance(self, theP)

    def Contains(self, theP, theLinearTolerance):
        return _PyAnyCAD.GCirc_Contains(self, theP, theLinearTolerance)

    def Mirror(self, *args):
        return _PyAnyCAD.GCirc_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GCirc_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GCirc_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GCirc_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCirc_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GCirc_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCirc_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GCirc_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCirc_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GCirc_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCirc

# Register GCirc in _PyAnyCAD:
_PyAnyCAD.GCirc_swigregister(GCirc)

class GElips(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GElips_swiginit(self, _PyAnyCAD.new_GElips(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GElips_SetAxis(self, theA1)

    def SetLocation(self, theP):
        return _PyAnyCAD.GElips_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        return _PyAnyCAD.GElips_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        return _PyAnyCAD.GElips_SetMinorRadius(self, theMinorRadius)

    def SetPosition(self, theA2):
        return _PyAnyCAD.GElips_SetPosition(self, theA2)

    def Area(self):
        return _PyAnyCAD.GElips_Area(self)

    def Axis(self):
        return _PyAnyCAD.GElips_Axis(self)

    def Directrix1(self):
        return _PyAnyCAD.GElips_Directrix1(self)

    def Directrix2(self):
        return _PyAnyCAD.GElips_Directrix2(self)

    def Eccentricity(self):
        return _PyAnyCAD.GElips_Eccentricity(self)

    def Focal(self):
        return _PyAnyCAD.GElips_Focal(self)

    def Focus1(self):
        return _PyAnyCAD.GElips_Focus1(self)

    def Focus2(self):
        return _PyAnyCAD.GElips_Focus2(self)

    def Location(self):
        return _PyAnyCAD.GElips_Location(self)

    def MajorRadius(self):
        return _PyAnyCAD.GElips_MajorRadius(self)

    def MinorRadius(self):
        return _PyAnyCAD.GElips_MinorRadius(self)

    def Parameter(self):
        return _PyAnyCAD.GElips_Parameter(self)

    def Position(self):
        return _PyAnyCAD.GElips_Position(self)

    def XAxis(self):
        return _PyAnyCAD.GElips_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GElips_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GElips_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GElips_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GElips_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GElips_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GElips_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GElips_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GElips_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GElips_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GElips_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GElips_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GElips

# Register GElips in _PyAnyCAD:
_PyAnyCAD.GElips_swigregister(GElips)

class GHypr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GHypr_swiginit(self, _PyAnyCAD.new_GHypr(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GHypr_SetAxis(self, theA1)

    def SetLocation(self, theP):
        return _PyAnyCAD.GHypr_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        return _PyAnyCAD.GHypr_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        return _PyAnyCAD.GHypr_SetMinorRadius(self, theMinorRadius)

    def SetPosition(self, theA2):
        return _PyAnyCAD.GHypr_SetPosition(self, theA2)

    def Asymptote1(self):
        return _PyAnyCAD.GHypr_Asymptote1(self)

    def Asymptote2(self):
        return _PyAnyCAD.GHypr_Asymptote2(self)

    def Axis(self):
        return _PyAnyCAD.GHypr_Axis(self)

    def ConjugateBranch1(self):
        return _PyAnyCAD.GHypr_ConjugateBranch1(self)

    def ConjugateBranch2(self):
        return _PyAnyCAD.GHypr_ConjugateBranch2(self)

    def Directrix1(self):
        return _PyAnyCAD.GHypr_Directrix1(self)

    def Directrix2(self):
        return _PyAnyCAD.GHypr_Directrix2(self)

    def Eccentricity(self):
        return _PyAnyCAD.GHypr_Eccentricity(self)

    def Focal(self):
        return _PyAnyCAD.GHypr_Focal(self)

    def Focus1(self):
        return _PyAnyCAD.GHypr_Focus1(self)

    def Focus2(self):
        return _PyAnyCAD.GHypr_Focus2(self)

    def Location(self):
        return _PyAnyCAD.GHypr_Location(self)

    def MajorRadius(self):
        return _PyAnyCAD.GHypr_MajorRadius(self)

    def MinorRadius(self):
        return _PyAnyCAD.GHypr_MinorRadius(self)

    def OtherBranch(self):
        return _PyAnyCAD.GHypr_OtherBranch(self)

    def Parameter(self):
        return _PyAnyCAD.GHypr_Parameter(self)

    def Position(self):
        return _PyAnyCAD.GHypr_Position(self)

    def XAxis(self):
        return _PyAnyCAD.GHypr_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GHypr_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GHypr_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GHypr_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GHypr_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GHypr_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GHypr_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GHypr_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GHypr_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GHypr_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GHypr_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GHypr_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GHypr

# Register GHypr in _PyAnyCAD:
_PyAnyCAD.GHypr_swigregister(GHypr)

class GParab(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GParab_swiginit(self, _PyAnyCAD.new_GParab(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GParab_SetAxis(self, theA1)

    def SetFocal(self, theFocal):
        return _PyAnyCAD.GParab_SetFocal(self, theFocal)

    def SetLocation(self, theP):
        return _PyAnyCAD.GParab_SetLocation(self, theP)

    def SetPosition(self, theA2):
        return _PyAnyCAD.GParab_SetPosition(self, theA2)

    def Axis(self):
        return _PyAnyCAD.GParab_Axis(self)

    def Directrix(self):
        return _PyAnyCAD.GParab_Directrix(self)

    def Focal(self):
        return _PyAnyCAD.GParab_Focal(self)

    def Focus(self):
        return _PyAnyCAD.GParab_Focus(self)

    def Location(self):
        return _PyAnyCAD.GParab_Location(self)

    def Parameter(self):
        return _PyAnyCAD.GParab_Parameter(self)

    def Position(self):
        return _PyAnyCAD.GParab_Position(self)

    def XAxis(self):
        return _PyAnyCAD.GParab_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GParab_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GParab_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GParab_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GParab_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GParab_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GParab_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GParab_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GParab_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GParab_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GParab_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GParab_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GParab

# Register GParab in _PyAnyCAD:
_PyAnyCAD.GParab_swigregister(GParab)

class GP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Resolution():
        return _PyAnyCAD.GP_Resolution()

    @staticmethod
    def Origin():
        return _PyAnyCAD.GP_Origin()

    @staticmethod
    def DX():
        return _PyAnyCAD.GP_DX()

    @staticmethod
    def DY():
        return _PyAnyCAD.GP_DY()

    @staticmethod
    def DZ():
        return _PyAnyCAD.GP_DZ()

    @staticmethod
    def OX():
        return _PyAnyCAD.GP_OX()

    @staticmethod
    def OY():
        return _PyAnyCAD.GP_OY()

    @staticmethod
    def OZ():
        return _PyAnyCAD.GP_OZ()

    @staticmethod
    def XOY():
        return _PyAnyCAD.GP_XOY()

    @staticmethod
    def ZOX():
        return _PyAnyCAD.GP_ZOX()

    @staticmethod
    def YOZ():
        return _PyAnyCAD.GP_YOZ()

    @staticmethod
    def Origin2d():
        return _PyAnyCAD.GP_Origin2d()

    @staticmethod
    def DX2d():
        return _PyAnyCAD.GP_DX2d()

    @staticmethod
    def DY2d():
        return _PyAnyCAD.GP_DY2d()

    @staticmethod
    def OX2d():
        return _PyAnyCAD.GP_OX2d()

    @staticmethod
    def OY2d():
        return _PyAnyCAD.GP_OY2d()

    def __init__(self):
        _PyAnyCAD.GP_swiginit(self, _PyAnyCAD.new_GP())
    __swig_destroy__ = _PyAnyCAD.delete_GP

# Register GP in _PyAnyCAD:
_PyAnyCAD.GP_swigregister(GP)

def GP_Resolution():
    return _PyAnyCAD.GP_Resolution()

def GP_Origin():
    return _PyAnyCAD.GP_Origin()

def GP_DX():
    return _PyAnyCAD.GP_DX()

def GP_DY():
    return _PyAnyCAD.GP_DY()

def GP_DZ():
    return _PyAnyCAD.GP_DZ()

def GP_OX():
    return _PyAnyCAD.GP_OX()

def GP_OY():
    return _PyAnyCAD.GP_OY()

def GP_OZ():
    return _PyAnyCAD.GP_OZ()

def GP_XOY():
    return _PyAnyCAD.GP_XOY()

def GP_ZOX():
    return _PyAnyCAD.GP_ZOX()

def GP_YOZ():
    return _PyAnyCAD.GP_YOZ()

def GP_Origin2d():
    return _PyAnyCAD.GP_Origin2d()

def GP_DX2d():
    return _PyAnyCAD.GP_DX2d()

def GP_DY2d():
    return _PyAnyCAD.GP_DY2d()

def GP_OX2d():
    return _PyAnyCAD.GP_OX2d()

def GP_OY2d():
    return _PyAnyCAD.GP_OY2d()

class GLin2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GLin2d_swiginit(self, _PyAnyCAD.new_GLin2d(*args))

    def Reverse(self):
        return _PyAnyCAD.GLin2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GLin2d_Reversed(self)

    def SetDirection(self, theV):
        return _PyAnyCAD.GLin2d_SetDirection(self, theV)

    def SetLocation(self, theP):
        return _PyAnyCAD.GLin2d_SetLocation(self, theP)

    def SetPosition(self, theA):
        return _PyAnyCAD.GLin2d_SetPosition(self, theA)

    def Coefficients(self, theA, theB, theC):
        return _PyAnyCAD.GLin2d_Coefficients(self, theA, theB, theC)

    def Direction(self):
        return _PyAnyCAD.GLin2d_Direction(self)

    def Location(self):
        return _PyAnyCAD.GLin2d_Location(self)

    def Position(self):
        return _PyAnyCAD.GLin2d_Position(self)

    def Angle(self, theOther):
        return _PyAnyCAD.GLin2d_Angle(self, theOther)

    def Contains(self, theP, theLinearTolerance):
        return _PyAnyCAD.GLin2d_Contains(self, theP, theLinearTolerance)

    def Distance(self, *args):
        return _PyAnyCAD.GLin2d_Distance(self, *args)

    def SquareDistance(self, *args):
        return _PyAnyCAD.GLin2d_SquareDistance(self, *args)

    def Normal(self, theP):
        return _PyAnyCAD.GLin2d_Normal(self, theP)

    def Mirror(self, *args):
        return _PyAnyCAD.GLin2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GLin2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GLin2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GLin2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GLin2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GLin2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GLin2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GLin2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GLin2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GLin2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GLin2d

# Register GLin2d in _PyAnyCAD:
_PyAnyCAD.GLin2d_swigregister(GLin2d)

class GCirc2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GCirc2d_swiginit(self, _PyAnyCAD.new_GCirc2d(*args))

    def SetLocation(self, theP):
        return _PyAnyCAD.GCirc2d_SetLocation(self, theP)

    def SetXAxis(self, theA):
        return _PyAnyCAD.GCirc2d_SetXAxis(self, theA)

    def SetAxis(self, theA):
        return _PyAnyCAD.GCirc2d_SetAxis(self, theA)

    def SetYAxis(self, theA):
        return _PyAnyCAD.GCirc2d_SetYAxis(self, theA)

    def SetRadius(self, theRadius):
        return _PyAnyCAD.GCirc2d_SetRadius(self, theRadius)

    def Area(self):
        return _PyAnyCAD.GCirc2d_Area(self)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        return _PyAnyCAD.GCirc2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def Contains(self, theP, theLinearTolerance):
        return _PyAnyCAD.GCirc2d_Contains(self, theP, theLinearTolerance)

    def Distance(self, theP):
        return _PyAnyCAD.GCirc2d_Distance(self, theP)

    def SquareDistance(self, theP):
        return _PyAnyCAD.GCirc2d_SquareDistance(self, theP)

    def Length(self):
        return _PyAnyCAD.GCirc2d_Length(self)

    def Location(self):
        return _PyAnyCAD.GCirc2d_Location(self)

    def Radius(self):
        return _PyAnyCAD.GCirc2d_Radius(self)

    def Axis(self):
        return _PyAnyCAD.GCirc2d_Axis(self)

    def Position(self):
        return _PyAnyCAD.GCirc2d_Position(self)

    def XAxis(self):
        return _PyAnyCAD.GCirc2d_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GCirc2d_YAxis(self)

    def Reverse(self):
        return _PyAnyCAD.GCirc2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GCirc2d_Reversed(self)

    def IsDirect(self):
        return _PyAnyCAD.GCirc2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GCirc2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GCirc2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GCirc2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GCirc2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCirc2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GCirc2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCirc2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GCirc2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCirc2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GCirc2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCirc2d

# Register GCirc2d in _PyAnyCAD:
_PyAnyCAD.GCirc2d_swigregister(GCirc2d)

class GElips2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GElips2d_swiginit(self, _PyAnyCAD.new_GElips2d(*args))

    def SetLocation(self, theP):
        return _PyAnyCAD.GElips2d_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        return _PyAnyCAD.GElips2d_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        return _PyAnyCAD.GElips2d_SetMinorRadius(self, theMinorRadius)

    def SetAxis(self, theA):
        return _PyAnyCAD.GElips2d_SetAxis(self, theA)

    def SetXAxis(self, theA):
        return _PyAnyCAD.GElips2d_SetXAxis(self, theA)

    def SetYAxis(self, theA):
        return _PyAnyCAD.GElips2d_SetYAxis(self, theA)

    def Area(self):
        return _PyAnyCAD.GElips2d_Area(self)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        return _PyAnyCAD.GElips2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def Directrix1(self):
        return _PyAnyCAD.GElips2d_Directrix1(self)

    def Directrix2(self):
        return _PyAnyCAD.GElips2d_Directrix2(self)

    def Eccentricity(self):
        return _PyAnyCAD.GElips2d_Eccentricity(self)

    def Focal(self):
        return _PyAnyCAD.GElips2d_Focal(self)

    def Focus1(self):
        return _PyAnyCAD.GElips2d_Focus1(self)

    def Focus2(self):
        return _PyAnyCAD.GElips2d_Focus2(self)

    def Location(self):
        return _PyAnyCAD.GElips2d_Location(self)

    def MajorRadius(self):
        return _PyAnyCAD.GElips2d_MajorRadius(self)

    def MinorRadius(self):
        return _PyAnyCAD.GElips2d_MinorRadius(self)

    def Parameter(self):
        return _PyAnyCAD.GElips2d_Parameter(self)

    def Axis(self):
        return _PyAnyCAD.GElips2d_Axis(self)

    def XAxis(self):
        return _PyAnyCAD.GElips2d_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GElips2d_YAxis(self)

    def Reverse(self):
        return _PyAnyCAD.GElips2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GElips2d_Reversed(self)

    def IsDirect(self):
        return _PyAnyCAD.GElips2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GElips2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GElips2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GElips2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GElips2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GElips2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GElips2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GElips2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GElips2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GElips2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GElips2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GElips2d

# Register GElips2d in _PyAnyCAD:
_PyAnyCAD.GElips2d_swigregister(GElips2d)

class GHypr2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GHypr2d_swiginit(self, _PyAnyCAD.new_GHypr2d(*args))

    def SetLocation(self, theP):
        return _PyAnyCAD.GHypr2d_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        return _PyAnyCAD.GHypr2d_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        return _PyAnyCAD.GHypr2d_SetMinorRadius(self, theMinorRadius)

    def SetAxis(self, theA):
        return _PyAnyCAD.GHypr2d_SetAxis(self, theA)

    def SetXAxis(self, theA):
        return _PyAnyCAD.GHypr2d_SetXAxis(self, theA)

    def SetYAxis(self, theA):
        return _PyAnyCAD.GHypr2d_SetYAxis(self, theA)

    def Asymptote1(self):
        return _PyAnyCAD.GHypr2d_Asymptote1(self)

    def Asymptote2(self):
        return _PyAnyCAD.GHypr2d_Asymptote2(self)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        return _PyAnyCAD.GHypr2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def ConjugateBranch1(self):
        return _PyAnyCAD.GHypr2d_ConjugateBranch1(self)

    def ConjugateBranch2(self):
        return _PyAnyCAD.GHypr2d_ConjugateBranch2(self)

    def Directrix1(self):
        return _PyAnyCAD.GHypr2d_Directrix1(self)

    def Directrix2(self):
        return _PyAnyCAD.GHypr2d_Directrix2(self)

    def Eccentricity(self):
        return _PyAnyCAD.GHypr2d_Eccentricity(self)

    def Focal(self):
        return _PyAnyCAD.GHypr2d_Focal(self)

    def Focus1(self):
        return _PyAnyCAD.GHypr2d_Focus1(self)

    def Focus2(self):
        return _PyAnyCAD.GHypr2d_Focus2(self)

    def Location(self):
        return _PyAnyCAD.GHypr2d_Location(self)

    def MajorRadius(self):
        return _PyAnyCAD.GHypr2d_MajorRadius(self)

    def MinorRadius(self):
        return _PyAnyCAD.GHypr2d_MinorRadius(self)

    def OtherBranch(self):
        return _PyAnyCAD.GHypr2d_OtherBranch(self)

    def Parameter(self):
        return _PyAnyCAD.GHypr2d_Parameter(self)

    def Axis(self):
        return _PyAnyCAD.GHypr2d_Axis(self)

    def XAxis(self):
        return _PyAnyCAD.GHypr2d_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GHypr2d_YAxis(self)

    def Reverse(self):
        return _PyAnyCAD.GHypr2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GHypr2d_Reversed(self)

    def IsDirect(self):
        return _PyAnyCAD.GHypr2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GHypr2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GHypr2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GHypr2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GHypr2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GHypr2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GHypr2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GHypr2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GHypr2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GHypr2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GHypr2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GHypr2d

# Register GHypr2d in _PyAnyCAD:
_PyAnyCAD.GHypr2d_swigregister(GHypr2d)

class GParab2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GParab2d_swiginit(self, _PyAnyCAD.new_GParab2d(*args))

    def SetFocal(self, theFocal):
        return _PyAnyCAD.GParab2d_SetFocal(self, theFocal)

    def SetLocation(self, theP):
        return _PyAnyCAD.GParab2d_SetLocation(self, theP)

    def SetMirrorAxis(self, theA):
        return _PyAnyCAD.GParab2d_SetMirrorAxis(self, theA)

    def SetAxis(self, theA):
        return _PyAnyCAD.GParab2d_SetAxis(self, theA)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        return _PyAnyCAD.GParab2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def Directrix(self):
        return _PyAnyCAD.GParab2d_Directrix(self)

    def Focal(self):
        return _PyAnyCAD.GParab2d_Focal(self)

    def Focus(self):
        return _PyAnyCAD.GParab2d_Focus(self)

    def Location(self):
        return _PyAnyCAD.GParab2d_Location(self)

    def MirrorAxis(self):
        return _PyAnyCAD.GParab2d_MirrorAxis(self)

    def Axis(self):
        return _PyAnyCAD.GParab2d_Axis(self)

    def Parameter(self):
        return _PyAnyCAD.GParab2d_Parameter(self)

    def Reverse(self):
        return _PyAnyCAD.GParab2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GParab2d_Reversed(self)

    def IsDirect(self):
        return _PyAnyCAD.GParab2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GParab2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GParab2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GParab2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GParab2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GParab2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GParab2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GParab2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GParab2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GParab2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GParab2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GParab2d

# Register GParab2d in _PyAnyCAD:
_PyAnyCAD.GParab2d_swigregister(GParab2d)

class GCylinder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GCylinder_swiginit(self, _PyAnyCAD.new_GCylinder(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GCylinder_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        return _PyAnyCAD.GCylinder_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        return _PyAnyCAD.GCylinder_SetPosition(self, theA3)

    def SetRadius(self, theR):
        return _PyAnyCAD.GCylinder_SetRadius(self, theR)

    def UReverse(self):
        return _PyAnyCAD.GCylinder_UReverse(self)

    def VReverse(self):
        return _PyAnyCAD.GCylinder_VReverse(self)

    def Direct(self):
        return _PyAnyCAD.GCylinder_Direct(self)

    def Axis(self):
        return _PyAnyCAD.GCylinder_Axis(self)

    def Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD):
        return _PyAnyCAD.GCylinder_Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD)

    def Location(self):
        return _PyAnyCAD.GCylinder_Location(self)

    def Position(self):
        return _PyAnyCAD.GCylinder_Position(self)

    def Radius(self):
        return _PyAnyCAD.GCylinder_Radius(self)

    def XAxis(self):
        return _PyAnyCAD.GCylinder_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GCylinder_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GCylinder_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GCylinder_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GCylinder_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GCylinder_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCylinder_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GCylinder_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCylinder_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GCylinder_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCylinder_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GCylinder_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCylinder

# Register GCylinder in _PyAnyCAD:
_PyAnyCAD.GCylinder_swigregister(GCylinder)

class GCone(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GCone_swiginit(self, _PyAnyCAD.new_GCone(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GCone_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        return _PyAnyCAD.GCone_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        return _PyAnyCAD.GCone_SetPosition(self, theA3)

    def SetRadius(self, theR):
        return _PyAnyCAD.GCone_SetRadius(self, theR)

    def SetSemiAngle(self, theAng):
        return _PyAnyCAD.GCone_SetSemiAngle(self, theAng)

    def Apex(self):
        return _PyAnyCAD.GCone_Apex(self)

    def UReverse(self):
        return _PyAnyCAD.GCone_UReverse(self)

    def VReverse(self):
        return _PyAnyCAD.GCone_VReverse(self)

    def Direct(self):
        return _PyAnyCAD.GCone_Direct(self)

    def Axis(self):
        return _PyAnyCAD.GCone_Axis(self)

    def Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD):
        return _PyAnyCAD.GCone_Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD)

    def Location(self):
        return _PyAnyCAD.GCone_Location(self)

    def Position(self):
        return _PyAnyCAD.GCone_Position(self)

    def RefRadius(self):
        return _PyAnyCAD.GCone_RefRadius(self)

    def SemiAngle(self):
        return _PyAnyCAD.GCone_SemiAngle(self)

    def XAxis(self):
        return _PyAnyCAD.GCone_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GCone_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GCone_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GCone_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GCone_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GCone_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCone_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GCone_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCone_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GCone_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCone_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GCone_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCone

# Register GCone in _PyAnyCAD:
_PyAnyCAD.GCone_swigregister(GCone)

class GSphere(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GSphere_swiginit(self, _PyAnyCAD.new_GSphere(*args))

    def SetLocation(self, theLoc):
        return _PyAnyCAD.GSphere_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        return _PyAnyCAD.GSphere_SetPosition(self, theA3)

    def SetRadius(self, theR):
        return _PyAnyCAD.GSphere_SetRadius(self, theR)

    def Area(self):
        return _PyAnyCAD.GSphere_Area(self)

    def Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD):
        return _PyAnyCAD.GSphere_Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD)

    def UReverse(self):
        return _PyAnyCAD.GSphere_UReverse(self)

    def VReverse(self):
        return _PyAnyCAD.GSphere_VReverse(self)

    def Direct(self):
        return _PyAnyCAD.GSphere_Direct(self)

    def Location(self):
        return _PyAnyCAD.GSphere_Location(self)

    def Position(self):
        return _PyAnyCAD.GSphere_Position(self)

    def Radius(self):
        return _PyAnyCAD.GSphere_Radius(self)

    def Volume(self):
        return _PyAnyCAD.GSphere_Volume(self)

    def XAxis(self):
        return _PyAnyCAD.GSphere_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GSphere_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GSphere_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GSphere_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GSphere_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GSphere_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GSphere_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GSphere_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GSphere_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GSphere_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GSphere_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GSphere_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GSphere

# Register GSphere in _PyAnyCAD:
_PyAnyCAD.GSphere_swigregister(GSphere)

class GTorus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GTorus_swiginit(self, _PyAnyCAD.new_GTorus(*args))

    def SetAxis(self, theA1):
        return _PyAnyCAD.GTorus_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        return _PyAnyCAD.GTorus_SetLocation(self, theLoc)

    def SetMajorRadius(self, theMajorRadius):
        return _PyAnyCAD.GTorus_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        return _PyAnyCAD.GTorus_SetMinorRadius(self, theMinorRadius)

    def SetPosition(self, theA3):
        return _PyAnyCAD.GTorus_SetPosition(self, theA3)

    def Area(self):
        return _PyAnyCAD.GTorus_Area(self)

    def UReverse(self):
        return _PyAnyCAD.GTorus_UReverse(self)

    def VReverse(self):
        return _PyAnyCAD.GTorus_VReverse(self)

    def Direct(self):
        return _PyAnyCAD.GTorus_Direct(self)

    def Axis(self):
        return _PyAnyCAD.GTorus_Axis(self)

    def Location(self):
        return _PyAnyCAD.GTorus_Location(self)

    def Position(self):
        return _PyAnyCAD.GTorus_Position(self)

    def MajorRadius(self):
        return _PyAnyCAD.GTorus_MajorRadius(self)

    def MinorRadius(self):
        return _PyAnyCAD.GTorus_MinorRadius(self)

    def Volume(self):
        return _PyAnyCAD.GTorus_Volume(self)

    def XAxis(self):
        return _PyAnyCAD.GTorus_XAxis(self)

    def YAxis(self):
        return _PyAnyCAD.GTorus_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GTorus_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GTorus_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GTorus_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GTorus_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GTorus_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GTorus_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GTorus_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GTorus_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GTorus_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GTorus_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GTorus

# Register GTorus in _PyAnyCAD:
_PyAnyCAD.GTorus_swigregister(GTorus)

class GPntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GPntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GPntList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GPntList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GPntList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GPntList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GPntList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GPntList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GPntList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GPntList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GPntList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GPntList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GPntList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GPntList_empty(self)

    def size(self):
        return _PyAnyCAD.GPntList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GPntList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GPntList_begin(self)

    def end(self):
        return _PyAnyCAD.GPntList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GPntList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GPntList_rend(self)

    def clear(self):
        return _PyAnyCAD.GPntList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GPntList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GPntList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GPntList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GPntList_swiginit(self, _PyAnyCAD.new_GPntList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GPntList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GPntList_front(self)

    def back(self):
        return _PyAnyCAD.GPntList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GPntList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GPntList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GPntList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GPntList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GPntList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GPntList

# Register GPntList in _PyAnyCAD:
_PyAnyCAD.GPntList_swigregister(GPntList)

class GVecList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GVecList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GVecList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GVecList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GVecList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GVecList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GVecList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GVecList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GVecList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GVecList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GVecList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GVecList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GVecList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GVecList_empty(self)

    def size(self):
        return _PyAnyCAD.GVecList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GVecList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GVecList_begin(self)

    def end(self):
        return _PyAnyCAD.GVecList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GVecList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GVecList_rend(self)

    def clear(self):
        return _PyAnyCAD.GVecList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GVecList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GVecList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GVecList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GVecList_swiginit(self, _PyAnyCAD.new_GVecList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GVecList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GVecList_front(self)

    def back(self):
        return _PyAnyCAD.GVecList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GVecList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GVecList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GVecList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GVecList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GVecList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GVecList

# Register GVecList in _PyAnyCAD:
_PyAnyCAD.GVecList_swigregister(GVecList)

class GPnt2dList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GPnt2dList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GPnt2dList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GPnt2dList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GPnt2dList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GPnt2dList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GPnt2dList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GPnt2dList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GPnt2dList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GPnt2dList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GPnt2dList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GPnt2dList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GPnt2dList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GPnt2dList_empty(self)

    def size(self):
        return _PyAnyCAD.GPnt2dList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GPnt2dList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GPnt2dList_begin(self)

    def end(self):
        return _PyAnyCAD.GPnt2dList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GPnt2dList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GPnt2dList_rend(self)

    def clear(self):
        return _PyAnyCAD.GPnt2dList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GPnt2dList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GPnt2dList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GPnt2dList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GPnt2dList_swiginit(self, _PyAnyCAD.new_GPnt2dList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GPnt2dList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GPnt2dList_front(self)

    def back(self):
        return _PyAnyCAD.GPnt2dList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GPnt2dList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GPnt2dList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GPnt2dList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GPnt2dList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GPnt2dList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GPnt2dList

# Register GPnt2dList in _PyAnyCAD:
_PyAnyCAD.GPnt2dList_swigregister(GPnt2dList)

class GVec2dList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GVec2dList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GVec2dList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GVec2dList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GVec2dList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GVec2dList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GVec2dList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GVec2dList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GVec2dList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GVec2dList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GVec2dList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GVec2dList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GVec2dList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GVec2dList_empty(self)

    def size(self):
        return _PyAnyCAD.GVec2dList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GVec2dList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GVec2dList_begin(self)

    def end(self):
        return _PyAnyCAD.GVec2dList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GVec2dList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GVec2dList_rend(self)

    def clear(self):
        return _PyAnyCAD.GVec2dList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GVec2dList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GVec2dList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GVec2dList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GVec2dList_swiginit(self, _PyAnyCAD.new_GVec2dList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GVec2dList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GVec2dList_front(self)

    def back(self):
        return _PyAnyCAD.GVec2dList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GVec2dList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GVec2dList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GVec2dList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GVec2dList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GVec2dList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GVec2dList

# Register GVec2dList in _PyAnyCAD:
_PyAnyCAD.GVec2dList_swigregister(GVec2dList)

class GPntList2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GPntList2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GPntList2___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GPntList2___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GPntList2___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GPntList2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GPntList2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GPntList2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GPntList2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GPntList2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GPntList2___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GPntList2_pop(self)

    def append(self, x):
        return _PyAnyCAD.GPntList2_append(self, x)

    def empty(self):
        return _PyAnyCAD.GPntList2_empty(self)

    def size(self):
        return _PyAnyCAD.GPntList2_size(self)

    def swap(self, v):
        return _PyAnyCAD.GPntList2_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GPntList2_begin(self)

    def end(self):
        return _PyAnyCAD.GPntList2_end(self)

    def rbegin(self):
        return _PyAnyCAD.GPntList2_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GPntList2_rend(self)

    def clear(self):
        return _PyAnyCAD.GPntList2_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GPntList2_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GPntList2_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GPntList2_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GPntList2_swiginit(self, _PyAnyCAD.new_GPntList2(*args))

    def push_back(self, x):
        return _PyAnyCAD.GPntList2_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GPntList2_front(self)

    def back(self):
        return _PyAnyCAD.GPntList2_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GPntList2_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GPntList2_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GPntList2_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GPntList2_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GPntList2_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GPntList2

# Register GPntList2 in _PyAnyCAD:
_PyAnyCAD.GPntList2_swigregister(GPntList2)

EnumTopoShapeType_Topo_COMPOUND = _PyAnyCAD.EnumTopoShapeType_Topo_COMPOUND
EnumTopoShapeType_Topo_COMPSOLID = _PyAnyCAD.EnumTopoShapeType_Topo_COMPSOLID
EnumTopoShapeType_Topo_SOLID = _PyAnyCAD.EnumTopoShapeType_Topo_SOLID
EnumTopoShapeType_Topo_SHELL = _PyAnyCAD.EnumTopoShapeType_Topo_SHELL
EnumTopoShapeType_Topo_FACE = _PyAnyCAD.EnumTopoShapeType_Topo_FACE
EnumTopoShapeType_Topo_WIRE = _PyAnyCAD.EnumTopoShapeType_Topo_WIRE
EnumTopoShapeType_Topo_EDGE = _PyAnyCAD.EnumTopoShapeType_Topo_EDGE
EnumTopoShapeType_Topo_VERTEX = _PyAnyCAD.EnumTopoShapeType_Topo_VERTEX
EnumTopoShapeType_Topo_SHAPE = _PyAnyCAD.EnumTopoShapeType_Topo_SHAPE
EnumCurveType_CurveType_Line = _PyAnyCAD.EnumCurveType_CurveType_Line
EnumCurveType_CurveType_Circle = _PyAnyCAD.EnumCurveType_CurveType_Circle
EnumCurveType_CurveType_Ellipse = _PyAnyCAD.EnumCurveType_CurveType_Ellipse
EnumCurveType_CurveType_Hyperbola = _PyAnyCAD.EnumCurveType_CurveType_Hyperbola
EnumCurveType_CurveType_Parabola = _PyAnyCAD.EnumCurveType_CurveType_Parabola
EnumCurveType_CurveType_BezierCurve = _PyAnyCAD.EnumCurveType_CurveType_BezierCurve
EnumCurveType_CurveType_BSplineCurve = _PyAnyCAD.EnumCurveType_CurveType_BSplineCurve
EnumCurveType_CurveType_OtherCurve = _PyAnyCAD.EnumCurveType_CurveType_OtherCurve
EnumSurfaceType_SurfaceType_Plane = _PyAnyCAD.EnumSurfaceType_SurfaceType_Plane
EnumSurfaceType_SurfaceType_Cylinder = _PyAnyCAD.EnumSurfaceType_SurfaceType_Cylinder
EnumSurfaceType_SurfaceType_Cone = _PyAnyCAD.EnumSurfaceType_SurfaceType_Cone
EnumSurfaceType_SurfaceType_Sphere = _PyAnyCAD.EnumSurfaceType_SurfaceType_Sphere
EnumSurfaceType_SurfaceType_Torus = _PyAnyCAD.EnumSurfaceType_SurfaceType_Torus
EnumSurfaceType_SurfaceType_BezierSurface = _PyAnyCAD.EnumSurfaceType_SurfaceType_BezierSurface
EnumSurfaceType_SurfaceType_BSplineSurface = _PyAnyCAD.EnumSurfaceType_SurfaceType_BSplineSurface
EnumSurfaceType_SurfaceType_SurfaceOfRevolution = _PyAnyCAD.EnumSurfaceType_SurfaceType_SurfaceOfRevolution
EnumSurfaceType_SurfaceType_SurfaceOfExtrusion = _PyAnyCAD.EnumSurfaceType_SurfaceType_SurfaceOfExtrusion
EnumSurfaceType_SurfaceType_OffsetSurface = _PyAnyCAD.EnumSurfaceType_SurfaceType_OffsetSurface
EnumSurfaceType_SurfaceType_OtherSurface = _PyAnyCAD.EnumSurfaceType_SurfaceType_OtherSurface
EnumTopoOrientation_FORWARD = _PyAnyCAD.EnumTopoOrientation_FORWARD
EnumTopoOrientation_REVERSED = _PyAnyCAD.EnumTopoOrientation_REVERSED
EnumTopoOrientation_INTERNAL = _PyAnyCAD.EnumTopoOrientation_INTERNAL
EnumTopoOrientation_EXTERNAL = _PyAnyCAD.EnumTopoOrientation_EXTERNAL
EnumCurvatureType_MaxCurvature = _PyAnyCAD.EnumCurvatureType_MaxCurvature
EnumCurvatureType_MinCurvature = _PyAnyCAD.EnumCurvatureType_MinCurvature
EnumCurvatureType_MeanCurvature = _PyAnyCAD.EnumCurvatureType_MeanCurvature
EnumCurvatureType_GaussianCurvature = _PyAnyCAD.EnumCurvatureType_GaussianCurvature
class TopoShapeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.TopoShapeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.TopoShapeList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.TopoShapeList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.TopoShapeList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.TopoShapeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.TopoShapeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.TopoShapeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.TopoShapeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.TopoShapeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.TopoShapeList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.TopoShapeList_pop(self)

    def append(self, x):
        return _PyAnyCAD.TopoShapeList_append(self, x)

    def empty(self):
        return _PyAnyCAD.TopoShapeList_empty(self)

    def size(self):
        return _PyAnyCAD.TopoShapeList_size(self)

    def swap(self, v):
        return _PyAnyCAD.TopoShapeList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.TopoShapeList_begin(self)

    def end(self):
        return _PyAnyCAD.TopoShapeList_end(self)

    def rbegin(self):
        return _PyAnyCAD.TopoShapeList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.TopoShapeList_rend(self)

    def clear(self):
        return _PyAnyCAD.TopoShapeList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.TopoShapeList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.TopoShapeList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.TopoShapeList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.TopoShapeList_swiginit(self, _PyAnyCAD.new_TopoShapeList(*args))

    def push_back(self, x):
        return _PyAnyCAD.TopoShapeList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.TopoShapeList_front(self)

    def back(self):
        return _PyAnyCAD.TopoShapeList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.TopoShapeList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.TopoShapeList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.TopoShapeList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.TopoShapeList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.TopoShapeList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_TopoShapeList

# Register TopoShapeList in _PyAnyCAD:
_PyAnyCAD.TopoShapeList_swigregister(TopoShapeList)

class TopoShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_TopoShape

    def GetShapeType(self):
        return _PyAnyCAD.TopoShape_GetShapeType(self)

    def IsShapeType(self, type):
        return _PyAnyCAD.TopoShape_IsShapeType(self, type)

    def IsNullShape(self):
        return _PyAnyCAD.TopoShape_IsNullShape(self)

    def GetBBox(self):
        return _PyAnyCAD.TopoShape_GetBBox(self)

    def GetOptimalBBox(self):
        return _PyAnyCAD.TopoShape_GetOptimalBBox(self)

    def GetLocalTransform(self):
        return _PyAnyCAD.TopoShape_GetLocalTransform(self)

    def SetLocalTransform(self, trf):
        return _PyAnyCAD.TopoShape_SetLocalTransform(self, trf)

    def Transformed(self, trf):
        return _PyAnyCAD.TopoShape_Transformed(self, trf)

    def GetChildren(self, subType):
        return _PyAnyCAD.TopoShape_GetChildren(self, subType)

    def FindChild(self, subType, idx):
        return _PyAnyCAD.TopoShape_FindChild(self, subType, idx)

    def IsOrientable(self):
        return _PyAnyCAD.TopoShape_IsOrientable(self)

    def GetOrientation(self):
        return _PyAnyCAD.TopoShape_GetOrientation(self)

    def Oriented(self, orient):
        return _PyAnyCAD.TopoShape_Oriented(self, orient)

    def IsConvex(self):
        return _PyAnyCAD.TopoShape_IsConvex(self)

    def IsEqualShape(self, other):
        return _PyAnyCAD.TopoShape_IsEqualShape(self, other)

    def IsSameShape(self, other):
        return _PyAnyCAD.TopoShape_IsSameShape(self, other)

    def IsPartnerShape(self, other):
        return _PyAnyCAD.TopoShape_IsPartnerShape(self, other)

    def IsClosed(self):
        return _PyAnyCAD.TopoShape_IsClosed(self)

    def Write(self):
        return _PyAnyCAD.TopoShape_Write(self)

    @staticmethod
    def Read(buffer):
        return _PyAnyCAD.TopoShape_Read(buffer)

# Register TopoShape in _PyAnyCAD:
_PyAnyCAD.TopoShape_swigregister(TopoShape)

def TopoShape_Read(buffer):
    return _PyAnyCAD.TopoShape_Read(buffer)

class TopoExplor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape, childType, parentType, uniqueParent=False, useOrientation=False):
        _PyAnyCAD.TopoExplor_swiginit(self, _PyAnyCAD.new_TopoExplor(shape, childType, parentType, uniqueParent, useOrientation))
    __swig_destroy__ = _PyAnyCAD.delete_TopoExplor

    def GetParentShapes(self, subShape):
        return _PyAnyCAD.TopoExplor_GetParentShapes(self, subShape)

    def GetChildrenShapes(self):
        return _PyAnyCAD.TopoExplor_GetChildrenShapes(self)

    @staticmethod
    def GetSubShapes(topoShape):
        return _PyAnyCAD.TopoExplor_GetSubShapes(topoShape)

    @staticmethod
    def GetVertexValue(vertex):
        return _PyAnyCAD.TopoExplor_GetVertexValue(vertex)

    @staticmethod
    def GetVertexPoints(shape):
        return _PyAnyCAD.TopoExplor_GetVertexPoints(shape)

    @staticmethod
    def GetOuterShell(solid):
        return _PyAnyCAD.TopoExplor_GetOuterShell(solid)

# Register TopoExplor in _PyAnyCAD:
_PyAnyCAD.TopoExplor_swigregister(TopoExplor)

def TopoExplor_GetSubShapes(topoShape):
    return _PyAnyCAD.TopoExplor_GetSubShapes(topoShape)

def TopoExplor_GetVertexValue(vertex):
    return _PyAnyCAD.TopoExplor_GetVertexValue(vertex)

def TopoExplor_GetVertexPoints(shape):
    return _PyAnyCAD.TopoExplor_GetVertexPoints(shape)

def TopoExplor_GetOuterShell(solid):
    return _PyAnyCAD.TopoExplor_GetOuterShell(solid)

class PrincipalProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.PrincipalProps_swiginit(self, _PyAnyCAD.new_PrincipalProps())
    __swig_destroy__ = _PyAnyCAD.delete_PrincipalProps

    def HasSymmetryAxis(self, *args):
        return _PyAnyCAD.PrincipalProps_HasSymmetryAxis(self, *args)

    def HasSymmetryPoint(self, *args):
        return _PyAnyCAD.PrincipalProps_HasSymmetryPoint(self, *args)

    def Moments(self):
        return _PyAnyCAD.PrincipalProps_Moments(self)

    def FirstAxisOfInertia(self):
        return _PyAnyCAD.PrincipalProps_FirstAxisOfInertia(self)

    def SecondAxisOfInertia(self):
        return _PyAnyCAD.PrincipalProps_SecondAxisOfInertia(self)

    def ThirdAxisOfInertia(self):
        return _PyAnyCAD.PrincipalProps_ThirdAxisOfInertia(self)

    def RadiusOfGyration(self):
        return _PyAnyCAD.PrincipalProps_RadiusOfGyration(self)

# Register PrincipalProps in _PyAnyCAD:
_PyAnyCAD.PrincipalProps_swigregister(PrincipalProps)

class TopoShapeProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.TopoShapeProperty_swiginit(self, _PyAnyCAD.new_TopoShapeProperty(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TopoShapeProperty

    def SetShape(self, shape):
        return _PyAnyCAD.TopoShapeProperty_SetShape(self, shape)

    def EdgeLength(self):
        return _PyAnyCAD.TopoShapeProperty_EdgeLength(self)

    def SurfaceArea(self):
        return _PyAnyCAD.TopoShapeProperty_SurfaceArea(self)

    def SolidVolume(self):
        return _PyAnyCAD.TopoShapeProperty_SolidVolume(self)

    def CenterOfMass(self):
        return _PyAnyCAD.TopoShapeProperty_CenterOfMass(self)

    def Add(self, item, density):
        return _PyAnyCAD.TopoShapeProperty_Add(self, item, density)

    def MatrixOfInertia(self):
        return _PyAnyCAD.TopoShapeProperty_MatrixOfInertia(self)

    def StaticMoments(self):
        return _PyAnyCAD.TopoShapeProperty_StaticMoments(self)

    def MomentOfInertia(self, A):
        return _PyAnyCAD.TopoShapeProperty_MomentOfInertia(self, A)

    def RadiusOfGyration(self, A):
        return _PyAnyCAD.TopoShapeProperty_RadiusOfGyration(self, A)

    def PrincipalProperties(self):
        return _PyAnyCAD.TopoShapeProperty_PrincipalProperties(self)

# Register TopoShapeProperty in _PyAnyCAD:
_PyAnyCAD.TopoShapeProperty_swigregister(TopoShapeProperty)

class DerivativeValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.DerivativeValues_swiginit(self, _PyAnyCAD.new_DerivativeValues())
    __swig_destroy__ = _PyAnyCAD.delete_DerivativeValues

    def GetPoint(self):
        return _PyAnyCAD.DerivativeValues_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.DerivativeValues_SetPoint(self, val)

    def GetVectors(self):
        return _PyAnyCAD.DerivativeValues_GetVectors(self)

    def AddVector(self, vec):
        return _PyAnyCAD.DerivativeValues_AddVector(self, vec)

# Register DerivativeValues in _PyAnyCAD:
_PyAnyCAD.DerivativeValues_swigregister(DerivativeValues)

class DerivativeValues2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.DerivativeValues2d_swiginit(self, _PyAnyCAD.new_DerivativeValues2d())
    __swig_destroy__ = _PyAnyCAD.delete_DerivativeValues2d

    def GetPoint(self):
        return _PyAnyCAD.DerivativeValues2d_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.DerivativeValues2d_SetPoint(self, val)

    def GetVectors(self):
        return _PyAnyCAD.DerivativeValues2d_GetVectors(self)

    def AddVector(self, vec):
        return _PyAnyCAD.DerivativeValues2d_AddVector(self, vec)

# Register DerivativeValues2d in _PyAnyCAD:
_PyAnyCAD.DerivativeValues2d_swigregister(DerivativeValues2d)

class GBezierCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_GBezierCurve

# Register GBezierCurve in _PyAnyCAD:
_PyAnyCAD.GBezierCurve_swigregister(GBezierCurve)

class GBSplineCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_GBSplineCurve

    def IsClosed(self):
        return _PyAnyCAD.GBSplineCurve_IsClosed(self)

    def IsPeriodic(self):
        return _PyAnyCAD.GBSplineCurve_IsPeriodic(self)

    def IsRational(self):
        return _PyAnyCAD.GBSplineCurve_IsRational(self)

    def Degree(self):
        return _PyAnyCAD.GBSplineCurve_Degree(self)

    def NbKnots(self):
        return _PyAnyCAD.GBSplineCurve_NbKnots(self)

    def Knots(self):
        return _PyAnyCAD.GBSplineCurve_Knots(self)

    def Knot(self, idx):
        return _PyAnyCAD.GBSplineCurve_Knot(self, idx)

    def Multiplicities(self):
        return _PyAnyCAD.GBSplineCurve_Multiplicities(self)

    def Multiplicity(self, idx):
        return _PyAnyCAD.GBSplineCurve_Multiplicity(self, idx)

    def NbPoles(self):
        return _PyAnyCAD.GBSplineCurve_NbPoles(self)

    def Poles(self):
        return _PyAnyCAD.GBSplineCurve_Poles(self)

    def Pole(self, idx):
        return _PyAnyCAD.GBSplineCurve_Pole(self, idx)

    def Weights(self):
        return _PyAnyCAD.GBSplineCurve_Weights(self)

    def Weight(self, idx):
        return _PyAnyCAD.GBSplineCurve_Weight(self, idx)

# Register GBSplineCurve in _PyAnyCAD:
_PyAnyCAD.GBSplineCurve_swigregister(GBSplineCurve)

class ParametricGeometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ParametricGeometry

    def GetId(self):
        return _PyAnyCAD.ParametricGeometry_GetId(self)

    def SetId(self, val):
        return _PyAnyCAD.ParametricGeometry_SetId(self, val)

    def IsValidGeometry(self):
        return _PyAnyCAD.ParametricGeometry_IsValidGeometry(self)

    def Initialize(self, topoShape):
        return _PyAnyCAD.ParametricGeometry_Initialize(self, topoShape)

    def GetShape(self):
        return _PyAnyCAD.ParametricGeometry_GetShape(self)

# Register ParametricGeometry in _PyAnyCAD:
_PyAnyCAD.ParametricGeometry_swigregister(ParametricGeometry)

class ParametricCurve(ParametricGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ParametricCurve_swiginit(self, _PyAnyCAD.new_ParametricCurve(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParametricCurve

    def GetOwnerId(self):
        return _PyAnyCAD.ParametricCurve_GetOwnerId(self)

    def SetOwnerId(self, val):
        return _PyAnyCAD.ParametricCurve_SetOwnerId(self, val)

    def IsValidGeometry(self):
        return _PyAnyCAD.ParametricCurve_IsValidGeometry(self)

    def Initialize(self, topoShape):
        return _PyAnyCAD.ParametricCurve_Initialize(self, topoShape)

    def GetCurveType(self):
        return _PyAnyCAD.ParametricCurve_GetCurveType(self)

    def Is3DCurve(self):
        return _PyAnyCAD.ParametricCurve_Is3DCurve(self)

    def IsCurveOnSurface(self):
        return _PyAnyCAD.ParametricCurve_IsCurveOnSurface(self)

    def Tolerance(self):
        return _PyAnyCAD.ParametricCurve_Tolerance(self)

    def FirstParameter(self):
        return _PyAnyCAD.ParametricCurve_FirstParameter(self)

    def FirstPoint(self):
        return _PyAnyCAD.ParametricCurve_FirstPoint(self)

    def LastParameter(self):
        return _PyAnyCAD.ParametricCurve_LastParameter(self)

    def LastPoint(self):
        return _PyAnyCAD.ParametricCurve_LastPoint(self)

    def Continuity(self):
        return _PyAnyCAD.ParametricCurve_Continuity(self)

    def IsClosed(self):
        return _PyAnyCAD.ParametricCurve_IsClosed(self)

    def IsPeriodic(self):
        return _PyAnyCAD.ParametricCurve_IsPeriodic(self)

    def Period(self):
        return _PyAnyCAD.ParametricCurve_Period(self)

    def Value(self, u):
        return _PyAnyCAD.ParametricCurve_Value(self, u)

    def D0(self, u):
        return _PyAnyCAD.ParametricCurve_D0(self, u)

    def D1(self, u):
        return _PyAnyCAD.ParametricCurve_D1(self, u)

    def D2(self, u):
        return _PyAnyCAD.ParametricCurve_D2(self, u)

    def D3(self, u):
        return _PyAnyCAD.ParametricCurve_D3(self, u)

    def DN(self, u, n):
        return _PyAnyCAD.ParametricCurve_DN(self, u, n)

    def GetStartPoint(self):
        return _PyAnyCAD.ParametricCurve_GetStartPoint(self)

    def GetEndPoint(self):
        return _PyAnyCAD.ParametricCurve_GetEndPoint(self)

    def GetBBox(self):
        return _PyAnyCAD.ParametricCurve_GetBBox(self)

    def GetLength(self):
        return _PyAnyCAD.ParametricCurve_GetLength(self)

    def ComputeLength(self, u1, u2):
        return _PyAnyCAD.ParametricCurve_ComputeLength(self, u1, u2)

    def ComputePointByDistance(self, u0, offset):
        return _PyAnyCAD.ParametricCurve_ComputePointByDistance(self, u0, offset)

    def SplitByUniformLength(self, length, tolerance):
        return _PyAnyCAD.ParametricCurve_SplitByUniformLength(self, length, tolerance)

    def TryLine(self):
        return _PyAnyCAD.ParametricCurve_TryLine(self)

    def TryCircle(self):
        return _PyAnyCAD.ParametricCurve_TryCircle(self)

    def TryEllipse(self):
        return _PyAnyCAD.ParametricCurve_TryEllipse(self)

    def TryHyperbola(self):
        return _PyAnyCAD.ParametricCurve_TryHyperbola(self)

    def TryParabola(self):
        return _PyAnyCAD.ParametricCurve_TryParabola(self)

    def TryBSplineCurve(self):
        return _PyAnyCAD.ParametricCurve_TryBSplineCurve(self)

    def TryBezierCurve(self):
        return _PyAnyCAD.ParametricCurve_TryBezierCurve(self)

# Register ParametricCurve in _PyAnyCAD:
_PyAnyCAD.ParametricCurve_swigregister(ParametricCurve)

class ParametricSurface(ParametricGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ParametricSurface_swiginit(self, _PyAnyCAD.new_ParametricSurface(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParametricSurface

    def IsValidGeometry(self):
        return _PyAnyCAD.ParametricSurface_IsValidGeometry(self)

    def Initialize(self, topoShape):
        return _PyAnyCAD.ParametricSurface_Initialize(self, topoShape)

    def GetSurfaceType(self):
        return _PyAnyCAD.ParametricSurface_GetSurfaceType(self)

    def Tolerance(self):
        return _PyAnyCAD.ParametricSurface_Tolerance(self)

    def FirstUParameter(self):
        return _PyAnyCAD.ParametricSurface_FirstUParameter(self)

    def LastUParameter(self):
        return _PyAnyCAD.ParametricSurface_LastUParameter(self)

    def FirstVParameter(self):
        return _PyAnyCAD.ParametricSurface_FirstVParameter(self)

    def LastVParameter(self):
        return _PyAnyCAD.ParametricSurface_LastVParameter(self)

    def UContinuity(self):
        return _PyAnyCAD.ParametricSurface_UContinuity(self)

    def VContinuity(self):
        return _PyAnyCAD.ParametricSurface_VContinuity(self)

    def IsUClosed(self):
        return _PyAnyCAD.ParametricSurface_IsUClosed(self)

    def IsVClosed(self):
        return _PyAnyCAD.ParametricSurface_IsVClosed(self)

    def IsUPeriodic(self):
        return _PyAnyCAD.ParametricSurface_IsUPeriodic(self)

    def IsVPeriodic(self):
        return _PyAnyCAD.ParametricSurface_IsVPeriodic(self)

    def UPeriod(self):
        return _PyAnyCAD.ParametricSurface_UPeriod(self)

    def VPeriod(self):
        return _PyAnyCAD.ParametricSurface_VPeriod(self)

    def GetTransform(self):
        return _PyAnyCAD.ParametricSurface_GetTransform(self)

    def Value(self, u, v):
        return _PyAnyCAD.ParametricSurface_Value(self, u, v)

    def GetNormal(self, u, v):
        return _PyAnyCAD.ParametricSurface_GetNormal(self, u, v)

    def D0(self, u, v):
        return _PyAnyCAD.ParametricSurface_D0(self, u, v)

    def D1(self, u, v):
        return _PyAnyCAD.ParametricSurface_D1(self, u, v)

    def D2(self, u, v):
        return _PyAnyCAD.ParametricSurface_D2(self, u, v)

    def D3(self, u, v):
        return _PyAnyCAD.ParametricSurface_D3(self, u, v)

    def DN(self, u, v, nu, nv):
        return _PyAnyCAD.ParametricSurface_DN(self, u, v, nu, nv)

    def ComputeClosestPoint(self, pt, tolU, tolV):
        return _PyAnyCAD.ParametricSurface_ComputeClosestPoint(self, pt, tolU, tolV)

    def GetArea(self):
        return _PyAnyCAD.ParametricSurface_GetArea(self)

    def TryPlane(self):
        return _PyAnyCAD.ParametricSurface_TryPlane(self)

    def TryCylinder(self):
        return _PyAnyCAD.ParametricSurface_TryCylinder(self)

    def TryCone(self):
        return _PyAnyCAD.ParametricSurface_TryCone(self)

    def TrySphere(self):
        return _PyAnyCAD.ParametricSurface_TrySphere(self)

    def TryTorus(self):
        return _PyAnyCAD.ParametricSurface_TryTorus(self)

# Register ParametricSurface in _PyAnyCAD:
_PyAnyCAD.ParametricSurface_swigregister(ParametricSurface)

class ParametricCurve2d(ParametricGeometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ParametricCurve2d_swiginit(self, _PyAnyCAD.new_ParametricCurve2d(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParametricCurve2d

    def GetOwnerId(self):
        return _PyAnyCAD.ParametricCurve2d_GetOwnerId(self)

    def SetOwnerId(self, val):
        return _PyAnyCAD.ParametricCurve2d_SetOwnerId(self, val)

    def IsValidGeometry(self):
        return _PyAnyCAD.ParametricCurve2d_IsValidGeometry(self)

    def Initialize(self, topoShape):
        return _PyAnyCAD.ParametricCurve2d_Initialize(self, topoShape)

    def GetCurveType(self):
        return _PyAnyCAD.ParametricCurve2d_GetCurveType(self)

    def Is3DCurve(self):
        return _PyAnyCAD.ParametricCurve2d_Is3DCurve(self)

    def FirstParameter(self):
        return _PyAnyCAD.ParametricCurve2d_FirstParameter(self)

    def LastParameter(self):
        return _PyAnyCAD.ParametricCurve2d_LastParameter(self)

    def Continuity(self):
        return _PyAnyCAD.ParametricCurve2d_Continuity(self)

    def IsClosed(self):
        return _PyAnyCAD.ParametricCurve2d_IsClosed(self)

    def IsPeriodic(self):
        return _PyAnyCAD.ParametricCurve2d_IsPeriodic(self)

    def Period(self):
        return _PyAnyCAD.ParametricCurve2d_Period(self)

    def Value(self, u):
        return _PyAnyCAD.ParametricCurve2d_Value(self, u)

    def D0(self, u):
        return _PyAnyCAD.ParametricCurve2d_D0(self, u)

    def D1(self, u):
        return _PyAnyCAD.ParametricCurve2d_D1(self, u)

    def D2(self, u):
        return _PyAnyCAD.ParametricCurve2d_D2(self, u)

    def D3(self, u):
        return _PyAnyCAD.ParametricCurve2d_D3(self, u)

    def DN(self, u, n):
        return _PyAnyCAD.ParametricCurve2d_DN(self, u, n)

    def GetStartPoint(self):
        return _PyAnyCAD.ParametricCurve2d_GetStartPoint(self)

    def GetEndPoint(self):
        return _PyAnyCAD.ParametricCurve2d_GetEndPoint(self)

    def GetBBox(self):
        return _PyAnyCAD.ParametricCurve2d_GetBBox(self)

    def GetLength(self):
        return _PyAnyCAD.ParametricCurve2d_GetLength(self)

    def ComputeLength(self, u1, u2):
        return _PyAnyCAD.ParametricCurve2d_ComputeLength(self, u1, u2)

    def ComputePointByDistance(self, u0, offset):
        return _PyAnyCAD.ParametricCurve2d_ComputePointByDistance(self, u0, offset)

    def SplitByUniformLength(self, length, tolerance):
        return _PyAnyCAD.ParametricCurve2d_SplitByUniformLength(self, length, tolerance)

    def TryLine(self):
        return _PyAnyCAD.ParametricCurve2d_TryLine(self)

    def TryCircle(self):
        return _PyAnyCAD.ParametricCurve2d_TryCircle(self)

    def TryEllipse(self):
        return _PyAnyCAD.ParametricCurve2d_TryEllipse(self)

    def TryHyperbola(self):
        return _PyAnyCAD.ParametricCurve2d_TryHyperbola(self)

    def TryParabola(self):
        return _PyAnyCAD.ParametricCurve2d_TryParabola(self)

# Register ParametricCurve2d in _PyAnyCAD:
_PyAnyCAD.ParametricCurve2d_swigregister(ParametricCurve2d)

EnumCollisionState_In = _PyAnyCAD.EnumCollisionState_In
EnumCollisionState_Out = _PyAnyCAD.EnumCollisionState_Out
EnumCollisionState_On = _PyAnyCAD.EnumCollisionState_On
EnumCollisionState_Unknown = _PyAnyCAD.EnumCollisionState_Unknown
class CollisionDetector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def FacePoint(face, point, tol):
        return _PyAnyCAD.CollisionDetector_FacePoint(face, point, tol)

    @staticmethod
    def SolidPoint(shape, point, tol):
        return _PyAnyCAD.CollisionDetector_SolidPoint(shape, point, tol)

# Register CollisionDetector in _PyAnyCAD:
_PyAnyCAD.CollisionDetector_swigregister(CollisionDetector)

def CollisionDetector_FacePoint(face, point, tol):
    return _PyAnyCAD.CollisionDetector_FacePoint(face, point, tol)

def CollisionDetector_SolidPoint(shape, point, tol):
    return _PyAnyCAD.CollisionDetector_SolidPoint(shape, point, tol)

class ExtremaCurveCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaCurveCurve_swiginit(self, _PyAnyCAD.new_ExtremaCurveCurve())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaCurveCurve

    def Initialize(self, curve1, curve2):
        return _PyAnyCAD.ExtremaCurveCurve_Initialize(self, curve1, curve2)

    def GetPointCount(self):
        return _PyAnyCAD.ExtremaCurveCurve_GetPointCount(self)

    def GetPoint1(self, idx):
        return _PyAnyCAD.ExtremaCurveCurve_GetPoint1(self, idx)

    def GetPoint2(self, idx):
        return _PyAnyCAD.ExtremaCurveCurve_GetPoint2(self, idx)

    def GetParameter1(self, idx):
        return _PyAnyCAD.ExtremaCurveCurve_GetParameter1(self, idx)

    def GetParameter2(self, idx):
        return _PyAnyCAD.ExtremaCurveCurve_GetParameter2(self, idx)

    def GetSquareDistance(self, idx):
        return _PyAnyCAD.ExtremaCurveCurve_GetSquareDistance(self, idx)

    def IsParallel(self):
        return _PyAnyCAD.ExtremaCurveCurve_IsParallel(self)

# Register ExtremaCurveCurve in _PyAnyCAD:
_PyAnyCAD.ExtremaCurveCurve_swigregister(ExtremaCurveCurve)

class ExtremaCurveSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaCurveSurface_swiginit(self, _PyAnyCAD.new_ExtremaCurveSurface())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaCurveSurface

    def SetSurface(self, surface):
        return _PyAnyCAD.ExtremaCurveSurface_SetSurface(self, surface)

    def Perform(self, curve):
        return _PyAnyCAD.ExtremaCurveSurface_Perform(self, curve)

    def GetPointCount(self):
        return _PyAnyCAD.ExtremaCurveSurface_GetPointCount(self)

    def GetPoint(self, idx):
        return _PyAnyCAD.ExtremaCurveSurface_GetPoint(self, idx)

    def GetParameterU(self, idx):
        return _PyAnyCAD.ExtremaCurveSurface_GetParameterU(self, idx)

    def GetParameterV(self, idx):
        return _PyAnyCAD.ExtremaCurveSurface_GetParameterV(self, idx)

    def GetParameterW(self, idx):
        return _PyAnyCAD.ExtremaCurveSurface_GetParameterW(self, idx)

# Register ExtremaCurveSurface in _PyAnyCAD:
_PyAnyCAD.ExtremaCurveSurface_swigregister(ExtremaCurveSurface)

class ExtremaPointCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaPointCurve_swiginit(self, _PyAnyCAD.new_ExtremaPointCurve())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaPointCurve

    def Initialize(self, curve1, pt):
        return _PyAnyCAD.ExtremaPointCurve_Initialize(self, curve1, pt)

    def GetPointCount(self):
        return _PyAnyCAD.ExtremaPointCurve_GetPointCount(self)

    def GetPoint(self, idx):
        return _PyAnyCAD.ExtremaPointCurve_GetPoint(self, idx)

    def GetParameter(self, idx):
        return _PyAnyCAD.ExtremaPointCurve_GetParameter(self, idx)

    def GetSquareDistance(self, idx):
        return _PyAnyCAD.ExtremaPointCurve_GetSquareDistance(self, idx)

# Register ExtremaPointCurve in _PyAnyCAD:
_PyAnyCAD.ExtremaPointCurve_swigregister(ExtremaPointCurve)

class ExtremaPointSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaPointSurface_swiginit(self, _PyAnyCAD.new_ExtremaPointSurface())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaPointSurface

    def Initialize(self, *args):
        return _PyAnyCAD.ExtremaPointSurface_Initialize(self, *args)

    def GetPointCount(self):
        return _PyAnyCAD.ExtremaPointSurface_GetPointCount(self)

    def GetPoint(self, idx):
        return _PyAnyCAD.ExtremaPointSurface_GetPoint(self, idx)

    def GetParameter(self, idx):
        return _PyAnyCAD.ExtremaPointSurface_GetParameter(self, idx)

    def GetSquareDistance(self, idx):
        return _PyAnyCAD.ExtremaPointSurface_GetSquareDistance(self, idx)

# Register ExtremaPointSurface in _PyAnyCAD:
_PyAnyCAD.ExtremaPointSurface_swigregister(ExtremaPointSurface)

class ExtremaSurfacePoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ExtremaSurfacePoint_swiginit(self, _PyAnyCAD.new_ExtremaSurfacePoint(*args))

    def GetPoint(self):
        return _PyAnyCAD.ExtremaSurfacePoint_GetPoint(self)

    def GetParameterU(self):
        return _PyAnyCAD.ExtremaSurfacePoint_GetParameterU(self)

    def GetParameterV(self):
        return _PyAnyCAD.ExtremaSurfacePoint_GetParameterV(self)
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaSurfacePoint

# Register ExtremaSurfacePoint in _PyAnyCAD:
_PyAnyCAD.ExtremaSurfacePoint_swigregister(ExtremaSurfacePoint)

class ExtremaSurfacePointPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p1, p2):
        _PyAnyCAD.ExtremaSurfacePointPair_swiginit(self, _PyAnyCAD.new_ExtremaSurfacePointPair(p1, p2))

    def GetPoint1(self):
        return _PyAnyCAD.ExtremaSurfacePointPair_GetPoint1(self)

    def GetPoint2(self):
        return _PyAnyCAD.ExtremaSurfacePointPair_GetPoint2(self)
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaSurfacePointPair

# Register ExtremaSurfacePointPair in _PyAnyCAD:
_PyAnyCAD.ExtremaSurfacePointPair_swigregister(ExtremaSurfacePointPair)

class ExtremaSurfaceSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaSurfaceSurface_swiginit(self, _PyAnyCAD.new_ExtremaSurfaceSurface())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaSurfaceSurface

    def Initialize(self, s1, s2, tolS1, tolS2):
        return _PyAnyCAD.ExtremaSurfaceSurface_Initialize(self, s1, s2, tolS1, tolS2)

    def GetPointCount(self):
        return _PyAnyCAD.ExtremaSurfaceSurface_GetPointCount(self)

    def GetPoint(self, idx):
        return _PyAnyCAD.ExtremaSurfaceSurface_GetPoint(self, idx)

    def GetSquareDistance(self, idx):
        return _PyAnyCAD.ExtremaSurfaceSurface_GetSquareDistance(self, idx)

    def IsParallel(self):
        return _PyAnyCAD.ExtremaSurfaceSurface_IsParallel(self)

# Register ExtremaSurfaceSurface in _PyAnyCAD:
_PyAnyCAD.ExtremaSurfaceSurface_swigregister(ExtremaSurfaceSurface)

class ExtremaShapeShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaShapeShape_swiginit(self, _PyAnyCAD.new_ExtremaShapeShape())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaShapeShape

    def Initialize(self, shape1, shape2, deflection):
        return _PyAnyCAD.ExtremaShapeShape_Initialize(self, shape1, shape2, deflection)

    def GetMinimumDistance(self):
        return _PyAnyCAD.ExtremaShapeShape_GetMinimumDistance(self)

    def IsInnerSolution(self):
        return _PyAnyCAD.ExtremaShapeShape_IsInnerSolution(self)

    def GetPointCount(self):
        return _PyAnyCAD.ExtremaShapeShape_GetPointCount(self)

    def GetPointOnShape1(self, idx):
        return _PyAnyCAD.ExtremaShapeShape_GetPointOnShape1(self, idx)

    def GetPointOnShape2(self, idx):
        return _PyAnyCAD.ExtremaShapeShape_GetPointOnShape2(self, idx)

    def GetSupportShape1(self, N):
        return _PyAnyCAD.ExtremaShapeShape_GetSupportShape1(self, N)

    def GetSupportShape2(self, N):
        return _PyAnyCAD.ExtremaShapeShape_GetSupportShape2(self, N)

    def GetParameterOnEdgeS1(self, N):
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnEdgeS1(self, N)

    def GetParameterOnEdgeS2(self, N):
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnEdgeS2(self, N)

    def GetParameterOnFaceS1(self, N):
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnFaceS1(self, N)

    def GetParameterOnFaceS2(self, N):
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnFaceS2(self, N)

# Register ExtremaShapeShape in _PyAnyCAD:
_PyAnyCAD.ExtremaShapeShape_swigregister(ExtremaShapeShape)

class FaceIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, face, tolerance):
        _PyAnyCAD.FaceIntersector_swiginit(self, _PyAnyCAD.new_FaceIntersector(face, tolerance))
    __swig_destroy__ = _PyAnyCAD.delete_FaceIntersector

    def IsValid(self):
        return _PyAnyCAD.FaceIntersector_IsValid(self)

    def Perform(self, *args):
        return _PyAnyCAD.FaceIntersector_Perform(self, *args)

    def IsParallel(self):
        return _PyAnyCAD.FaceIntersector_IsParallel(self)

    def GetPointCount(self):
        return _PyAnyCAD.FaceIntersector_GetPointCount(self)

    def UParameter(self, idx):
        return _PyAnyCAD.FaceIntersector_UParameter(self, idx)

    def VParameter(self, idx):
        return _PyAnyCAD.FaceIntersector_VParameter(self, idx)

    def WParameter(self, idx):
        return _PyAnyCAD.FaceIntersector_WParameter(self, idx)

    def GetPoint(self, idx):
        return _PyAnyCAD.FaceIntersector_GetPoint(self, idx)

# Register FaceIntersector in _PyAnyCAD:
_PyAnyCAD.FaceIntersector_swigregister(FaceIntersector)

class ShapeIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape, tolerance):
        _PyAnyCAD.ShapeIntersector_swiginit(self, _PyAnyCAD.new_ShapeIntersector(shape, tolerance))
    __swig_destroy__ = _PyAnyCAD.delete_ShapeIntersector

    def IsValid(self):
        return _PyAnyCAD.ShapeIntersector_IsValid(self)

    def Perform(self, *args):
        return _PyAnyCAD.ShapeIntersector_Perform(self, *args)

    def GetPointCount(self):
        return _PyAnyCAD.ShapeIntersector_GetPointCount(self)

    def UParameter(self, idx):
        return _PyAnyCAD.ShapeIntersector_UParameter(self, idx)

    def VParameter(self, idx):
        return _PyAnyCAD.ShapeIntersector_VParameter(self, idx)

    def WParameter(self, idx):
        return _PyAnyCAD.ShapeIntersector_WParameter(self, idx)

    def GetPoint(self, idx):
        return _PyAnyCAD.ShapeIntersector_GetPoint(self, idx)

# Register ShapeIntersector in _PyAnyCAD:
_PyAnyCAD.ShapeIntersector_swigregister(ShapeIntersector)

class EdgeExplor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.EdgeExplor_swiginit(self, _PyAnyCAD.new_EdgeExplor(*args))

    def Initialize(self, shape):
        return _PyAnyCAD.EdgeExplor_Initialize(self, shape)

    def GetSharedEdges(self):
        return _PyAnyCAD.EdgeExplor_GetSharedEdges(self)

    def GetFreeEdges(self):
        return _PyAnyCAD.EdgeExplor_GetFreeEdges(self)

    def GetStandaloneEdges(self):
        return _PyAnyCAD.EdgeExplor_GetStandaloneEdges(self)
    __swig_destroy__ = _PyAnyCAD.delete_EdgeExplor

# Register EdgeExplor in _PyAnyCAD:
_PyAnyCAD.EdgeExplor_swigregister(EdgeExplor)

class WireExplor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.WireExplor_swiginit(self, _PyAnyCAD.new_WireExplor(*args))

    def Initialize(self, face):
        return _PyAnyCAD.WireExplor_Initialize(self, face)

    def GetInnerWires(self):
        return _PyAnyCAD.WireExplor_GetInnerWires(self)

    def GetOuterWire(self):
        return _PyAnyCAD.WireExplor_GetOuterWire(self)
    __swig_destroy__ = _PyAnyCAD.delete_WireExplor

# Register WireExplor in _PyAnyCAD:
_PyAnyCAD.WireExplor_swigregister(WireExplor)

class EdgeVertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    START = _PyAnyCAD.EdgeVertex_START
    END = _PyAnyCAD.EdgeVertex_END

    def GetEdgeIdx(self):
        return _PyAnyCAD.EdgeVertex_GetEdgeIdx(self)

    def SetEdgeIdx(self, val):
        return _PyAnyCAD.EdgeVertex_SetEdgeIdx(self, val)

    def GetPoint(self):
        return _PyAnyCAD.EdgeVertex_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.EdgeVertex_SetPoint(self, val)

    def GetKey(self):
        return _PyAnyCAD.EdgeVertex_GetKey(self)

    def GetPointType(self):
        return _PyAnyCAD.EdgeVertex_GetPointType(self)

    def SetPointType(self, val):
        return _PyAnyCAD.EdgeVertex_SetPointType(self, val)

    def __init__(self, *args):
        _PyAnyCAD.EdgeVertex_swiginit(self, _PyAnyCAD.new_EdgeVertex(*args))

    def IsStartPoint(self):
        return _PyAnyCAD.EdgeVertex_IsStartPoint(self)

    def IsEndPoint(self):
        return _PyAnyCAD.EdgeVertex_IsEndPoint(self)

    def IsSame(self, vertex):
        return _PyAnyCAD.EdgeVertex_IsSame(self, vertex)
    __swig_destroy__ = _PyAnyCAD.delete_EdgeVertex

# Register EdgeVertex in _PyAnyCAD:
_PyAnyCAD.EdgeVertex_swigregister(EdgeVertex)

class ShapeExplor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ShapeExplor_swiginit(self, _PyAnyCAD.new_ShapeExplor())

    def GetTolerance(self):
        return _PyAnyCAD.ShapeExplor_GetTolerance(self)

    def SetTolerance(self, val):
        return _PyAnyCAD.ShapeExplor_SetTolerance(self, val)

    def GetBoundingBox(self):
        return _PyAnyCAD.ShapeExplor_GetBoundingBox(self)

    def AddShape(self, shape):
        return _PyAnyCAD.ShapeExplor_AddShape(self, shape)

    def Build(self):
        return _PyAnyCAD.ShapeExplor_Build(self)

    def GetFaceCount(self):
        return _PyAnyCAD.ShapeExplor_GetFaceCount(self)

    def GetFace(self, idx):
        return _PyAnyCAD.ShapeExplor_GetFace(self, idx)

    def GetBBox(self, idx):
        return _PyAnyCAD.ShapeExplor_GetBBox(self, idx)

    def GetEdgeCountOfFace(self, faceIdx):
        return _PyAnyCAD.ShapeExplor_GetEdgeCountOfFace(self, faceIdx)

    def GetEdgeOfFace(self, faceIdx, edgeIdx):
        return _PyAnyCAD.ShapeExplor_GetEdgeOfFace(self, faceIdx, edgeIdx)

    def GetEdgeCount(self):
        return _PyAnyCAD.ShapeExplor_GetEdgeCount(self)

    def GetEdge(self, idx):
        return _PyAnyCAD.ShapeExplor_GetEdge(self, idx)

    def GetFaceOfEdge(self, idx):
        return _PyAnyCAD.ShapeExplor_GetFaceOfEdge(self, idx)

    def IsEdgeOnFace(self, edgeIdx, faceIdx):
        return _PyAnyCAD.ShapeExplor_IsEdgeOnFace(self, edgeIdx, faceIdx)

    def FindSiblingFaces(self, *args):
        return _PyAnyCAD.ShapeExplor_FindSiblingFaces(self, *args)

    def IsSiblingEdges(self, edgeIdxA, edgeIdxB):
        return _PyAnyCAD.ShapeExplor_IsSiblingEdges(self, edgeIdxA, edgeIdxB)

    def GetStartVertexOfEdge(self, edgeIdx):
        return _PyAnyCAD.ShapeExplor_GetStartVertexOfEdge(self, edgeIdx)

    def GetEndVertexOfEdge(self, edgeIdx):
        return _PyAnyCAD.ShapeExplor_GetEndVertexOfEdge(self, edgeIdx)

    def GetVertex(self, vertexIdx):
        return _PyAnyCAD.ShapeExplor_GetVertex(self, vertexIdx)

    def GetConnectedVertices(self, vertexIdx):
        return _PyAnyCAD.ShapeExplor_GetConnectedVertices(self, vertexIdx)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeExplor

# Register ShapeExplor in _PyAnyCAD:
_PyAnyCAD.ShapeExplor_swigregister(ShapeExplor)

class SolidExplor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.SolidExplor_swiginit(self, _PyAnyCAD.new_SolidExplor())
    __swig_destroy__ = _PyAnyCAD.delete_SolidExplor

    def GetSolid(self):
        return _PyAnyCAD.SolidExplor_GetSolid(self)

    def Initialize(self, solid):
        return _PyAnyCAD.SolidExplor_Initialize(self, solid)

    def GetEdges(self):
        return _PyAnyCAD.SolidExplor_GetEdges(self)

    def GetEdgeCount(self):
        return _PyAnyCAD.SolidExplor_GetEdgeCount(self)

    def GetEdge(self, idx):
        return _PyAnyCAD.SolidExplor_GetEdge(self, idx)

    def GetEdgeIndex(self, edge):
        return _PyAnyCAD.SolidExplor_GetEdgeIndex(self, edge)

    def GetFaces(self):
        return _PyAnyCAD.SolidExplor_GetFaces(self)

    def GetFaceCount(self):
        return _PyAnyCAD.SolidExplor_GetFaceCount(self)

    def GetFace(self, idx):
        return _PyAnyCAD.SolidExplor_GetFace(self, idx)

    def GetFaceIndex(self, face):
        return _PyAnyCAD.SolidExplor_GetFaceIndex(self, face)

    def GetSharedFaces(self, edge):
        return _PyAnyCAD.SolidExplor_GetSharedFaces(self, edge)

    def GetSharedFaceIDs(self, edge):
        return _PyAnyCAD.SolidExplor_GetSharedFaceIDs(self, edge)

    def GetSharedEdges(self, face1, face2):
        return _PyAnyCAD.SolidExplor_GetSharedEdges(self, face1, face2)

    def GetSharedEdgeIDs(self, face1, face2):
        return _PyAnyCAD.SolidExplor_GetSharedEdgeIDs(self, face1, face2)

# Register SolidExplor in _PyAnyCAD:
_PyAnyCAD.SolidExplor_swigregister(SolidExplor)

EnumGeomJoinType_Arc = _PyAnyCAD.EnumGeomJoinType_Arc
EnumGeomJoinType_Tangent = _PyAnyCAD.EnumGeomJoinType_Tangent
EnumGeomJoinType_Intersection = _PyAnyCAD.EnumGeomJoinType_Intersection
EnumSweepTransitionMode_Transformed = _PyAnyCAD.EnumSweepTransitionMode_Transformed
EnumSweepTransitionMode_RightCorner = _PyAnyCAD.EnumSweepTransitionMode_RightCorner
EnumSweepTransitionMode_RoundCorner = _PyAnyCAD.EnumSweepTransitionMode_RoundCorner
EnumGeomFillTrihedron_CorrectedFrenet = _PyAnyCAD.EnumGeomFillTrihedron_CorrectedFrenet
EnumGeomFillTrihedron_Fixed = _PyAnyCAD.EnumGeomFillTrihedron_Fixed
EnumGeomFillTrihedron_Frenet = _PyAnyCAD.EnumGeomFillTrihedron_Frenet
EnumGeomFillTrihedron_ConstantNormal = _PyAnyCAD.EnumGeomFillTrihedron_ConstantNormal
EnumGeomFillTrihedron_Darboux = _PyAnyCAD.EnumGeomFillTrihedron_Darboux
EnumGeomFillTrihedron_GuideAC = _PyAnyCAD.EnumGeomFillTrihedron_GuideAC
EnumGeomFillTrihedron_GuidePlan = _PyAnyCAD.EnumGeomFillTrihedron_GuidePlan
EnumGeomFillTrihedron_GuideACWithContact = _PyAnyCAD.EnumGeomFillTrihedron_GuideACWithContact
EnumGeomFillTrihedron_GuidePlanWithContact = _PyAnyCAD.EnumGeomFillTrihedron_GuidePlanWithContact
EnumGeomFillTrihedron_DiscreteTrihedron = _PyAnyCAD.EnumGeomFillTrihedron_DiscreteTrihedron
EnumConvertParameterisationType_TgtThetaOver2 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2
EnumConvertParameterisationType_TgtThetaOver2_1 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_1
EnumConvertParameterisationType_TgtThetaOver2_2 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_2
EnumConvertParameterisationType_TgtThetaOver2_3 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_3
EnumConvertParameterisationType_TgtThetaOver2_4 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_4
EnumConvertParameterisationType_QuasiAngular = _PyAnyCAD.EnumConvertParameterisationType_QuasiAngular
EnumConvertParameterisationType_RationalC1 = _PyAnyCAD.EnumConvertParameterisationType_RationalC1
EnumConvertParameterisationType_Polynomial = _PyAnyCAD.EnumConvertParameterisationType_Polynomial
EnumSurfaceBuildAlgorithm_ConstrainedFilling = _PyAnyCAD.EnumSurfaceBuildAlgorithm_ConstrainedFilling
EnumSurfaceBuildAlgorithm_StretchStyle = _PyAnyCAD.EnumSurfaceBuildAlgorithm_StretchStyle
EnumSurfaceBuildAlgorithm_CoonsStyle = _PyAnyCAD.EnumSurfaceBuildAlgorithm_CoonsStyle
EnumSurfaceBuildAlgorithm_CurvedStyle = _PyAnyCAD.EnumSurfaceBuildAlgorithm_CurvedStyle
class ModelingEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Initialize():
        return _PyAnyCAD.ModelingEngine_Initialize()
    __swig_destroy__ = _PyAnyCAD.delete_ModelingEngine

# Register ModelingEngine in _PyAnyCAD:
_PyAnyCAD.ModelingEngine_swigregister(ModelingEngine)

def ModelingEngine_Initialize():
    return _PyAnyCAD.ModelingEngine_Initialize()

class ShapeBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeCompound(shapes):
        return _PyAnyCAD.ShapeBuilder_MakeCompound(shapes)

    @staticmethod
    def MakeSphere(center, radius):
        return _PyAnyCAD.ShapeBuilder_MakeSphere(center, radius)

    @staticmethod
    def MakeBox(ax, dx, dy, dz):
        return _PyAnyCAD.ShapeBuilder_MakeBox(ax, dx, dy, dz)

    @staticmethod
    def MakeCylinder(ax, radius, height, angle):
        return _PyAnyCAD.ShapeBuilder_MakeCylinder(ax, radius, height, angle)

    @staticmethod
    def MakeCone(ax, radius, radiusTop, height, angle):
        return _PyAnyCAD.ShapeBuilder_MakeCone(ax, radius, radiusTop, height, angle)

    @staticmethod
    def MakeTorus(majorR, minorR, ax, closeAngle):
        return _PyAnyCAD.ShapeBuilder_MakeTorus(majorR, minorR, ax, closeAngle)

    @staticmethod
    def MakeTube(center, dir, innerRadius, thickness, len):
        return _PyAnyCAD.ShapeBuilder_MakeTube(center, dir, innerRadius, thickness, len)

    @staticmethod
    def MakePyramid(ax, number, radius, height):
        return _PyAnyCAD.ShapeBuilder_MakePyramid(ax, number, radius, height)

    @staticmethod
    def MakeHalfSpace(face, refPoint):
        return _PyAnyCAD.ShapeBuilder_MakeHalfSpace(face, refPoint)

    @staticmethod
    def MakeSolid(compound):
        return _PyAnyCAD.ShapeBuilder_MakeSolid(compound)

    @staticmethod
    def FixSolid(solid):
        return _PyAnyCAD.ShapeBuilder_FixSolid(solid)

    @staticmethod
    def FixShape(shape):
        return _PyAnyCAD.ShapeBuilder_FixShape(shape)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeBuilder

# Register ShapeBuilder in _PyAnyCAD:
_PyAnyCAD.ShapeBuilder_swigregister(ShapeBuilder)

def ShapeBuilder_MakeCompound(shapes):
    return _PyAnyCAD.ShapeBuilder_MakeCompound(shapes)

def ShapeBuilder_MakeSphere(center, radius):
    return _PyAnyCAD.ShapeBuilder_MakeSphere(center, radius)

def ShapeBuilder_MakeBox(ax, dx, dy, dz):
    return _PyAnyCAD.ShapeBuilder_MakeBox(ax, dx, dy, dz)

def ShapeBuilder_MakeCylinder(ax, radius, height, angle):
    return _PyAnyCAD.ShapeBuilder_MakeCylinder(ax, radius, height, angle)

def ShapeBuilder_MakeCone(ax, radius, radiusTop, height, angle):
    return _PyAnyCAD.ShapeBuilder_MakeCone(ax, radius, radiusTop, height, angle)

def ShapeBuilder_MakeTorus(majorR, minorR, ax, closeAngle):
    return _PyAnyCAD.ShapeBuilder_MakeTorus(majorR, minorR, ax, closeAngle)

def ShapeBuilder_MakeTube(center, dir, innerRadius, thickness, len):
    return _PyAnyCAD.ShapeBuilder_MakeTube(center, dir, innerRadius, thickness, len)

def ShapeBuilder_MakePyramid(ax, number, radius, height):
    return _PyAnyCAD.ShapeBuilder_MakePyramid(ax, number, radius, height)

def ShapeBuilder_MakeHalfSpace(face, refPoint):
    return _PyAnyCAD.ShapeBuilder_MakeHalfSpace(face, refPoint)

def ShapeBuilder_MakeSolid(compound):
    return _PyAnyCAD.ShapeBuilder_MakeSolid(compound)

def ShapeBuilder_FixSolid(solid):
    return _PyAnyCAD.ShapeBuilder_FixSolid(solid)

def ShapeBuilder_FixShape(shape):
    return _PyAnyCAD.ShapeBuilder_FixShape(shape)

class SketchBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeVertex(pt):
        return _PyAnyCAD.SketchBuilder_MakeVertex(pt)

    @staticmethod
    def MakeLine(*args):
        return _PyAnyCAD.SketchBuilder_MakeLine(*args)

    @staticmethod
    def MakeCircle(*args):
        return _PyAnyCAD.SketchBuilder_MakeCircle(*args)

    @staticmethod
    def MakeEllipse(*args):
        return _PyAnyCAD.SketchBuilder_MakeEllipse(*args)

    @staticmethod
    def MakeArcOfCircle(*args):
        return _PyAnyCAD.SketchBuilder_MakeArcOfCircle(*args)

    @staticmethod
    def MakeArcOfEllipse(elips, start, end):
        return _PyAnyCAD.SketchBuilder_MakeArcOfEllipse(elips, start, end)

    @staticmethod
    def MakeHypr(hypr, p1, p2):
        return _PyAnyCAD.SketchBuilder_MakeHypr(hypr, p1, p2)

    @staticmethod
    def MakeParab(parab, p1, p2):
        return _PyAnyCAD.SketchBuilder_MakeParab(parab, p1, p2)

    @staticmethod
    def MakeRectangle(coord, len, width, radius, bFilled):
        return _PyAnyCAD.SketchBuilder_MakeRectangle(coord, len, width, radius, bFilled)

    @staticmethod
    def MakePolygon(*args):
        return _PyAnyCAD.SketchBuilder_MakePolygon(*args)

    @staticmethod
    def MakeBSpline(*args):
        return _PyAnyCAD.SketchBuilder_MakeBSpline(*args)

    @staticmethod
    def MakeSpiral(radius, interval, count, ax, reversed=False):
        return _PyAnyCAD.SketchBuilder_MakeSpiral(radius, interval, count, ax, reversed)

    @staticmethod
    def ToBSplineCurve(*args):
        return _PyAnyCAD.SketchBuilder_ToBSplineCurve(*args)

    @staticmethod
    def MakeWire(*args):
        return _PyAnyCAD.SketchBuilder_MakeWire(*args)

    @staticmethod
    def ConnectEdgesToWires(edges, tol, sharedVeterx):
        return _PyAnyCAD.SketchBuilder_ConnectEdgesToWires(edges, tol, sharedVeterx)

    @staticmethod
    def MakePolygonFace(points):
        return _PyAnyCAD.SketchBuilder_MakePolygonFace(points)

    @staticmethod
    def MakePlanarFace(*args):
        return _PyAnyCAD.SketchBuilder_MakePlanarFace(*args)

    @staticmethod
    def TrimCurve(curve, startP, endP):
        return _PyAnyCAD.SketchBuilder_TrimCurve(curve, startP, endP)

    @staticmethod
    def MakeCurveOnSurface(curve2d, surface):
        return _PyAnyCAD.SketchBuilder_MakeCurveOnSurface(curve2d, surface)

    @staticmethod
    def MakeCurve(curve, startU, lastU):
        return _PyAnyCAD.SketchBuilder_MakeCurve(curve, startU, lastU)
    __swig_destroy__ = _PyAnyCAD.delete_SketchBuilder

# Register SketchBuilder in _PyAnyCAD:
_PyAnyCAD.SketchBuilder_swigregister(SketchBuilder)

def SketchBuilder_MakeVertex(pt):
    return _PyAnyCAD.SketchBuilder_MakeVertex(pt)

def SketchBuilder_MakeLine(*args):
    return _PyAnyCAD.SketchBuilder_MakeLine(*args)

def SketchBuilder_MakeCircle(*args):
    return _PyAnyCAD.SketchBuilder_MakeCircle(*args)

def SketchBuilder_MakeEllipse(*args):
    return _PyAnyCAD.SketchBuilder_MakeEllipse(*args)

def SketchBuilder_MakeArcOfCircle(*args):
    return _PyAnyCAD.SketchBuilder_MakeArcOfCircle(*args)

def SketchBuilder_MakeArcOfEllipse(elips, start, end):
    return _PyAnyCAD.SketchBuilder_MakeArcOfEllipse(elips, start, end)

def SketchBuilder_MakeHypr(hypr, p1, p2):
    return _PyAnyCAD.SketchBuilder_MakeHypr(hypr, p1, p2)

def SketchBuilder_MakeParab(parab, p1, p2):
    return _PyAnyCAD.SketchBuilder_MakeParab(parab, p1, p2)

def SketchBuilder_MakeRectangle(coord, len, width, radius, bFilled):
    return _PyAnyCAD.SketchBuilder_MakeRectangle(coord, len, width, radius, bFilled)

def SketchBuilder_MakePolygon(*args):
    return _PyAnyCAD.SketchBuilder_MakePolygon(*args)

def SketchBuilder_MakeBSpline(*args):
    return _PyAnyCAD.SketchBuilder_MakeBSpline(*args)

def SketchBuilder_MakeSpiral(radius, interval, count, ax, reversed=False):
    return _PyAnyCAD.SketchBuilder_MakeSpiral(radius, interval, count, ax, reversed)

def SketchBuilder_ToBSplineCurve(*args):
    return _PyAnyCAD.SketchBuilder_ToBSplineCurve(*args)

def SketchBuilder_MakeWire(*args):
    return _PyAnyCAD.SketchBuilder_MakeWire(*args)

def SketchBuilder_ConnectEdgesToWires(edges, tol, sharedVeterx):
    return _PyAnyCAD.SketchBuilder_ConnectEdgesToWires(edges, tol, sharedVeterx)

def SketchBuilder_MakePolygonFace(points):
    return _PyAnyCAD.SketchBuilder_MakePolygonFace(points)

def SketchBuilder_MakePlanarFace(*args):
    return _PyAnyCAD.SketchBuilder_MakePlanarFace(*args)

def SketchBuilder_TrimCurve(curve, startP, endP):
    return _PyAnyCAD.SketchBuilder_TrimCurve(curve, startP, endP)

def SketchBuilder_MakeCurveOnSurface(curve2d, surface):
    return _PyAnyCAD.SketchBuilder_MakeCurveOnSurface(curve2d, surface)

def SketchBuilder_MakeCurve(curve, startU, lastU):
    return _PyAnyCAD.SketchBuilder_MakeCurve(curve, startU, lastU)

class FeatureTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Extrude(base, height, _dir):
        return _PyAnyCAD.FeatureTool_Extrude(base, height, _dir)

    @staticmethod
    def Fillet(*args):
        return _PyAnyCAD.FeatureTool_Fillet(*args)

    @staticmethod
    def Chamfer(*args):
        return _PyAnyCAD.FeatureTool_Chamfer(*args)

    @staticmethod
    def Revol(base, ax, angle):
        return _PyAnyCAD.FeatureTool_Revol(base, ax, angle)

    @staticmethod
    def Loft(*args):
        return _PyAnyCAD.FeatureTool_Loft(*args)

    @staticmethod
    def Thickness(solid, offset, faceIdx):
        return _PyAnyCAD.FeatureTool_Thickness(solid, offset, faceIdx)

    @staticmethod
    def OffsetWire(wire, offset, altitude, jointType, openning):
        return _PyAnyCAD.FeatureTool_OffsetWire(wire, offset, altitude, jointType, openning)

    @staticmethod
    def OffsetShape(shape, offset, jointType):
        return _PyAnyCAD.FeatureTool_OffsetShape(shape, offset, jointType)

    @staticmethod
    def MiddlePath(shape, base1, base2):
        return _PyAnyCAD.FeatureTool_MiddlePath(shape, base1, base2)

    @staticmethod
    def Evolved(section, path, joinType, bSolid):
        return _PyAnyCAD.FeatureTool_Evolved(section, path, joinType, bSolid)

    @staticmethod
    def Sweep(section, path, type):
        return _PyAnyCAD.FeatureTool_Sweep(section, path, type)

    @staticmethod
    def SweepByEvolution(section, path, evolutionSpline, bSolid):
        return _PyAnyCAD.FeatureTool_SweepByEvolution(section, path, evolutionSpline, bSolid)

    @staticmethod
    def SweepByFrenet(section, path, mode, bSolid, withContact=True, withCorrection=True):
        return _PyAnyCAD.FeatureTool_SweepByFrenet(section, path, mode, bSolid, withContact, withCorrection)

    @staticmethod
    def SweepByFrenet2(sections, path, mode, bSolid):
        return _PyAnyCAD.FeatureTool_SweepByFrenet2(sections, path, mode, bSolid)

    @staticmethod
    def SweepBySections(*args):
        return _PyAnyCAD.FeatureTool_SweepBySections(*args)

    @staticmethod
    def Defeaturing(solid, faceToRemove):
        return _PyAnyCAD.FeatureTool_Defeaturing(solid, faceToRemove)

    @staticmethod
    def ExtendFace(face, extend):
        return _PyAnyCAD.FeatureTool_ExtendFace(face, extend)
    __swig_destroy__ = _PyAnyCAD.delete_FeatureTool

# Register FeatureTool in _PyAnyCAD:
_PyAnyCAD.FeatureTool_swigregister(FeatureTool)

def FeatureTool_Extrude(base, height, _dir):
    return _PyAnyCAD.FeatureTool_Extrude(base, height, _dir)

def FeatureTool_Fillet(*args):
    return _PyAnyCAD.FeatureTool_Fillet(*args)

def FeatureTool_Chamfer(*args):
    return _PyAnyCAD.FeatureTool_Chamfer(*args)

def FeatureTool_Revol(base, ax, angle):
    return _PyAnyCAD.FeatureTool_Revol(base, ax, angle)

def FeatureTool_Loft(*args):
    return _PyAnyCAD.FeatureTool_Loft(*args)

def FeatureTool_Thickness(solid, offset, faceIdx):
    return _PyAnyCAD.FeatureTool_Thickness(solid, offset, faceIdx)

def FeatureTool_OffsetWire(wire, offset, altitude, jointType, openning):
    return _PyAnyCAD.FeatureTool_OffsetWire(wire, offset, altitude, jointType, openning)

def FeatureTool_OffsetShape(shape, offset, jointType):
    return _PyAnyCAD.FeatureTool_OffsetShape(shape, offset, jointType)

def FeatureTool_MiddlePath(shape, base1, base2):
    return _PyAnyCAD.FeatureTool_MiddlePath(shape, base1, base2)

def FeatureTool_Evolved(section, path, joinType, bSolid):
    return _PyAnyCAD.FeatureTool_Evolved(section, path, joinType, bSolid)

def FeatureTool_Sweep(section, path, type):
    return _PyAnyCAD.FeatureTool_Sweep(section, path, type)

def FeatureTool_SweepByEvolution(section, path, evolutionSpline, bSolid):
    return _PyAnyCAD.FeatureTool_SweepByEvolution(section, path, evolutionSpline, bSolid)

def FeatureTool_SweepByFrenet(section, path, mode, bSolid, withContact=True, withCorrection=True):
    return _PyAnyCAD.FeatureTool_SweepByFrenet(section, path, mode, bSolid, withContact, withCorrection)

def FeatureTool_SweepByFrenet2(sections, path, mode, bSolid):
    return _PyAnyCAD.FeatureTool_SweepByFrenet2(sections, path, mode, bSolid)

def FeatureTool_SweepBySections(*args):
    return _PyAnyCAD.FeatureTool_SweepBySections(*args)

def FeatureTool_Defeaturing(solid, faceToRemove):
    return _PyAnyCAD.FeatureTool_Defeaturing(solid, faceToRemove)

def FeatureTool_ExtendFace(face, extend):
    return _PyAnyCAD.FeatureTool_ExtendFace(face, extend)

class BooleanTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cut(shapeA, shapeB):
        return _PyAnyCAD.BooleanTool_Cut(shapeA, shapeB)

    @staticmethod
    def Fuse(shapeA, shapeB):
        return _PyAnyCAD.BooleanTool_Fuse(shapeA, shapeB)

    @staticmethod
    def Common(shapeA, shapeB):
        return _PyAnyCAD.BooleanTool_Common(shapeA, shapeB)

    @staticmethod
    def Section(shapeA, shapeB):
        return _PyAnyCAD.BooleanTool_Section(shapeA, shapeB)

    @staticmethod
    def Split(shape, tool):
        return _PyAnyCAD.BooleanTool_Split(shape, tool)

    @staticmethod
    def SplitCurve(curve, point):
        return _PyAnyCAD.BooleanTool_SplitCurve(curve, point)
    __swig_destroy__ = _PyAnyCAD.delete_BooleanTool

# Register BooleanTool in _PyAnyCAD:
_PyAnyCAD.BooleanTool_swigregister(BooleanTool)

def BooleanTool_Cut(shapeA, shapeB):
    return _PyAnyCAD.BooleanTool_Cut(shapeA, shapeB)

def BooleanTool_Fuse(shapeA, shapeB):
    return _PyAnyCAD.BooleanTool_Fuse(shapeA, shapeB)

def BooleanTool_Common(shapeA, shapeB):
    return _PyAnyCAD.BooleanTool_Common(shapeA, shapeB)

def BooleanTool_Section(shapeA, shapeB):
    return _PyAnyCAD.BooleanTool_Section(shapeA, shapeB)

def BooleanTool_Split(shape, tool):
    return _PyAnyCAD.BooleanTool_Split(shape, tool)

def BooleanTool_SplitCurve(curve, point):
    return _PyAnyCAD.BooleanTool_SplitCurve(curve, point)

class TransformTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Translate(pShape, vec):
        return _PyAnyCAD.TransformTool_Translate(pShape, vec)

    @staticmethod
    def Rotation(pShape, axis, angle):
        return _PyAnyCAD.TransformTool_Rotation(pShape, axis, angle)

    @staticmethod
    def Scale(pShape, center, scale):
        return _PyAnyCAD.TransformTool_Scale(pShape, center, scale)

    @staticmethod
    def Mirror(shape, axis):
        return _PyAnyCAD.TransformTool_Mirror(shape, axis)

    @staticmethod
    def Transform(pShape, trf):
        return _PyAnyCAD.TransformTool_Transform(pShape, trf)

    @staticmethod
    def TransformByMatrix(pShape, matrix):
        return _PyAnyCAD.TransformTool_TransformByMatrix(pShape, matrix)

    @staticmethod
    def ToMatrix4(trf):
        return _PyAnyCAD.TransformTool_ToMatrix4(trf)

    @staticmethod
    def ToTransform(mat):
        return _PyAnyCAD.TransformTool_ToTransform(mat)

    @staticmethod
    def Decompose(mat, pos, rot, scale):
        return _PyAnyCAD.TransformTool_Decompose(mat, pos, rot, scale)
    __swig_destroy__ = _PyAnyCAD.delete_TransformTool

# Register TransformTool in _PyAnyCAD:
_PyAnyCAD.TransformTool_swigregister(TransformTool)

def TransformTool_Translate(pShape, vec):
    return _PyAnyCAD.TransformTool_Translate(pShape, vec)

def TransformTool_Rotation(pShape, axis, angle):
    return _PyAnyCAD.TransformTool_Rotation(pShape, axis, angle)

def TransformTool_Scale(pShape, center, scale):
    return _PyAnyCAD.TransformTool_Scale(pShape, center, scale)

def TransformTool_Mirror(shape, axis):
    return _PyAnyCAD.TransformTool_Mirror(shape, axis)

def TransformTool_Transform(pShape, trf):
    return _PyAnyCAD.TransformTool_Transform(pShape, trf)

def TransformTool_TransformByMatrix(pShape, matrix):
    return _PyAnyCAD.TransformTool_TransformByMatrix(pShape, matrix)

def TransformTool_ToMatrix4(trf):
    return _PyAnyCAD.TransformTool_ToMatrix4(trf)

def TransformTool_ToTransform(mat):
    return _PyAnyCAD.TransformTool_ToTransform(mat)

def TransformTool_Decompose(mat, pos, rot, scale):
    return _PyAnyCAD.TransformTool_Decompose(mat, pos, rot, scale)

class ProjSurfaceResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ProjSurfaceResult_swiginit(self, _PyAnyCAD.new_ProjSurfaceResult(*args))

    def GetPoint(self):
        return _PyAnyCAD.ProjSurfaceResult_GetPoint(self)

    def GetParameterU(self):
        return _PyAnyCAD.ProjSurfaceResult_GetParameterU(self)

    def GetParameterV(self):
        return _PyAnyCAD.ProjSurfaceResult_GetParameterV(self)
    __swig_destroy__ = _PyAnyCAD.delete_ProjSurfaceResult

# Register ProjSurfaceResult in _PyAnyCAD:
_PyAnyCAD.ProjSurfaceResult_swigregister(ProjSurfaceResult)

class ProjCurveResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ProjCurveResult_swiginit(self, _PyAnyCAD.new_ProjCurveResult(*args))

    def GetPoint(self):
        return _PyAnyCAD.ProjCurveResult_GetPoint(self)

    def GetParameter(self):
        return _PyAnyCAD.ProjCurveResult_GetParameter(self)

    def GetEdgeIndex(self):
        return _PyAnyCAD.ProjCurveResult_GetEdgeIndex(self)
    __swig_destroy__ = _PyAnyCAD.delete_ProjCurveResult

# Register ProjCurveResult in _PyAnyCAD:
_PyAnyCAD.ProjCurveResult_swigregister(ProjCurveResult)

class ProjectionTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def ProjectOnPlane(*args):
        return _PyAnyCAD.ProjectionTool_ProjectOnPlane(*args)

    @staticmethod
    def ProjectOnSurface(*args):
        return _PyAnyCAD.ProjectionTool_ProjectOnSurface(*args)

    @staticmethod
    def ProjectOnCurve(point, curve, tolerance):
        return _PyAnyCAD.ProjectionTool_ProjectOnCurve(point, curve, tolerance)

    @staticmethod
    def ProjectOnShape(*args):
        return _PyAnyCAD.ProjectionTool_ProjectOnShape(*args)
    __swig_destroy__ = _PyAnyCAD.delete_ProjectionTool

# Register ProjectionTool in _PyAnyCAD:
_PyAnyCAD.ProjectionTool_swigregister(ProjectionTool)

def ProjectionTool_ProjectOnPlane(*args):
    return _PyAnyCAD.ProjectionTool_ProjectOnPlane(*args)

def ProjectionTool_ProjectOnSurface(*args):
    return _PyAnyCAD.ProjectionTool_ProjectOnSurface(*args)

def ProjectionTool_ProjectOnCurve(point, curve, tolerance):
    return _PyAnyCAD.ProjectionTool_ProjectOnCurve(point, curve, tolerance)

def ProjectionTool_ProjectOnShape(*args):
    return _PyAnyCAD.ProjectionTool_ProjectOnShape(*args)

class SurfaceBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeBSplineSurface(bsplineList, buildAlgo):
        return _PyAnyCAD.SurfaceBuilder_MakeBSplineSurface(bsplineList, buildAlgo)

    @staticmethod
    def PointsToBSplineSurface(*args):
        return _PyAnyCAD.SurfaceBuilder_PointsToBSplineSurface(*args)

    @staticmethod
    def MakeBezierSurface(arr2Points):
        return _PyAnyCAD.SurfaceBuilder_MakeBezierSurface(arr2Points)

    @staticmethod
    def MakeRuledSurface(pEdge1, pEdge2):
        return _PyAnyCAD.SurfaceBuilder_MakeRuledSurface(pEdge1, pEdge2)

    @staticmethod
    def AddHole(face, wireOfHole):
        return _PyAnyCAD.SurfaceBuilder_AddHole(face, wireOfHole)

    @staticmethod
    def AddHoles(face, wiresOfHoles):
        return _PyAnyCAD.SurfaceBuilder_AddHoles(face, wiresOfHoles)

    @staticmethod
    def MakeSurface(face, wire):
        return _PyAnyCAD.SurfaceBuilder_MakeSurface(face, wire)
    __swig_destroy__ = _PyAnyCAD.delete_SurfaceBuilder

# Register SurfaceBuilder in _PyAnyCAD:
_PyAnyCAD.SurfaceBuilder_swigregister(SurfaceBuilder)

def SurfaceBuilder_MakeBSplineSurface(bsplineList, buildAlgo):
    return _PyAnyCAD.SurfaceBuilder_MakeBSplineSurface(bsplineList, buildAlgo)

def SurfaceBuilder_PointsToBSplineSurface(*args):
    return _PyAnyCAD.SurfaceBuilder_PointsToBSplineSurface(*args)

def SurfaceBuilder_MakeBezierSurface(arr2Points):
    return _PyAnyCAD.SurfaceBuilder_MakeBezierSurface(arr2Points)

def SurfaceBuilder_MakeRuledSurface(pEdge1, pEdge2):
    return _PyAnyCAD.SurfaceBuilder_MakeRuledSurface(pEdge1, pEdge2)

def SurfaceBuilder_AddHole(face, wireOfHole):
    return _PyAnyCAD.SurfaceBuilder_AddHole(face, wireOfHole)

def SurfaceBuilder_AddHoles(face, wiresOfHoles):
    return _PyAnyCAD.SurfaceBuilder_AddHoles(face, wiresOfHoles)

def SurfaceBuilder_MakeSurface(face, wire):
    return _PyAnyCAD.SurfaceBuilder_MakeSurface(face, wire)

class Sketch2dBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeLine(*args):
        return _PyAnyCAD.Sketch2dBuilder_MakeLine(*args)

    @staticmethod
    def MakeArcByLines(line1, line2, radius, tol):
        return _PyAnyCAD.Sketch2dBuilder_MakeArcByLines(line1, line2, radius, tol)

    @staticmethod
    def MakeCircle(cirlce):
        return _PyAnyCAD.Sketch2dBuilder_MakeCircle(cirlce)

    @staticmethod
    def MakeArc(cirlce, p1, p2):
        return _PyAnyCAD.Sketch2dBuilder_MakeArc(cirlce, p1, p2)

    @staticmethod
    def MakeElips(elips):
        return _PyAnyCAD.Sketch2dBuilder_MakeElips(elips)

    @staticmethod
    def MakeElipsArc(elips, p1, p2):
        return _PyAnyCAD.Sketch2dBuilder_MakeElipsArc(elips, p1, p2)

    @staticmethod
    def MakeHypr(hypr, p1, p2):
        return _PyAnyCAD.Sketch2dBuilder_MakeHypr(hypr, p1, p2)

    @staticmethod
    def MakeParab(parab, p1, p2):
        return _PyAnyCAD.Sketch2dBuilder_MakeParab(parab, p1, p2)

    @staticmethod
    def MakeBSpline(*args):
        return _PyAnyCAD.Sketch2dBuilder_MakeBSpline(*args)
    __swig_destroy__ = _PyAnyCAD.delete_Sketch2dBuilder

# Register Sketch2dBuilder in _PyAnyCAD:
_PyAnyCAD.Sketch2dBuilder_swigregister(Sketch2dBuilder)

def Sketch2dBuilder_MakeLine(*args):
    return _PyAnyCAD.Sketch2dBuilder_MakeLine(*args)

def Sketch2dBuilder_MakeArcByLines(line1, line2, radius, tol):
    return _PyAnyCAD.Sketch2dBuilder_MakeArcByLines(line1, line2, radius, tol)

def Sketch2dBuilder_MakeCircle(cirlce):
    return _PyAnyCAD.Sketch2dBuilder_MakeCircle(cirlce)

def Sketch2dBuilder_MakeArc(cirlce, p1, p2):
    return _PyAnyCAD.Sketch2dBuilder_MakeArc(cirlce, p1, p2)

def Sketch2dBuilder_MakeElips(elips):
    return _PyAnyCAD.Sketch2dBuilder_MakeElips(elips)

def Sketch2dBuilder_MakeElipsArc(elips, p1, p2):
    return _PyAnyCAD.Sketch2dBuilder_MakeElipsArc(elips, p1, p2)

def Sketch2dBuilder_MakeHypr(hypr, p1, p2):
    return _PyAnyCAD.Sketch2dBuilder_MakeHypr(hypr, p1, p2)

def Sketch2dBuilder_MakeParab(parab, p1, p2):
    return _PyAnyCAD.Sketch2dBuilder_MakeParab(parab, p1, p2)

def Sketch2dBuilder_MakeBSpline(*args):
    return _PyAnyCAD.Sketch2dBuilder_MakeBSpline(*args)

class ShapeUpgradeTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def UnifySameEdgeDomain(edges, concatBSplines):
        return _PyAnyCAD.ShapeUpgradeTool_UnifySameEdgeDomain(edges, concatBSplines)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeUpgradeTool

# Register ShapeUpgradeTool in _PyAnyCAD:
_PyAnyCAD.ShapeUpgradeTool_swigregister(ShapeUpgradeTool)

def ShapeUpgradeTool_UnifySameEdgeDomain(edges, concatBSplines):
    return _PyAnyCAD.ShapeUpgradeTool_UnifySameEdgeDomain(edges, concatBSplines)

class ShapeAnalysisTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CheckEdgeOverlapping(edge1, edge2, tol):
        return _PyAnyCAD.ShapeAnalysisTool_CheckEdgeOverlapping(edge1, edge2, tol)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeAnalysisTool

# Register ShapeAnalysisTool in _PyAnyCAD:
_PyAnyCAD.ShapeAnalysisTool_swigregister(ShapeAnalysisTool)

def ShapeAnalysisTool_CheckEdgeOverlapping(edge1, edge2, tol):
    return _PyAnyCAD.ShapeAnalysisTool_CheckEdgeOverlapping(edge1, edge2, tol)

class SurfaceAnalysisTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, face):
        _PyAnyCAD.SurfaceAnalysisTool_swiginit(self, _PyAnyCAD.new_SurfaceAnalysisTool(face))
    __swig_destroy__ = _PyAnyCAD.delete_SurfaceAnalysisTool

    def GetFace(self):
        return _PyAnyCAD.SurfaceAnalysisTool_GetFace(self)

    def SetFace(self, val):
        return _PyAnyCAD.SurfaceAnalysisTool_SetFace(self, val)

    def ValueOfUV(self, pt):
        return _PyAnyCAD.SurfaceAnalysisTool_ValueOfUV(self, pt)

    def GetUVBounds(self):
        return _PyAnyCAD.SurfaceAnalysisTool_GetUVBounds(self)

    def ComputeBoundIsos(self):
        return _PyAnyCAD.SurfaceAnalysisTool_ComputeBoundIsos(self)

    def UIso(self, u):
        return _PyAnyCAD.SurfaceAnalysisTool_UIso(self, u)

    def VIso(self, u):
        return _PyAnyCAD.SurfaceAnalysisTool_VIso(self, u)

# Register SurfaceAnalysisTool in _PyAnyCAD:
_PyAnyCAD.SurfaceAnalysisTool_swigregister(SurfaceAnalysisTool)

class BufferShapeBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.BufferShapeBase_swiginit(self, _PyAnyCAD.new_BufferShapeBase(*args))
    __swig_destroy__ = _PyAnyCAD.delete_BufferShapeBase

    def GetShape(self):
        return _PyAnyCAD.BufferShapeBase_GetShape(self)

    def GetBoundingBox(self):
        return _PyAnyCAD.BufferShapeBase_GetBoundingBox(self)

    def SetBoundingBox(self, val):
        return _PyAnyCAD.BufferShapeBase_SetBoundingBox(self, val)

    def GetReady(self):
        return _PyAnyCAD.BufferShapeBase_GetReady(self)

    def GetDeflection(self):
        return _PyAnyCAD.BufferShapeBase_GetDeflection(self)

    def GetEdgeMaterial(self):
        return _PyAnyCAD.BufferShapeBase_GetEdgeMaterial(self)

    def GetFaceMaterial(self):
        return _PyAnyCAD.BufferShapeBase_GetFaceMaterial(self)

    def GetBuildVertex(self):
        return _PyAnyCAD.BufferShapeBase_GetBuildVertex(self)

    def SetBuildVertex(self, val):
        return _PyAnyCAD.BufferShapeBase_SetBuildVertex(self, val)

    def IsNull(self):
        return _PyAnyCAD.BufferShapeBase_IsNull(self)

    def Build(self):
        return _PyAnyCAD.BufferShapeBase_Build(self)

    def SetShape(self, shape):
        return _PyAnyCAD.BufferShapeBase_SetShape(self, shape)

    def SetFaceMaterial(self, *args):
        return _PyAnyCAD.BufferShapeBase_SetFaceMaterial(self, *args)

    def SetEdgeMaterial(self, *args):
        return _PyAnyCAD.BufferShapeBase_SetEdgeMaterial(self, *args)

    def RequestUpdate(self):
        return _PyAnyCAD.BufferShapeBase_RequestUpdate(self)

    def ComputeLineDistances(self):
        return _PyAnyCAD.BufferShapeBase_ComputeLineDistances(self)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.BufferShapeBase_ComputeBoundingBox(self)

    def Clone(self):
        return _PyAnyCAD.BufferShapeBase_Clone(self)

# Register BufferShapeBase in _PyAnyCAD:
_PyAnyCAD.BufferShapeBase_swigregister(BufferShapeBase)

class BufferShape(BufferShapeBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.BufferShape_swiginit(self, _PyAnyCAD.new_BufferShape(*args))
    __swig_destroy__ = _PyAnyCAD.delete_BufferShape

    def GetFaces(self):
        return _PyAnyCAD.BufferShape_GetFaces(self)

    def GetEdges(self):
        return _PyAnyCAD.BufferShape_GetEdges(self)

    def Build(self):
        return _PyAnyCAD.BufferShape_Build(self)

    def ComputeLineDistances(self):
        return _PyAnyCAD.BufferShape_ComputeLineDistances(self)

    def CloneMe(self):
        return _PyAnyCAD.BufferShape_CloneMe(self)

    def SetFaceMaterial(self, *args):
        return _PyAnyCAD.BufferShape_SetFaceMaterial(self, *args)

    def SetEdgeMaterial(self, *args):
        return _PyAnyCAD.BufferShape_SetEdgeMaterial(self, *args)

    @staticmethod
    def Cast(bs):
        return _PyAnyCAD.BufferShape_Cast(bs)

    def GetFaceCount(self):
        return _PyAnyCAD.BufferShape_GetFaceCount(self)

    def SetVertexColors(self, faceIdx, colorBuffer):
        return _PyAnyCAD.BufferShape_SetVertexColors(self, faceIdx, colorBuffer)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.BufferShape_ComputeBoundingBox(self)

# Register BufferShape in _PyAnyCAD:
_PyAnyCAD.BufferShape_swigregister(BufferShape)

def BufferShape_Cast(bs):
    return _PyAnyCAD.BufferShape_Cast(bs)

class BatchedBufferShape(BufferShapeBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.BatchedBufferShape_swiginit(self, _PyAnyCAD.new_BatchedBufferShape(*args))
    __swig_destroy__ = _PyAnyCAD.delete_BatchedBufferShape

    def GetFaces(self):
        return _PyAnyCAD.BatchedBufferShape_GetFaces(self)

    def GetEdges(self):
        return _PyAnyCAD.BatchedBufferShape_GetEdges(self)

    def Build(self):
        return _PyAnyCAD.BatchedBufferShape_Build(self)

    def ComputeLineDistances(self):
        return _PyAnyCAD.BatchedBufferShape_ComputeLineDistances(self)

    def CloneMe(self):
        return _PyAnyCAD.BatchedBufferShape_CloneMe(self)

    def SetFaceMaterial(self, *args):
        return _PyAnyCAD.BatchedBufferShape_SetFaceMaterial(self, *args)

    def SetEdgeMaterial(self, *args):
        return _PyAnyCAD.BatchedBufferShape_SetEdgeMaterial(self, *args)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.BatchedBufferShape_ComputeBoundingBox(self)

    @staticmethod
    def Cast(bs):
        return _PyAnyCAD.BatchedBufferShape_Cast(bs)

# Register BatchedBufferShape in _PyAnyCAD:
_PyAnyCAD.BatchedBufferShape_swigregister(BatchedBufferShape)

def BatchedBufferShape_Cast(bs):
    return _PyAnyCAD.BatchedBufferShape_Cast(bs)

class BrepSceneNode(GeneralSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.BrepSceneNode_swiginit(self, _PyAnyCAD.new_BrepSceneNode(*args))

    def GetShape(self):
        return _PyAnyCAD.BrepSceneNode_GetShape(self)

    def GetSubShapePickable(self):
        return _PyAnyCAD.BrepSceneNode_GetSubShapePickable(self)

    def SetSubShapePickable(self, val):
        return _PyAnyCAD.BrepSceneNode_SetSubShapePickable(self, val)

    def GetDisplayFilter(self):
        return _PyAnyCAD.BrepSceneNode_GetDisplayFilter(self)

    def SetDisplayFilter(self, val):
        return _PyAnyCAD.BrepSceneNode_SetDisplayFilter(self, val)

    @staticmethod
    def Create(shape, faceMaterial, edgeMaterial, deflection=0):
        return _PyAnyCAD.BrepSceneNode_Create(shape, faceMaterial, edgeMaterial, deflection)

    @staticmethod
    def CreateBatch(shape, faceMaterial, edgeMaterial, deflection=0):
        return _PyAnyCAD.BrepSceneNode_CreateBatch(shape, faceMaterial, edgeMaterial, deflection)

    @staticmethod
    def Cast(node):
        return _PyAnyCAD.BrepSceneNode_Cast(node)

    def GetTopoShape(self):
        return _PyAnyCAD.BrepSceneNode_GetTopoShape(self)

    def SetShape(self, bs):
        return _PyAnyCAD.BrepSceneNode_SetShape(self, bs)

    def Clone(self):
        return _PyAnyCAD.BrepSceneNode_Clone(self)

    def SetFaceMaterial(self, *args):
        return _PyAnyCAD.BrepSceneNode_SetFaceMaterial(self, *args)

    def SetEdgeMaterial(self, *args):
        return _PyAnyCAD.BrepSceneNode_SetEdgeMaterial(self, *args)

    def ComputeLineDistances(self):
        return _PyAnyCAD.BrepSceneNode_ComputeLineDistances(self)

    def ReComputeBoundingBox(self):
        return _PyAnyCAD.BrepSceneNode_ReComputeBoundingBox(self)
    __swig_destroy__ = _PyAnyCAD.delete_BrepSceneNode

# Register BrepSceneNode in _PyAnyCAD:
_PyAnyCAD.BrepSceneNode_swigregister(BrepSceneNode)

def BrepSceneNode_Create(shape, faceMaterial, edgeMaterial, deflection=0):
    return _PyAnyCAD.BrepSceneNode_Create(shape, faceMaterial, edgeMaterial, deflection)

def BrepSceneNode_CreateBatch(shape, faceMaterial, edgeMaterial, deflection=0):
    return _PyAnyCAD.BrepSceneNode_CreateBatch(shape, faceMaterial, edgeMaterial, deflection)

def BrepSceneNode_Cast(node):
    return _PyAnyCAD.BrepSceneNode_Cast(node)

class HatchHatcher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, face):
        _PyAnyCAD.HatchHatcher_swiginit(self, _PyAnyCAD.new_HatchHatcher(face))
    __swig_destroy__ = _PyAnyCAD.delete_HatchHatcher

    def GetFace(self):
        return _PyAnyCAD.HatchHatcher_GetFace(self)

    def GetDrawUIso(self):
        return _PyAnyCAD.HatchHatcher_GetDrawUIso(self)

    def SetDrawUIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetDrawUIso(self, val)

    def GetNumberUIso(self):
        return _PyAnyCAD.HatchHatcher_GetNumberUIso(self)

    def SetNumberUIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetNumberUIso(self, val)

    def GetDrawVIso(self):
        return _PyAnyCAD.HatchHatcher_GetDrawVIso(self)

    def SetDrawVIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetDrawVIso(self, val)

    def GetNumberVIso(self):
        return _PyAnyCAD.HatchHatcher_GetNumberVIso(self)

    def SetNumberVIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetNumberVIso(self, val)

    def GetDiscretisation(self):
        return _PyAnyCAD.HatchHatcher_GetDiscretisation(self)

    def SetDiscretisation(self, val):
        return _PyAnyCAD.HatchHatcher_SetDiscretisation(self, val)

    def GetMaximalParameterValue(self):
        return _PyAnyCAD.HatchHatcher_GetMaximalParameterValue(self)

    def SetMaximalParameterValue(self, val):
        return _PyAnyCAD.HatchHatcher_SetMaximalParameterValue(self, val)

    def Build(self):
        return _PyAnyCAD.HatchHatcher_Build(self)

    def Create(self, material):
        return _PyAnyCAD.HatchHatcher_Create(self, material)

    def GetPoints(self, idx):
        return _PyAnyCAD.HatchHatcher_GetPoints(self, idx)

    def GetUCurveCount(self):
        return _PyAnyCAD.HatchHatcher_GetUCurveCount(self)

    def GetUCurve(self, idx):
        return _PyAnyCAD.HatchHatcher_GetUCurve(self, idx)

    def GetVCurveCount(self):
        return _PyAnyCAD.HatchHatcher_GetVCurveCount(self)

    def GetVCurve(self, idx):
        return _PyAnyCAD.HatchHatcher_GetVCurve(self, idx)

    def ComputeIntersectionPoints(self):
        return _PyAnyCAD.HatchHatcher_ComputeIntersectionPoints(self)

# Register HatchHatcher in _PyAnyCAD:
_PyAnyCAD.HatchHatcher_swigregister(HatchHatcher)

class HoleEdgeIndexList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.HoleEdgeIndexList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.HoleEdgeIndexList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.HoleEdgeIndexList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.HoleEdgeIndexList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.HoleEdgeIndexList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.HoleEdgeIndexList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.HoleEdgeIndexList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.HoleEdgeIndexList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.HoleEdgeIndexList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.HoleEdgeIndexList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.HoleEdgeIndexList_pop(self)

    def append(self, x):
        return _PyAnyCAD.HoleEdgeIndexList_append(self, x)

    def empty(self):
        return _PyAnyCAD.HoleEdgeIndexList_empty(self)

    def size(self):
        return _PyAnyCAD.HoleEdgeIndexList_size(self)

    def swap(self, v):
        return _PyAnyCAD.HoleEdgeIndexList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.HoleEdgeIndexList_begin(self)

    def end(self):
        return _PyAnyCAD.HoleEdgeIndexList_end(self)

    def rbegin(self):
        return _PyAnyCAD.HoleEdgeIndexList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.HoleEdgeIndexList_rend(self)

    def clear(self):
        return _PyAnyCAD.HoleEdgeIndexList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.HoleEdgeIndexList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.HoleEdgeIndexList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.HoleEdgeIndexList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.HoleEdgeIndexList_swiginit(self, _PyAnyCAD.new_HoleEdgeIndexList(*args))

    def push_back(self, x):
        return _PyAnyCAD.HoleEdgeIndexList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.HoleEdgeIndexList_front(self)

    def back(self):
        return _PyAnyCAD.HoleEdgeIndexList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.HoleEdgeIndexList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.HoleEdgeIndexList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.HoleEdgeIndexList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.HoleEdgeIndexList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.HoleEdgeIndexList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_HoleEdgeIndexList

# Register HoleEdgeIndexList in _PyAnyCAD:
_PyAnyCAD.HoleEdgeIndexList_swigregister(HoleEdgeIndexList)

class HoleEdgeIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exteriorFaceId, holeFaceId, edgeId, forward):
        _PyAnyCAD.HoleEdgeIndex_swiginit(self, _PyAnyCAD.new_HoleEdgeIndex(exteriorFaceId, holeFaceId, edgeId, forward))

    def GetExteriorFaceId(self):
        return _PyAnyCAD.HoleEdgeIndex_GetExteriorFaceId(self)

    def SetExteriorFaceId(self, val):
        return _PyAnyCAD.HoleEdgeIndex_SetExteriorFaceId(self, val)

    def GetHoleFaceId(self):
        return _PyAnyCAD.HoleEdgeIndex_GetHoleFaceId(self)

    def SetHoleFaceId(self, val):
        return _PyAnyCAD.HoleEdgeIndex_SetHoleFaceId(self, val)

    def GetEdgeId(self):
        return _PyAnyCAD.HoleEdgeIndex_GetEdgeId(self)

    def SetEdgeId(self, val):
        return _PyAnyCAD.HoleEdgeIndex_SetEdgeId(self, val)

    def GetForward(self):
        return _PyAnyCAD.HoleEdgeIndex_GetForward(self)

    def SetForward(self, val):
        return _PyAnyCAD.HoleEdgeIndex_SetForward(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_HoleEdgeIndex

# Register HoleEdgeIndex in _PyAnyCAD:
_PyAnyCAD.HoleEdgeIndex_swigregister(HoleEdgeIndex)

class HoleExplorLegacy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.HoleExplorLegacy_swiginit(self, _PyAnyCAD.new_HoleExplorLegacy())
    __swig_destroy__ = _PyAnyCAD.delete_HoleExplorLegacy

    def Initialize(self, solid):
        return _PyAnyCAD.HoleExplorLegacy_Initialize(self, solid)

    def GetBoundingBox(self):
        return _PyAnyCAD.HoleExplorLegacy_GetBoundingBox(self)

    def GetShape(self):
        return _PyAnyCAD.HoleExplorLegacy_GetShape(self)

    def GetDirection(self):
        return _PyAnyCAD.HoleExplorLegacy_GetDirection(self)

    def SetDirection(self, direction):
        return _PyAnyCAD.HoleExplorLegacy_SetDirection(self, direction)

    def GetTolerance(self):
        return _PyAnyCAD.HoleExplorLegacy_GetTolerance(self)

    def SetTolerance(self, tol):
        return _PyAnyCAD.HoleExplorLegacy_SetTolerance(self, tol)

    def GetTubeWallThickness(self):
        return _PyAnyCAD.HoleExplorLegacy_GetTubeWallThickness(self)

    def SetTubeWallThickness(self, thickness):
        return _PyAnyCAD.HoleExplorLegacy_SetTubeWallThickness(self, thickness)

    def ComputeExteriorHoles(self):
        return _PyAnyCAD.HoleExplorLegacy_ComputeExteriorHoles(self)

    def ComputeIteriorHoles(self):
        return _PyAnyCAD.HoleExplorLegacy_ComputeIteriorHoles(self)

    def GetFaceCount(self):
        return _PyAnyCAD.HoleExplorLegacy_GetFaceCount(self)

    def GetFace(self, idx):
        return _PyAnyCAD.HoleExplorLegacy_GetFace(self, idx)

    def GetInteriorFaces(self):
        return _PyAnyCAD.HoleExplorLegacy_GetInteriorFaces(self)

    def GetMiddleFaces(self):
        return _PyAnyCAD.HoleExplorLegacy_GetMiddleFaces(self)

    def GetExteriorFaces(self):
        return _PyAnyCAD.HoleExplorLegacy_GetExteriorFaces(self)

    def GetExteriorHoleCount(self):
        return _PyAnyCAD.HoleExplorLegacy_GetExteriorHoleCount(self)

    def GetExteriorHole(self, idx):
        return _PyAnyCAD.HoleExplorLegacy_GetExteriorHole(self, idx)

    def GetExteriorHoleWire(self, idx):
        return _PyAnyCAD.HoleExplorLegacy_GetExteriorHoleWire(self, idx)

    def GetInteriorHoleCount(self):
        return _PyAnyCAD.HoleExplorLegacy_GetInteriorHoleCount(self)

    def GetInteriorHole(self, idx):
        return _PyAnyCAD.HoleExplorLegacy_GetInteriorHole(self, idx)

    def GetEdge(self, faceIdx, edgeIdx):
        return _PyAnyCAD.HoleExplorLegacy_GetEdge(self, faceIdx, edgeIdx)

    def GetHoleEdge(self, index):
        return _PyAnyCAD.HoleExplorLegacy_GetHoleEdge(self, index)

# Register HoleExplorLegacy in _PyAnyCAD:
_PyAnyCAD.HoleExplorLegacy_swigregister(HoleExplorLegacy)

class HoleExplor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.HoleExplor_swiginit(self, _PyAnyCAD.new_HoleExplor())
    __swig_destroy__ = _PyAnyCAD.delete_HoleExplor

    def GetShape(self):
        return _PyAnyCAD.HoleExplor_GetShape(self)

    def Initialize(self, shape):
        return _PyAnyCAD.HoleExplor_Initialize(self, shape)

    def ComputeDirection(self):
        return _PyAnyCAD.HoleExplor_ComputeDirection(self)

    def Compute(self, dir):
        return _PyAnyCAD.HoleExplor_Compute(self, dir)

    def GetHoleCount(self):
        return _PyAnyCAD.HoleExplor_GetHoleCount(self)

    def GetHoleFaces(self, holeIdx):
        return _PyAnyCAD.HoleExplor_GetHoleFaces(self, holeIdx)

    def BuildHoleExteriorEdges(self):
        return _PyAnyCAD.HoleExplor_BuildHoleExteriorEdges(self)

    def BuildHoleInteriorEdges(self):
        return _PyAnyCAD.HoleExplor_BuildHoleInteriorEdges(self)

    def GetHoleExteriorEdges(self, holeIdx):
        return _PyAnyCAD.HoleExplor_GetHoleExteriorEdges(self, holeIdx)

    def GetHoleInteriorEdges(self, holeIdx):
        return _PyAnyCAD.HoleExplor_GetHoleInteriorEdges(self, holeIdx)

    def GetHoleExteriorSupportEdges(self, holeIdx):
        return _PyAnyCAD.HoleExplor_GetHoleExteriorSupportEdges(self, holeIdx)

    def GetHoleInteriorSupportEdges(self, holeIdx):
        return _PyAnyCAD.HoleExplor_GetHoleInteriorSupportEdges(self, holeIdx)

    def GetExteriorSupportFace(self, supportEdgeIdx):
        return _PyAnyCAD.HoleExplor_GetExteriorSupportFace(self, supportEdgeIdx)

    def GetInteriorSupportFace(self, supportEdgeIdx):
        return _PyAnyCAD.HoleExplor_GetInteriorSupportFace(self, supportEdgeIdx)

    def Debug(self, fileName):
        return _PyAnyCAD.HoleExplor_Debug(self, fileName)

# Register HoleExplor in _PyAnyCAD:
_PyAnyCAD.HoleExplor_swigregister(HoleExplor)

class SurfaceCurvature(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape):
        _PyAnyCAD.SurfaceCurvature_swiginit(self, _PyAnyCAD.new_SurfaceCurvature(shape))
    __swig_destroy__ = _PyAnyCAD.delete_SurfaceCurvature

    def GetMinValue(self):
        return _PyAnyCAD.SurfaceCurvature_GetMinValue(self)

    def GetMaxValue(self):
        return _PyAnyCAD.SurfaceCurvature_GetMaxValue(self)

    def GetShape(self):
        return _PyAnyCAD.SurfaceCurvature_GetShape(self)

    def Compute(self, faceIndex, type):
        return _PyAnyCAD.SurfaceCurvature_Compute(self, faceIndex, type)

    def ComputeColors(self, clt, scale):
        return _PyAnyCAD.SurfaceCurvature_ComputeColors(self, clt, scale)

# Register SurfaceCurvature in _PyAnyCAD:
_PyAnyCAD.SurfaceCurvature_swigregister(SurfaceCurvature)

class IgesIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.IgesIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.IgesIO_Save(shape, fileName)

# Register IgesIO in _PyAnyCAD:
_PyAnyCAD.IgesIO_swigregister(IgesIO)

def IgesIO_Open(fileName):
    return _PyAnyCAD.IgesIO_Open(fileName)

def IgesIO_Save(shape, fileName):
    return _PyAnyCAD.IgesIO_Save(shape, fileName)

class StepIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.StepIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.StepIO_Save(shape, fileName)

# Register StepIO in _PyAnyCAD:
_PyAnyCAD.StepIO_swigregister(StepIO)

def StepIO_Open(fileName):
    return _PyAnyCAD.StepIO_Open(fileName)

def StepIO_Save(shape, fileName):
    return _PyAnyCAD.StepIO_Save(shape, fileName)

class BrepIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.BrepIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.BrepIO_Save(shape, fileName)

# Register BrepIO in _PyAnyCAD:
_PyAnyCAD.BrepIO_swigregister(BrepIO)

def BrepIO_Open(fileName):
    return _PyAnyCAD.BrepIO_Open(fileName)

def BrepIO_Save(shape, fileName):
    return _PyAnyCAD.BrepIO_Save(shape, fileName)

class StlIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.StlIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.StlIO_Save(shape, fileName)

# Register StlIO in _PyAnyCAD:
_PyAnyCAD.StlIO_swigregister(StlIO)

def StlIO_Open(fileName):
    return _PyAnyCAD.StlIO_Open(fileName)

def StlIO_Save(shape, fileName):
    return _PyAnyCAD.StlIO_Save(shape, fileName)

class ShapeIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.ShapeIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.ShapeIO_Save(shape, fileName)

# Register ShapeIO in _PyAnyCAD:
_PyAnyCAD.ShapeIO_swigregister(ShapeIO)

def ShapeIO_Open(fileName):
    return _PyAnyCAD.ShapeIO_Open(fileName)

def ShapeIO_Save(shape, fileName):
    return _PyAnyCAD.ShapeIO_Save(shape, fileName)

EnumXdeShapeType_Empty = _PyAnyCAD.EnumXdeShapeType_Empty
EnumXdeShapeType_Free = _PyAnyCAD.EnumXdeShapeType_Free
EnumXdeShapeType_Simple = _PyAnyCAD.EnumXdeShapeType_Simple
EnumXdeShapeType_Assembly = _PyAnyCAD.EnumXdeShapeType_Assembly
EnumXdeShapeType_Reference = _PyAnyCAD.EnumXdeShapeType_Reference
class XdeNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_XdeNode

    def SetName(self, name):
        return _PyAnyCAD.XdeNode_SetName(self, name)

    def GetName(self):
        return _PyAnyCAD.XdeNode_GetName(self)

    def IsNullLabel(self):
        return _PyAnyCAD.XdeNode_IsNullLabel(self)

    def HasChild(self):
        return _PyAnyCAD.XdeNode_HasChild(self)

    def NbChildren(self):
        return _PyAnyCAD.XdeNode_NbChildren(self)

    def GetDepth(self):
        return _PyAnyCAD.XdeNode_GetDepth(self)

    def GetTag(self):
        return _PyAnyCAD.XdeNode_GetTag(self)

# Register XdeNode in _PyAnyCAD:
_PyAnyCAD.XdeNode_swigregister(XdeNode)

class XdeDocument(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.XdeDocument_swiginit(self, _PyAnyCAD.new_XdeDocument())
    __swig_destroy__ = _PyAnyCAD.delete_XdeDocument

    def New(self):
        return _PyAnyCAD.XdeDocument_New(self)

    def AddShape(self, shape):
        return _PyAnyCAD.XdeDocument_AddShape(self, shape)

    def SetSurfaceColor(self, shape, color):
        return _PyAnyCAD.XdeDocument_SetSurfaceColor(self, shape, color)

    def SetCurveColor(self, shape, color):
        return _PyAnyCAD.XdeDocument_SetCurveColor(self, shape, color)

    def Save(self, fileName):
        return _PyAnyCAD.XdeDocument_Save(self, fileName)

    def Open(self, fileName):
        return _PyAnyCAD.XdeDocument_Open(self, fileName)

    def GetShapeCount(self):
        return _PyAnyCAD.XdeDocument_GetShapeCount(self)

    def GetShapeNode(self, idx):
        return _PyAnyCAD.XdeDocument_GetShapeNode(self, idx)

    def GetRootNode(self):
        return _PyAnyCAD.XdeDocument_GetRootNode(self)

    def IsSimpleShape(self, label):
        return _PyAnyCAD.XdeDocument_IsSimpleShape(self, label)

    def IsAssembly(self, label):
        return _PyAnyCAD.XdeDocument_IsAssembly(self, label)

    def IsReference(self, label):
        return _PyAnyCAD.XdeDocument_IsReference(self, label)

    def GetShapeType(self, label):
        return _PyAnyCAD.XdeDocument_GetShapeType(self, label)

    def GetShape(self, label):
        return _PyAnyCAD.XdeDocument_GetShape(self, label)

    def GetReferencedShape(self, label):
        return _PyAnyCAD.XdeDocument_GetReferencedShape(self, label)

    def GetColor(self, label, defaultClr):
        return _PyAnyCAD.XdeDocument_GetColor(self, label, defaultClr)

    def GetFaceColor(self, shape, defaultClr):
        return _PyAnyCAD.XdeDocument_GetFaceColor(self, shape, defaultClr)

    def GetEdgeColor(self, shape, defaultClr):
        return _PyAnyCAD.XdeDocument_GetEdgeColor(self, shape, defaultClr)

# Register XdeDocument in _PyAnyCAD:
_PyAnyCAD.XdeDocument_swigregister(XdeDocument)

class XdeNodeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, impl):
        _PyAnyCAD.XdeNodeIterator_swiginit(self, _PyAnyCAD.new_XdeNodeIterator(impl))
    __swig_destroy__ = _PyAnyCAD.delete_XdeNodeIterator

    def More(self):
        return _PyAnyCAD.XdeNodeIterator_More(self)

    def Next(self):
        return _PyAnyCAD.XdeNodeIterator_Next(self)

    def Value(self):
        return _PyAnyCAD.XdeNodeIterator_Value(self)

# Register XdeNodeIterator in _PyAnyCAD:
_PyAnyCAD.XdeNodeIterator_swigregister(XdeNodeIterator)

class XdeLabelSequence(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent):
        _PyAnyCAD.XdeLabelSequence_swiginit(self, _PyAnyCAD.new_XdeLabelSequence(parent))
    __swig_destroy__ = _PyAnyCAD.delete_XdeLabelSequence

    def More(self):
        return _PyAnyCAD.XdeLabelSequence_More(self)

    def Next(self):
        return _PyAnyCAD.XdeLabelSequence_Next(self)

    def Value(self):
        return _PyAnyCAD.XdeLabelSequence_Value(self)

# Register XdeLabelSequence in _PyAnyCAD:
_PyAnyCAD.XdeLabelSequence_swigregister(XdeLabelSequence)

class ParameterValue(AObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterValue_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterValue_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterValue_GetClassId(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterValue

    def Clone(self):
        return _PyAnyCAD.ParameterValue_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterValue_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterValue_ToStr(self)

# Register ParameterValue in _PyAnyCAD:
_PyAnyCAD.ParameterValue_swigregister(ParameterValue)

def ParameterValue_Cast(obj):
    return _PyAnyCAD.ParameterValue_Cast(obj)

def ParameterValue_GetStaticClassId():
    return _PyAnyCAD.ParameterValue_GetStaticClassId()

class ParameterDict(AObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterDict_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterDict_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.ParameterDict_swiginit(self, _PyAnyCAD.new_ParameterDict())
    __swig_destroy__ = _PyAnyCAD.delete_ParameterDict

    def Find(self, name):
        return _PyAnyCAD.ParameterDict_Find(self, name)

    def Remove(self, name):
        return _PyAnyCAD.ParameterDict_Remove(self, name)

    def Cast(self, *args):
        return _PyAnyCAD.ParameterDict_Cast(self, *args)

    def Add(self, *args):
        return _PyAnyCAD.ParameterDict_Add(self, *args)

# Register ParameterDict in _PyAnyCAD:
_PyAnyCAD.ParameterDict_swigregister(ParameterDict)

def ParameterDict_GetStaticClassId():
    return _PyAnyCAD.ParameterDict_GetStaticClassId()

class ParameterIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parameters):
        _PyAnyCAD.ParameterIterator_swiginit(self, _PyAnyCAD.new_ParameterIterator(parameters))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterIterator

    def Next(self):
        return _PyAnyCAD.ParameterIterator_Next(self)

    def More(self):
        return _PyAnyCAD.ParameterIterator_More(self)

    def CurrentName(self):
        return _PyAnyCAD.ParameterIterator_CurrentName(self)

    def CurrentValue(self):
        return _PyAnyCAD.ParameterIterator_CurrentValue(self)

# Register ParameterIterator in _PyAnyCAD:
_PyAnyCAD.ParameterIterator_swigregister(ParameterIterator)

class ParameterBool(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterBool_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterBool_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterBool_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterBool_swiginit(self, _PyAnyCAD.new_ParameterBool(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterBool

    def GetValue(self):
        return _PyAnyCAD.ParameterBool_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterBool_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterBool_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterBool_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterBool_ToStr(self)

# Register ParameterBool in _PyAnyCAD:
_PyAnyCAD.ParameterBool_swigregister(ParameterBool)

def ParameterBool_Cast(obj):
    return _PyAnyCAD.ParameterBool_Cast(obj)

def ParameterBool_GetStaticClassId():
    return _PyAnyCAD.ParameterBool_GetStaticClassId()

class ParameterDouble(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterDouble_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterDouble_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterDouble_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterDouble_swiginit(self, _PyAnyCAD.new_ParameterDouble(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterDouble

    def GetValue(self):
        return _PyAnyCAD.ParameterDouble_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterDouble_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterDouble_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterDouble_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterDouble_ToStr(self)

# Register ParameterDouble in _PyAnyCAD:
_PyAnyCAD.ParameterDouble_swigregister(ParameterDouble)

def ParameterDouble_Cast(obj):
    return _PyAnyCAD.ParameterDouble_Cast(obj)

def ParameterDouble_GetStaticClassId():
    return _PyAnyCAD.ParameterDouble_GetStaticClassId()

class ParameterElementId(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterElementId_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterElementId_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterElementId_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterElementId_swiginit(self, _PyAnyCAD.new_ParameterElementId(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterElementId

    def GetValue(self):
        return _PyAnyCAD.ParameterElementId_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterElementId_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterElementId_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterElementId_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterElementId_ToStr(self)

# Register ParameterElementId in _PyAnyCAD:
_PyAnyCAD.ParameterElementId_swigregister(ParameterElementId)

def ParameterElementId_Cast(obj):
    return _PyAnyCAD.ParameterElementId_Cast(obj)

def ParameterElementId_GetStaticClassId():
    return _PyAnyCAD.ParameterElementId_GetStaticClassId()

class ParameterFloat(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterFloat_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterFloat_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterFloat_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterFloat_swiginit(self, _PyAnyCAD.new_ParameterFloat(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterFloat

    def GetValue(self):
        return _PyAnyCAD.ParameterFloat_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterFloat_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterFloat_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterFloat_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterFloat_ToStr(self)

# Register ParameterFloat in _PyAnyCAD:
_PyAnyCAD.ParameterFloat_swigregister(ParameterFloat)

def ParameterFloat_Cast(obj):
    return _PyAnyCAD.ParameterFloat_Cast(obj)

def ParameterFloat_GetStaticClassId():
    return _PyAnyCAD.ParameterFloat_GetStaticClassId()

class ParameterInt32(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterInt32_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterInt32_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterInt32_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterInt32_swiginit(self, _PyAnyCAD.new_ParameterInt32(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterInt32

    def GetValue(self):
        return _PyAnyCAD.ParameterInt32_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterInt32_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterInt32_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterInt32_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterInt32_ToStr(self)

# Register ParameterInt32 in _PyAnyCAD:
_PyAnyCAD.ParameterInt32_swigregister(ParameterInt32)

def ParameterInt32_Cast(obj):
    return _PyAnyCAD.ParameterInt32_Cast(obj)

def ParameterInt32_GetStaticClassId():
    return _PyAnyCAD.ParameterInt32_GetStaticClassId()

class ParameterString(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterString_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterString_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterString_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterString_swiginit(self, _PyAnyCAD.new_ParameterString(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterString

    def GetValue(self):
        return _PyAnyCAD.ParameterString_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterString_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterString_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterString_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterString_ToStr(self)

# Register ParameterString in _PyAnyCAD:
_PyAnyCAD.ParameterString_swigregister(ParameterString)

def ParameterString_Cast(obj):
    return _PyAnyCAD.ParameterString_Cast(obj)

def ParameterString_GetStaticClassId():
    return _PyAnyCAD.ParameterString_GetStaticClassId()

class ParameterGPnt(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGPnt_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGPnt_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGPnt_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGPnt_swiginit(self, _PyAnyCAD.new_ParameterGPnt(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGPnt

    def GetValue(self):
        return _PyAnyCAD.ParameterGPnt_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGPnt_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterGPnt_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGPnt_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGPnt_ToStr(self)

# Register ParameterGPnt in _PyAnyCAD:
_PyAnyCAD.ParameterGPnt_swigregister(ParameterGPnt)

def ParameterGPnt_Cast(obj):
    return _PyAnyCAD.ParameterGPnt_Cast(obj)

def ParameterGPnt_GetStaticClassId():
    return _PyAnyCAD.ParameterGPnt_GetStaticClassId()

class ParameterGVec(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGVec_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGVec_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGVec_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGVec_swiginit(self, _PyAnyCAD.new_ParameterGVec(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGVec

    def GetValue(self):
        return _PyAnyCAD.ParameterGVec_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGVec_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterGVec_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGVec_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGVec_ToStr(self)

# Register ParameterGVec in _PyAnyCAD:
_PyAnyCAD.ParameterGVec_swigregister(ParameterGVec)

def ParameterGVec_Cast(obj):
    return _PyAnyCAD.ParameterGVec_Cast(obj)

def ParameterGVec_GetStaticClassId():
    return _PyAnyCAD.ParameterGVec_GetStaticClassId()

class ParameterGDir(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGDir_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGDir_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGDir_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGDir_swiginit(self, _PyAnyCAD.new_ParameterGDir(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGDir

    def GetValue(self):
        return _PyAnyCAD.ParameterGDir_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGDir_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterGDir_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGDir_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGDir_ToStr(self)

# Register ParameterGDir in _PyAnyCAD:
_PyAnyCAD.ParameterGDir_swigregister(ParameterGDir)

def ParameterGDir_Cast(obj):
    return _PyAnyCAD.ParameterGDir_Cast(obj)

def ParameterGDir_GetStaticClassId():
    return _PyAnyCAD.ParameterGDir_GetStaticClassId()

class ParameterGAx1(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGAx1_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGAx1_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGAx1_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGAx1_swiginit(self, _PyAnyCAD.new_ParameterGAx1(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGAx1

    def GetValue(self):
        return _PyAnyCAD.ParameterGAx1_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGAx1_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterGAx1_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGAx1_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGAx1_ToStr(self)

# Register ParameterGAx1 in _PyAnyCAD:
_PyAnyCAD.ParameterGAx1_swigregister(ParameterGAx1)

def ParameterGAx1_Cast(obj):
    return _PyAnyCAD.ParameterGAx1_Cast(obj)

def ParameterGAx1_GetStaticClassId():
    return _PyAnyCAD.ParameterGAx1_GetStaticClassId()

class ParameterGAx2(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGAx2_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGAx2_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGAx2_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGAx2_swiginit(self, _PyAnyCAD.new_ParameterGAx2(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGAx2

    def GetValue(self):
        return _PyAnyCAD.ParameterGAx2_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGAx2_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterGAx2_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGAx2_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGAx2_ToStr(self)

# Register ParameterGAx2 in _PyAnyCAD:
_PyAnyCAD.ParameterGAx2_swigregister(ParameterGAx2)

def ParameterGAx2_Cast(obj):
    return _PyAnyCAD.ParameterGAx2_Cast(obj)

def ParameterGAx2_GetStaticClassId():
    return _PyAnyCAD.ParameterGAx2_GetStaticClassId()

class ParameterGAx3(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGAx3_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGAx3_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGAx3_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGAx3_swiginit(self, _PyAnyCAD.new_ParameterGAx3(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGAx3

    def GetValue(self):
        return _PyAnyCAD.ParameterGAx3_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGAx3_SetValue(self, val)

    def Clone(self):
        return _PyAnyCAD.ParameterGAx3_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGAx3_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGAx3_ToStr(self)

# Register ParameterGAx3 in _PyAnyCAD:
_PyAnyCAD.ParameterGAx3_swigregister(ParameterGAx3)

def ParameterGAx3_Cast(obj):
    return _PyAnyCAD.ParameterGAx3_Cast(obj)

def ParameterGAx3_GetStaticClassId():
    return _PyAnyCAD.ParameterGAx3_GetStaticClassId()

class ParameterDoubleList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterDoubleList_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterDoubleList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterDoubleList_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterDoubleList_swiginit(self, _PyAnyCAD.new_ParameterDoubleList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterDoubleList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterDoubleList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterDoubleList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterDoubleList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterDoubleList_GetValue(self, *args)

    def Clone(self):
        return _PyAnyCAD.ParameterDoubleList_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterDoubleList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterDoubleList_ToStr(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterDoubleList

# Register ParameterDoubleList in _PyAnyCAD:
_PyAnyCAD.ParameterDoubleList_swigregister(ParameterDoubleList)

def ParameterDoubleList_Cast(obj):
    return _PyAnyCAD.ParameterDoubleList_Cast(obj)

def ParameterDoubleList_GetStaticClassId():
    return _PyAnyCAD.ParameterDoubleList_GetStaticClassId()

class ParameterFloatList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterFloatList_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterFloatList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterFloatList_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterFloatList_swiginit(self, _PyAnyCAD.new_ParameterFloatList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterFloatList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterFloatList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterFloatList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterFloatList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterFloatList_GetValue(self, *args)

    def Clone(self):
        return _PyAnyCAD.ParameterFloatList_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterFloatList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterFloatList_ToStr(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterFloatList

# Register ParameterFloatList in _PyAnyCAD:
_PyAnyCAD.ParameterFloatList_swigregister(ParameterFloatList)

def ParameterFloatList_Cast(obj):
    return _PyAnyCAD.ParameterFloatList_Cast(obj)

def ParameterFloatList_GetStaticClassId():
    return _PyAnyCAD.ParameterFloatList_GetStaticClassId()

class ParameterInt32List(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterInt32List_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterInt32List_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterInt32List_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterInt32List_swiginit(self, _PyAnyCAD.new_ParameterInt32List(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterInt32List_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterInt32List_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterInt32List_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterInt32List_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterInt32List_GetValue(self, *args)

    def Clone(self):
        return _PyAnyCAD.ParameterInt32List_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterInt32List_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterInt32List_ToStr(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterInt32List

# Register ParameterInt32List in _PyAnyCAD:
_PyAnyCAD.ParameterInt32List_swigregister(ParameterInt32List)

def ParameterInt32List_Cast(obj):
    return _PyAnyCAD.ParameterInt32List_Cast(obj)

def ParameterInt32List_GetStaticClassId():
    return _PyAnyCAD.ParameterInt32List_GetStaticClassId()

class ParameterGPntList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGPntList_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGPntList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGPntList_GetClassId(self)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGPntList_swiginit(self, _PyAnyCAD.new_ParameterGPntList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterGPntList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterGPntList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterGPntList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterGPntList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterGPntList_GetValue(self, *args)

    def Clone(self):
        return _PyAnyCAD.ParameterGPntList_Clone(self)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGPntList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGPntList_ToStr(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGPntList

# Register ParameterGPntList in _PyAnyCAD:
_PyAnyCAD.ParameterGPntList_swigregister(ParameterGPntList)

def ParameterGPntList_Cast(obj):
    return _PyAnyCAD.ParameterGPntList_Cast(obj)

def ParameterGPntList_GetStaticClassId():
    return _PyAnyCAD.ParameterGPntList_GetStaticClassId()

class ParameterCast(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.ParameterCast_Cast(*args)

    def __init__(self):
        _PyAnyCAD.ParameterCast_swiginit(self, _PyAnyCAD.new_ParameterCast())
    __swig_destroy__ = _PyAnyCAD.delete_ParameterCast

# Register ParameterCast in _PyAnyCAD:
_PyAnyCAD.ParameterCast_swigregister(ParameterCast)

def ParameterCast_Cast(*args):
    return _PyAnyCAD.ParameterCast_Cast(*args)

class ParameterCreator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Create(*args):
        return _PyAnyCAD.ParameterCreator_Create(*args)

    def __init__(self):
        _PyAnyCAD.ParameterCreator_swiginit(self, _PyAnyCAD.new_ParameterCreator())
    __swig_destroy__ = _PyAnyCAD.delete_ParameterCreator

# Register ParameterCreator in _PyAnyCAD:
_PyAnyCAD.ParameterCreator_swigregister(ParameterCreator)

def ParameterCreator_Create(*args):
    return _PyAnyCAD.ParameterCreator_Create(*args)

class Element(AObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Element_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Element_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Element_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.Element_swiginit(self, _PyAnyCAD.new_Element())
    __swig_destroy__ = _PyAnyCAD.delete_Element

    def GetId(self):
        return _PyAnyCAD.Element_GetId(self)

    def SetId(self, val):
        return _PyAnyCAD.Element_SetId(self, val)

    def GetName(self):
        return _PyAnyCAD.Element_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Element_SetName(self, val)

    def GetSchemaName(self):
        return _PyAnyCAD.Element_GetSchemaName(self)

    def SetSchemaName(self, val):
        return _PyAnyCAD.Element_SetSchemaName(self, val)

    def GetParameterDict(self):
        return _PyAnyCAD.Element_GetParameterDict(self)

    def AddParameter(self, name, val):
        return _PyAnyCAD.Element_AddParameter(self, name, val)

    def SetParameter(self, name, val):
        return _PyAnyCAD.Element_SetParameter(self, name, val)

    def RemoveParameter(self, name):
        return _PyAnyCAD.Element_RemoveParameter(self, name)

    def CreateParameterIterator(self):
        return _PyAnyCAD.Element_CreateParameterIterator(self)

    def FindParameter(self, name):
        return _PyAnyCAD.Element_FindParameter(self, name)

# Register Element in _PyAnyCAD:
_PyAnyCAD.Element_swigregister(Element)

def Element_Cast(obj):
    return _PyAnyCAD.Element_Cast(obj)

def Element_GetStaticClassId():
    return _PyAnyCAD.Element_GetStaticClassId()

class ElementIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ElementIterator

    def More(self):
        return _PyAnyCAD.ElementIterator_More(self)

    def Next(self):
        return _PyAnyCAD.ElementIterator_Next(self)

    def Current(self):
        return _PyAnyCAD.ElementIterator_Current(self)

# Register ElementIterator in _PyAnyCAD:
_PyAnyCAD.ElementIterator_swigregister(ElementIterator)

class ElementTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ElementTable

    def GetName(self):
        return _PyAnyCAD.ElementTable_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.ElementTable_SetName(self, val)

    def GetOwner(self):
        return _PyAnyCAD.ElementTable_GetOwner(self)

    def SetOwner(self, val):
        return _PyAnyCAD.ElementTable_SetOwner(self, val)

    def FindElement(self, id):
        return _PyAnyCAD.ElementTable_FindElement(self, id)

    def GetIds(self):
        return _PyAnyCAD.ElementTable_GetIds(self)

# Register ElementTable in _PyAnyCAD:
_PyAnyCAD.ElementTable_swigregister(ElementTable)

class Document(AObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Document_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Document_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Document_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.Document_swiginit(self, _PyAnyCAD.new_Document())
    __swig_destroy__ = _PyAnyCAD.delete_Document

    def GetName(self):
        return _PyAnyCAD.Document_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Document_SetName(self, val)

    def GetActiveDbViewId(self):
        return _PyAnyCAD.Document_GetActiveDbViewId(self)

    def SetActiveDbViewId(self, val):
        return _PyAnyCAD.Document_SetActiveDbViewId(self, val)

    def GetUndoing(self):
        return _PyAnyCAD.Document_GetUndoing(self)

    def SetUndoing(self, val):
        return _PyAnyCAD.Document_SetUndoing(self, val)

    def GetFileName(self):
        return _PyAnyCAD.Document_GetFileName(self)

    def SetFileName(self, val):
        return _PyAnyCAD.Document_SetFileName(self, val)

    def GetModified(self):
        return _PyAnyCAD.Document_GetModified(self)

    def SetModified(self, val):
        return _PyAnyCAD.Document_SetModified(self, val)

    def Initialize(self, viewName):
        return _PyAnyCAD.Document_Initialize(self, viewName)

    def RemoveElement(self, id):
        return _PyAnyCAD.Document_RemoveElement(self, id)

    def AddElement(self, pElement):
        return _PyAnyCAD.Document_AddElement(self, pElement)

    def NotifyElementChanged(self, id, flags):
        return _PyAnyCAD.Document_NotifyElementChanged(self, id, flags)

    def CreateElementIterator(self):
        return _PyAnyCAD.Document_CreateElementIterator(self)

    def FindElement(self, id):
        return _PyAnyCAD.Document_FindElement(self, id)

    def FindTable(self, name):
        return _PyAnyCAD.Document_FindTable(self, name)

    def EnableTransaction(self, enabled):
        return _PyAnyCAD.Document_EnableTransaction(self, enabled)

    def IsTransactionEnabled(self):
        return _PyAnyCAD.Document_IsTransactionEnabled(self)

    def IsPreviewing(self):
        return _PyAnyCAD.Document_IsPreviewing(self)

    def CanUndo(self):
        return _PyAnyCAD.Document_CanUndo(self)

    def CanRedo(self):
        return _PyAnyCAD.Document_CanRedo(self)

    def Undo(self):
        return _PyAnyCAD.Document_Undo(self)

    def Redo(self):
        return _PyAnyCAD.Document_Redo(self)

    def Regenerate(self):
        return _PyAnyCAD.Document_Regenerate(self)

# Register Document in _PyAnyCAD:
_PyAnyCAD.Document_swigregister(Document)

def Document_Cast(obj):
    return _PyAnyCAD.Document_Cast(obj)

def Document_GetStaticClassId():
    return _PyAnyCAD.Document_GetStaticClassId()

class DocumentIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Initialize():
        return _PyAnyCAD.DocumentIO_Initialize()

    @staticmethod
    def Save(pDocument, fileName):
        return _PyAnyCAD.DocumentIO_Save(pDocument, fileName)

    @staticmethod
    def Load(fileName):
        return _PyAnyCAD.DocumentIO_Load(fileName)
    __swig_destroy__ = _PyAnyCAD.delete_DocumentIO

# Register DocumentIO in _PyAnyCAD:
_PyAnyCAD.DocumentIO_swigregister(DocumentIO)

def DocumentIO_Initialize():
    return _PyAnyCAD.DocumentIO_Initialize()

def DocumentIO_Save(pDocument, fileName):
    return _PyAnyCAD.DocumentIO_Save(pDocument, fileName)

def DocumentIO_Load(fileName):
    return _PyAnyCAD.DocumentIO_Load(fileName)

class DocumentEventArgs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.DocumentEventArgs_swiginit(self, _PyAnyCAD.new_DocumentEventArgs())
    __swig_destroy__ = _PyAnyCAD.delete_DocumentEventArgs

    def GetAddedIds(self):
        return _PyAnyCAD.DocumentEventArgs_GetAddedIds(self)

    def GetRemovedIds(self):
        return _PyAnyCAD.DocumentEventArgs_GetRemovedIds(self)

    def GetChangedIds(self):
        return _PyAnyCAD.DocumentEventArgs_GetChangedIds(self)

# Register DocumentEventArgs in _PyAnyCAD:
_PyAnyCAD.DocumentEventArgs_swigregister(DocumentEventArgs)

class DocumentListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DocumentListener:
            _self = None
        else:
            _self = self
        _PyAnyCAD.DocumentListener_swiginit(self, _PyAnyCAD.new_DocumentListener(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_DocumentListener

    def OnChangeElement(self, pDocument, id, flags):
        return _PyAnyCAD.DocumentListener_OnChangeElement(self, pDocument, id, flags)

    def AfterDocumentChanged(self, pDocument, args):
        return _PyAnyCAD.DocumentListener_AfterDocumentChanged(self, pDocument, args)

    def AfterOpenDocument(self, pDocument):
        return _PyAnyCAD.DocumentListener_AfterOpenDocument(self, pDocument)

    def AfterSaveDocument(self, pDocument):
        return _PyAnyCAD.DocumentListener_AfterSaveDocument(self, pDocument)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_DocumentListener(self)
        return weakref.proxy(self)

# Register DocumentListener in _PyAnyCAD:
_PyAnyCAD.DocumentListener_swigregister(DocumentListener)

class DocumentEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.DocumentEvent_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_DocumentEvent

    def AddListener(self, listener):
        return _PyAnyCAD.DocumentEvent_AddListener(self, listener)

    def RemoveListener(self, listener):
        return _PyAnyCAD.DocumentEvent_RemoveListener(self, listener)

    def NotifyChangeElement(self, pDocument, id, flag):
        return _PyAnyCAD.DocumentEvent_NotifyChangeElement(self, pDocument, id, flag)

    def NotifyDocumentChanged(self, pDocument, args):
        return _PyAnyCAD.DocumentEvent_NotifyDocumentChanged(self, pDocument, args)

    def NotifyDocumentSaved(self, pDocument):
        return _PyAnyCAD.DocumentEvent_NotifyDocumentSaved(self, pDocument)

    def NotifyDocumentOpened(self, pDocument):
        return _PyAnyCAD.DocumentEvent_NotifyDocumentOpened(self, pDocument)

# Register DocumentEvent in _PyAnyCAD:
_PyAnyCAD.DocumentEvent_swigregister(DocumentEvent)

def DocumentEvent_Instance():
    return _PyAnyCAD.DocumentEvent_Instance()

class UndoTransaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.UndoTransaction_swiginit(self, _PyAnyCAD.new_UndoTransaction(*args))
    __swig_destroy__ = _PyAnyCAD.delete_UndoTransaction

    def BeginPreview(self):
        return _PyAnyCAD.UndoTransaction_BeginPreview(self)

    def EndPreview(self):
        return _PyAnyCAD.UndoTransaction_EndPreview(self)

    def Start(self, name):
        return _PyAnyCAD.UndoTransaction_Start(self, name)

    def Abort(self):
        return _PyAnyCAD.UndoTransaction_Abort(self)

    def Commit(self):
        return _PyAnyCAD.UndoTransaction_Commit(self)

# Register UndoTransaction in _PyAnyCAD:
_PyAnyCAD.UndoTransaction_swigregister(UndoTransaction)

class DrawableElement(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DrawableElement_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.DrawableElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.DrawableElement_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.DrawableElement_swiginit(self, _PyAnyCAD.new_DrawableElement())
    __swig_destroy__ = _PyAnyCAD.delete_DrawableElement

    def GetReferencePlane(self):
        return _PyAnyCAD.DrawableElement_GetReferencePlane(self)

    def SetReferencePlane(self, val):
        return _PyAnyCAD.DrawableElement_SetReferencePlane(self, val)

    def GetVisible(self):
        return _PyAnyCAD.DrawableElement_GetVisible(self)

    def SetVisible(self, val):
        return _PyAnyCAD.DrawableElement_SetVisible(self, val)

    def GetWorldBBox(self):
        return _PyAnyCAD.DrawableElement_GetWorldBBox(self)

# Register DrawableElement in _PyAnyCAD:
_PyAnyCAD.DrawableElement_swigregister(DrawableElement)

def DrawableElement_Cast(obj):
    return _PyAnyCAD.DrawableElement_Cast(obj)

def DrawableElement_GetStaticClassId():
    return _PyAnyCAD.DrawableElement_GetStaticClassId()

class DrawableInstance(DrawableElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DrawableInstance_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.DrawableInstance_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.DrawableInstance_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.DrawableInstance_swiginit(self, _PyAnyCAD.new_DrawableInstance())
    __swig_destroy__ = _PyAnyCAD.delete_DrawableInstance

    def GetCoordinate(self):
        return _PyAnyCAD.DrawableInstance_GetCoordinate(self)

    def SetCoordinate(self, val):
        return _PyAnyCAD.DrawableInstance_SetCoordinate(self, val)

    def GetDrawableId(self):
        return _PyAnyCAD.DrawableInstance_GetDrawableId(self)

    def SetDrawableId(self, val):
        return _PyAnyCAD.DrawableInstance_SetDrawableId(self, val)

    def GetHostDocumentId(self):
        return _PyAnyCAD.DrawableInstance_GetHostDocumentId(self)

    def SetHostDocumentId(self, val):
        return _PyAnyCAD.DrawableInstance_SetHostDocumentId(self, val)

    def GetTransform(self):
        return _PyAnyCAD.DrawableInstance_GetTransform(self)

    def SetLocation(self, position):
        return _PyAnyCAD.DrawableInstance_SetLocation(self, position)

    def GetLocation(self):
        return _PyAnyCAD.DrawableInstance_GetLocation(self)

    def RegenTransform(self):
        return _PyAnyCAD.DrawableInstance_RegenTransform(self)

# Register DrawableInstance in _PyAnyCAD:
_PyAnyCAD.DrawableInstance_swigregister(DrawableInstance)

def DrawableInstance_Cast(obj):
    return _PyAnyCAD.DrawableInstance_Cast(obj)

def DrawableInstance_GetStaticClassId():
    return _PyAnyCAD.DrawableInstance_GetStaticClassId()

class ShapeElement(DrawableElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ShapeElement_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ShapeElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ShapeElement_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.ShapeElement_swiginit(self, _PyAnyCAD.new_ShapeElement())
    __swig_destroy__ = _PyAnyCAD.delete_ShapeElement

    def GetMaterialId(self):
        return _PyAnyCAD.ShapeElement_GetMaterialId(self)

    def SetMaterialId(self, val):
        return _PyAnyCAD.ShapeElement_SetMaterialId(self, val)

    def GetShape(self):
        return _PyAnyCAD.ShapeElement_GetShape(self)

    def SetShape(self, val):
        return _PyAnyCAD.ShapeElement_SetShape(self, val)

# Register ShapeElement in _PyAnyCAD:
_PyAnyCAD.ShapeElement_swigregister(ShapeElement)

def ShapeElement_Cast(obj):
    return _PyAnyCAD.ShapeElement_Cast(obj)

def ShapeElement_GetStaticClassId():
    return _PyAnyCAD.ShapeElement_GetStaticClassId()

class MaterialElement(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MaterialElement_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.MaterialElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.MaterialElement_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.MaterialElement_swiginit(self, _PyAnyCAD.new_MaterialElement())
    __swig_destroy__ = _PyAnyCAD.delete_MaterialElement

    @staticmethod
    def InitRx():
        return _PyAnyCAD.MaterialElement_InitRx()

    def GetFaceMaterial(self):
        return _PyAnyCAD.MaterialElement_GetFaceMaterial(self)

    def SetFaceMaterial(self, val):
        return _PyAnyCAD.MaterialElement_SetFaceMaterial(self, val)

    def GetEdgeMaterial(self):
        return _PyAnyCAD.MaterialElement_GetEdgeMaterial(self)

    def SetEdgeMaterial(self, val):
        return _PyAnyCAD.MaterialElement_SetEdgeMaterial(self, val)

    def GetPointMaterial(self):
        return _PyAnyCAD.MaterialElement_GetPointMaterial(self)

    def SetPointMaterial(self, val):
        return _PyAnyCAD.MaterialElement_SetPointMaterial(self, val)

    def GetFaceColor(self):
        return _PyAnyCAD.MaterialElement_GetFaceColor(self)

    def SetFaceColor(self, val):
        return _PyAnyCAD.MaterialElement_SetFaceColor(self, val)

    def GetLineWidth(self):
        return _PyAnyCAD.MaterialElement_GetLineWidth(self)

    def SetLineWidth(self, val):
        return _PyAnyCAD.MaterialElement_SetLineWidth(self, val)

    def GetEdgeColor(self):
        return _PyAnyCAD.MaterialElement_GetEdgeColor(self)

    def SetEdgeColor(self, val):
        return _PyAnyCAD.MaterialElement_SetEdgeColor(self, val)

    def GetMetalness(self):
        return _PyAnyCAD.MaterialElement_GetMetalness(self)

    def SetMetalness(self, val):
        return _PyAnyCAD.MaterialElement_SetMetalness(self, val)

    def GetRoughness(self):
        return _PyAnyCAD.MaterialElement_GetRoughness(self)

    def SetRoughness(self, val):
        return _PyAnyCAD.MaterialElement_SetRoughness(self, val)

    def GetOpacity(self):
        return _PyAnyCAD.MaterialElement_GetOpacity(self)

    def SetOpacity(self, val):
        return _PyAnyCAD.MaterialElement_SetOpacity(self, val)

    def GetPointColor(self):
        return _PyAnyCAD.MaterialElement_GetPointColor(self)

    def SetPointColor(self, val):
        return _PyAnyCAD.MaterialElement_SetPointColor(self, val)
    PID_MaterialFinish = _PyAnyCAD.MaterialElement_PID_MaterialFinish

    def Regenerate(self):
        return _PyAnyCAD.MaterialElement_Regenerate(self)

    def Initialize(self):
        return _PyAnyCAD.MaterialElement_Initialize(self)

# Register MaterialElement in _PyAnyCAD:
_PyAnyCAD.MaterialElement_swigregister(MaterialElement)

def MaterialElement_Cast(obj):
    return _PyAnyCAD.MaterialElement_Cast(obj)

def MaterialElement_GetStaticClassId():
    return _PyAnyCAD.MaterialElement_GetStaticClassId()

def MaterialElement_InitRx():
    return _PyAnyCAD.MaterialElement_InitRx()

class DbView(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DbView_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.DbView_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.DbView_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.DbView_swiginit(self, _PyAnyCAD.new_DbView())
    __swig_destroy__ = _PyAnyCAD.delete_DbView

    def GetBoundingBox(self):
        return _PyAnyCAD.DbView_GetBoundingBox(self)

    def ShowElement(self, pElement):
        return _PyAnyCAD.DbView_ShowElement(self, pElement)

# Register DbView in _PyAnyCAD:
_PyAnyCAD.DbView_swigregister(DbView)

def DbView_Cast(obj):
    return _PyAnyCAD.DbView_Cast(obj)

def DbView_GetStaticClassId():
    return _PyAnyCAD.DbView_GetStaticClassId()

class UserElement(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.UserElement_Cast(obj)

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.UserElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.UserElement_GetClassId(self)

    def __init__(self):
        _PyAnyCAD.UserElement_swiginit(self, _PyAnyCAD.new_UserElement())
    __swig_destroy__ = _PyAnyCAD.delete_UserElement

# Register UserElement in _PyAnyCAD:
_PyAnyCAD.UserElement_swigregister(UserElement)

def UserElement_Cast(obj):
    return _PyAnyCAD.UserElement_Cast(obj)

def UserElement_GetStaticClassId():
    return _PyAnyCAD.UserElement_GetStaticClassId()

class ElementSchema(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        if self.__class__ == ElementSchema:
            _self = None
        else:
            _self = self
        _PyAnyCAD.ElementSchema_swiginit(self, _PyAnyCAD.new_ElementSchema(_self, name))
    __swig_destroy__ = _PyAnyCAD.delete_ElementSchema

    def GetName(self):
        return _PyAnyCAD.ElementSchema_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.ElementSchema_SetName(self, val)

    def GetParameterDict(self):
        return _PyAnyCAD.ElementSchema_GetParameterDict(self)

    def AddParameter(self, name, val):
        return _PyAnyCAD.ElementSchema_AddParameter(self, name, val)

    def RemoveParameter(self, name):
        return _PyAnyCAD.ElementSchema_RemoveParameter(self, name)

    def FindParameter(self, name):
        return _PyAnyCAD.ElementSchema_FindParameter(self, name)

    def CreateParameterIterator(self):
        return _PyAnyCAD.ElementSchema_CreateParameterIterator(self)

    def CreateUserElement(self, name, pOwner):
        return _PyAnyCAD.ElementSchema_CreateUserElement(self, name, pOwner)

    def CreateInstance(self, name, pOwner):
        return _PyAnyCAD.ElementSchema_CreateInstance(self, name, pOwner)

    def OnParameterChanged(self, instance, parameters):
        return _PyAnyCAD.ElementSchema_OnParameterChanged(self, instance, parameters)

    @staticmethod
    def CastShapeElement(element):
        return _PyAnyCAD.ElementSchema_CastShapeElement(element)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_ElementSchema(self)
        return weakref.proxy(self)

# Register ElementSchema in _PyAnyCAD:
_PyAnyCAD.ElementSchema_swigregister(ElementSchema)

def ElementSchema_CastShapeElement(element):
    return _PyAnyCAD.ElementSchema_CastShapeElement(element)

class ElementSchemaManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.ElementSchemaManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_ElementSchemaManager

    def AddSchema(self, schema):
        return _PyAnyCAD.ElementSchemaManager_AddSchema(self, schema)

    def RemoveSchema(self, name):
        return _PyAnyCAD.ElementSchemaManager_RemoveSchema(self, name)

    def FindSchema(self, name):
        return _PyAnyCAD.ElementSchemaManager_FindSchema(self, name)

    def CreateInstance(self, schema, pOwner):
        return _PyAnyCAD.ElementSchemaManager_CreateInstance(self, schema, pOwner)

    def CreateShapeInstance(self, schema, pOwner):
        return _PyAnyCAD.ElementSchemaManager_CreateShapeInstance(self, schema, pOwner)

# Register ElementSchemaManager in _PyAnyCAD:
_PyAnyCAD.ElementSchemaManager_swigregister(ElementSchemaManager)

def ElementSchemaManager_Instance():
    return _PyAnyCAD.ElementSchemaManager_Instance()

class ViewContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ViewContext_swiginit(self, _PyAnyCAD.new_ViewContext())
    __swig_destroy__ = _PyAnyCAD.delete_ViewContext

    def GetSceneManager(self):
        return _PyAnyCAD.ViewContext_GetSceneManager(self)

    def GetDocument(self):
        return _PyAnyCAD.ViewContext_GetDocument(self)

    def SetDocument(self, val):
        return _PyAnyCAD.ViewContext_SetDocument(self, val)

    def GetUpdateTicket(self):
        return _PyAnyCAD.ViewContext_GetUpdateTicket(self)

    def SetUpdateTicket(self, val):
        return _PyAnyCAD.ViewContext_SetUpdateTicket(self, val)

    def GetOrbitPivot(self):
        return _PyAnyCAD.ViewContext_GetOrbitPivot(self)

    def GetFixedOrbitPivot(self):
        return _PyAnyCAD.ViewContext_GetFixedOrbitPivot(self)

    def SetFixedOrbitPivot(self, val):
        return _PyAnyCAD.ViewContext_SetFixedOrbitPivot(self, val)

    def GetPanButton(self):
        return _PyAnyCAD.ViewContext_GetPanButton(self)

    def SetPanButton(self, val):
        return _PyAnyCAD.ViewContext_SetPanButton(self, val)

    def GetOrbitButton(self):
        return _PyAnyCAD.ViewContext_GetOrbitButton(self)

    def SetOrbitButton(self, val):
        return _PyAnyCAD.ViewContext_SetOrbitButton(self, val)

    def GetPickButton(self):
        return _PyAnyCAD.ViewContext_GetPickButton(self)

    def SetPickButton(self, val):
        return _PyAnyCAD.ViewContext_SetPickButton(self, val)

    def GetPanKeyModifier(self):
        return _PyAnyCAD.ViewContext_GetPanKeyModifier(self)

    def SetPanKeyModifier(self, val):
        return _PyAnyCAD.ViewContext_SetPanKeyModifier(self, val)

    def GetOrbitKeyModifier(self):
        return _PyAnyCAD.ViewContext_GetOrbitKeyModifier(self)

    def SetOrbitKeyModifier(self, val):
        return _PyAnyCAD.ViewContext_SetOrbitKeyModifier(self, val)

    def GetPickKeyModifier(self):
        return _PyAnyCAD.ViewContext_GetPickKeyModifier(self)

    def SetPickKeyModifier(self, val):
        return _PyAnyCAD.ViewContext_SetPickKeyModifier(self, val)

    def GetRectPick(self):
        return _PyAnyCAD.ViewContext_GetRectPick(self)

    def SetRectPick(self, val):
        return _PyAnyCAD.ViewContext_SetRectPick(self, val)

    def GetFreeOrbit(self):
        return _PyAnyCAD.ViewContext_GetFreeOrbit(self)

    def SetFreeOrbit(self, val):
        return _PyAnyCAD.ViewContext_SetFreeOrbit(self, val)

    def GetWorldUp(self):
        return _PyAnyCAD.ViewContext_GetWorldUp(self)

    def SetWorldUp(self, val):
        return _PyAnyCAD.ViewContext_SetWorldUp(self, val)

    def GetScene(self):
        return _PyAnyCAD.ViewContext_GetScene(self)

    def GetScene2D(self):
        return _PyAnyCAD.ViewContext_GetScene2D(self)

    def GetSelection(self):
        return _PyAnyCAD.ViewContext_GetSelection(self)

    def GetCamera(self):
        return _PyAnyCAD.ViewContext_GetCamera(self)

    def SetOrbitPivot(self, center):
        return _PyAnyCAD.ViewContext_SetOrbitPivot(self, center)

    def SetUserOrbitPivot(self, center):
        return _PyAnyCAD.ViewContext_SetUserOrbitPivot(self, center)

    def ClearPickFilters(self):
        return _PyAnyCAD.ViewContext_ClearPickFilters(self)

    def ResetPickFilters(self):
        return _PyAnyCAD.ViewContext_ResetPickFilters(self)

    def AddPickFilter(self, filter):
        return _PyAnyCAD.ViewContext_AddPickFilter(self, filter)

    def ClearPickFilter(self, filter):
        return _PyAnyCAD.ViewContext_ClearPickFilter(self, filter)

    def SetPickFilter(self, filter):
        return _PyAnyCAD.ViewContext_SetPickFilter(self, filter)

    def GetPickFilter(self):
        return _PyAnyCAD.ViewContext_GetPickFilter(self)

    def ResetDisplayFilters(self):
        return _PyAnyCAD.ViewContext_ResetDisplayFilters(self)

    def AddDisplayFilter(self, filter):
        return _PyAnyCAD.ViewContext_AddDisplayFilter(self, filter)

    def ClearDisplayFilter(self, filter):
        return _PyAnyCAD.ViewContext_ClearDisplayFilter(self, filter)

    def ResetOrbitPivot(self):
        return _PyAnyCAD.ViewContext_ResetOrbitPivot(self)

    def ClearAll(self):
        return _PyAnyCAD.ViewContext_ClearAll(self)

    def GetTempContext(self):
        return _PyAnyCAD.ViewContext_GetTempContext(self)

    def GetRenderSettings(self):
        return _PyAnyCAD.ViewContext_GetRenderSettings(self)

    def Destroy(self):
        return _PyAnyCAD.ViewContext_Destroy(self)

    def Resize(self, width, height):
        return _PyAnyCAD.ViewContext_Resize(self, width, height)

    def RequestUpdate(self, flag):
        return _PyAnyCAD.ViewContext_RequestUpdate(self, flag)

    def ZoomToExtend(self, ratio):
        return _PyAnyCAD.ViewContext_ZoomToExtend(self, ratio)

    def Zoom(self, x, y, delta):
        return _PyAnyCAD.ViewContext_Zoom(self, x, y, delta)

    def Pan(self, offsetX, offsetY):
        return _PyAnyCAD.ViewContext_Pan(self, offsetX, offsetY)

    def Orbit(self, offsetX, offsetY):
        return _PyAnyCAD.ViewContext_Orbit(self, offsetX, offsetY)

    def UpdateWorld(self):
        return _PyAnyCAD.ViewContext_UpdateWorld(self)

    def ScreenPointToWorldPoint(self, x, y, z):
        return _PyAnyCAD.ViewContext_ScreenPointToWorldPoint(self, x, y, z)

    def WorldPointToSceenPoint(self, pt):
        return _PyAnyCAD.ViewContext_WorldPointToSceenPoint(self, pt)

    def WindowPointToRay(self, x, y):
        return _PyAnyCAD.ViewContext_WindowPointToRay(self, x, y)

    def SnapPoint(self, x, y):
        return _PyAnyCAD.ViewContext_SnapPoint(self, x, y)

# Register ViewContext in _PyAnyCAD:
_PyAnyCAD.ViewContext_swigregister(ViewContext)

class TempViewContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, context):
        _PyAnyCAD.TempViewContext_swiginit(self, _PyAnyCAD.new_TempViewContext(context))
    __swig_destroy__ = _PyAnyCAD.delete_TempViewContext

    def DrawRectangle2D(self, start, end):
        return _PyAnyCAD.TempViewContext_DrawRectangle2D(self, start, end)

    def ShowRectangle2D(self, bShow):
        return _PyAnyCAD.TempViewContext_ShowRectangle2D(self, bShow)

    def DrawLine(self, start, end):
        return _PyAnyCAD.TempViewContext_DrawLine(self, start, end)

    def Clear(self):
        return _PyAnyCAD.TempViewContext_Clear(self)

# Register TempViewContext in _PyAnyCAD:
_PyAnyCAD.TempViewContext_swigregister(TempViewContext)

class ScreenShot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, img, camera):
        _PyAnyCAD.ScreenShot_swiginit(self, _PyAnyCAD.new_ScreenShot(img, camera))
    __swig_destroy__ = _PyAnyCAD.delete_ScreenShot

    def GetImage(self):
        return _PyAnyCAD.ScreenShot_GetImage(self)

    def GetCamera(self):
        return _PyAnyCAD.ScreenShot_GetCamera(self)

    def ReadColor(self, *args):
        return _PyAnyCAD.ScreenShot_ReadColor(self, *args)

    def SaveFile(self, fileName):
        return _PyAnyCAD.ScreenShot_SaveFile(self, fileName)

    def CreateMemoryImage(self):
        return _PyAnyCAD.ScreenShot_CreateMemoryImage(self)

    def SampleGBR(self, worldPt, offset):
        return _PyAnyCAD.ScreenShot_SampleGBR(self, worldPt, offset)

# Register ScreenShot in _PyAnyCAD:
_PyAnyCAD.ScreenShot_swigregister(ScreenShot)

EnumKeyModifier_KMOD_NONE = _PyAnyCAD.EnumKeyModifier_KMOD_NONE
EnumKeyModifier_KMOD_LSHIFT = _PyAnyCAD.EnumKeyModifier_KMOD_LSHIFT
EnumKeyModifier_KMOD_RSHIFT = _PyAnyCAD.EnumKeyModifier_KMOD_RSHIFT
EnumKeyModifier_KMOD_LCTRL = _PyAnyCAD.EnumKeyModifier_KMOD_LCTRL
EnumKeyModifier_KMOD_RCTRL = _PyAnyCAD.EnumKeyModifier_KMOD_RCTRL
EnumKeyModifier_KMOD_LALT = _PyAnyCAD.EnumKeyModifier_KMOD_LALT
EnumKeyModifier_KMOD_RALT = _PyAnyCAD.EnumKeyModifier_KMOD_RALT
EnumKeyModifier_KMOD_LGUI = _PyAnyCAD.EnumKeyModifier_KMOD_LGUI
EnumKeyModifier_KMOD_RGUI = _PyAnyCAD.EnumKeyModifier_KMOD_RGUI
EnumKeyModifier_KMOD_NUM = _PyAnyCAD.EnumKeyModifier_KMOD_NUM
EnumKeyModifier_KMOD_CAPS = _PyAnyCAD.EnumKeyModifier_KMOD_CAPS
EnumKeyModifier_KMOD_MODE = _PyAnyCAD.EnumKeyModifier_KMOD_MODE
EnumKeyModifier_KMOD_RESERVED = _PyAnyCAD.EnumKeyModifier_KMOD_RESERVED
EnumKeyCode_Zero = _PyAnyCAD.EnumKeyCode_Zero
EnumKeyCode_KEY_RETURN = _PyAnyCAD.EnumKeyCode_KEY_RETURN
EnumKeyCode_KEY_ESCAPE = _PyAnyCAD.EnumKeyCode_KEY_ESCAPE
EnumKeyCode_KEY_BACKSPACE = _PyAnyCAD.EnumKeyCode_KEY_BACKSPACE
EnumKeyCode_KEY_TAB = _PyAnyCAD.EnumKeyCode_KEY_TAB
EnumKeyCode_KEY_SPACE = _PyAnyCAD.EnumKeyCode_KEY_SPACE
EnumKeyCode_KEY_EXCLAIM = _PyAnyCAD.EnumKeyCode_KEY_EXCLAIM
EnumKeyCode_KEY_QUOTEDBL = _PyAnyCAD.EnumKeyCode_KEY_QUOTEDBL
EnumKeyCode_KEY_HASH = _PyAnyCAD.EnumKeyCode_KEY_HASH
EnumKeyCode_KEY_PERCENT = _PyAnyCAD.EnumKeyCode_KEY_PERCENT
EnumKeyCode_KEY_DOLLAR = _PyAnyCAD.EnumKeyCode_KEY_DOLLAR
EnumKeyCode_KEY_AMPERSAND = _PyAnyCAD.EnumKeyCode_KEY_AMPERSAND
EnumKeyCode_KEY_QUOTE = _PyAnyCAD.EnumKeyCode_KEY_QUOTE
EnumKeyCode_KEY_LEFTPAREN = _PyAnyCAD.EnumKeyCode_KEY_LEFTPAREN
EnumKeyCode_KEY_RIGHTPAREN = _PyAnyCAD.EnumKeyCode_KEY_RIGHTPAREN
EnumKeyCode_KEY_ASTERISK = _PyAnyCAD.EnumKeyCode_KEY_ASTERISK
EnumKeyCode_KEY_PLUS = _PyAnyCAD.EnumKeyCode_KEY_PLUS
EnumKeyCode_KEY_COMMA = _PyAnyCAD.EnumKeyCode_KEY_COMMA
EnumKeyCode_KEY_MINUS = _PyAnyCAD.EnumKeyCode_KEY_MINUS
EnumKeyCode_KEY_PERIOD = _PyAnyCAD.EnumKeyCode_KEY_PERIOD
EnumKeyCode_KEY_SLASH = _PyAnyCAD.EnumKeyCode_KEY_SLASH
EnumKeyCode_KEY_0 = _PyAnyCAD.EnumKeyCode_KEY_0
EnumKeyCode_KEY_1 = _PyAnyCAD.EnumKeyCode_KEY_1
EnumKeyCode_KEY_2 = _PyAnyCAD.EnumKeyCode_KEY_2
EnumKeyCode_KEY_3 = _PyAnyCAD.EnumKeyCode_KEY_3
EnumKeyCode_KEY_4 = _PyAnyCAD.EnumKeyCode_KEY_4
EnumKeyCode_KEY_5 = _PyAnyCAD.EnumKeyCode_KEY_5
EnumKeyCode_KEY_6 = _PyAnyCAD.EnumKeyCode_KEY_6
EnumKeyCode_KEY_7 = _PyAnyCAD.EnumKeyCode_KEY_7
EnumKeyCode_KEY_8 = _PyAnyCAD.EnumKeyCode_KEY_8
EnumKeyCode_KEY_9 = _PyAnyCAD.EnumKeyCode_KEY_9
EnumKeyCode_KEY_COLON = _PyAnyCAD.EnumKeyCode_KEY_COLON
EnumKeyCode_KEY_SEMICOLON = _PyAnyCAD.EnumKeyCode_KEY_SEMICOLON
EnumKeyCode_KEY_LESS = _PyAnyCAD.EnumKeyCode_KEY_LESS
EnumKeyCode_KEY_EQUALS = _PyAnyCAD.EnumKeyCode_KEY_EQUALS
EnumKeyCode_KEY_GREATER = _PyAnyCAD.EnumKeyCode_KEY_GREATER
EnumKeyCode_KEY_QUESTION = _PyAnyCAD.EnumKeyCode_KEY_QUESTION
EnumKeyCode_KEY_AT = _PyAnyCAD.EnumKeyCode_KEY_AT
EnumKeyCode_KEY_LEFTBRACKET = _PyAnyCAD.EnumKeyCode_KEY_LEFTBRACKET
EnumKeyCode_KEY_BACKSLASH = _PyAnyCAD.EnumKeyCode_KEY_BACKSLASH
EnumKeyCode_KEY_RIGHTBRACKET = _PyAnyCAD.EnumKeyCode_KEY_RIGHTBRACKET
EnumKeyCode_KEY_CARET = _PyAnyCAD.EnumKeyCode_KEY_CARET
EnumKeyCode_KEY_UNDERSCORE = _PyAnyCAD.EnumKeyCode_KEY_UNDERSCORE
EnumKeyCode_KEY_BACKQUOTE = _PyAnyCAD.EnumKeyCode_KEY_BACKQUOTE
EnumKeyCode_KEY_a = _PyAnyCAD.EnumKeyCode_KEY_a
EnumKeyCode_KEY_b = _PyAnyCAD.EnumKeyCode_KEY_b
EnumKeyCode_KEY_c = _PyAnyCAD.EnumKeyCode_KEY_c
EnumKeyCode_KEY_d = _PyAnyCAD.EnumKeyCode_KEY_d
EnumKeyCode_KEY_e = _PyAnyCAD.EnumKeyCode_KEY_e
EnumKeyCode_KEY_f = _PyAnyCAD.EnumKeyCode_KEY_f
EnumKeyCode_KEY_g = _PyAnyCAD.EnumKeyCode_KEY_g
EnumKeyCode_KEY_h = _PyAnyCAD.EnumKeyCode_KEY_h
EnumKeyCode_KEY_i = _PyAnyCAD.EnumKeyCode_KEY_i
EnumKeyCode_KEY_j = _PyAnyCAD.EnumKeyCode_KEY_j
EnumKeyCode_KEY_k = _PyAnyCAD.EnumKeyCode_KEY_k
EnumKeyCode_KEY_l = _PyAnyCAD.EnumKeyCode_KEY_l
EnumKeyCode_KEY_m = _PyAnyCAD.EnumKeyCode_KEY_m
EnumKeyCode_KEY_n = _PyAnyCAD.EnumKeyCode_KEY_n
EnumKeyCode_KEY_o = _PyAnyCAD.EnumKeyCode_KEY_o
EnumKeyCode_KEY_p = _PyAnyCAD.EnumKeyCode_KEY_p
EnumKeyCode_KEY_q = _PyAnyCAD.EnumKeyCode_KEY_q
EnumKeyCode_KEY_r = _PyAnyCAD.EnumKeyCode_KEY_r
EnumKeyCode_KEY_s = _PyAnyCAD.EnumKeyCode_KEY_s
EnumKeyCode_KEY_t = _PyAnyCAD.EnumKeyCode_KEY_t
EnumKeyCode_KEY_u = _PyAnyCAD.EnumKeyCode_KEY_u
EnumKeyCode_KEY_v = _PyAnyCAD.EnumKeyCode_KEY_v
EnumKeyCode_KEY_w = _PyAnyCAD.EnumKeyCode_KEY_w
EnumKeyCode_KEY_x = _PyAnyCAD.EnumKeyCode_KEY_x
EnumKeyCode_KEY_y = _PyAnyCAD.EnumKeyCode_KEY_y
EnumKeyCode_KEY_z = _PyAnyCAD.EnumKeyCode_KEY_z
EnumEditorCode_Ignored = _PyAnyCAD.EnumEditorCode_Ignored
EnumEditorCode_Processed = _PyAnyCAD.EnumEditorCode_Processed
EnumEditorCode_Failed = _PyAnyCAD.EnumEditorCode_Failed
EnumEditorCode_Exit = _PyAnyCAD.EnumEditorCode_Exit
EnumMouseButton_Zero = _PyAnyCAD.EnumMouseButton_Zero
EnumMouseButton_Left = _PyAnyCAD.EnumMouseButton_Left
EnumMouseButton_Middle = _PyAnyCAD.EnumMouseButton_Middle
EnumMouseButton_Right = _PyAnyCAD.EnumMouseButton_Right
EnumMouseButton_LeftRight = _PyAnyCAD.EnumMouseButton_LeftRight
EnumMouseButton_LeftMiddle = _PyAnyCAD.EnumMouseButton_LeftMiddle
EnumMouseButton_RightMiddle = _PyAnyCAD.EnumMouseButton_RightMiddle
EnumMouseButton_All = _PyAnyCAD.EnumMouseButton_All
class InputEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.InputEvent_swiginit(self, _PyAnyCAD.new_InputEvent())
    __swig_destroy__ = _PyAnyCAD.delete_InputEvent

    def GetX(self):
        return _PyAnyCAD.InputEvent_GetX(self)

    def SetX(self, val):
        return _PyAnyCAD.InputEvent_SetX(self, val)

    def GetY(self):
        return _PyAnyCAD.InputEvent_GetY(self)

    def SetY(self, val):
        return _PyAnyCAD.InputEvent_SetY(self, val)

    def GetFlags(self):
        return _PyAnyCAD.InputEvent_GetFlags(self)

    def SetFlags(self, val):
        return _PyAnyCAD.InputEvent_SetFlags(self, val)

    def GetButtons(self):
        return _PyAnyCAD.InputEvent_GetButtons(self)

    def SetButtons(self, val):
        return _PyAnyCAD.InputEvent_SetButtons(self, val)

    def GetKey(self):
        return _PyAnyCAD.InputEvent_GetKey(self)

    def SetKey(self, val):
        return _PyAnyCAD.InputEvent_SetKey(self, val)

    def GetClicks(self):
        return _PyAnyCAD.InputEvent_GetClicks(self)

    def SetClicks(self, val):
        return _PyAnyCAD.InputEvent_SetClicks(self, val)

    def GetTouch(self):
        return _PyAnyCAD.InputEvent_GetTouch(self)

    def SetTouch(self, val):
        return _PyAnyCAD.InputEvent_SetTouch(self, val)

    def SetCtrlKey(self, enabled):
        return _PyAnyCAD.InputEvent_SetCtrlKey(self, enabled)

    def SetAltKey(self, enabled):
        return _PyAnyCAD.InputEvent_SetAltKey(self, enabled)

    def SetShiftKey(self, enabled):
        return _PyAnyCAD.InputEvent_SetShiftKey(self, enabled)

    def SetLeftButtonDown(self):
        return _PyAnyCAD.InputEvent_SetLeftButtonDown(self)

    def SetMiddleButtonDown(self):
        return _PyAnyCAD.InputEvent_SetMiddleButtonDown(self)

    def SetRightButtonDown(self):
        return _PyAnyCAD.InputEvent_SetRightButtonDown(self)

    def TestFlags(self, button, key):
        return _PyAnyCAD.InputEvent_TestFlags(self, button, key)

# Register InputEvent in _PyAnyCAD:
_PyAnyCAD.InputEvent_swigregister(InputEvent)

class MultiTouchEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.MultiTouchEvent_swiginit(self, _PyAnyCAD.new_MultiTouchEvent())

    def GetCount(self):
        return _PyAnyCAD.MultiTouchEvent_GetCount(self)

    def GetPoint(self, idx):
        return _PyAnyCAD.MultiTouchEvent_GetPoint(self, idx)

    def AddPoint(self, positon):
        return _PyAnyCAD.MultiTouchEvent_AddPoint(self, positon)
    __swig_destroy__ = _PyAnyCAD.delete_MultiTouchEvent

# Register MultiTouchEvent in _PyAnyCAD:
_PyAnyCAD.MultiTouchEvent_swigregister(MultiTouchEvent)

class Editor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Editor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.Editor_swiginit(self, _PyAnyCAD.new_Editor(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_Editor

    def GetName(self):
        return _PyAnyCAD.Editor_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Editor_SetName(self, val)

    def Start(self, ctx):
        return _PyAnyCAD.Editor_Start(self, ctx)

    def Finish(self, ctx):
        return _PyAnyCAD.Editor_Finish(self, ctx)

    def Reset(self, ctx):
        return _PyAnyCAD.Editor_Reset(self, ctx)

    def OnMouseDown(self, ctx, evt):
        return _PyAnyCAD.Editor_OnMouseDown(self, ctx, evt)

    def OnMouseUp(self, ctx, evt):
        return _PyAnyCAD.Editor_OnMouseUp(self, ctx, evt)

    def OnMouseMove(self, ctx, evt):
        return _PyAnyCAD.Editor_OnMouseMove(self, ctx, evt)

    def OnMouseWheel(self, ctx, evt, delta):
        return _PyAnyCAD.Editor_OnMouseWheel(self, ctx, evt, delta)

    def OnKeyDown(self, ctx, evt):
        return _PyAnyCAD.Editor_OnKeyDown(self, ctx, evt)

    def OnKeyUp(self, ctx, evt):
        return _PyAnyCAD.Editor_OnKeyUp(self, ctx, evt)

    def OnInput(self, ctx, input):
        return _PyAnyCAD.Editor_OnInput(self, ctx, input)

    def OnMultiTouch(self, ctx, evt):
        return _PyAnyCAD.Editor_OnMultiTouch(self, ctx, evt)

    def OnBeginMultiTouch(self, ctx, evt):
        return _PyAnyCAD.Editor_OnBeginMultiTouch(self, ctx, evt)

    def OnEndMultiTouch(self, ctx, evt):
        return _PyAnyCAD.Editor_OnEndMultiTouch(self, ctx, evt)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.Editor_BeforeRendering(self, ctx)

    def AfterRendering(self, ctx):
        return _PyAnyCAD.Editor_AfterRendering(self, ctx)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_Editor(self)
        return weakref.proxy(self)

# Register Editor in _PyAnyCAD:
_PyAnyCAD.Editor_swigregister(Editor)

class EditMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == EditMode:
            _self = None
        else:
            _self = self
        _PyAnyCAD.EditMode_swiginit(self, _PyAnyCAD.new_EditMode(_self, *args))
    __swig_destroy__ = _PyAnyCAD.delete_EditMode

    def GetDefaultEditor(self):
        return _PyAnyCAD.EditMode_GetDefaultEditor(self)

    def SetDefaultEditor(self, val):
        return _PyAnyCAD.EditMode_SetDefaultEditor(self, val)

    def GetActiveEditor(self):
        return _PyAnyCAD.EditMode_GetActiveEditor(self)

    def Push(self, editor, ctx):
        return _PyAnyCAD.EditMode_Push(self, editor, ctx)

    def Pop(self, ctx):
        return _PyAnyCAD.EditMode_Pop(self, ctx)

    def Clear(self, ctx):
        return _PyAnyCAD.EditMode_Clear(self, ctx)

    def OnTime(self, ctx, timeTick):
        return _PyAnyCAD.EditMode_OnTime(self, ctx, timeTick)

    def OnMouseDown(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMouseDown(self, ctx, evt)

    def OnMouseUp(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMouseUp(self, ctx, evt)

    def OnMouseMove(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMouseMove(self, ctx, evt)

    def OnMouseWheel(self, ctx, evt, delta):
        return _PyAnyCAD.EditMode_OnMouseWheel(self, ctx, evt, delta)

    def OnKeyDown(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnKeyDown(self, ctx, evt)

    def OnKeyUp(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnKeyUp(self, ctx, evt)

    def OnBeginMultiTouch(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnBeginMultiTouch(self, ctx, evt)

    def OnMultiTouch(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMultiTouch(self, ctx, evt)

    def OnEndMultiTouch(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnEndMultiTouch(self, ctx, evt)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.EditMode_BeforeRendering(self, ctx)

    def AfterRendering(self, ctx):
        return _PyAnyCAD.EditMode_AfterRendering(self, ctx)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_EditMode(self)
        return weakref.proxy(self)

# Register EditMode in _PyAnyCAD:
_PyAnyCAD.EditMode_swigregister(EditMode)

class GuiRenderer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GuiRenderer:
            _self = None
        else:
            _self = self
        _PyAnyCAD.GuiRenderer_swiginit(self, _PyAnyCAD.new_GuiRenderer(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_GuiRenderer

    def Initialize(self, pVewer):
        return _PyAnyCAD.GuiRenderer_Initialize(self, pVewer)

    def Destroy(self):
        return _PyAnyCAD.GuiRenderer_Destroy(self)

    def DrawGUI(self, viewer):
        return _PyAnyCAD.GuiRenderer_DrawGUI(self, viewer)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_GuiRenderer(self)
        return weakref.proxy(self)

# Register GuiRenderer in _PyAnyCAD:
_PyAnyCAD.GuiRenderer_swigregister(GuiRenderer)

class Viewer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Viewer

    def GetEditMode(self):
        return _PyAnyCAD.Viewer_GetEditMode(self)

    def GetWidth(self):
        return _PyAnyCAD.Viewer_GetWidth(self)

    def GetHeight(self):
        return _PyAnyCAD.Viewer_GetHeight(self)

    def GetZoomFactor(self):
        return _PyAnyCAD.Viewer_GetZoomFactor(self)

    def SetZoomFactor(self, val):
        return _PyAnyCAD.Viewer_SetZoomFactor(self, val)

    def Destroy(self):
        return _PyAnyCAD.Viewer_Destroy(self)

    def SetDocument(self, doc):
        return _PyAnyCAD.Viewer_SetDocument(self, doc)

    def GetDocument(self):
        return _PyAnyCAD.Viewer_GetDocument(self)

    def SetEditMode(self, editor):
        return _PyAnyCAD.Viewer_SetEditMode(self, editor)

    def PushEditor(self, editor, bClearOld):
        return _PyAnyCAD.Viewer_PushEditor(self, editor, bClearOld)

    def ClearEditor(self):
        return _PyAnyCAD.Viewer_ClearEditor(self)

    def GetTimeTicks(self):
        return _PyAnyCAD.Viewer_GetTimeTicks(self)

    def OnTime(self, timeTick):
        return _PyAnyCAD.Viewer_OnTime(self, timeTick)

    def Run(self, gui):
        return _PyAnyCAD.Viewer_Run(self, gui)

    def Redraw(self, timeTick):
        return _PyAnyCAD.Viewer_Redraw(self, timeTick)

    def NewFrame(self, timeTick):
        return _PyAnyCAD.Viewer_NewFrame(self, timeTick)

    def RequestUpdate(self, flag):
        return _PyAnyCAD.Viewer_RequestUpdate(self, flag)

    def GetContext(self):
        return _PyAnyCAD.Viewer_GetContext(self)

    def ZoomToExtend(self):
        return _PyAnyCAD.Viewer_ZoomToExtend(self)

    def CreateScreenShot(self):
        return _PyAnyCAD.Viewer_CreateScreenShot(self)

    def SetBackgroundColor(self, clr):
        return _PyAnyCAD.Viewer_SetBackgroundColor(self, clr)

    def SetBackground(self, background):
        return _PyAnyCAD.Viewer_SetBackground(self, background)

    def GetBackground(self):
        return _PyAnyCAD.Viewer_GetBackground(self)

    def SetCoordinateGrid(self, grid):
        return _PyAnyCAD.Viewer_SetCoordinateGrid(self, grid)

    def GetCoordinateGrid(self):
        return _PyAnyCAD.Viewer_GetCoordinateGrid(self)

    def ShowCoordinateGrid(self, bShow):
        return _PyAnyCAD.Viewer_ShowCoordinateGrid(self, bShow)

    def SetCoordinateWidget(self, type):
        return _PyAnyCAD.Viewer_SetCoordinateWidget(self, type)

    def SetCoordinateWidgetPosition(self, position):
        return _PyAnyCAD.Viewer_SetCoordinateWidgetPosition(self, position)

    def SetCoordinateWidgetText(self, textX, textY, textZ):
        return _PyAnyCAD.Viewer_SetCoordinateWidgetText(self, textX, textY, textZ)

    def ScreenPointToWorldPoint(self, x, y, z):
        return _PyAnyCAD.Viewer_ScreenPointToWorldPoint(self, x, y, z)

    def WorldPointToSceenPoint(self, pt):
        return _PyAnyCAD.Viewer_WorldPointToSceenPoint(self, pt)

    def WindowPointToRay(self, x, y):
        return _PyAnyCAD.Viewer_WindowPointToRay(self, x, y)

    def SetStandardView(self, view, bAnimation=True):
        return _PyAnyCAD.Viewer_SetStandardView(self, view, bAnimation)

    def OnResized(self, width, height):
        return _PyAnyCAD.Viewer_OnResized(self, width, height)

    def OnMouseDown(self, evt):
        return _PyAnyCAD.Viewer_OnMouseDown(self, evt)

    def OnMouseUp(self, evt):
        return _PyAnyCAD.Viewer_OnMouseUp(self, evt)

    def OnMouseMove(self, evt):
        return _PyAnyCAD.Viewer_OnMouseMove(self, evt)

    def OnMultiTouch(self, evt):
        return _PyAnyCAD.Viewer_OnMultiTouch(self, evt)

    def OnBeginMultiTouch(self, evt):
        return _PyAnyCAD.Viewer_OnBeginMultiTouch(self, evt)

    def OnEndMultiTouch(self, evt):
        return _PyAnyCAD.Viewer_OnEndMultiTouch(self, evt)

    def OnMouseWheel(self, evt, delta):
        return _PyAnyCAD.Viewer_OnMouseWheel(self, evt, delta)

    def OnKeyDown(self, evt):
        return _PyAnyCAD.Viewer_OnKeyDown(self, evt)

    def OnKeyUp(self, evt):
        return _PyAnyCAD.Viewer_OnKeyUp(self, evt)

    @staticmethod
    def SetZoomFacotr(zoomOut, zoomIn):
        return _PyAnyCAD.Viewer_SetZoomFacotr(zoomOut, zoomIn)

    def ResizeWindow(self, width, height):
        return _PyAnyCAD.Viewer_ResizeWindow(self, width, height)

    def ReadDepthBuffer(self, posX, posY, width, height):
        return _PyAnyCAD.Viewer_ReadDepthBuffer(self, posX, posY, width, height)

# Register Viewer in _PyAnyCAD:
_PyAnyCAD.Viewer_swigregister(Viewer)

def Viewer_SetZoomFacotr(zoomOut, zoomIn):
    return _PyAnyCAD.Viewer_SetZoomFacotr(zoomOut, zoomIn)

class Command(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Command:
            _self = None
        else:
            _self = self
        _PyAnyCAD.Command_swiginit(self, _PyAnyCAD.new_Command(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_Command

    def GetName(self):
        return _PyAnyCAD.Command_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Command_SetName(self, val)

    def Run(self, viewer, parameters):
        return _PyAnyCAD.Command_Run(self, viewer, parameters)

    def IsVisible(self, viewer):
        return _PyAnyCAD.Command_IsVisible(self, viewer)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_Command(self)
        return weakref.proxy(self)

# Register Command in _PyAnyCAD:
_PyAnyCAD.Command_swigregister(Command)

class CommandManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.CommandManager_Instance()

    def Add(self, name, command):
        return _PyAnyCAD.CommandManager_Add(self, name, command)

    def Remove(self, name):
        return _PyAnyCAD.CommandManager_Remove(self, name)

    def Find(self, name):
        return _PyAnyCAD.CommandManager_Find(self, name)

    def Execute(self, command, parameters, viewer, document):
        return _PyAnyCAD.CommandManager_Execute(self, command, parameters, viewer, document)
    __swig_destroy__ = _PyAnyCAD.delete_CommandManager

# Register CommandManager in _PyAnyCAD:
_PyAnyCAD.CommandManager_swigregister(CommandManager)

def CommandManager_Instance():
    return _PyAnyCAD.CommandManager_Instance()

class RenderingEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RenderingEngine_swiginit(self, _PyAnyCAD.new_RenderingEngine())
    __swig_destroy__ = _PyAnyCAD.delete_RenderingEngine

    @staticmethod
    def Initialize(baseDirectory):
        return _PyAnyCAD.RenderingEngine_Initialize(baseDirectory)

    @staticmethod
    def Destroy():
        return _PyAnyCAD.RenderingEngine_Destroy()

    @staticmethod
    def GetProgramPath():
        return _PyAnyCAD.RenderingEngine_GetProgramPath()

    @staticmethod
    def ValidateProduct(a, b, c, d):
        return _PyAnyCAD.RenderingEngine_ValidateProduct(a, b, c, d)

    @staticmethod
    def RegiserPythonSdk(mail, uuid, sn):
        return _PyAnyCAD.RenderingEngine_RegiserPythonSdk(mail, uuid, sn)

# Register RenderingEngine in _PyAnyCAD:
_PyAnyCAD.RenderingEngine_swigregister(RenderingEngine)

def RenderingEngine_Initialize(baseDirectory):
    return _PyAnyCAD.RenderingEngine_Initialize(baseDirectory)

def RenderingEngine_Destroy():
    return _PyAnyCAD.RenderingEngine_Destroy()

def RenderingEngine_GetProgramPath():
    return _PyAnyCAD.RenderingEngine_GetProgramPath()

def RenderingEngine_ValidateProduct(a, b, c, d):
    return _PyAnyCAD.RenderingEngine_ValidateProduct(a, b, c, d)

def RenderingEngine_RegiserPythonSdk(mail, uuid, sn):
    return _PyAnyCAD.RenderingEngine_RegiserPythonSdk(mail, uuid, sn)

class Application(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.Application_Instance()

    def GetActiveViewer(self):
        return _PyAnyCAD.Application_GetActiveViewer(self)

    def SetActiveViewer(self, val):
        return _PyAnyCAD.Application_SetActiveViewer(self, val)

    def GetActiveDocument(self):
        return _PyAnyCAD.Application_GetActiveDocument(self)

    def SetActiveDocument(self, val):
        return _PyAnyCAD.Application_SetActiveDocument(self, val)

    def Initialize(self, baseDirectory):
        return _PyAnyCAD.Application_Initialize(self, baseDirectory)

    def Destroy(self):
        return _PyAnyCAD.Application_Destroy(self)

    def CreateView(self, hwndHost, width, height):
        return _PyAnyCAD.Application_CreateView(self, hwndHost, width, height)

    def CreateWindow3D(self, title, width, height, visible):
        return _PyAnyCAD.Application_CreateWindow3D(self, title, width, height, visible)

    def CreateDocument(self, name):
        return _PyAnyCAD.Application_CreateDocument(self, name)

    def ExecuteCommand(self, name):
        return _PyAnyCAD.Application_ExecuteCommand(self, name)
    __swig_destroy__ = _PyAnyCAD.delete_Application

# Register Application in _PyAnyCAD:
_PyAnyCAD.Application_swigregister(Application)

def Application_Instance():
    return _PyAnyCAD.Application_Instance()

class DocumentSceneNode(GeneralSceneNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.DocumentSceneNode_swiginit(self, _PyAnyCAD.new_DocumentSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_DocumentSceneNode

    def GetDocument(self):
        return _PyAnyCAD.DocumentSceneNode_GetDocument(self)

    def SetDocument(self, val):
        return _PyAnyCAD.DocumentSceneNode_SetDocument(self, val)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.DocumentSceneNode_Cast(*args)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.DocumentSceneNode_ComputeBoundingBox(self)

    def FindElement(self, nodeId):
        return _PyAnyCAD.DocumentSceneNode_FindElement(self, nodeId)

    def UpdateTransform(self, parent):
        return _PyAnyCAD.DocumentSceneNode_UpdateTransform(self, parent)

    def Clone(self):
        return _PyAnyCAD.DocumentSceneNode_Clone(self)

    def IsDocumentNode(self):
        return _PyAnyCAD.DocumentSceneNode_IsDocumentNode(self)

# Register DocumentSceneNode in _PyAnyCAD:
_PyAnyCAD.DocumentSceneNode_swigregister(DocumentSceneNode)

def DocumentSceneNode_Cast(*args):
    return _PyAnyCAD.DocumentSceneNode_Cast(*args)



