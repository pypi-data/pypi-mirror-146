# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['guard_exception']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'guard-exception',
    'version': '1.1.0',
    'description': 'Catch fatal errors or any type of error, used to easily normalize executions in swift calls with PythonKit',
    'long_description': '# guard_exception\n    - guard all exception for swift run python\n\n## install\n    - pip install guard-exception\n\n\n## functions\n    - guardExceptionWithOutParams: execute function without parameters\n    - guardException: execute function with parameters\n    - guardSearchKeyException: look for a key\n    - guardSearchKeryRecursiveException: look for a key recursively\n    - guardExceptionIsIterable: return 1 or 0, if exists key on dic\n\n## example\n```python\nimport guard_exception as ge\n\ngg = ge.guard_exception()\n\n\ndef divide(a, b):\n    return a / b\n\n\nprint(gg.guardException(divide, a=1, b=0))\n\n\n# result cli\n# {\'data:\': None, \'error\': \'division by zero\'}\n\n```\n\n\n## example on swift with PythonKit\n```swift\nimport PythonKit\nlet hvac = Python.import("hvac")\nlet ge = Python.import("guard_exception")\nlet gg = ge.guard_exception()\n\nlet client = hvac.Client(url: "http://0.0.0.0:8200")\n\nlet user = "incorrect_user"\nlet params = Python.dict()\nparams["username"] = PythonObject(user)\nparams["password"] = PythonObject("incorrect_password")\n\nprint(gg.guardException(client.login, url: "v1/auth/userpass/login/\\(user)", use_token: true, json: params))\n\n// result: cli\n//{\'data\': None, \'error\': \'invalid username or password, on post http://0.0.0.0:8200/v1/auth/userpass/login/incorrect_user\'}\n```\n\n\n## example complete on swift\n```swift\n// guardException\n// guardSearchKeyException\n// guardSearchKeryRecursiveException\n\nimport Vapor\nimport PythonKit\nlet hvac = Python.import("hvac")\nlet ge = Python.import("guard_exception")\nlet gg = ge.guard_exception()\n\n// token structure for authentication\n// Content: help resolve the api response -> json\npublic struct Token: Content {\n    public var client_token: String!\n    public var accessor: String!\n    public var policies: [String]!\n    public var token_policies: [String]!\n}\n\n\n// swift class for authentication\npublic class autentication  {\n    // MARK: - Properties\n    let client = hvac.Client(url: "http://0.0.0.0:8200")\n    var token: Token?\n    \n    // MARK: - Initializers\n    public init() { }\n\n    public func login(user: String, password: String) -> Token {\n        let params = Python.dict()\n        params["username"] = PythonObject(user)\n        params["password"] = PythonObject(password)\n\n        let generated = Python.dict(gg.guardException(self.client.login, url: "v1/auth/userpass/login/\\(user)", use_token: true, json: params))\n\n        // result genereted\n        /*\n            {\n                \'data\': \n                {\n                    \'request_id\': \'45464674xxxxxxxb\', \n                    \'lease_id\': \'\', \n                    \'renewable\': False, \n                    \'lease_duration\': 0, \n                    \'data\': None, \n                    \'wrap_info\': None, \n                    \'warnings\': None, \n                    \'auth\': {\n                        \'client_token\': \'hvs.CAESasdfasdfxxxxxxxxxxxxxxxxxxx\', \n                        \'accessor\': \'TvExxxxxxxxxxxxxxx1ESqjW\', \n                        \'policies\': [\'default\'], \n                        \'token_policies\': [\'default\'], \n                        \'metadata\': {\'username\': \'rafael\'}, \n                        \'lease_duration\': 2764800, \n                        \'renewable\': True, \n                        \'entity_id\': \'dadxxxf8-xxxx-xxxxx-xxxxx-xxxxxxxxxxx\', \n                        \'token_type\': \'service\', \n                        \'orphan\': True, \n                        \'mfa_requirement\': None, \n                        \'num_uses\': 0\n                    }\n                }, \n                \'error\': None\n            }\n        */\n\n        let auth = gg.guardExceptionIsIterable(generated, key:"data")\n\n        if Int(auth["data"])! > 0 {\n\n            let client_token = String(gg.guardSearchKeryRecursiveException(generated, key:["data", "auth", "client_token"])["data"])\n            let accessor = String(gg.guardSearchKeryRecursiveException(generated, key:["data", "auth", "accessor"])["data"])\n            let policies = [String](gg.guardSearchKeryRecursiveException(generated, key:["data", "auth", "policies"])["data"])!\n            let token_policies = [String](gg.guardSearchKeryRecursiveException(generated, key:["data", "auth", "token_policies"])["data"])!\n\n            if client_token != nil {\n                self.token = Token(\n                    client_token: client_token,\n                    accessor: accessor,\n                    policies: policies,\n                    token_policies: token_policies\n                )\n            }\n        }\n        \n        return self.token ?? Token(client_token: nil, accessor: nil, policies: [], token_policies: [])\n    }\n\n}\n```\n',
    'author': 'Rafael Fernando Garcia Sagastume',
    'author_email': 'rafael.garcia@ciberc.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
