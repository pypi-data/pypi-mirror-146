# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils.ipynb (unless otherwise specified).

__all__ = ['resolve_path', 'get_random_string', 'human_size', 'get_dir_filesize', 'file_size_display',
           'verify_file_size', 'should_ignore_file', 'get_dir_transfer_files']

# Cell
import pathlib
import random
import string
from typing import List
from glob import glob
from devtransfer import exceptions, parsers

# Cell

def resolve_path(path):
    return pathlib.Path(path).resolve()

def get_random_string(size=10):
    return "".join(
        random.SystemRandom().choice(string.ascii_uppercase + string.digits)
        for _ in range(size)
    ).lower()


def human_size(bytes, units=[' bytes','KB','MB','GB','TB', 'PB', 'EB']):
    """ Returns a human readable string representation of bytes """
    return str(bytes) + units[0] if bytes < 1024 else human_size(bytes>>10, units[1:])


def get_dir_filesize(dir_path):
    return sum(f.stat().st_size for f in dir_path.rglob('*') if f.is_file())

def file_size_display(fpath, humanize=True):
    path = resolve_path(fpath)
    if path.is_dir():
        fpath_size = get_dir_filesize(path)
    else:
        fpath_size = path.stat().st_size
    if not humanize:
        return fpath_size
    return human_size(fpath_size)

def verify_file_size(fpath, max_size=1e+10):
    """
    Allow up to 10GB
    """
    path = resolve_path(fpath)
    fpath_size = file_size_display(path, humanize=False)
    return fpath_size < max_size

# Cell

def should_ignore_file(path, gitignore_path):
    path = resolve_path(path)
    if not path.exists():
        print(f"Ignoring {path}, it does not exist.")
        return True
    gitignore_path = resolve_path(gitignore_path)
    if not gitignore_path.exists():
        print(f"`.gitignore` or `.devignore` does not exist, ignoring {path}.")
        return True
    matches = parsers.parse_gitignore(gitignore_path)
    should_ignore = True
    try:
        should_ignore = matches(path)
    except:
        pass
    return should_ignore


def get_dir_transfer_files(root_dir: pathlib.Path,
                ignore_filename: str='.gitignore',
                raise_exception: bool=True,
                ignore_git_dir: bool=True) -> List[pathlib.Path]:
    base_path = resolve_path(root_dir)
    if not base_path.exists():
        return []
    gitignore_path = base_path / ignore_filename
    if not gitignore_path.exists() and raise_exception:
        exception_msg = f"""`.gitignore` or `.devignore` not found. One is required.\n
You must use `.gitignore` or `.devignore` for directory uploads.\n
Please add `.gitignore`/`.devignore` to:\n\n{base_path}
        """
        raise exceptions.GitignoreNotPresentException(exception_msg)
    matches = parsers.parse_gitignore(gitignore_path)
    files_list = []
    for path in base_path.glob('*'):
        should_ignore = True
        try:
            should_ignore = matches(path)
        except:
            pass
        if should_ignore:
            continue
        if ignore_git_dir:
            if ".git" in path.stem:
                continue
        files_list.append(path)
    return files_list