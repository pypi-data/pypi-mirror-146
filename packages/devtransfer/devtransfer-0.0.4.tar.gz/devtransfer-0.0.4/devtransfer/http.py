# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/http.ipynb (unless otherwise specified).

__all__ = ['Requests', 'requests']

# Cell
import requests as requests_pkg
from devtransfer import auth, exceptions

# Cell

class Requests:
    '''
    API calls with headers built in
    '''

    def get_auth_headers(self):
        token = auth.get_encoded_config()
        authorization_header = "Token {token}".format(token=token)
        return {'Authorization': authorization_header}

    def base_request(self, method, *args, **kwargs):
        headers = None
        if 'headers' in kwargs:
            headers = kwargs.pop("headers")
        include_auth_header = True
        if "include_auth_header" in kwargs:
            include_auth_header = str(kwargs.pop('include_auth_header')).lower() == "true"
        if not include_auth_header:
            return requests_pkg.request(method, *args, **kwargs, headers=headers)
        if isinstance(headers, dict):
            headers = {**headers, **self.get_auth_headers()}
        elif headers is None:
            headers = self.get_auth_headers()
        r = requests_pkg.request(method, headers=headers, *args, **kwargs)
        if r.status_code == 401:
            raise exceptions.LoginRequiredException("Login Required.")
        if r.status_code == 429:
            detail = "Your request has been throttled. Please try again later"
            try:
                data = r.json()
                detail = data['detail']
            except:
                pass
            raise exceptions.RequestThrottledException(f"{detail}")
        return r

    def get(self, *args, **kwargs):
        return self.base_request("get", *args, **kwargs)

    def post(self, *args, **kwargs):
        return self.base_request("post", *args, **kwargs)

    def put(self, *args, **kwargs):
        return self.base_request("put", *args, **kwargs)

    def delete(self, *args, **kwargs):
        return self.base_request("delete", *args, **kwargs)


requests = Requests()


