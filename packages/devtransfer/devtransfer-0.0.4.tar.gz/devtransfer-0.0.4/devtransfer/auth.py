# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/auth.ipynb (unless otherwise specified).

__all__ = ['display_login_required_msg', 'write_default_config', 'get_stored_config', 'encode_username_token',
           'get_encoded_config', 'login', 'check_status', 'login_with_token', 'logout', 'get_email', 'register',
           'BASE_ENDPOINT', 'DEVTRANSFER_CONF_DIR']

# Cell
import configparser
import requests
import base64
from getpass import getpass
from rich import print

from devtransfer import conf, http

BASE_ENDPOINT = conf.BASE_ENDPOINT
DEVTRANSFER_CONF_DIR = conf.DEVTRANSFER_CONF_DIR


def display_login_required_msg():
    print('You must login or register to continue.')
    print('[green]To continue use:\n')
    print('devtransfer login\n')
    print('[green]or\n')
    print('devtransfer register\n')


def write_default_config(username=None, token=None, config_block="default", ):
    config = configparser.ConfigParser()
    if username is None:
        username = ""
    if token is None:
        token = ""
    config[config_block] = {'username': username,
                          "token": token}
    DEVTRANSFER_CONF_DIR.mkdir(exist_ok=True)
    config_path = DEVTRANSFER_CONF_DIR / 'config'
    with config_path.open("w") as configfile:
        config.write(configfile)
    return config_path


def get_stored_config(config_block="default"):
    if not DEVTRANSFER_CONF_DIR.exists():
        return None, None
    config_path = DEVTRANSFER_CONF_DIR / 'config'
    if not config_path.exists():
        return None, None
    config = configparser.ConfigParser()
    config.read_string(config_path.read_text())
    try:
        default = config[config_block]
    except KeyError:
        default = None
    if default is None:
        return None, None
    return default.get("username"), default.get("token")

def encode_username_token(username, token):
    username_token = f"{username}:{token}"
    encoded = base64.b64encode(username_token.encode())
    return  encoded.decode()

def get_encoded_config(config_block="default"):
    username, token = get_stored_config(config_block=config_block)
    if username is None or token is None:
        return None
    return encode_username_token(username, token)

def login(username=None, password=None):
    if username is None:
        username = input("Username: ")
    if password is None:
        password = getpass("Password (typing hidden): ")
    url = f"{BASE_ENDPOINT}/accounts/login/"
    r = http.requests.post(url, data={"username": username, "password": password}, include_auth_header=False)
    if r.status_code not in range(200, 299):
        return False
    token = r.json()['key']
    write_default_config(username=username, token=token)
    return True

def check_status():
    username, token = get_stored_config()
    url = f"{BASE_ENDPOINT}/accounts/token/check/"
    auth_token = encode_username_token(username, token)
    r = http.requests.post(url, headers={'Authorization': f"Token {auth_token}"}, include_auth_header=False)
    if r.status_code in range(200, 299):
        return True
    return False

def login_with_token(username=None, token=None):
    if username is None:
        username = input("Username: ")
    url = f"{BASE_ENDPOINT}/accounts/token/check/"
    auth_token = encode_username_token(username, token)
    r = http.requests.post(url, headers={'Authorization': f"Token {auth_token}"}, include_auth_header=False)
    if r.status_code not in range(200, 299):
        return False
    write_default_config(username=username, token=token)
    return True

def logout():
    username, token = get_stored_config()
    write_default_config(username=username, token=None)
    return True


def get_email():
    email = input("Email: ")
    email_confirm = input("Email (confirm): ")
    if email != email_confirm:
        return get_email()
    return email

def register(verbose=True):
    username = input("Username: ")
    email = get_email()
    password = getpass("Password (typing hidden): ")
    url = f"{BASE_ENDPOINT}/accounts/register/"
    r = http.requests.post(url,
        data={"username": username, "email": email, "password1": password, "password2": password},
        include_auth_header=False)
    if r.status_code in range(200, 299):
        token = r.json()['key']
        write_default_config(username=username, token=token)
        if verbose:
            print("[green] Success your account has been created. Please check your email to confirm your account.")
        return True
    if r.status_code == 400:
        errors = r.json()
        print("[bold red]Registration failed for the following reason(s):\n")
        for k, v in errors.items():
            key_v = f"{k}".title()
            print(f'[red]- {key_v}: {", ".join(v)}')
        return False
    return False
    # token = r.json()['key']
    # write_default_config(username=username, token=token)
    # return True
