# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/api.ipynb (unless otherwise specified).

__all__ = ['DEVTRANSFER_CONF_DIR', 'BASE_ENDPOINT', 'Lookup']

# Cell
import requests
from devtransfer import conf

DEVTRANSFER_CONF_DIR = conf.DEVTRANSFER_CONF_DIR
BASE_ENDPOINT = conf.BASE_ENDPOINT

# Cell

class Lookup:
    '''
    API calls with headers built in
    '''
    api = BASE_ENDPOINT

    def get_request_path(self, path, next_url=None):
        if path.startswith("http"):
            request_path = path
        else:
            if not path.startswith("/"):
                path = '/' + path
            request_path = "{api}{path}".format(api=self.api, path=path)
            if next_url is not None:
                request_path = next_url
        return request_path

    def get_headers(self):
        token = credentials.get_encoded_token()
        authorization_header = "Token {token}".format(token=token)
        return {'Authorization': authorization_header}

    def http_get(self, endpoint_path, next_url=None, **kwargs):
        headers = self.get_headers()
        path = self.get_request_path(endpoint_path, next_url=next_url)
        return requests.get(path, headers=self.get_headers(), data=kwargs)

    def http_put(self, endpoint_path, data={}, **kwargs):
        headers = self.get_headers()
        path = self.get_request_path(endpoint_path)
        return requests.put(path, data=data, headers=self.get_headers())

    def http_delete(self, endpoint_path, data={}, **kwargs):
        headers = self.get_headers()
        path = self.get_request_path(endpoint_path)
        return requests.delete(path, data=data, headers=self.get_headers())

    def http_post(self, endpoint_path, data={}, **kwargs):
        headers = self.get_headers()
        path = self.get_request_path(endpoint_path)
        return requests.post(path, data=data, headers=self.get_headers())

    def handle_invalid_lookup(self, response, expected_status_code=200):
        r = response
        if not r.status_code == expected_status_code:
            try:
                msg = r.json()
            except:
                msg = r.text
            if isinstance(msg, list):
                msg = "".join(msg)
            if isinstance(msg, dict):
                if "detail" in msg:
                    msg = msg['detail']
                else:
                    msg = "\n".join([f"{k}: {v}" for k,v in msg.items()])
            raise Exception(f"Error in request\n\t{msg}")


