# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/core.ipynb (unless otherwise specified).

__all__ = ['DevTransferCLI', 'main']

# Cell
import fire
import pathlib
import sys
import os
from rich import print
from rich.prompt import Confirm, Prompt
from devtransfer import auth, compression, downloader, exceptions, encryption, formatting, utils, uploader

# Cell
class DevTransferCLI(object):
    zip_path = None

    def __init__(self,
            path='.',
            all=False,
            absolute=False,
            encrypt=None,
            no_encrypt=None,
            full=False,
            show=False,
            show_review=False,
            chunks: int =10,
            verbose=formatting.Verbosity.INFO):
        if path is None:
            path = "."
        path = utils.resolve_path(path)
        if not path.exists():
            raise Exception(f"{path} is not availabe on this system. Please try again with a valid path.")
        self.chunks = chunks
        self.is_verbose = verbose != formatting.Verbosity.NONSET
        self.verbose = verbose
        # if self.is_verbose:
        #     print("Using", path)
        devignore_exists = (path / '.devignore').exists()
        ignore_filename = '.devignore' if devignore_exists  else '.gitignore'
        self.ignore_filename = ignore_filename
        self.name = f"{path.name}-devtransfer"
        self.path = path
        if path.is_dir():
            self.files = utils.get_dir_transfer_files(self.path, ignore_filename=ignore_filename)
        else:
            self.files = [path]
        self.is_absolute = absolute == True or full == True or all == True
        self.show_review = show == True or show_review == True
        self.no_encrypt = no_encrypt
        self.encrypt = encrypt
        if (self.no_encrypt and self.encrypt):
            self.no_encrypt == False
            print("[bold red]You used `--encrypt` and `--no-encrypt`. Using encryption.")

    def status(self, *args, **kwargs):
        self.review(*args, **kwargs)

    def register(self):
        registered = auth.register(verbose=False)
        if registered:
            print(f"[bold green]Success.")
            print("[green]Please check your email to verify your account (sent from no-reply@devtransfer.com).")
        else:
            print("[red]\nPlease try again.")

    def login(self, username=None, token=None):
        logged_in = False
        token_from_env = os.environ.get("DEVTRANSFER_USER_TOKEN")
        if token is not None:
            """
            Usage:
            devtransfer login --username user --token user-token`
            """
            logged_in = auth.login_with_token(username=username, token=token)
        elif token_from_env is not None:
            """
            Usage:
            `DEVTRANSFER_USER_TOKEN="tokenvalue" devtransfer login --username user` or
            ```
            export DEVTRANSFER_USER_TOKEN="tokenvalue"
            devtransfer login --username user
            ```
            """
            logged_in = auth.login_with_token(username=username, token=token_from_env)
        else:
            logged_in = auth.login(username=username)
        if logged_in:
            print(f"[bold green]Success. You are logged in.")
        else:
            print("[red]Login failed. Check your credentials and try again.")

    def logout(self):
        logged_out = auth.logout()
        if logged_out:
            print(f"[bold green]Success. You are logged out.")
        else:
            print("[red]Login failed. Check your credentials and try again.")

    def review(self):
        formatting.review_files_table(root_dir=self.path, files=self.files, include_absolute=self.is_absolute)

    def compress(self, dest=None):
        files = self.files
        if len(files) == 1:
            zip_path = files[0]
            print()
            print("Uploading single file, skipping compression.")
            print(f"Filename: {zip_path.name}\nLocation: {zip_path.parent}\n")
            self.zip_path = zip_path
            return
        print("[blue]:unicorn_face: Compression starting")
        zip_path = compression.zip_file_paths(
                name=self.name,
                root_dir= self.path,
                files=files,
                destination_dir=dest,
                ignore_filename=self.ignore_filename,
                verbose=self.verbose,
                )
        self.zip_path = zip_path
        zip_parent_dir = utils.resolve_path(zip_path).parent
        if zip_path is None:
            print("An error occurred. Please try again.")
        if dest is None:
            print()
            print("[bold green]:floppy_disk: Compression complete!")
            print(f"Filename: {zip_path.name}\nLocation: {zip_parent_dir} (temporary)\n")
        else:
            print()
            print("[bold green]Compression complete!")
            print(f"Compression transfer is stored at: {zip_path}")
            print(f"Filename: {zip_path.name}\nLocation: {zip_parent_dir} (temporary)\n")

    def down(self, url=None, id=None, dest=None, decrypt=False, overwrite=False, key=None):
        if id is not None:
            dl_path = downloader.download_via_id(id=id, path=dest, overwrite=overwrite)
        if url is not None:
            dl_path = downloader.download_via_url(url, path=dest, overwrite=overwrite, metadata=None)
        if decrypt:
            print()
            output_path = dl_path.parent / f"{dl_path.stem}-decrypted{dl_path.suffix}"
            self.decrypt(dl_path, output_path=output_path, key=key)

    def download(self):
        return self.down()

    def up(self, key = None, auto_confirm=False):
        ready = auth.check_status()
        if not ready:
            auth.display_login_required_msg()
            return
        if self.show_review:
            self.review()
        self.compress()
        do_encrypt = self.encrypt
        if do_encrypt is None:
            if self.no_encrypt == False or self.no_encrypt == None:
                do_encrypt = Confirm.ask("Would you like to encrypt this?")
        if do_encrypt:
            print("[blue]:unlocked: Encryption starting")
            encrypt_key_from_env = os.environ.get("DEVTRANSFER_ENCRYPT_KEY")
            if encrypt_key_from_env is not None:
                encrypt_key = encrypt_key_from_env
                print("Using the key stored in `DEVTRANSFER_ENCRYPT_KEY`")
            if key is None:
                encrypt_key = encryption.generate_devtransfer_encryption_key()
                print("[bold green]The following is your encryption key:")
                print()
                print(f"[bold yellow]{encrypt_key}")
                print()
                print("*Do not lose this key* otherwise you not be able to access your file (nor can we).")
            if auto_confirm:
                key_safe = True
            else:
                key_safe = Confirm.ask("Are you ready to continue?")
            if key_safe:
                self.zip_path = encryption.encrypt_file(self.zip_path, encrypt_key)
        print("")
        print("[blue]:rocket: Upload progress")
        try:
            url = uploader.upload_file(self.zip_path, chunks=self.chunks)
        except exceptions.LoginRequiredException:
            url = None
            print('')
            print('[red]:heavy_exclamation_mark: Upload failed.:heavy_exclamation_mark:\n')
            auth.display_login_required_msg()
        if url is not None:
            print("[bold green]:tada: Upload complete!\n")
            print(f":link: Download URL: {url}")
            print("Download options:\n")

            print('macOS/Linux')
            print(f"[cyan]curl -L {url} -o {self.zip_path.name}")
            print('Windows\n')
            print(f"[cyan]curl {url} -o {self.zip_path.name}")
            print("")

            if do_encrypt:
                print("[bold]Recommended")
                print(f"[green]devtransfer down {url} --decrypt\n")
                print(f"[green]DEVTRANSFER_ENCRYPT_KEY=one-off-key devtransfer down {url} --decrypt")
                print("[grey]Or, add `DEVTRANSFER_ENCRYPT_KEY` to your environment variables, then:")


            else:
                print("[bold magenta]Recommended method")
                print(f"devtransfer down {url}")
            print("")
            print(":timer_clock:  Expires in 30 minutes.")
            print("")
            print(":wave: Need more time? Go to https://devtransfer.com/more-time")
            #E print("\n:white_check_mark: ")

    def decrypt(self, path, output_path, key=None, overwrite=False):
        source_path = pathlib.Path(path)
        output_path = pathlib.Path(output_path)
        encrypt_key_from_env = os.environ.get("DEVTRANSFER_ENCRYPT_KEY")
        if encrypt_key_from_env is not None:
            key = encrypt_key_from_env
        if key is None:
            print("[red]:heavy_exclamation_mark: Missing encryption key. Skipping decryption.")
            print("[red]Add `DEVTRANSFER_ENCRYPT_KEY` to your environment variables or pass `--key`.")

            return
        encryption.decencrypt_file(source_path=source_path, output_path=output_path, key=key, overwrite=overwrite)


    def upload(self):
        return self.up()

    def prepare(self):
        print("prepare")

# Cell
def main():
    fire.Fire(DevTransferCLI)