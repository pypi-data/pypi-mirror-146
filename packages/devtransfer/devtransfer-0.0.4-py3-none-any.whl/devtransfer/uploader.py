# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/uploader.ipynb (unless otherwise specified).

__all__ = ['BASE_ENDPOINT', 'initiate_upload', 'upload_parts', 'finalize_upload', 'upload_file']

# Cell
import requests
import json
import pathlib

from rich import print
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TimeElapsedColumn
from devtransfer import conf, exceptions, http, utils

BASE_ENDPOINT = conf.BASE_ENDPOINT

# Cell
def initiate_upload(fpath, base_endpoint=BASE_ENDPOINT, chunks=20):
    file_path = pathlib.Path(fpath)
    if not file_path.exists():
        raise Exception(f"Invalid File: {fpath} does not exist")
    file_size = utils.file_size_display(file_path, humanize=False)
    # print(f"Upload file size is {file_size_display}")
    endpoint = f"{base_endpoint}/transfers/prepare/"
    r = http.requests.post(endpoint, json={'filename': file_path.name, "file_size": file_size, "chunk_size": chunks})
    if r.status_code not in range(200, 299):
        raise Exception(f"Invalid request: \n{r.text}")
    return r.json()


# Cell
def upload_parts(fpath, data={}):
    """
    :data comes from the initiate_upload function
    """
    parts = []
    uploaded = 0
    console = Console(record=True)
    with Progress(SpinnerColumn(),
        *Progress.get_default_columns(),
        TimeElapsedColumn(),
        console=console,
        transient=True,) as progress:
        signed_urls = data['urls']
        file_size = utils.file_size_display(fpath, humanize=False)
        file_size_display = utils.file_size_display(fpath, humanize=True)
        task1 = progress.add_task(f"[blue]Starting ({file_size_display})...", total=file_size, start=False)
        file_path = pathlib.Path(fpath)
        if not file_path.exists():
            raise Exception(f"Invalid File: {fpath} does not exist")
        max_size = data['max_size']
        with file_path.open('rb') as fin:
            progress.start_task(task1)
            for i, url in enumerate(signed_urls):
                part = i + 1
                file_data = fin.read(max_size)
                res = requests.put(url, data=file_data)
                etag = json.loads(res.headers['ETag'])
                uploaded += max_size
                progress.update(task1, advance=max_size, description = f"[yellow]Finished ({utils.human_size(uploaded)} of {file_size_display})...")
                parts.append({"ETag": etag, "PartNumber": part})
            progress.update(task1, advance=file_size, description = f"[Upload]Success ({file_size_display} of {file_size_display})...")
    return parts

# Cell
def finalize_upload(parts = [], data={}, base_endpoint=BASE_ENDPOINT):
    """
    :parts comes from upload_parts
    :data comes from the initiate_upload function
    """
    slug = data['slug']
    endpoint = f"{base_endpoint}/transfers/complete/{slug}/"
    r = http.requests.post(endpoint, json={"parts": parts})
    if r.status_code not in range(200, 299):
        raise Exception("Could not complete request, please try again")
    url = None
    try:
        url = r.json()['url']
    except:
        print("URL failed to generate, please try again")
    # print(f'Upload done! {url} is ready')
    return url

# Cell
def upload_file(fpath='test.png', chunks=20):
    pre_upload_data = initiate_upload(fpath, chunks=chunks)
    uploaded_parts = upload_parts(fpath, data=pre_upload_data)
    url = finalize_upload(parts=uploaded_parts, data=pre_upload_data)
    return url