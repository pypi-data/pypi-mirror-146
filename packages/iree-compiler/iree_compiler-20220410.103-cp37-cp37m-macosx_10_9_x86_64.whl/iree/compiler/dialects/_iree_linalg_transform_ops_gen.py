
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _iree_linalg_transform_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "iree_linalg_transform"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BufferizeOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.bufferize"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class DecomposeOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.decompose"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExpertOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.expert"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, expertName, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["expertName"] = expertName
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def expertName(self):
    return _ods_ir.StringAttr(self.operation.attributes["expertName"])

  @expertName.setter
  def expertName(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["expertName"] = value

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ForwardOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.util.forward"

  _ODS_REGIONS = (0, True)

  def __init__(self, ins, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(ins))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def ins(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FuseOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.fuse"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, tile_sizes, tile_interchange, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["tile_sizes"] = tile_sizes
    attributes["tile_interchange"] = tile_interchange
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GeneralizeOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.generalize"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GetParentLoopOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.get_parent_loop"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, num_loops, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["num_loops"] = num_loops
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def num_loops(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["num_loops"])

  @num_loops.setter
  def num_loops(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["num_loops"] = value

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InterchangeOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.interchange"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, iterator_interchange, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["iterator_interchange"] = iterator_interchange
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LowerToLLVMOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.lower_to_llvm"

  _ODS_REGIONS = (0, True)

  def __init__(self, reassociate_fp_reductions, enable_index_optimizations, enable_arm_neon, enable_arm_sve, enable_amx, enable_x86vector, enable_async, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["reassociate_fp_reductions"] = reassociate_fp_reductions
    attributes["enable_index_optimizations"] = enable_index_optimizations
    attributes["enable_arm_neon"] = enable_arm_neon
    attributes["enable_arm_sve"] = enable_arm_sve
    attributes["enable_amx"] = enable_amx
    attributes["enable_x86vector"] = enable_x86vector
    attributes["enable_async"] = enable_async
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def reassociate_fp_reductions(self):
    return _ods_ir.BoolAttr(self.operation.attributes["reassociate_fp_reductions"])

  @reassociate_fp_reductions.setter
  def reassociate_fp_reductions(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["reassociate_fp_reductions"] = value

  @builtins.property
  def enable_index_optimizations(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_index_optimizations"])

  @enable_index_optimizations.setter
  def enable_index_optimizations(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_index_optimizations"] = value

  @builtins.property
  def enable_arm_neon(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_arm_neon"])

  @enable_arm_neon.setter
  def enable_arm_neon(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_arm_neon"] = value

  @builtins.property
  def enable_arm_sve(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_arm_sve"])

  @enable_arm_sve.setter
  def enable_arm_sve(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_arm_sve"] = value

  @builtins.property
  def enable_amx(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_amx"])

  @enable_amx.setter
  def enable_amx(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_amx"] = value

  @builtins.property
  def enable_x86vector(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_x86vector"])

  @enable_x86vector.setter
  def enable_x86vector(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_x86vector"] = value

  @builtins.property
  def enable_async(self):
    return _ods_ir.BoolAttr(self.operation.attributes["enable_async"])

  @enable_async.setter
  def enable_async(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["enable_async"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LowerVectorsOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.lower_vectors"

  _ODS_REGIONS = (0, True)

  def __init__(self, stages, contraction_lowering, multireduction_lowering, split_transfers, unroll_vector_transfers, transpose_lowering, transpose_avx2_lowering, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["stages"] = stages
    attributes["contraction_lowering"] = contraction_lowering
    attributes["multireduction_lowering"] = multireduction_lowering
    attributes["split_transfers"] = split_transfers
    attributes["unroll_vector_transfers"] = unroll_vector_transfers
    attributes["transpose_lowering"] = transpose_lowering
    attributes["transpose_avx2_lowering"] = transpose_avx2_lowering
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def contraction_lowering(self):
    return _ods_ir.StringAttr(self.operation.attributes["contraction_lowering"])

  @contraction_lowering.setter
  def contraction_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["contraction_lowering"] = value

  @builtins.property
  def multireduction_lowering(self):
    return _ods_ir.StringAttr(self.operation.attributes["multireduction_lowering"])

  @multireduction_lowering.setter
  def multireduction_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["multireduction_lowering"] = value

  @builtins.property
  def split_transfers(self):
    return _ods_ir.StringAttr(self.operation.attributes["split_transfers"])

  @split_transfers.setter
  def split_transfers(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["split_transfers"] = value

  @builtins.property
  def unroll_vector_transfers(self):
    return _ods_ir.BoolAttr(self.operation.attributes["unroll_vector_transfers"])

  @unroll_vector_transfers.setter
  def unroll_vector_transfers(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["unroll_vector_transfers"] = value

  @builtins.property
  def transpose_lowering(self):
    return _ods_ir.StringAttr(self.operation.attributes["transpose_lowering"])

  @transpose_lowering.setter
  def transpose_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["transpose_lowering"] = value

  @builtins.property
  def transpose_avx2_lowering(self):
    return _ods_ir.BoolAttr(self.operation.attributes["transpose_avx2_lowering"])

  @transpose_avx2_lowering.setter
  def transpose_avx2_lowering(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["transpose_avx2_lowering"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MatchOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.match"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, targetMatcher, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    attributes["targetMatcher"] = targetMatcher
    results.append(target)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class OutlineLoopOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.outline_loop"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, func_name, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["func_name"] = func_name
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def func_name(self):
    return _ods_ir.StringAttr(self.operation.attributes["func_name"])

  @func_name.setter
  def func_name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["func_name"] = value

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PadOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.pad"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, padding_values, padding_dimensions, pack_paddings, hoist_paddings, transpose_paddings, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["padding_values"] = padding_values
    attributes["padding_dimensions"] = padding_dimensions
    attributes["pack_paddings"] = pack_paddings
    attributes["hoist_paddings"] = hoist_paddings
    attributes["transpose_paddings"] = transpose_paddings
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PeelLoopOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.peel_loop"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PipelineLoopOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.pipeline_loop"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, iteration_interval, read_latency, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["iteration_interval"] = iteration_interval
    attributes["read_latency"] = read_latency
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def iteration_interval(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["iteration_interval"])

  @iteration_interval.setter
  def iteration_interval(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["iteration_interval"] = value

  @builtins.property
  def read_latency(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["read_latency"])

  @read_latency.setter
  def read_latency(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["read_latency"] = value

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class PrintOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.print"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, name, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if target is not None: operands.append(_get_op_result_or_value(target))
    attributes["name"] = name
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def name(self):
    return _ods_ir.StringAttr(self.operation.attributes["name"])

  @name.setter
  def name(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["name"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RewriteLinalgExtInParallelToAsyncOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.rewrite_iree_linalg_ext_in_parallel_to_async"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RewriteLinalgExtInParallelToHALOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.rewrite_iree_linalg_ext_in_parallel_to_hal"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RewriteLinalgExtInParallelToScfForOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.rewrite_iree_linalg_ext_in_parallel_to_scf_for"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RewriteLinalgExtTileToInParallelOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.rewrite_iree_linalg_ext_tile_to_in_parallel"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RewriteLinalgExtTileToScfForOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.rewrite_iree_linalg_ext_tile_to_scf_for"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def transformed(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ScalarizeOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.scalarize"

  _ODS_REGIONS = (0, True)

  def __init__(self, tiled_linalg_op, target, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    results.append(tiled_linalg_op)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def tiled_linalg_op(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ScopeOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.util.scope"

  _ODS_REGIONS = (1, True)

  def __init__(self, outs, ins, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(ins))
    results.extend(outs)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def ins(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def outs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SequenceOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.sequence"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def body(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TileOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.tile"

  _ODS_REGIONS = (0, True)

  def __init__(self, tiled_linalg_op, loops, target, sizes, interchange, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["sizes"] = sizes
    attributes["interchange"] = interchange
    results.append(tiled_linalg_op)
    results.extend(loops)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def tiled_linalg_op(self):
    return self.operation.results[0]

  @builtins.property
  def loops(self):
    _ods_variadic_group_length = len(self.operation.results) - 2 + 1
    return self.operation.results[1:1 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TileToLinalgExtTileOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.tile_to_iree_linalg_ext_tile_op"

  _ODS_REGIONS = (0, True)

  def __init__(self, tiled_op, tile_op, target, sizes, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["sizes"] = sizes
    results.append(tiled_op)
    results.append(tile_op)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def tiled_op(self):
    return self.operation.results[0]

  @builtins.property
  def tile_op(self):
    return self.operation.results[1]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class UnrollLoopOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.unroll_loop"

  _ODS_REGIONS = (0, True)

  def __init__(self, target, factor, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(target))
    attributes["factor"] = factor
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return self.operation.operands[0]

  @builtins.property
  def factor(self):
    return _ods_ir.IntegerAttr(self.operation.attributes["factor"])

  @factor.setter
  def factor(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["factor"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class VectorizeOp(_ods_ir.OpView):
  OPERATION_NAME = "iree_linalg_transform.vectorize"

  _ODS_REGIONS = (0, True)

  def __init__(self, transformed, target, vectorize_padding, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if target is not None: operands.append(_get_op_result_or_value(target))
    attributes["vectorize_padding"] = vectorize_padding
    if transformed is not None: results.append(transformed)
    _ods_successors = None
    super().__init__(self.build_generic(
      attributes=attributes, results=results, operands=operands,
      successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def target(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def vectorize_padding(self):
    return _ods_ir.BoolAttr(self.operation.attributes["vectorize_padding"])

  @vectorize_padding.setter
  def vectorize_padding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["vectorize_padding"] = value

  @builtins.property
  def transformed(self):
    return None if len(self.operation.results) < 1 else self.operation.results[0]
