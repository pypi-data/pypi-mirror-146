# generated by datamodel-codegen:
#   filename:  schema/entity/services/connections/dashboard/metabaseConnection.json
#   timestamp: 2022-04-11T06:51:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Extra, Field, SecretStr


class SupportedPipelineTypes2(Enum):
    Metadata = 'Metadata'


class MetabaseType(Enum):
    Metabase = 'Metabase'


class MetabaseConnection(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[MetabaseType] = Field(
        MetabaseType.Metabase, description='Service Type'
    )
    username: Optional[str] = Field(
        None,
        description='username to connect  to the Metabase. This user should have privileges to read all the metadata in Metabase.',
    )
    password: Optional[SecretStr] = Field(
        None, description='password to connect  to the Metabase.'
    )
    hostPort: Optional[str] = Field(
        None, description='Host and Port of Metabase instance.'
    )
    dbServiceName: Optional[str] = Field(
        None, description='Database Service Name for creation of lineage'
    )
    supportedPipelineTypes: Optional[SupportedPipelineTypes2] = Field(
        None, description='Supported Metadata Extraction Pipelines.'
    )
