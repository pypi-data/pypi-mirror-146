# generated by datamodel-codegen:
#   filename:  schema/entity/services/connections/dashboard/lookerConnection.json
#   timestamp: 2022-04-11T06:51:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import AnyUrl, BaseModel, Extra, Field, SecretStr


class SupportedPipelineTypes3(Enum):
    Metadata = 'Metadata'


class LookerType(Enum):
    Looker = 'Looker'


class LookerConnection(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[LookerType] = Field(LookerType.Looker, description='Service Type')
    username: Optional[str] = Field(
        None,
        description='username to connect  to the Looker. This user should have privileges to read all the metadata in Looker.',
    )
    password: Optional[SecretStr] = Field(
        None, description='password to connect  to the Looker.'
    )
    hostPort: Optional[AnyUrl] = Field(None, description='URL to Looker instance.')
    env: Optional[str] = Field(None, description='Looker Environment')
    supportedPipelineTypes: Optional[SupportedPipelineTypes3] = Field(
        None, description='Supported Metadata Extraction Pipelines.'
    )
