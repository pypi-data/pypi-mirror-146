{"version":3,"file":"lib_index_js.7ff68a49ec6ed2f13dc1.js","mappings":";;;;;;;;;;;;;;;;;AAA2D;AACJ;AACZ;AAC3C;AACA;AACA;AACO,mCAAmC,qEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kDAAa;AAChC;AACA,yBAAyB,iDAAY;AACrC,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;AChC0D;AACL;AACQ;AACZ;AACP;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAe,EAAE,uEAAmB;AACnD,cAAc,mDAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAAa,GAAG,WAAW;AACvD;AACA;AACA;AACA;AACA;AACA,mCAAmC,6CAA6C;AAChF;AACA,aAAa;AACb;AACA;AACA;AACA,kCAAkC,0DAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;;;AC/DyD;AACzB;AACJ;AACf;AACH;AAChC;AACA;AACA;AACO,4BAA4B,wDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wEAAoB;AACnD,uBAAuB,mEAAe,GAAG,eAAe;AACxD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,kEAAqC;AACpD;AACA;AACA;AACA;AACA,QAAQ,kEAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAM,GAAG,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAA4B;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2CAAc;AACxC;AACA,mBAAmB,yCAAK;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAiB;AACzB;AACA;;;;;;;;;;;;;;;;;;;;AC3HmC;AACI;AACL;AAC3B;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2CAAO;AAC/B,gCAAgC,uDAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAiC;AACzC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChC0C;AAC1C;AACA;AACA;AACO,4BAA4B,oDAAK;;;;;;;;;;;;;;;;;;ACJL;AACnC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAyB;AAClD,UAAU,mDAAsB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;;;;;;;;;;;;;;;;;;;;;;;;;;;AClVkD;AACJ;AACD;AACZ;AACG;AACF;AACzC;AACA;AACA;AACO,4BAA4B,mEAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,kBAAkB,8DAAO;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,kDAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAa;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://jupyterlab-blockly/./lib/factory.js","webpack://jupyterlab-blockly/./lib/index.js","webpack://jupyterlab-blockly/./lib/layout.js","webpack://jupyterlab-blockly/./lib/manager.js","webpack://jupyterlab-blockly/./lib/token.js","webpack://jupyterlab-blockly/./lib/utils.js","webpack://jupyterlab-blockly/./lib/widget.js"],"sourcesContent":["import { ABCWidgetFactory } from '@jupyterlab/docregistry';\nimport { BlocklyEditor, BlocklyPanel } from './widget';\nimport { BlocklyManager } from './manager';\n/**\n * A widget factory to create new instances of BlocklyEditor.\n */\nexport class BlocklyEditorFactory extends ABCWidgetFactory {\n    /**\n     * Constructor of BlocklyEditorFactory.\n     *\n     * @param options Constructor options\n     */\n    constructor(options) {\n        super(options);\n        this._manager = new BlocklyManager();\n        this._rendermime = options.rendermime;\n    }\n    get manager() {\n        return this._manager;\n    }\n    /**\n     * Create a new widget given a context.\n     *\n     * @param context Contains the information of the file\n     * @returns The widget\n     */\n    createNewWidget(context) {\n        return new BlocklyEditor({\n            context,\n            content: new BlocklyPanel(context, this._manager, this._rendermime)\n        });\n    }\n}\n","import { ILayoutRestorer } from '@jupyterlab/application';\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { BlocklyEditorFactory } from './factory';\nimport { IBlocklyManager } from './token';\n/**\n * The name of the factory that creates the editor widgets.\n */\nconst FACTORY = 'Blockly editor';\n/**\n * Initialization data for the jupyterlab-blocky extension.\n */\nconst plugin = {\n    id: 'jupyterlab-blocky:plugin',\n    autoStart: true,\n    requires: [ILayoutRestorer, IRenderMimeRegistry],\n    provides: IBlocklyManager,\n    activate: (app, restorer, rendermime) => {\n        console.log('JupyterLab extension jupyterlab-blocky is activated!');\n        // Namespace for the tracker\n        const namespace = 'jupyterlab-blocky';\n        // Creating the tracker for the document\n        const tracker = new WidgetTracker({ namespace });\n        // Handle state restoration.\n        if (restorer) {\n            // When restoring the app, if the document was open, reopen it\n            restorer.restore(tracker, {\n                command: 'docmanager:open',\n                args: widget => ({ path: widget.context.path, factory: FACTORY }),\n                name: widget => widget.context.path\n            });\n        }\n        // Creating the widget factory to register it so the document manager knows about\n        // our new DocumentWidget\n        const widgetFactory = new BlocklyEditorFactory({\n            name: FACTORY,\n            modelName: 'text',\n            fileTypes: ['json'],\n            defaultFor: ['json'],\n            // Kernel options, in this case we need to execute the code generated\n            // in the blockly editor. The best way would be to use kernels, for\n            // that reason, we tell the widget factory to start a kernel session\n            // when opening the editor, and close the session when closing the editor.\n            canStartKernel: true,\n            preferKernel: true,\n            shutdownOnClose: true,\n            // The rendermime instance, necessary to render the outputs\n            // after a code execution.\n            rendermime: rendermime\n        });\n        // Add the widget to the tracker when it's created\n        widgetFactory.widgetCreated.connect((sender, widget) => {\n            // Notify the instance tracker if restore data needs to update.\n            widget.context.pathChanged.connect(() => {\n                tracker.save(widget);\n            });\n            tracker.add(widget);\n        });\n        // Registering the widget factory\n        app.docRegistry.addWidgetFactory(widgetFactory);\n        return widgetFactory.manager;\n    }\n};\nexport default plugin;\n","import { SimplifiedOutputArea, OutputAreaModel } from '@jupyterlab/outputarea';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { ArrayIterator } from '@lumino/algorithm';\nimport * as Blockly from 'blockly';\nimport { THEME } from './utils';\n/**\n * A blockly layout to host the Blockly editor.\n */\nexport class BlocklyLayout extends PanelLayout {\n    /**\n     * Construct a `BlocklyLayout`.\n     *\n     */\n    constructor(manager, sessionContext, rendermime) {\n        super();\n        this._manager = manager;\n        this._sessionContext = sessionContext;\n        // Creating the container for the Blockly editor\n        // and the output area to render the execution replies.\n        this._host = document.createElement('div');\n        // Creating a SimplifiedOutputArea widget to render the\n        // outputs from the execution reply.\n        this._outputArea = new SimplifiedOutputArea({\n            model: new OutputAreaModel({ trusted: true }),\n            rendermime\n        });\n    }\n    get workspace() {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return Blockly.serialization.workspaces.save(this._workspace);\n    }\n    set workspace(workspace) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        Blockly.serialization.workspaces.load(workspace, this._workspace);\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        this._workspace.dispose();\n        super.dispose();\n    }\n    /**\n     * Init the blockly layout\n     */\n    init() {\n        super.init();\n        // Add the blockly container into the DOM\n        this.addWidget(new Widget({ node: this._host }));\n    }\n    /**\n     * Create an iterator over the widgets in the layout.\n     */\n    iter() {\n        return new ArrayIterator([]);\n    }\n    /**\n     * Remove a widget from the layout.\n     *\n     * @param widget - The `widget` to remove.\n     */\n    removeWidget(widget) {\n        return;\n    }\n    run() {\n        // Serializing our workspace into the chosen language generator.\n        const code = this._manager.generator.workspaceToCode(this._workspace);\n        // Execute the code using the kernel, by using a static method from the\n        // same class to make an execution request.\n        SimplifiedOutputArea.execute(code, this._outputArea, this._sessionContext)\n            .then(resp => {\n            this.addWidget(this._outputArea);\n            this._resizeWorkspace();\n        })\n            .catch(e => console.error(e));\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        this._resizeWorkspace();\n    }\n    /**\n     * Handle `resize-request` messages sent to the widget.\n     */\n    onResize(msg) {\n        this._resizeWorkspace();\n    }\n    /**\n     * Handle `fit-request` messages sent to the widget.\n     */\n    onFitRequest(msg) {\n        this._resizeWorkspace();\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        //inject Blockly with appropiate JupyterLab theme.\n        this._workspace = Blockly.inject(this._host, {\n            toolbox: this._manager.toolbox,\n            theme: THEME\n        });\n    }\n    _resizeWorkspace() {\n        //Resize logic.\n        const rect = this.parent.node.getBoundingClientRect();\n        const { height } = this._outputArea.node.getBoundingClientRect();\n        this._host.style.width = rect.width + 'px';\n        const margin = rect.height / 3;\n        if (height > margin) {\n            this._host.style.height = rect.height - margin + 'px';\n            this._outputArea.node.style.height = margin + 'px';\n            this._outputArea.node.style.overflowY = 'scroll';\n        }\n        else {\n            this._host.style.height = rect.height - height + 'px';\n            this._outputArea.node.style.overflowY = 'hidden';\n        }\n        Blockly.svgResize(this._workspace);\n    }\n}\n","import * as Blockly from 'blockly';\nimport BlocklyPy from 'blockly/python';\nimport { TOOLBOX } from './utils';\nexport class BlocklyManager {\n    /**\n     * Constructor of BlocklyEditorFactory.\n     *\n     * @param options Constructor options\n     */\n    constructor() {\n        this._toolbox = TOOLBOX;\n        this._activeGenerator = BlocklyPy;\n        this._generators = new Map();\n    }\n    get toolbox() {\n        return this._toolbox;\n    }\n    set activeGenerator(name) {\n        this._activeGenerator = this._generators.get(name);\n    }\n    get generator() {\n        return this._activeGenerator;\n    }\n    registerToolbox(value) {\n        this._toolbox = value;\n    }\n    registerBlocks(blocks) {\n        Blockly.defineBlocksWithJsonArray(blocks);\n    }\n    registerGenerator(kernel, generator) {\n        this._generators.set(kernel, generator);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The manager token.\n */\nexport const IBlocklyManager = new Token('jupyterlab-blockly/manager');\n","import * as Blockly from 'blockly';\n// Creating a toolbox containing all the main (default) blocks.\nexport const TOOLBOX = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'category',\n            name: 'Logic',\n            colour: '210',\n            contents: [\n                {\n                    kind: 'block',\n                    type: 'controls_if'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_compare'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_operation\"></block>',\n                    type: 'logic_operation'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_negate\"></block>',\n                    type: 'logic_negate'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_boolean\"></block>',\n                    type: 'logic_boolean'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_null\"></block>',\n                    type: 'logic_null'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_ternary\"></block>',\n                    type: 'logic_ternary'\n                }\n            ]\n        },\n        {\n            kind: 'category',\n            name: 'Loops',\n            colour: '120',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_repeat_ext\">\\n          <value name=\"TIMES\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'controls_repeat_ext'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_whileUntil\"></block>',\n                    type: 'controls_whileUntil'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_for\">\\n          <value name=\"FROM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"TO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n          <value name=\"BY\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'controls_for'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_forEach\"></block>',\n                    type: 'controls_forEach'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_flow_statements\"></block>',\n                    type: 'controls_flow_statements'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Math',\n            colour: '230',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_number\"></block>',\n                    type: 'math_number'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_arithmetic\">\\n          <value name=\"A\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"B\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_arithmetic'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_single\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">9</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_single'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_trig\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">45</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_trig'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_constant\"></block>',\n                    type: 'math_constant'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_number_property\">\\n          <value name=\"NUMBER_TO_CHECK\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_number_property'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_change\">\\n          <value name=\"DELTA\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_change'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_round\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">3.1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_round'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_on_list\"></block>',\n                    type: 'math_on_list'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_modulo\">\\n          <value name=\"DIVIDEND\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">64</field>\\n            </shadow>\\n          </value>\\n          <value name=\"DIVISOR\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_modulo'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_constrain\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">50</field>\\n            </shadow>\\n          </value>\\n          <value name=\"LOW\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"HIGH\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_constrain'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_random_int\">\\n          <value name=\"FROM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"TO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_random_int'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_random_float\"></block>',\n                    type: 'math_random_float'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Text',\n            colour: '160',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text\"></block>',\n                    type: 'text'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_join\"></block>',\n                    type: 'text_join'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_append\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\"></shadow>\\n          </value>\\n        </block>',\n                    type: 'text_append'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_length\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_length'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_isEmpty\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\"></field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_isEmpty'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_indexOf\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n          <value name=\"FIND\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_indexOf'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_charAt\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'text_charAt'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_getSubstring\">\\n          <value name=\"STRING\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'text_getSubstring'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_changeCase\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_changeCase'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_trim\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_trim'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_print\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_print'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_prompt_ext\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_prompt_ext'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Lists',\n            colour: '260',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_create_with\">\\n          <mutation items=\"0\"></mutation>\\n        </block>',\n                    type: 'lists_create_with'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_create_with\"></block>',\n                    type: 'lists_create_with'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_repeat\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">5</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'lists_repeat'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_length\"></block>',\n                    type: 'lists_length'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_isEmpty\"></block>',\n                    type: 'lists_isEmpty'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_indexOf\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_indexOf'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_getIndex\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_getIndex'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_setIndex\">\\n          <value name=\"LIST\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_setIndex'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_getSublist\">\\n          <value name=\"LIST\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_getSublist'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_split\">\\n          <value name=\"DELIM\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">,</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'lists_split'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_sort\"></block>',\n                    type: 'lists_sort'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Color',\n            colour: '20',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_picker\"></block>',\n                    type: 'colour_picker'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_random\"></block>',\n                    type: 'colour_random'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_rgb\">\\n          <value name=\"RED\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n          <value name=\"GREEN\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">50</field>\\n            </shadow>\\n          </value>\\n          <value name=\"BLUE\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'colour_rgb'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_blend\">\\n          <value name=\"COLOUR1\">\\n            <shadow type=\"colour_picker\">\\n              <field name=\"COLOUR\">#ff0000</field>\\n            </shadow>\\n          </value>\\n          <value name=\"COLOUR2\">\\n            <shadow type=\"colour_picker\">\\n              <field name=\"COLOUR\">#3333ff</field>\\n            </shadow>\\n          </value>\\n          <value name=\"RATIO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0.5</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'colour_blend'\n                }\n            ]\n        },\n        {\n            kind: 'SEP'\n        },\n        {\n            kind: 'CATEGORY',\n            colour: '330',\n            custom: 'VARIABLE',\n            name: 'Variables'\n        },\n        {\n            kind: 'CATEGORY',\n            colour: '290',\n            custom: 'PROCEDURE',\n            name: 'Functions'\n        }\n    ]\n};\n// Defining a Blockly Theme in accordance with the current JupyterLab Theme.\nconst jupyterlab_theme = Blockly.Theme.defineTheme('jupyterlab', {\n    base: Blockly.Themes.Classic,\n    componentStyles: {\n        workspaceBackgroundColour: 'var(--jp-layout-color0)',\n        toolboxBackgroundColour: 'var(--jp-layout-color2)',\n        toolboxForegroundColour: 'var(--jp-ui-font-color0)',\n        flyoutBackgroundColour: 'var(--jp-border-color2)',\n        flyoutForegroundColour: 'var(--jp-layout-color3)',\n        flyoutOpacity: 1,\n        scrollbarColour: 'var(--jp-border-color0)',\n        insertionMarkerOpacity: 0.3,\n        scrollbarOpacity: 0.4,\n        cursorColour: 'var(--jp-scrollbar-background-color)'\n    }\n});\nexport const THEME = jupyterlab_theme;\n","import { DocumentWidget } from '@jupyterlab/docregistry';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { runIcon } from '@jupyterlab/ui-components';\nimport { Panel } from '@lumino/widgets';\nimport { Signal } from '@lumino/signaling';\nimport { BlocklyLayout } from './layout';\n/**\n * DocumentWidget: widget that represents the view or editor for a file type.\n */\nexport class BlocklyEditor extends DocumentWidget {\n    constructor(options) {\n        super(options);\n        // Create and add a button to the toolbar to execute\n        // the code.\n        const runCode = () => {\n            this.content.layout.run();\n        };\n        const button = new ToolbarButton({\n            label: 'Run Code',\n            icon: runIcon,\n            className: 'jp-blockly-button',\n            onClick: runCode,\n            tooltip: 'Run Code'\n        });\n        button.addClass('jp-blockly-runButton');\n        this.toolbar.addItem('run', button);\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        this.content.dispose();\n        super.dispose();\n    }\n}\n/**\n * Widget that contains the main view of the DocumentWidget.\n */\nexport class BlocklyPanel extends Panel {\n    /**\n     * Construct a `ExamplePanel`.\n     *\n     * @param context - The documents context.\n     */\n    constructor(context, manager, rendermime) {\n        super({\n            layout: new BlocklyLayout(manager, context.sessionContext, rendermime)\n        });\n        this.addClass('jp-BlocklyPanel');\n        this._context = context;\n        // Load the content of the file when the context is ready\n        this._context.ready.then(() => this._load());\n        // Connect to the save signal\n        this._context.saveState.connect(this._onSave, this);\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        Signal.clearData(this);\n        super.dispose();\n    }\n    _load() {\n        // Loading the content of the document into the workspace\n        const content = this._context.model.toJSON();\n        this.layout.workspace = content;\n    }\n    _onSave(sender, state) {\n        if (state === 'started') {\n            const workspace = this.layout.workspace;\n            this._context.model.fromJSON(workspace);\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}