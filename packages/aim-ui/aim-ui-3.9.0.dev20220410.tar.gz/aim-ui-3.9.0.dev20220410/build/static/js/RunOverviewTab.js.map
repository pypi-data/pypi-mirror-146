{"version":3,"sources":["pages/RunDetail/RunOverviewTab/components/GitInfoCard/index.tsx","pages/RunDetail/RunOverviewTab/components/MetricsCard/RunOverviewTabMetricsCard.tsx","pages/RunDetail/RunOverviewTab/components/Packages/RunOverviewTabPackagesCard.tsx","pages/RunDetail/RunOverviewTab/components/ParamsCard/RunOverviewTabParamsCard.tsx","pages/RunDetail/RunOverviewTab/components/RunOverviewSidebar/RunOverviewSidebar.tsx","pages/RunDetail/RunOverviewTab/components/CLIArgumentsCard/RunOverviewTabCLIArgumentsCard.tsx","pages/RunDetail/RunOverviewTab/components/EnvVariablesCard/RunOverviewTabEnvVariablesCard.tsx","pages/RunDetail/RunOverviewTab/RunOverviewTab.tsx","pages/RunDetail/RunOverviewTab/index.tsx","utils/getObjectPaths.ts","components/CopyToClipBoard/CopyToClipBoard.tsx","components/CodeBlock/CodeBlock.tsx","pages/RunDetail/hooks/useRunMetricsBatch.tsx"],"names":["GitInfoCard","props","title","className","weight","tint","size","color","name","fontSize","data","branch","commit","author","hash","moment","timestamp","format","DATE_GIT_COMMIT","React","memo","RunOverviewTabMetricsCard","isLoading","runBatch","type","tableData","useMemo","map","index","values","context","key","isSystemMetric","formatSystemMetricName","value","formatValue","_","last","tableColumns","dataKey","length","width","cellRenderer","cellData","isEmpty","isNil","label","COLORS","contextToString","ErrorBoundary","Card","dataListProps","searchableKeys","calcTableHeight","illustrationConfig","displayName","RunOverviewTabPackagesCard","packages","isRunInfoLoading","Object","entries","BusyLoaderWrapper","height","RunOverviewTabParamsCard","runParams","getObjectPaths","filter","path","startsWith","getValue","flexGrow","RunOverviewSidebar","info","traces","runHash","url","useRouteMatch","insightsList","split","slice","join","systemMetricsLength","metric","m","distributions","images","audios","texts","figures","component","creation_time","processDurationTime","end_time","Date","now","tags","tag","Divider","to","RunOverviewTabCLIArgumentsCard","cliArguments","code","CodeBlock","RunOverviewTabEnvVariablesCard","envVariables","RunOverviewTab","runData","useRunMetricsBatch","runMetricsBatch","runTraces","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","tabView","cardsData","systemParams","__system_params","runSystemBatch","arguments","env_variables","gitInfo","git_info","IllustrationBlock","isRunBatchLoading","runInfo","obj","rootObject","prefix","includeRoot","withoutLeaves","rootKeys","keys","prefixedKey","paths","reduce","acc","val","isArray","push","indexOf","isObject","forEach","Array","concat","CopyToClipboard","contentRef","showSuccessDelay","useState","showCopiedIcon","setShowCopiedIcon","setTimeout","onCopy","useCallback","current","navigator","clipboard","writeText","innerText","trim","then","catch","onClick","style","language","createRef","defaultProps","theme","tokens","getLineProps","getTokenProps","ref","line","i","token","CopyToClipBoard","runsBatchRequestRef","runDetailAppModel","getRunMetricsBatch","call","abort"],"mappings":"gUAWA,SAASA,EAAYC,GAA2B,IAAD,QAC7C,OACE,cAAC,IAAD,CAAMC,MAAM,gBAAgBC,UAAU,sCAAtC,SACE,sBAAKA,UAAU,yCAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,cAAC,IAAD,CACEA,UAAU,gBACVC,OAAQ,IACRC,KAAM,GACNC,KAAM,GACNC,MAAM,UALR,oBASA,sBAAKJ,UAAU,yBAAf,UACE,cAAC,IAAD,CAAMK,KAAK,SAASC,SAAU,KAC9B,cAAC,IAAD,CACEN,UAAU,oBACVC,OAAQ,IACRE,KAAM,GACNC,MAAM,UAJR,mBAMGN,EAAMS,YANT,aAMG,EAAYC,eAInB,sBAAKR,UAAU,oBAAf,UACE,cAAC,IAAD,CACEA,UAAU,gBACVC,OAAQ,IACRC,KAAM,GACNC,KAAM,GACNC,MAAM,UALR,oBASA,sBAAKJ,UAAU,yBAAf,UACE,cAAC,IAAD,CAAMK,KAAK,SAASC,SAAU,KAC9B,cAAC,IAAD,CACEN,UAAU,oBACVC,OAAQ,IACRE,KAAM,GACNC,MAAM,UAJR,mBAMGN,EAAMS,KAAKE,cANd,aAMG,EAAmBC,eAI1B,sBAAKV,UAAU,oBAAf,UACE,cAAC,IAAD,CACEA,UAAU,gBACVC,OAAQ,IACRC,KAAM,GACNC,KAAM,GACNC,MAAM,UALR,kBASA,sBAAKJ,UAAU,yBAAf,UACE,cAAC,IAAD,CAAMK,KAAK,OAAOC,SAAU,KAC5B,cAAC,IAAD,CACEN,UAAU,oBACVC,OAAQ,IACRE,KAAM,GACNC,MAAM,UAJR,mBAMGN,EAAMS,KAAKE,cANd,aAMG,EAAmBE,aAI1B,sBAAKX,UAAU,oBAAf,UACE,cAAC,IAAD,CACEA,UAAU,gBACVC,OAAQ,IACRC,KAAM,GACNC,KAAM,GACNC,MAAM,UALR,uBASA,sBAAKJ,UAAU,yBAAf,UACE,cAAC,IAAD,CAAMK,KAAK,OAAOC,SAAU,KAC5B,cAAC,IAAD,CACEN,UAAU,oBACVC,OAAQ,IACRE,KAAM,GACNC,MAAM,UAJR,mBAMMQ,IAAM,UAACd,EAAMS,KAAKE,cAAZ,aAAC,EAAmBI,WAAWC,OACvCC,mBAUDC,UAAMC,KAAKpB,G,uEChG1B,SAASqB,EAAT,GAQI,IAPFC,EAOC,EAPDA,UACAC,EAMC,EANDA,SACAC,EAKC,EALDA,KAMMC,EAAYN,IAAMO,SAAQ,WAC9B,OAAIH,EACKA,EAASI,KAAI,WAAiCC,GAAmB,IAAjDpB,EAAgD,EAAhDA,KAAMqB,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,QACnC,MAAO,CACLC,IAAKH,EACLpB,KAAMwB,YAAexB,GAAQyB,YAAuBzB,GAAQA,EAC5D0B,MAAOC,YAAYC,IAAEC,KAAKR,IAC1BC,QAASA,MAIR,KACN,CAACP,IAEEe,EAAenB,IAAMO,SACzB,iBAAM,CACJ,CACEa,QAAS,OACTR,IAAK,OACL7B,MACE,eAAC,IAAD,CAAME,OAAQ,IAAKE,KAAM,GAAID,KAAM,IAAnC,iBAEE,eAAC,IAAD,CACED,OAAQ,IACRE,KAAM,GACND,KAAM,GACNF,UAAU,2CAJZ,qBAMIoB,QANJ,IAMIA,OANJ,EAMIA,EAAUiB,OANd,UAUJC,MAAO,QACPC,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OAAuB,mBAAGzC,MAAOyC,EAAV,SAAqBA,MAE5D,CACEJ,QAAS,UACTR,IAAK,UACL7B,MAAO,UACPuC,MAAO,QACPC,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OACXP,IAAEQ,QAAQD,IAAcP,IAAES,MAAMF,GAQ/B,cAAC,IAAD,CACErC,KAAK,QACLC,MAAO,UACPuC,MAAO,gBACP3C,UAAU,gDAXZ,cAAC,IAAD,CACEG,KAAK,QACLC,MAAOwC,IAAO,GAAG,GACjBD,MAAOE,YAAgBL,IAAa,GACpCxC,UAAU,qCAWlB,CACEoC,QAAS,QACTR,IAAK,QACL7B,MAAO,aACPuC,MAAO,QACPC,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OAAuB,mBAAGzC,MAAOyC,EAAV,SAAqBA,SAG9D,CAACpB,IAGH,OACE,cAAC0B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEhD,MAAgB,WAATsB,EAAoB,UAAY,iBAMvCrB,UAAU,0BACVgD,cAAe,CACb7B,UAAWA,IAAcC,EACzB6B,eAAgB,CAAC,OAAQ,SACzBd,eACAb,YACA4B,iBAAiB,EACjBC,mBAAoB,CAClBhD,KAAM,QACNJ,MAAO,mBAQnBmB,EAA0BkC,YAAc,4BAEzBpC,UAAMC,KAAKC,G,gBC5G1B,SAASmC,EAAT,GAGsC,IAFpCC,EAEmC,EAFnCA,SACAC,EACmC,EADnCA,iBAEMjC,EAAYN,IAAMO,SACtB,kBACEiC,OAAOC,QAAQH,GAAY,IAAI9B,KAAI,WAAoBC,GAApB,8BAAEG,OAAF,MAAQ,GAAR,EAAYG,EAAZ,WAA+B,CAChEH,IAAKH,EACLpB,KAAMuB,EACNG,MAAOC,YAAYD,SAEvB,CAACuB,IAEGN,EAAgBhC,IAAMO,SAC1B,iBAAoC,CAClCY,aAAc,CACZ,CACEC,QAAS,OACTR,IAAK,OACLU,MAAO,MACPvC,MACE,eAAC,IAAD,CAAME,OAAQ,IAAKE,KAAM,GAAID,KAAM,IAAnC,qBAEE,eAAC,IAAD,CACED,OAAQ,IACRE,KAAM,GACND,KAAM,GACNF,UAAU,2CAJZ,cAMIsB,EAAUe,OANd,UAUJE,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OACZ,mBAAGzC,MAAOyC,EAAV,SAAqBA,MAGzB,CACEJ,QAAS,QACTR,IAAK,QACLU,MAAO,MACPvC,MAAO,QACPwC,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OACZ,mBAAGzC,MAAOyC,EAAV,SAAqBA,OAI3BlB,YACA6B,mBAAoB,CAClBhD,KAAM,QACNJ,MAAO,iBAGX,CAACuB,IAEH,OACE,cAACwB,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CAAmBvC,UAAWoC,EAAkBI,OAAO,OAAvD,SACE,cAAC,IAAD,CACE5D,MAAM,WACNC,UAAU,0BACVgD,cAAeA,QAOzBK,EAA2BD,YAAc,6BAE1BpC,UAAMC,KACnBoC,G,kBCvEF,SAASO,EAAT,GAAyE,IAArCC,EAAoC,EAApCA,UAAWN,EAAyB,EAAzBA,iBACvCjC,EAAYN,IAAMO,SAAQ,WAW9B,OAVcuC,YAAeD,EAAWA,GAAWE,QACjD,SAACC,GAAD,OAAWA,EAAKC,WAAW,sBAECzC,KAAI,SAACwC,EAAMvC,GACvC,MAAO,CACLG,IAAKH,EACLpB,KAAM2D,EACNjC,MAAOC,YAAYkC,YAASL,EAAWG,SAGjB,KACzB,CAACH,IAEE1B,EAAenB,IAAMO,SACzB,iBAAM,CACJ,CACEa,QAAS,OACTR,IAAK,OACL7B,MACE,eAAC,IAAD,CAAME,OAAQ,IAAKE,KAAM,GAAID,KAAM,IAAnC,iBAEE,eAAC,IAAD,CACED,OAAQ,IACRE,KAAM,GACND,KAAM,GACNF,UAAU,2CAJZ,cAMIsB,EAAUe,OANd,UAUJC,MAAO,MACPC,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OAAuB,mBAAGzC,MAAOyC,EAAV,SAAqBA,MAE5D,CACEJ,QAAS,QACTR,IAAK,QACL7B,MAAO,QACPuC,MAAO,EACP6B,SAAU,EACV5B,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OAAuB,mBAAGzC,MAAOyC,EAAV,SAAqBA,SAG9D,CAACqB,EAAWvC,IAGd,OACE,cAACwB,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CACEvC,UAAWoC,IAAqBM,EAChC7D,UAAU,2BACV2D,OAAO,OAHT,SAKE,cAACZ,EAAA,EAAD,CACEhD,MAAM,aAENC,UAAU,0BACVgD,cAAe,CACbb,eACAb,YACA4B,iBAAiB,EACjBC,mBAAoB,CAClBhD,KAAM,QACNJ,MAAO,qBASrB6D,EAAyBR,YAAc,2BAExBpC,UAAMC,KAAK2C,G,2CCzE1B,SAASQ,EAAT,GAI8B,IAH5BC,EAG2B,EAH3BA,KACAC,EAE2B,EAF3BA,OACAC,EAC2B,EAD3BA,QAEQC,EAAQC,cAARD,IAEFE,EAAe1D,IAAMO,SAAQ,WAAO,IAAD,YACjCyC,EAAOQ,EAAIG,MAAM,KAAKC,MAAM,GAAI,GAAGC,KAAK,KACxCC,EACJR,EAAOS,OAAOhB,QAAO,SAACiB,GAAD,OAAOA,EAAE3E,KAAK4D,WAAW,iBAAe5B,QAAU,EACzE,MAAO,CACL,CACEhC,KAAM,UACN2D,KAAK,GAAD,OAAKA,EAAL,YACJjC,OAAa,OAANuC,QAAM,IAANA,GAAA,UAAAA,EAAQS,cAAR,eAAgB1C,QAASyC,GAAuB,GAEzD,CACEzE,KAAM,SACN2D,KAAK,GAAD,OAAKA,EAAL,WACJjC,MAAO+C,GAET,CACEzE,KAAM,gBACN2D,KAAK,GAAD,OAAKA,EAAL,kBACJjC,OAAa,OAANuC,QAAM,IAANA,GAAA,UAAAA,EAAQW,qBAAR,eAAuB5C,SAAU,GAE1C,CACEhC,KAAM,SACN2D,KAAK,GAAD,OAAKA,EAAL,WACJjC,OAAa,OAANuC,QAAM,IAANA,GAAA,UAAAA,EAAQY,cAAR,eAAgB7C,SAAU,GAEnC,CACEhC,KAAM,SACN2D,KAAK,GAAD,OAAKA,EAAL,WACJjC,OAAa,OAANuC,QAAM,IAANA,GAAA,UAAAA,EAAQa,cAAR,eAAgB9C,SAAU,GAEnC,CACEhC,KAAM,QACN2D,KAAK,GAAD,OAAKA,EAAL,UACJjC,OAAa,OAANuC,QAAM,IAANA,GAAA,UAAAA,EAAQc,aAAR,eAAe/C,SAAU,GAElC,CACEhC,KAAM,UACN2D,KAAK,GAAD,OAAKA,EAAL,YACJjC,OAAa,OAANuC,QAAM,IAANA,GAAA,UAAAA,EAAQe,eAAR,eAAiBhD,SAAU,MAGrC,CAACiC,IAEJ,OACE,sBAAKtE,UAAU,qBAAf,UACE,sBAAKA,UAAU,gEAAf,UACE,cAAC,IAAD,CAAMC,OAAQ,IAAKE,KAAM,GAAID,KAAM,IAAKoF,UAAU,KAAlD,yBAGA,gCACE,cAAC,IAAD,CAAMjF,KAAK,aACX,cAAC,IAAD,CAAMH,KAAM,GAAZ,mBACMU,IAA6B,KAAlB,OAAJyD,QAAI,IAAJA,OAAA,EAAAA,EAAMkB,gBAAsBzE,OAAO,sBAGlD,gCACE,cAAC,IAAD,CAAMT,KAAK,SACX,cAAC,IAAD,CAAMH,KAAM,GAAZ,mBACMU,IAA6B,KAAlB,OAAJyD,QAAI,IAAJA,OAAA,EAAAA,EAAMkB,gBAAsBzE,OAAO,iBAGlD,gCACE,cAAC,IAAD,CAAMT,KAAK,aACX,cAAC,IAAD,CAAMH,KAAM,GAAZ,SACGsF,YACuB,KAAlB,OAAJnB,QAAI,IAAJA,OAAA,EAAAA,EAAMkB,gBACF,OAAJlB,QAAI,IAAJA,OAAA,EAAAA,EAAMoB,UAA4B,KAAb,OAAJpB,QAAI,IAAJA,OAAA,EAAAA,EAAMoB,UAAkBC,KAAKC,YAIpD,gCACE,cAAC,IAAD,CAAMtF,KAAK,SACX,cAAC,IAAD,CAAMH,KAAM,GAAZ,SAAiBqE,UAGpBF,EAAKuB,KAAKvD,OACT,sBAAKrC,UAAU,gEAAf,UACE,eAAC,IAAD,CAAMC,OAAQ,IAAKE,KAAM,GAAID,KAAM,IAAKoF,UAAU,KAAlD,iBACO,IACL,eAAC,IAAD,CAAMA,UAAU,OAAOpF,KAAM,GAAID,OAAQ,IAAKE,KAAM,GAApD,cACIkE,EAAKuB,KAAKvD,OADd,UAIF,qBAAKrC,UAAU,yCAAf,SACGqE,EAAKuB,KAAKpE,KAAI,SAACqE,GAAD,OACb,cAAC,IAAD,CAAOzF,MAAOyF,EAAIzF,MAAOuC,MAAOkD,EAAIxF,MAAWwF,EAAIxF,cAIvD,KACJ,cAACyF,EAAA,EAAD,CAAS9F,UAAU,yCACnB,sBAAKA,UAAU,oEAAf,UACE,cAAC,IAAD,CAAMC,OAAQ,IAAKE,KAAM,GAAID,KAAM,IAAKoF,UAAU,KAAlD,sBAGA,8BACGZ,EAAalD,KAAI,gBAAGnB,EAAH,EAAGA,KAAM2D,EAAT,EAASA,KAAMjC,EAAf,EAAeA,MAAf,OAChB,eAAC,IAAD,CACE/B,UAAU,8BAEV+F,GAAI/B,EAHN,UAKE,cAAC,IAAD,CAAM7D,KAAM,GAAZ,SAAiBE,IACjB,cAAC,IAAD,CAAMH,KAAM,GAAIC,KAAM,GAAtB,SACG4B,MALEiC,cAeJhD,UAAMC,KAAKmD,G,iBC5H1B,SAAS4B,EAAT,GAG0C,IAFxCC,EAEuC,EAFvCA,aACA1C,EACuC,EADvCA,iBAEM2C,EAAelF,IAAMO,SACzB,kBAAO0E,GAAgB,IAAIpB,KAAK,OAChC,CAACoB,IAEH,OACE,cAACnD,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CAAmBvC,UAAWoC,EAAkBI,OAAO,OAAvD,SACE,cAAC,IAAD,CACE5D,MAAM,gBACNC,UAAU,yDAFZ,SAIE,cAACmG,EAAA,EAAD,CAAWD,KAAMA,UAO3BF,EAA+B5C,YAAc,iCAE9BpC,UAAMC,KACnB+E,GCzBF,SAASI,EAAT,GAG0C,IAFxCC,EAEuC,EAFvCA,aACA9C,EACuC,EADvCA,iBAEMjC,EAAYN,IAAMO,SACtB,kBACEiC,OAAOC,QAAQ4C,GAAgB,IAAI7E,KACjC,WAA8BC,GAA9B,8BAAEG,OAAF,MAAQ,GAAR,EAAYG,EAAZ,WAAiD,CAC/CH,IAAKH,EACLpB,KAAMuB,EACNG,MAAOC,YAAYD,SAGzB,CAACsE,IAEGrD,EAAgBhC,IAAMO,SAC1B,iBAAoC,CAClC2B,iBAAiB,EACjBf,aAAc,CACZ,CACEC,QAAS,OACTR,IAAK,OACLU,MAAO,MACPvC,MACE,eAAC,IAAD,CAAME,OAAQ,IAAKE,KAAM,GAAID,KAAM,IAAnC,0BAEE,eAAC,IAAD,CACED,OAAQ,IACRE,KAAM,GACND,KAAM,GACNF,UAAU,2CAJZ,cAMIsB,EAAUe,OANd,UAUJE,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OACZ,mBAAGzC,MAAOyC,EAAV,SAAqBA,MAGzB,CACEJ,QAAS,QACTR,IAAK,QACLU,MAAO,MACPvC,MAAO,QACPwC,aAAc,gBAAGC,EAAH,EAAGA,SAAH,OACZ,mBAAGzC,MAAOyC,EAAV,SAAqBA,OAI3BlB,YACA6B,mBAAoB,CAClBhD,KAAM,QACNJ,MAAO,iBAGX,CAACuB,IAEH,OACE,cAACwB,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CAAmBvC,UAAWoC,EAAkBI,OAAO,OAAvD,SACE,cAAC,IAAD,CACE5D,MAAM,wBACNC,UAAU,0BACVgD,cAAeA,QAOzBoD,EAA+BhD,YAAc,iCAE9BpC,UAAMC,KACnBmF,G,QC9DF,SAASE,EAAT,GAAqE,IAA3CC,EAA0C,EAA1CA,QAAShC,EAAiC,EAAjCA,QACjCiC,YAAmB,CACjBpF,SAAUmF,EAAQE,gBAClBC,UAAWH,EAAQG,UACnBnC,YAGFvD,IAAM2F,WAAU,WACdC,IACEC,IAAqBC,WAAWC,KAAhC,SAAiDC,WAElD,IAEH,IAAMC,EAA8BjG,IAAMO,SAAQ,WAAO,IAAD,EAChDhB,EAAY,GACZ2G,EAAY,OAAGX,QAAH,IAAGA,GAAH,UAAGA,EAAS1C,iBAAZ,aAAG,EAAoBsD,gBAwBzC,OAvBKlF,IAAEQ,QAAF,OAAU8D,QAAV,IAAUA,OAAV,EAAUA,EAAS1C,aACtBtD,EAAKsD,UAAY0C,EAAQ1C,WAEtB5B,IAAEQ,QAAF,OAAU8D,QAAV,IAAUA,OAAV,EAAUA,EAASE,mBACtBlG,EAAKkG,gBAAkBF,EAAQE,iBAE5BxE,IAAEQ,QAAF,OAAU8D,QAAV,IAAUA,OAAV,EAAUA,EAASa,kBACtB7G,EAAK6G,eAAiBb,EAAQa,gBAE5BF,IACGjF,IAAEQ,QAAQyE,EAAaG,aAC1B9G,EAAK0F,aAAeiB,EAAaG,WAE9BpF,IAAEQ,QAAQyE,EAAaI,iBAC1B/G,EAAK8F,aAAea,EAAaI,eAE9BrF,IAAEQ,QAAQyE,EAAa5D,YAC1B/C,EAAK+C,SAAW4D,EAAa5D,UAE1BrB,IAAEQ,QAAQyE,EAAa5D,YAC1B/C,EAAKgH,QAAUL,EAAaM,WAGzBjH,IACN,CAACgG,IAEJ,OACE,cAACzD,EAAA,EAAD,UACE,0BAAS9C,UAAU,iBAAnB,UACE,qBAAKA,UAAU,0BAAf,SACGiC,IAAEQ,QAAQwE,GACT,cAACQ,EAAA,EAAD,CAAmBtH,KAAK,QAAQJ,MAAM,eAEtC,qCACGkC,IAAEQ,QAAF,OAAUwE,QAAV,IAAUA,OAAV,EAAUA,EAAWpD,WAAa,KACjC,cAAC,EAAD,CACEA,UAAS,OAAEoD,QAAF,IAAEA,OAAF,EAAEA,EAAWpD,UACtBN,iBAAgB,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAShD,mBAG9BtB,IAAEQ,QAAF,OAAUwE,QAAV,IAAUA,OAAV,EAAUA,EAAWR,iBAAmB,KACvC,cAAC,EAAD,CACEtF,UAAS,OAAEoF,QAAF,IAAEA,OAAF,EAAEA,EAASmB,kBACpBrG,KAAK,SACLD,SAAQ,OAAE6F,QAAF,IAAEA,OAAF,EAAEA,EAAWR,kBAIxBxE,IAAEQ,QAAF,OAAUwE,QAAV,IAAUA,OAAV,EAAUA,EAAWG,gBAAkB,KACtC,cAAC,EAAD,CACEjG,UAAS,OAAEoF,QAAF,IAAEA,OAAF,EAAEA,EAASmB,kBACpBrG,KAAK,eACLD,SAAQ,OAAE6F,QAAF,IAAEA,OAAF,EAAEA,EAAWG,iBAGxBnF,IAAEQ,QAAQwE,EAAUhB,cAAgB,KACnC,cAAC,EAAD,CACEA,aAAcgB,EAAUhB,aACxB1C,iBAAgB,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAShD,mBAG9BtB,IAAEQ,QAAQwE,EAAUZ,cAAgB,KACnC,cAAC,EAAD,CACEA,aAAcY,EAAUZ,aACxB9C,iBAAgB,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAShD,mBAG9BtB,IAAEQ,QAAQwE,EAAU3D,UAAY,KAC/B,cAAC,EAAD,CACEA,SAAU2D,EAAU3D,SACpBC,iBAAgB,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAShD,mBAG9BtB,IAAEQ,QAAQwE,EAAUM,SAAW,KAC9B,cAAC,EAAD,CAAahH,KAAM0G,EAAUM,eAKrC,cAAC,EAAD,CACEhD,QAASA,EACTF,KAAMkC,EAAQoB,QACdrD,OAAQiC,EAAQG,iBAO1BJ,EAAelD,YAAc,iBAEdpC,UAAMC,KAAKqF,GChIXA,a,iCCFf,sBAiDexC,IA7Cf,SAASA,EACP8D,EACAC,GAIW,IAHXC,EAGU,uDAHO,GACjBC,EAEU,wDADVC,EACU,wDACV,GAAY,OAARJ,EACF,MAAO,GAET,IAAIK,EAAWzE,OAAO0E,KAAKN,GAAKpG,KAAI,SAACI,GACnC,MAAO,CAAEuG,YAAaL,EAAM,UAAMA,EAAN,YAAgBlG,GAAQA,EAAKA,UAEvDwG,EAAkBL,EAClBE,EAASI,QAAO,SAACC,EAAD,GAA0C,IAAxBH,EAAuB,EAAvBA,YAAavG,EAAU,EAAVA,IACvC2G,EAAWrE,YAAS2D,EAAYM,GAQtC,OAPmB,kBAARI,GAAoBtG,IAAES,MAAM6F,IAAQtG,IAAEuG,QAAQD,MACnDP,EACFM,EAAIG,KAAKN,EAAYvD,MAAM,EAAGuD,EAAYO,QAAZ,WAAwB9G,MAEtD0G,EAAIG,KAAKN,IAGNG,IACN,IACH9E,OAAO0E,KAAKN,GACT7D,QACC,SAACnC,GAAD,OACGK,IAAE0G,SAASf,EAAIhG,KAASK,IAAES,MAAMkF,EAAIhG,KAASK,IAAEuG,QAAQZ,EAAIhG,OAE/DJ,KAAI,SAACI,GACJ,OAAOA,KAWf,OATAqG,EAASW,SAAQ,YAAsB,IAAnBT,EAAkB,EAAlBA,YACZI,EAAWrE,YAAS2D,EAAYM,GACnB,kBAARI,GAAqBtG,IAAES,MAAM6F,IAASM,MAAML,QAAQD,KAC7DH,EAAQA,EAAMU,OACZhF,EAAeyE,EAAKV,EAAYM,GAAa,EAAMH,QAKlDI,I,gICvCT,SAASW,EAAT,GAIkF,IAHhFC,EAG+E,EAH/EA,WAG+E,IAF/EC,wBAE+E,MAF5D,KAE4D,MAD/EjJ,iBAC+E,MADnE,GACmE,EAC/E,EAA4CgB,IAAMkI,UAAkB,GAApE,mBAAOC,EAAP,KAAuBC,EAAvB,KAEApI,IAAM2F,WAAU,WACVwC,GACFE,YAAW,WACTD,GAAkB,KACjBH,KAEJ,CAACE,IAEJ,IAAMG,EAAStI,IAAMuI,aAAY,WAC3BP,EAAWQ,UAAYL,GACzBM,UAAUC,UACPC,UAAUX,EAAWQ,QAAQI,UAAUC,KAAK,KAC5CC,MAAK,WACJV,GAAkB,MAEnBW,UAEJ,CAACf,EAAYG,IAEhB,OACE,cAACrG,EAAA,EAAD,UACE,sBAAM9C,UAAWA,EAAWgK,QAASV,EAArC,SACGH,EACC,sBAAMc,MAAO,CAAE7J,MAAO,QAASE,SAAU,IAAzC,qBAEA,cAAC,IAAD,CAAMD,KAAK,aAOrB0I,EAAgB3F,YAAc,kBAEfpC,UAAMC,KAA4B8H,G,OCnCjD,SAAS5C,EAAT,GAIsE,IAAD,IAHnED,YAGmE,MAH5D,GAG4D,MAFnElG,iBAEmE,MAFvD,GAEuD,MADnEkK,gBACmE,MADxD,SACwD,EAC7DlB,EAAahI,IAAMmJ,YACzB,OACE,cAACrH,EAAA,EAAD,UACE,sBAAK9C,UAAS,oBAAeA,GAA7B,UACE,cAAC,IAAD,2BACMoK,KADN,IAEEC,MAAOA,IACPnE,KAAMA,EAAK2D,OACXK,SAAUA,EAJZ,SAMG,gBAAGlK,EAAH,EAAGA,UAAWiK,EAAd,EAAcA,MAAOK,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,aAAcC,EAA3C,EAA2CA,cAA3C,OACC,qBAAKxK,UAAWA,EAAWiK,MAAOA,EAAOQ,IAAKzB,EAA9C,SACGsB,EAAO9I,KAAI,SAACkJ,EAAMC,GAAP,OACV,+CAAiBJ,EAAa,CAAEG,OAAM9I,IAAK+I,KAA3C,aACGD,EAAKlJ,KAAI,SAACoJ,EAAOhJ,GAAR,OACR,oCAAoB4I,EAAc,CAAEI,QAAOhJ,SAAhCA,QAFL+I,YASlB,cAAC7H,EAAA,EAAD,UACE,cAAC+H,EAAD,CACE7K,UAAU,wBACVgJ,WAAYA,WAQThI,QAAMC,KAAKkF,I,iCCnD1B,sCAqBeK,IAhBf,YAAoE,IAAtCpF,EAAqC,EAArCA,SAAUsF,EAA2B,EAA3BA,UAAWnC,EAAgB,EAAhBA,QACjDvD,IAAM2F,WAAU,WACd,IAAMmE,EAAsBC,IAAkBC,mBAC5CtE,EAAU3B,OACVR,GAKF,OAHKnD,GAAaa,IAAES,MAAMgE,IACxBoE,EAAoBG,OAEf,WACLH,EAAoBI,WAGrB,CAACxE,EAAWnC","file":"static/js/RunOverviewTab.js?version=af2f156919d9d7928057","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\nimport { Text, Card, Icon } from 'components/kit';\n\nimport { DATE_GIT_COMMIT } from 'config/dates/dates';\n\nimport { IGitInfoCardProps } from './GitInfoCard';\n\nimport './GitInfoCard.scss';\n\nfunction GitInfoCard(props: IGitInfoCardProps) {\n  return (\n    <Card title='Git Info Card' className='GitInfoCard RunOverviewTab__cardBox'>\n      <div className='InfoSection ScrollBar__hidden flex fjb'>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Branch\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='branch' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {props.data?.branch}\n            </Text>\n          </div>\n        </div>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Author\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='avatar' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {props.data.commit?.author}\n            </Text>\n          </div>\n        </div>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Hash\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='hash' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {props.data.commit?.hash}\n            </Text>\n          </div>\n        </div>\n        <div className='InfoCard flex fdc'>\n          <Text\n            className='InfoCardLabel'\n            weight={400}\n            tint={50}\n            size={12}\n            color='primary'\n          >\n            Timestamp\n          </Text>\n          <div className='InfoCardValue flex fac'>\n            <Icon name='time' fontSize={14} />\n            <Text\n              className='InfoCardValueText'\n              weight={500}\n              size={12}\n              color='primary'\n            >\n              {`${moment(props.data.commit?.timestamp).format(\n                DATE_GIT_COMMIT,\n              )}`}\n            </Text>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\nexport default React.memo(GitInfoCard);\n","import React from 'react';\nimport _ from 'lodash';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport Card from 'components/kit/Card/Card';\nimport { Badge, Text } from 'components/kit';\n\nimport COLORS from 'config/colors/colors';\n\nimport contextToString from 'utils/contextToString';\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport { formatSystemMetricName } from 'utils/formatSystemMetricName';\nimport { formatValue } from 'utils/formatValue';\n\nfunction RunOverviewTabMetricsCard({\n  isLoading,\n  runBatch,\n  type,\n}: {\n  isLoading: boolean;\n  runBatch: any;\n  type: 'metric' | 'systemMetric';\n}) {\n  const tableData = React.useMemo(() => {\n    if (runBatch) {\n      return runBatch.map(({ name, values, context }: any, index: number) => {\n        return {\n          key: index,\n          name: isSystemMetric(name) ? formatSystemMetricName(name) : name,\n          value: formatValue(_.last(values)),\n          context: context,\n        };\n      });\n    }\n    return [];\n  }, [runBatch]);\n\n  const tableColumns = React.useMemo(\n    () => [\n      {\n        dataKey: 'name',\n        key: 'name',\n        title: (\n          <Text weight={600} size={14} tint={100}>\n            Name\n            <Text\n              weight={500}\n              size={14}\n              tint={50}\n              className='RunOverviewTab__cardBox__tableTitleCount'\n            >\n              ({runBatch?.length})\n            </Text>\n          </Text>\n        ),\n        width: '33.3%',\n        cellRenderer: ({ cellData }: any) => <p title={cellData}>{cellData}</p>,\n      },\n      {\n        dataKey: 'context',\n        key: 'context',\n        title: 'Context',\n        width: '33.3%',\n        cellRenderer: ({ cellData }: any) =>\n          !_.isEmpty(cellData) && !_.isNil(cellData) ? (\n            <Badge\n              size='small'\n              color={COLORS[0][0]}\n              label={contextToString(cellData) || ''}\n              className='RunOverviewTab__cardBox__badge'\n            />\n          ) : (\n            <Badge\n              size='small'\n              color={'#F8FAFD'}\n              label={'Empty Context'}\n              className='RunOverviewTab__cardBox__badge emptyContext'\n            />\n          ),\n      },\n      {\n        dataKey: 'value',\n        key: 'value',\n        title: 'Last Value',\n        width: '33.3%',\n        cellRenderer: ({ cellData }: any) => <p title={cellData}>{cellData}</p>,\n      },\n    ],\n    [runBatch],\n  );\n\n  return (\n    <ErrorBoundary>\n      <Card\n        title={type === 'metric' ? 'Metrics' : 'System Metrics'}\n        // subtitle={\n        //   type === 'metric'\n        //     ? 'Little information about Metrics'\n        //     : 'Little information about System Metrics'\n        // }\n        className='RunOverviewTab__cardBox'\n        dataListProps={{\n          isLoading: isLoading || !runBatch,\n          searchableKeys: ['name', 'value'],\n          tableColumns,\n          tableData,\n          calcTableHeight: true,\n          illustrationConfig: {\n            size: 'large',\n            title: 'No Results',\n          },\n        }}\n      />\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabMetricsCard.displayName = 'RunOverviewTabMetricsCard';\n\nexport default React.memo(RunOverviewTabMetricsCard);\n","import React from 'react';\n\nimport { Card, Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport { ICardProps } from 'components/kit/Card/Card.d';\n\nimport { formatValue } from 'utils/formatValue';\n\nimport { IRunOverviewTabPackagesCardProps } from './RunOverviewTabPackagesCard.d';\n\nfunction RunOverviewTabPackagesCard({\n  packages,\n  isRunInfoLoading,\n}: IRunOverviewTabPackagesCardProps) {\n  const tableData = React.useMemo(\n    () =>\n      Object.entries(packages || {}).map(([key = '', value], index) => ({\n        key: index,\n        name: key,\n        value: formatValue(value),\n      })),\n    [packages],\n  );\n  const dataListProps = React.useMemo(\n    (): ICardProps['dataListProps'] => ({\n      tableColumns: [\n        {\n          dataKey: 'name',\n          key: 'name',\n          width: '50%',\n          title: (\n            <Text weight={600} size={14} tint={100}>\n              Packages\n              <Text\n                weight={600}\n                size={14}\n                tint={50}\n                className='RunOverviewTab__cardBox__tableTitleCount'\n              >\n                ({tableData.length})\n              </Text>\n            </Text>\n          ),\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n        {\n          dataKey: 'value',\n          key: 'value',\n          width: '50%',\n          title: 'Value',\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n      ],\n      tableData,\n      illustrationConfig: {\n        size: 'large',\n        title: 'No Results',\n      },\n    }),\n    [tableData],\n  );\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper isLoading={isRunInfoLoading} height='100%'>\n        <Card\n          title='Packages'\n          className='RunOverviewTab__cardBox'\n          dataListProps={dataListProps}\n        />\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabPackagesCard.displayName = 'RunOverviewTabPackagesCard';\n\nexport default React.memo<IRunOverviewTabPackagesCardProps>(\n  RunOverviewTabPackagesCard,\n);\n","import React from 'react';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport Card from 'components/kit/Card/Card';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport { Text } from 'components/kit';\n\nimport getObjectPaths from 'utils/getObjectPaths';\nimport { formatValue } from 'utils/formatValue';\nimport { getValue } from 'utils/helper';\n\nfunction RunOverviewTabParamsCard({ runParams, isRunInfoLoading }: any) {\n  const tableData = React.useMemo(() => {\n    const paths = getObjectPaths(runParams, runParams).filter(\n      (path) => !path.startsWith('__system_params'),\n    );\n    const resultTableList = paths.map((path, index) => {\n      return {\n        key: index,\n        name: path,\n        value: formatValue(getValue(runParams, path)),\n      };\n    });\n    return resultTableList || [];\n  }, [runParams]);\n\n  const tableColumns = React.useMemo(\n    () => [\n      {\n        dataKey: 'name',\n        key: 'name',\n        title: (\n          <Text weight={600} size={14} tint={100}>\n            Name\n            <Text\n              weight={600}\n              size={14}\n              tint={50}\n              className='RunOverviewTab__cardBox__tableTitleCount'\n            >\n              ({tableData.length})\n            </Text>\n          </Text>\n        ),\n        width: '50%',\n        cellRenderer: ({ cellData }: any) => <p title={cellData}>{cellData}</p>,\n      },\n      {\n        dataKey: 'value',\n        key: 'value',\n        title: 'Value',\n        width: 0,\n        flexGrow: 1,\n        cellRenderer: ({ cellData }: any) => <p title={cellData}>{cellData}</p>,\n      },\n    ],\n    [runParams, tableData],\n  );\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={isRunInfoLoading || !runParams}\n        className='runDetailParamsTabLoader'\n        height='100%'\n      >\n        <Card\n          title='Parameters'\n          // subtitle='Little information about Params'\n          className='RunOverviewTab__cardBox'\n          dataListProps={{\n            tableColumns,\n            tableData,\n            calcTableHeight: true,\n            illustrationConfig: {\n              size: 'large',\n              title: 'No Results',\n            },\n          }}\n        />\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabParamsCard.displayName = 'RunOverviewTabParamsCard';\n\nexport default React.memo(RunOverviewTabParamsCard);\n","import React from 'react';\nimport { NavLink, useRouteMatch } from 'react-router-dom';\nimport moment from 'moment';\n\nimport { Divider } from '@material-ui/core';\n\nimport { Badge, Icon, Text } from 'components/kit';\n\nimport { processDurationTime } from 'utils/processDurationTime';\n\nimport { IRunOverviewSidebarProps } from './RunOverviewSidebar.d';\n\nimport './RunOverviewSidebar.scss';\n\nfunction RunOverviewSidebar({\n  info,\n  traces,\n  runHash,\n}: IRunOverviewSidebarProps) {\n  const { url } = useRouteMatch();\n\n  const insightsList = React.useMemo(() => {\n    const path = url.split('/').slice(0, -1).join('/');\n    const systemMetricsLength: number =\n      traces.metric.filter((m) => m.name.startsWith('__system__')).length || 0;\n    return [\n      {\n        name: 'Metrics',\n        path: `${path}/metrics`,\n        value: traces?.metric?.length - systemMetricsLength || 0,\n      },\n      {\n        name: 'System',\n        path: `${path}/system`,\n        value: systemMetricsLength,\n      },\n      {\n        name: 'Distributions',\n        path: `${path}/distributions`,\n        value: traces?.distributions?.length || 0,\n      },\n      {\n        name: 'Images',\n        path: `${path}/images`,\n        value: traces?.images?.length || 0,\n      },\n      {\n        name: 'Audios',\n        path: `${path}/audios`,\n        value: traces?.audios?.length || 0,\n      },\n      {\n        name: 'Texts',\n        path: `${path}/texts`,\n        value: traces?.texts?.length || 0,\n      },\n      {\n        name: 'Figures',\n        path: `${path}/figures`,\n        value: traces?.figures?.length || 0,\n      },\n    ];\n  }, [traces]);\n\n  return (\n    <div className='RunOverviewSidebar'>\n      <div className='RunOverviewSidebar__section RunOverviewSidebar__section__info'>\n        <Text weight={600} size={18} tint={100} component='h3'>\n          Information\n        </Text>\n        <div>\n          <Icon name='calendar' />\n          <Text tint={70}>\n            {`${moment(info?.creation_time * 1000).format('DD MMMM YYYY')}`}\n          </Text>\n        </div>\n        <div>\n          <Icon name='time' />\n          <Text tint={70}>\n            {`${moment(info?.creation_time * 1000).format('HH:MM A')}`}\n          </Text>\n        </div>\n        <div>\n          <Icon name='duration' />\n          <Text tint={70}>\n            {processDurationTime(\n              info?.creation_time * 1000,\n              info?.end_time ? info?.end_time * 1000 : Date.now(),\n            )}\n          </Text>\n        </div>\n        <div>\n          <Icon name='hash' />\n          <Text tint={70}>{runHash}</Text>\n        </div>\n      </div>\n      {info.tags.length ? (\n        <div className='RunOverviewSidebar__section RunOverviewSidebar__section__tags'>\n          <Text weight={600} size={18} tint={100} component='h3'>\n            Tags{' '}\n            <Text component='span' tint={70} weight={400} size={18}>\n              ({info.tags.length})\n            </Text>\n          </Text>\n          <div className='RunOverviewSidebar__section__tags-list'>\n            {info.tags.map((tag) => (\n              <Badge color={tag.color} label={tag.name} key={tag.name} />\n            ))}\n          </div>\n        </div>\n      ) : null}\n      <Divider className='RunOverviewSidebar__section__Divider' />\n      <div className='RunOverviewSidebar__section RunOverviewSidebar__section__insights'>\n        <Text weight={600} size={18} tint={100} component='h3'>\n          Insights\n        </Text>\n        <div>\n          {insightsList.map(({ name, path, value }) => (\n            <NavLink\n              className='RunOverviewSidebar__NavLink'\n              key={path}\n              to={path}\n            >\n              <Text size={14}>{name}</Text>\n              <Text tint={70} size={14}>\n                {value}\n              </Text>\n            </NavLink>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(RunOverviewSidebar);\n","import React from 'react';\n\nimport { Card } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport CodeBlock from 'components/CodeBlock/CodeBlock';\n\nimport { IRunOverviewTabCLIArgumentsCardProps } from './RunOverviewTabCLIArgumentsCard.d';\n\nimport './RunOverviewTabCLIArgumentsCard.scss';\n\nfunction RunOverviewTabCLIArgumentsCard({\n  cliArguments,\n  isRunInfoLoading,\n}: IRunOverviewTabCLIArgumentsCardProps) {\n  const code: string = React.useMemo(\n    () => (cliArguments || []).join(' '),\n    [cliArguments],\n  );\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper isLoading={isRunInfoLoading} height='100%'>\n        <Card\n          title='CLI Arguments'\n          className='RunOverviewTabCLIArgumentsCard RunOverviewTab__cardBox'\n        >\n          <CodeBlock code={code} />\n        </Card>\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabCLIArgumentsCard.displayName = 'RunOverviewTabCLIArgumentsCard';\n\nexport default React.memo<IRunOverviewTabCLIArgumentsCardProps>(\n  RunOverviewTabCLIArgumentsCard,\n);\n","import React from 'react';\n\nimport { Card, Text } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport { ICardProps } from 'components/kit/Card/Card.d';\n\nimport { formatValue } from 'utils/formatValue';\n\nimport { IRunOverviewTabEnvVariablesCardProps } from './RunOverviewTabEnvVariablesCard.d';\n\nfunction RunOverviewTabEnvVariablesCard({\n  envVariables,\n  isRunInfoLoading,\n}: IRunOverviewTabEnvVariablesCardProps) {\n  const tableData = React.useMemo(\n    () =>\n      Object.entries(envVariables || {}).map(\n        ([key = '', value]: string[], index: number) => ({\n          key: index,\n          name: key,\n          value: formatValue(value),\n        }),\n      ),\n    [envVariables],\n  );\n  const dataListProps = React.useMemo(\n    (): ICardProps['dataListProps'] => ({\n      calcTableHeight: true,\n      tableColumns: [\n        {\n          dataKey: 'name',\n          key: 'name',\n          width: '50%',\n          title: (\n            <Text weight={600} size={14} tint={100}>\n              Env Variables\n              <Text\n                weight={600}\n                size={14}\n                tint={50}\n                className='RunOverviewTab__cardBox__tableTitleCount'\n              >\n                ({tableData.length})\n              </Text>\n            </Text>\n          ),\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n        {\n          dataKey: 'value',\n          key: 'value',\n          width: '50%',\n          title: 'Value',\n          cellRenderer: ({ cellData }: any) => (\n            <p title={cellData}>{cellData}</p>\n          ),\n        },\n      ],\n      tableData,\n      illustrationConfig: {\n        size: 'large',\n        title: 'No Results',\n      },\n    }),\n    [tableData],\n  );\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper isLoading={isRunInfoLoading} height='100%'>\n        <Card\n          title='Environment Variables'\n          className='RunOverviewTab__cardBox'\n          dataListProps={dataListProps}\n        />\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTabEnvVariablesCard.displayName = 'RunOverviewTabEnvVariablesCard';\n\nexport default React.memo<IRunOverviewTabEnvVariablesCardProps>(\n  RunOverviewTabEnvVariablesCard,\n);\n","import React from 'react';\nimport _ from 'lodash-es';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\n\nimport useRunMetricsBatch from '../hooks/useRunMetricsBatch';\n\nimport GitInfoCard from './components/GitInfoCard';\nimport RunOverviewTabMetricsCard from './components/MetricsCard/RunOverviewTabMetricsCard';\nimport RunOverviewTabPackagesCard from './components/Packages/RunOverviewTabPackagesCard';\nimport RunOverviewTabParamsCard from './components/ParamsCard/RunOverviewTabParamsCard';\nimport RunOverviewSidebar from './components/RunOverviewSidebar/RunOverviewSidebar';\nimport RunOverviewTabCLIArgumentsCard from './components/CLIArgumentsCard/RunOverviewTabCLIArgumentsCard';\nimport RunOverviewTabEnvVariablesCard from './components/EnvVariablesCard/RunOverviewTabEnvVariablesCard';\nimport { IRunOverviewTabProps } from './RunOverviewTab.d';\n\nimport './RunOverviewTab.scss';\n\nfunction RunOverviewTab({ runData, runHash }: IRunOverviewTabProps) {\n  useRunMetricsBatch({\n    runBatch: runData.runMetricsBatch,\n    runTraces: runData.runTraces,\n    runHash,\n  });\n\n  React.useEffect(() => {\n    analytics.pageView(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs['overview'].tabView,\n    );\n  }, []);\n\n  const cardsData: Record<any, any> = React.useMemo(() => {\n    const data: any = {};\n    const systemParams = runData?.runParams?.__system_params;\n    if (!_.isEmpty(runData?.runParams)) {\n      data.runParams = runData.runParams;\n    }\n    if (!_.isEmpty(runData?.runMetricsBatch)) {\n      data.runMetricsBatch = runData.runMetricsBatch;\n    }\n    if (!_.isEmpty(runData?.runSystemBatch)) {\n      data.runSystemBatch = runData.runSystemBatch;\n    }\n    if (systemParams) {\n      if (!_.isEmpty(systemParams.arguments)) {\n        data.cliArguments = systemParams.arguments;\n      }\n      if (!_.isEmpty(systemParams.env_variables)) {\n        data.envVariables = systemParams.env_variables;\n      }\n      if (!_.isEmpty(systemParams.packages)) {\n        data.packages = systemParams.packages;\n      }\n      if (!_.isEmpty(systemParams.packages)) {\n        data.gitInfo = systemParams.git_info;\n      }\n    }\n    return data;\n  }, [runData]);\n\n  return (\n    <ErrorBoundary>\n      <section className='RunOverviewTab'>\n        <div className='RunOverviewTab__content'>\n          {_.isEmpty(cardsData) ? (\n            <IllustrationBlock size='large' title='No Results' />\n          ) : (\n            <>\n              {_.isEmpty(cardsData?.runParams) ? null : (\n                <RunOverviewTabParamsCard\n                  runParams={cardsData?.runParams}\n                  isRunInfoLoading={runData?.isRunInfoLoading}\n                />\n              )}\n              {_.isEmpty(cardsData?.runMetricsBatch) ? null : (\n                <RunOverviewTabMetricsCard\n                  isLoading={runData?.isRunBatchLoading}\n                  type='metric'\n                  runBatch={cardsData?.runMetricsBatch}\n                />\n              )}\n\n              {_.isEmpty(cardsData?.runSystemBatch) ? null : (\n                <RunOverviewTabMetricsCard\n                  isLoading={runData?.isRunBatchLoading}\n                  type='systemMetric'\n                  runBatch={cardsData?.runSystemBatch}\n                />\n              )}\n              {_.isEmpty(cardsData.cliArguments) ? null : (\n                <RunOverviewTabCLIArgumentsCard\n                  cliArguments={cardsData.cliArguments}\n                  isRunInfoLoading={runData?.isRunInfoLoading}\n                />\n              )}\n              {_.isEmpty(cardsData.envVariables) ? null : (\n                <RunOverviewTabEnvVariablesCard\n                  envVariables={cardsData.envVariables}\n                  isRunInfoLoading={runData?.isRunInfoLoading}\n                />\n              )}\n              {_.isEmpty(cardsData.packages) ? null : (\n                <RunOverviewTabPackagesCard\n                  packages={cardsData.packages}\n                  isRunInfoLoading={runData?.isRunInfoLoading}\n                />\n              )}\n              {_.isEmpty(cardsData.gitInfo) ? null : (\n                <GitInfoCard data={cardsData.gitInfo} />\n              )}\n            </>\n          )}\n        </div>\n        <RunOverviewSidebar\n          runHash={runHash}\n          info={runData.runInfo}\n          traces={runData.runTraces}\n        />\n      </section>\n    </ErrorBoundary>\n  );\n}\n\nRunOverviewTab.displayName = 'RunOverviewTab';\n\nexport default React.memo(RunOverviewTab);\n","import RunOverviewTab from './RunOverviewTab';\n\nexport default RunOverviewTab;\n","import _ from 'lodash-es';\n\nimport { getValue } from 'utils/helper';\n\nfunction getObjectPaths(\n  obj: { [key: string]: unknown },\n  rootObject: { [key: string]: unknown },\n  prefix: string = '',\n  includeRoot: boolean = false,\n  withoutLeaves = false,\n): string[] {\n  if (obj === null) {\n    return [];\n  }\n  let rootKeys = Object.keys(obj).map((key) => {\n    return { prefixedKey: prefix ? `${prefix}.${key}` : key, key };\n  });\n  let paths: string[] = includeRoot\n    ? rootKeys.reduce((acc: string[], { prefixedKey, key }) => {\n        const val: any = getValue(rootObject, prefixedKey);\n        if (typeof val !== 'object' || _.isNil(val) || _.isArray(val)) {\n          if (withoutLeaves) {\n            acc.push(prefixedKey.slice(0, prefixedKey.indexOf(`.${key}`)));\n          } else {\n            acc.push(prefixedKey);\n          }\n        }\n        return acc;\n      }, [])\n    : Object.keys(obj)\n        .filter(\n          (key) =>\n            !_.isObject(obj[key]) || _.isNil(obj[key]) || _.isArray(obj[key]),\n        )\n        .map((key) => {\n          return key;\n        });\n  rootKeys.forEach(({ prefixedKey }) => {\n    const val: any = getValue(rootObject, prefixedKey);\n    if (typeof val === 'object' && !_.isNil(val) && !Array.isArray(val)) {\n      paths = paths.concat(\n        getObjectPaths(val, rootObject, prefixedKey, true, withoutLeaves),\n      );\n    }\n  });\n\n  return paths;\n}\n\nexport default getObjectPaths;\n","import React from 'react';\n\nimport { Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICopyToClipBoardProps } from 'types/components/CopyToClipBoard/CopyToClipBoard';\n\nfunction CopyToClipboard({\n  contentRef,\n  showSuccessDelay = 1500,\n  className = '',\n}: ICopyToClipBoardProps): React.FunctionComponentElement<ICopyToClipBoardProps> {\n  const [showCopiedIcon, setShowCopiedIcon] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    if (showCopiedIcon) {\n      setTimeout(() => {\n        setShowCopiedIcon(false);\n      }, showSuccessDelay);\n    }\n  }, [showCopiedIcon]);\n\n  const onCopy = React.useCallback(() => {\n    if (contentRef.current && !showCopiedIcon) {\n      navigator.clipboard\n        .writeText(contentRef.current.innerText.trim(''))\n        .then(function () {\n          setShowCopiedIcon(true);\n        })\n        .catch();\n    }\n  }, [contentRef, showCopiedIcon]);\n\n  return (\n    <ErrorBoundary>\n      <span className={className} onClick={onCopy}>\n        {showCopiedIcon ? (\n          <span style={{ color: 'green', fontSize: 12 }}>Copied!</span>\n        ) : (\n          <Icon name='copy' />\n        )}\n      </span>\n    </ErrorBoundary>\n  );\n}\n\nCopyToClipboard.displayName = 'CopyToClipBoard';\n\nexport default React.memo<ICopyToClipBoardProps>(CopyToClipboard);\n","import React from 'react';\n// import AssignmentTurnedInOutlinedIcon from '@material-kit/icons/AssignmentTurnedInOutlined';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\n\nimport theme from 'prism-react-renderer/themes/nightOwlLight';\n\nimport CopyToClipBoard from 'components/CopyToClipBoard/CopyToClipBoard';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ICodeBlockProps } from 'types/components/CodeBlock/CodeBlock';\n\nimport './CodeBlock.scss';\n\nfunction CodeBlock({\n  code = '',\n  className = '',\n  language = 'python',\n}: ICodeBlockProps): React.FunctionComponentElement<React.ReactNode> {\n  const contentRef = React.createRef<HTMLPreElement>();\n  return (\n    <ErrorBoundary>\n      <div className={`CodeBlock ${className}`}>\n        <Highlight\n          {...defaultProps}\n          theme={theme}\n          code={code.trim()}\n          language={language}\n        >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre className={className} style={style} ref={contentRef}>\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line, key: i })}>\n                  {line.map((token, key) => (\n                    <span key={key} {...getTokenProps({ token, key })} />\n                  ))}\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n        <ErrorBoundary>\n          <CopyToClipBoard\n            className='CodeBlock__copy__span'\n            contentRef={contentRef}\n          />\n        </ErrorBoundary>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(CodeBlock);\n","import React from 'react';\nimport _ from 'lodash-es';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\n\nfunction useRunMetricsBatch({ runBatch, runTraces, runHash }: any) {\n  React.useEffect(() => {\n    const runsBatchRequestRef = runDetailAppModel.getRunMetricsBatch(\n      runTraces.metric,\n      runHash,\n    );\n    if (!runBatch && !_.isNil(runTraces)) {\n      runsBatchRequestRef.call();\n    }\n    return () => {\n      runsBatchRequestRef.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [runTraces, runHash]);\n}\n\nexport default useRunMetricsBatch;\n"],"sourceRoot":""}