<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Robocorp.Vault" type="LIBRARY" format="REST" scope="GLOBAL" generated="2022-04-08T16:11:36Z" specversion="3" source="./RPA/Robocorp/Vault.py" lineno="426">
<version/>
<doc>`Vault` is a library for interacting with secrets stored in Robocorp
Vault (by default) or file-based secrets, which can be taken into use
by setting some environment variables.

Robocorp Vault works together with Robocorp Worker or Robocorp CLI (RCC).
The following three environment variables need to exist, and are set by
Robocorp Worker automatically and can be set manually with Robocorp CLI.

- ``RC_API_SECRET_HOST``: URL to Robocorp Vault API
- ``RC_API_SECRET_TOKEN``: API Token for Robocorp Vault API
- ``RC_WORKSPACE_ID``: Control Room Workspace ID

File-based secrets can be set by defining two environment variables.

- ``RPA_SECRET_MANAGER``: RPA.Robocorp.Vault.FileSecrets
- ``RPA_SECRET_FILE``: Absolute path to the secrets database file

Example content of local secrets file:

.. code-block:: json

    {
        "swaglabs": {
            "username": "standard_user",
            "password": "secret_sauce"
        }
    }

OR

.. code-block:: YAML

    swaglabs:
        username: standard_user
        password: secret_sauce

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library    Collections
    Library    RPA.Robocorp.Vault

    *** Tasks ***
    Reading secrets
        ${secret}=    Get Secret  swaglabs
        Log Many      ${secret}

    Modifying secrets
        ${secret}=          Get Secret      swaglabs
        ${level}=           Set Log Level   NONE
        Set To Dictionary   ${secret}       username    nobody
        Set Log Level       ${level}
        Set Secret          ${secret}


**Python**

.. code-block:: python

    from RPA.Robocorp.Vault import Vault

    VAULT = Vault()

    def reading_secrets():
        print(f"My secrets: {VAULT.get_secret('swaglabs')}")

    def modifying_secrets():
        secret = VAULT.get_secret("swaglabs")
        secret["username"] = "nobody"
        secrets.set_secret(secret)</doc>
<tags>
</tags>
<inits>
<init name="Init" source="./RPA/Robocorp/Vault.py" lineno="507">
<arguments repr="*args, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>The selected adapter can be set with the environment variable
``RPA_SECRET_MANAGER``, or the keyword argument ``default_adapter``.
Defaults to Robocorp Vault if not defined.

All other library arguments are passed to the adapter.

:param default_adapter: Override default secret adapter</doc>
<shortdoc>The selected adapter can be set with the environment variable ``RPA_SECRET_MANAGER``, or the keyword argument ``default_adapter``. Defaults to Robocorp Vault if not defined.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Get Secret" source="./RPA/Robocorp/Vault.py" lineno="550">
<arguments repr="secret_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="secret_name: str">
<name>secret_name</name>
<type>str</type>
</arg>
</arguments>
<doc>Read a secret from the configured source, e.g. Robocorp Vault,
and return it as a ``Secret`` object.

:param secret_name: Name of secret</doc>
<shortdoc>Read a secret from the configured source, e.g. Robocorp Vault, and return it as a ``Secret`` object.</shortdoc>
</kw>
<kw name="Set Secret" source="./RPA/Robocorp/Vault.py" lineno="558">
<arguments repr="secret: Secret">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="secret: Secret">
<name>secret</name>
<type>Secret</type>
</arg>
</arguments>
<doc>Overwrite an existing secret with new values.

Note: Only allows modifying existing secrets, and replaces
      all values contained within it.

:param secret: Secret as a ``Secret`` object, from e.g. ``Get Secret``</doc>
<shortdoc>Overwrite an existing secret with new values.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
</keywordspec>
