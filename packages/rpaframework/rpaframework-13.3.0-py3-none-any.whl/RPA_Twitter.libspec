<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Twitter" type="LIBRARY" format="REST" scope="GLOBAL" generated="2022-04-14T15:07:37Z" specversion="3" source="./RPA/Twitter.py" lineno="41">
<version/>
<doc>`Twitter` is a library for accessing Twitter using developer API.
The library extends `tweepy`_ library.

Authorization credentials can be given as parameters for ``authorize`` keyword
or keyword can read them in as environment variables:

- `TWITTER_CONSUMER_KEY`
- `TWITTER_CONSUMER_SECRET`
- `TWITTER_ACCESS_TOKEN`
- `TWITTER_ACCESS_TOKEN_SECRET`

Library usage requires Twitter developer credentials.
Those can be requested from `Twitter developer site`_

.. _tweepy:
    http://docs.tweepy.org/en/latest/index.html

.. _Twitter developer site:
    https://developer.twitter.com/

**Examples**

.. code-block:: robotframework

    *** Settings ***
    Library   RPA.Twitter

    *** Tasks ***
    Get user tweets and like them
        [Setup]   Authorize
        @{tweets}=   Get User Tweets   username=niinisto   count=5
        FOR   ${tweet}  IN   @{tweets}
            Like   ${tweet}
        END

.. code-block:: python

    from RPA.Twitter import Twitter

    library = Twitter()
    library.authorize()
    tweets = library.get_user_tweets(username="niinisto", count=5)
    for tw in tweets:
        library.like(tw)
    tweets = library.text_search_tweets(query="corona trump")
    for tw in tweets:
        print(tw.text)
    user = library.get_user_profile("niinisto")
    library.follow(user)
    library.tweet("first tweet")
    me = library.get_me()
    print(me)</doc>
<tags>
</tags>
<inits>
</inits>
<keywords>
<kw name="Authorize" source="./RPA/Twitter.py" lineno="118">
<arguments repr="consumer_key: str | None = None, consumer_secret: str | None = None, access_token: str | None = None, access_token_secret: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="consumer_key: str | None = None">
<name>consumer_key</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="consumer_secret: str | None = None">
<name>consumer_secret</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="access_token: str | None = None">
<name>access_token</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="access_token_secret: str | None = None">
<name>access_token_secret</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Authorize to Twitter API

:param consumer_key: app consumer key
:param consumer_secret: app consumer secret
:param access_token: user access token
:param access_token_secret: user access token secret</doc>
<shortdoc>Authorize to Twitter API</shortdoc>
</kw>
<kw name="Follow" source="./RPA/Twitter.py" lineno="321">
<arguments repr="user: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user: str | None = None">
<name>user</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Follow Twitter user

:param user: screen name of the user
:return:  `True` if user was followed, `False` if not</doc>
<shortdoc>Follow Twitter user</shortdoc>
</kw>
<kw name="Get Me" source="./RPA/Twitter.py" lineno="151">
<arguments repr="">
</arguments>
<doc>Get Twitter profile of authenticated user

:return: user profile as dictionary or `None`</doc>
<shortdoc>Get Twitter profile of authenticated user</shortdoc>
</kw>
<kw name="Get User Profile" source="./RPA/Twitter.py" lineno="262">
<arguments repr="username: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="username: str | None = None">
<name>username</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Get user's Twitter profile

:param username: whose profile to get
:return: profile as dictionary</doc>
<shortdoc>Get user's Twitter profile</shortdoc>
</kw>
<kw name="Get User Tweets" source="./RPA/Twitter.py" lineno="160">
<arguments repr="username: str | None = None, count: int = 100">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="username: str | None = None">
<name>username</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="count: int = 100">
<name>count</name>
<type>int</type>
<default>100</default>
</arg>
</arguments>
<doc>Get user tweets

:param username: whose tweets to get
:param count: maximum number of tweets, defaults to 100
:return: list of user tweets</doc>
<shortdoc>Get user tweets</shortdoc>
</kw>
<kw name="Like" source="./RPA/Twitter.py" lineno="285">
<arguments repr="tweet: Tweet | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="tweet: Tweet | None = None">
<name>tweet</name>
<type>Tweet</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Like a tweet

:param tweet: as a class `Tweet`
:return: `True` if Tweet was liked, `False` if not</doc>
<shortdoc>Like a tweet</shortdoc>
</kw>
<kw name="Text Search Tweets" source="./RPA/Twitter.py" lineno="193">
<arguments repr="query: str | None = None, count: int = 100, geocode: str | None = None, lang: str | None = None, locale: str | None = None, result_type: str = mixed, until: str | None = None, since_id: str | None = None, max_id: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="query: str | None = None">
<name>query</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="count: int = 100">
<name>count</name>
<type>int</type>
<default>100</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="geocode: str | None = None">
<name>geocode</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="lang: str | None = None">
<name>lang</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locale: str | None = None">
<name>locale</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="result_type: str = mixed">
<name>result_type</name>
<type>str</type>
<default>mixed</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="until: str | None = None">
<name>until</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="since_id: str | None = None">
<name>since_id</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="max_id: str | None = None">
<name>max_id</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Search tweets defined by search query

Results types:

- mixed : include both popular and real time results in the response
- recent : return only the most recent results in the response
- popular : return only the most popular results in the response

:param query: search query string of 500 characters maximum,
    including operators
:param count: maximum number of tweets, defaults to 100
:param geocode: tweets by users located within a given
    radius of the given latitude/longitude
:param lang: language code of tweets
:param locale: language of the query you are sending
:param result_type: type of search results you would prefer to receive,
    default "mixed"
:param until: tweets created before the given date
:param since_id: Returns only statuses with an ID greater than
:param max_id: only statuses with an ID less than
:return: list of matching tweets</doc>
<shortdoc>Search tweets defined by search query</shortdoc>
</kw>
<kw name="Tweet" source="./RPA/Twitter.py" lineno="277">
<arguments repr="content: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="content: str | None = None">
<name>content</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Make a tweet with content

:param content: text for the status update</doc>
<shortdoc>Make a tweet with content</shortdoc>
</kw>
<kw name="Unfollow" source="./RPA/Twitter.py" lineno="335">
<arguments repr="user: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user: str | None = None">
<name>user</name>
<type>str</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Unfollow Twitter user

:param user: screen name of the user
:return:  `True` if user was followed, `False` if not</doc>
<shortdoc>Unfollow Twitter user</shortdoc>
</kw>
<kw name="Unlike" source="./RPA/Twitter.py" lineno="303">
<arguments repr="tweet: Tweet | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="tweet: Tweet | None = None">
<name>tweet</name>
<type>Tweet</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>Unlike a tweet

:param tweet: as a class `Tweet`
:return: `True` if Tweet was unliked, `False` if not</doc>
<shortdoc>Unlike a tweet</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
</keywordspec>
