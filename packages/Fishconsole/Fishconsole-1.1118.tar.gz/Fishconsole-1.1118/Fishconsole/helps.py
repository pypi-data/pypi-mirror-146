# coding utf-8
import requests
from lxml import html

etree = html.etree
from Fishconsole import logs
from Fishconsole import window
from Fishconsole import fcv


# 判断设备是否接入网络
def isConnected():
    import requests
    try:
        html = requests.get("http://www.baidu.com", timeout=2)
    except:
        return False
    return True


def 帮助():
    if isConnected():
        print(logs.系统日志("Fishconsole 检查更新开始。。。"))
        v = fcv.version()
        url = "https://pypi.org/project/Fishconsole/"
        res = requests.get(url).text
        res_html = etree.HTML(res)
        res_v = res_html.xpath("/html/body/main/div[2]/div/div[1]/h1/text()")[0]
        res_v = str(res_v[21:27])
        if res_v != v:
            print(logs.系统日志("Fishconsole 检查更新结束"))
            print(logs.系统日志(f"检测到最新版本号发生了变化({res_v}>{v})，请在终端键入pip install --upgrade Fishconsole更新至最新版本"))
        print(logs.系统日志("Fishconsole 检查更新结束"))
    else:
        print(logs.系统日志("Fishconsole 检查更新结束"))
        print(logs.系统日志("你的设备没有联网，请检查网络连接"))

    print("如果您使用termux安装的话，请按1，否则按2")
    help_mod = input()
    if help_mod == "1":
        print(logs.颜色(
            "\n\n\n\n\n\n\n\n\n\n\n\n\n\n由于termux存在一些问题，所以easygui无法使用而且matplotlib中文辅助模块要使用jupyter notebook才可以使用，这里就不上相关教程了",
            色选="红色"))
        logs.分割线("这是logs模块的", "Fishconsole帮助文档")
        print(
            "你是不是不知道怎么用的？那就让我来告诉你吧!!\n"
            "这个函数是一个输出工具的集合，是由鱼鱼有几斤整理的\n"
            "我整理了这几个项目\n"
            f"{logs.颜色('这是logs模块当中的', 色选='火粉')}\n"
            "---------------------\n"
            "1：‘分割线’，它的作用就是弄出一个分割线，将无关的输出和自己想看到的分割线分割开来，这样就可以在一定层度上降低对头发的消耗啦\n"
            "2：‘日志’，它的作用就是在前面加一个时间戳，主要是好看和装逼用的，但是用的好的话还是很可以的\n"
            "3：‘颜色’，更改输出的颜色，目前支持的有：\n"
            f"{logs.颜色('粉色', 色选='粉色')}，{logs.颜色('红色', 色选='红色')}，{logs.颜色('黄色', 色选='黄色')}，{logs.颜色('蓝色', 色选='蓝色')}，{logs.颜色('火粉', 色选='火粉')}，{logs.颜色('紫色', 色选='紫色')}，{logs.颜色('淡黄', 色选='淡黄')}\n"
            f' {logs.颜色("测试", 色选="淡蓝背")}{logs.颜色("测试", 色选="紫背")}{logs.颜色("测试", 色选="绿背")}{logs.颜色("测试", 色选="蓝背")}{logs.颜色("测试", 色选="黄背")}{logs.颜色("测试", 色选="红背")}\n'
            " (注意哦,分割线和日志都是可以和颜色叠加使用的)\n"
            "---------------------\n"
            "‘分割线’的语法是:\n"
            "logs.分割线(输出显示文字,s模式='项目名')\n"
            "‘日志’的语法是:\n"
            "logs.日志(输出显示文字)\n"
            "‘颜色’的语法是:\n"
            "logs.颜色(输出显示文字)\n"
            "示例（可以这种方法套）"
            "print(logs.颜色(logs.分割线('帮助文档',s模式='🦈Fishconsole'),色选='蓝色'))\n"
            "---------------------\n"
        )
        exit()
    else:
        res = window.列表选择对话框("关于控制台输出模块的帮助文档会显示在命令行中，选中你想查看的内容，我们将会提供相应的窗口。为什么有的地方找不到",f"Fishconsole {fcv.version()} 帮助文档",
                             ["Matplotlib中文辅助模块", "easygui中文辅助模块", "logs控制台输出辅助模块", "tool玩具模块"])

        if res is not None:
            for a in res:
                if a == "logs控制台输出辅助模块":
                    logs.分割线("这是logs模块的", "Fishconsole帮助文档")
                    print(
                        "你是不是不知道怎么用的？那就让我来告诉你吧!!\n"
                        "这个函数是一个输出工具的集合，是由鱼鱼有几斤整理的\n"
                        "我整理了这几个项目\n"
                        f"{logs.颜色('这是logs模块当中的', 色选='火粉')}\n"
                        "---------------------\n"
                        "1：‘分割线’，它的作用就是弄出一个分割线，将无关的输出和自己想看到的分割线分割开来，这样就可以在一定层度上降低对头发的消耗啦\n"
                        "2：‘日志’，它的作用就是在前面加一个时间戳，主要是好看和装逼用的，但是用的好的话还是很可以的\n"
                        "3：‘颜色’，更改输出的颜色，目前支持的有：\n"
                        f"{logs.颜色('粉色', 色选='粉色')}，{logs.颜色('红色', 色选='红色')}，{logs.颜色('黄色', 色选='黄色')}，{logs.颜色('蓝色', 色选='蓝色')}，{logs.颜色('火粉', 色选='火粉')}，{logs.颜色('紫色', 色选='紫色')}，{logs.颜色('淡黄', 色选='淡黄')}\n"
                        f' {logs.颜色("测试", 色选="淡蓝背")}{logs.颜色("测试", 色选="紫背")}{logs.颜色("测试", 色选="绿背")}{logs.颜色("测试", 色选="蓝背")}{logs.颜色("测试", 色选="黄背")}{logs.颜色("测试", 色选="红背")}\n'
                        " (注意哦,分割线和日志都是可以和颜色叠加使用的)\n"
                        "---------------------\n"
                        "‘分割线’的语法是:\n"
                        "logs.分割线(输出显示文字,s模式='项目名')\n"
                        "‘日志’的语法是:\n"
                        "logs.日志(输出显示文字)\n"
                        "‘颜色’的语法是:\n"
                        "logs.颜色(输出显示文字)\n"
                        "示例（可以这种方法套）"
                        "print(logs.颜色(logs.分割线('帮助文档',s模式='🦈Fishconsole'),色选='蓝色'))\n"
                        "---------------------\n"
                    )

                if a == "easygui中文辅助模块":
                    window.弹窗(""
                              "这个东西其实是就是 easygui 的中文《辅助》模块[笑],对于英语不好的人来说这个做法确实是有一点卖相的，但是想深入\n研究，还得去看它爸爸tkinter专门的教程，当然我可能也会持续完善这个的\n"
                              "---------------------\n"
                              "‘弹窗’，这是最基本的弹窗，就是弹出一个窗口，你点击按钮以后获得返回值\n"
                              "‘选择对话框’，就是弹出一个对话框，它可以有很多个选项，而且可以插入图片（这就很棒了），当然点击以后也会有返回值\n"
                              "‘列表选择对话框’，当选项多到离谱的时候，就可以使用列表选择对话框，你可以复选，也可以单选，不能插入图片，但是可以有几乎无限的选项\n"
                              "‘输入框’，就是可以存储你输入数据的窗口，他返回的内容就是你输入的内容 ，没填返回的就是None，\n"
                              "‘密码框’，就是在输入框的基础上对最后一个框使用了隐藏处理，返回的内容也是完整的（废话）\n"
                              "‘文件选择，文件保存’，故名思意，你们懂哈（我是懒虫）\n"
                              "-----------------------\n"
                              "弹窗的示例'\n\n"
                              "弹窗(1,2,3)\n"
                              "选择对话框的示例\n\n"
                              "print(选择对话框(1,2,选项=['ab','cd','ef'],图片地址='h.PNG'))\n"
                              "列表对话框的示例\n\n"
                              "print(列表选择对话框(1,2,选项=['ab','cd']))\n"
                              "输入框的示例\n\n"
                              "print(输入框('显示文字',['内容1','内容2'],'标题'))\n"
                              "密码框的示例\n\n"
                              "print(密码框('显示文字',['内容1','内容2'],'标题'))\n"
                              '文件选择的示例\n\n'
                              "print(文件选择())\n"
                              '文件保存的示例\n\n'
                              "print(文件保存())\n",

                              "easygui中文辅助模块", "ok")

                if a == "Matplotlib中文辅助模块":
                    res = (window.选择对话框(
                        "模块名字叫huitu（是不是很蠢哈哈）\n\n"
                        "它呢，现在有这几个功能\n"
                        "单线折线图\n"
                        "双线折线图\n"
                        "基于单线折线图的子图\n"
                        "柱形图\n"
                        "子图\n"
                        "--------------------------\n"
                        "对于单线折线图，我预设了 特别多的参数，因此，如果你追求简单的话，你只需要输入这几个内容(x,y轴的数据源和范围)，\n"
                        "示例\n"
                        " huitu.单线折线图(\n"
                        "    x轴范围=(0, 10),\n"
                        "    y轴范围=(0, 10),\n"
                        "    x轴数据源=[0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 10],\n"
                        "    y轴数据源=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n"
                        " )\n"
                        "--------------------------\n"
                        "双线折线图非常好理解，就是有两根折线图组成的图撒，所以呐，我直接就上代码把\n"
                        " huitu.双线折线图(\n"
                        "    x轴范围=(0, 10),\n"
                        "    y轴范围=(0, 10),\n"
                        "    xa轴范围=(0, 10),\n"
                        "    ya轴范围=(0, 10),\n"
                        "    x轴数据源=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n"
                        "    y轴数据源=[0, 1, 2, 3, 4, 10, 10, 11, 11, 11, 11],\n"
                        "    xa轴数据源=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n"
                        "    ya轴数据源=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n"
                        " )\n"
                        "--------------------------\n"
                        "然后就是子图，这个捏就有点府杂了\n"
                        "首先，他有一个模式，这个模式的用处就是告诉它你需要让他提供多少个图，这样你才可以将你输入的数据呈现在子图上面，最少是两个，最多是4个\n"
                        "然后其他的就和双线折线图基本上是一个玩法（嘻嘻，我又搞了一大堆预设变量）\n"
                        "上代码巴(这个代码启动的是4个子图)\n\n"
                        " huitu.子图(模式=4,\n"
                        "         x轴数据源=[1, 2, 3, 4, 5],\n"
                        "         y轴数据源=[1, 2, 3, 4, 5],\n"
                        "         xa轴数据源=[1, 2, 3, 4, 5],\n"
                        "         ya轴数据源=[1, 2, 3, 4, 5],\n"
                        "         xb轴数据源=[1, 2, 3, 4, 5],\n"
                        "         yb轴数据源=[1, 2, 3, 4, 5],\n"
                        "         xc轴数据源=[1, 2, 3, 4, 5],\n"
                        "         yc轴数据源=[1, 2, 3, 4, 5],\n"
                        "         )\n"
                        "---------------------------\n"
                        "然后就是柱形图，这个柱形图呢也很简单,它只需要每根柱子的名字和数据源，就行了\n"
                        "上代码\n\n"
                        " huitu.柱形图(\n"
                        "      ['haha','haa','aha'],\n"
                        "       [1,2,3],\n"
                        " )\n"
                        "--------------------------\n"
                        "最后就是饼图了，这个更简单\n"
                        "它只需要一个数据源就行了，上代码\n\n"
                        "huitu.饼图([1,2,3])\n"
                        "----------------------------\n"
                        "你学费了嘛？/dogedoge/咖啡"
                        , "matplotlib中文辅助模块", ["啊对对对", "走，高级教程"]))
                    if res == "走，高级教程":
                        window.弹窗(
                            "欢迎进入高级教程，在这里，我将会告诉你Fishconsole window模块中所有的预设选项和修改后造成的影响\n"
                            "如果我告诉你了你还不懂的话，那就自己去runoob"
                            "去把matplotlib在回来看这个教程吧\n\n\n\n"
                            "------------------------------\n"
                            "关于单线折线图，我预设的变量有这些\n\n"
                            "x,y轴范围\n"
                            "x,y轴数据源\n"
                            "x，y轴的名字='x','y'\n\n"
                            "线的样式='-'\n"
                            "线的颜色='b'\n"
                            "线的宽度=2\n"
                            "画布长=6\n"
                            "画布宽=6\n"
                            "标题=None\n"
                            "绘图标记=None\n\n"
                            "网格线=False\n"
                            "网格线的样式='-'\n"
                            "网格线的方向='both'\n"
                            "网格线rgb='#000'\n"
                            "网格线的宽度=0.5\n"
                            "修改的方式就是追加变量名，因为变量是中文的，所以你应该一看就懂了\n\n示例\n"
                            "huitu.单线折线图(\n"
                            "    x轴范围=(0, 10),\n"
                            "    y轴范围=(0, 10),\n"
                            "    x轴数据源=[0, 1, 2, 3, 4, 5, 6, 6, 6, 6, 10],\n"
                            "    y轴数据源=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n"
                            "    网格线=True\n"
                            ")\n\n\n"
                            "---------------------------------\n"
                            "对于双线折线图，我设置的预置变量和单线折线图差不了多少\n\n"

                            "x轴范围, \n"
                            "x轴数据源,\n"
                            "y轴范围,\n"
                            "y轴数据源,\n"
                            "xa轴范围, \n"
                            "xa轴数据源,\n"
                            "ya轴范围, \n"
                            "ya轴数据源,\n"
                            "y轴名 = 'y', \n"
                            "x轴名 = 'x',\n"
                            "ya轴名 = 'ya',\n"
                            "xa轴名 = 'xa', \n\n"
                            "线的样式 = '-',\n"
                            "线的宽度 = 2,\n"
                            "画布长 = 6, \n"
                            "画布宽 = 6, \n"
                            "标题 = None,\n"
                            "绘图标记 = None,\n\n"
                            "网格线 = False,\n"
                            "网格线方向 = 'both',\n"
                            "网格线样式 = '-', \n"
                            "网格线RGB = '#000',\n"
                            "网格线宽度 = 0.5\n"
                            "-------------------------------------\n"
                            "然后就是子图(这个超级多，但是你简化一下就会发现，这些其实都特别少，重复的特别多)\n\n"
                            "模式,\n\n\n"
                            "总标题 = None,\n"
                            "子图a标题 = None,\n"
                            "子图b标题 = None, \n"
                            "子图c标题 = None, \n"
                            "子图d标题 = None, \n\n\n"
                            "x轴数据源 = None, \n"
                            "y轴数据源 = None, \n"
                            "xa轴数据源 = None,\n"
                            "ya轴数据源 = None, \n"
                            "xb轴数据源 = None, \n"
                            "yb轴数据源 = None, \n"
                            "xc轴数据源 = None, \n"
                            "yc轴数据源 = None, \n\n\n"
                            "绘图标记 = None,\n"
                            "网格线方向 = 'both',\n"
                            "网格线样式 = '-', \n"
                            "网格线RGB = '#000'\n"
                            "网格线宽度 = 0.5, \n"
                            "网格线 = False, \n\n\n"
                            "x轴名 = 'x',\n"
                            "y轴名 = 'y',\n"
                            "xa轴名 = 'xa',\n"
                            "ya轴名 = 'ya',\n"
                            "xb轴名 = 'xb',\n"
                            "yb轴名 = 'yb',\n"
                            "xc轴名 = 'xc',\n"
                            "yc轴名 = 'yc',\n"
                            "-----------------------------------\n"
                            "然后是柱形图，柱形图的预置变量相对来说要少很多\n"
                            "x轴名数组,\n"
                            "y轴数据组,\n"
                            "背景数组=None,\n"
                            "模式='竖',\n"
                            "宽度=0.5,\n"
                            "高度=0.1,\n"
                            "标题=None,\n"
                            "网格线=False,\n"
                            "网格线方向='both',\n"
                            "网格线样式='-',\n"
                            "网格线RGB='#000',\n"
                            "网格线宽度=0.5\n"
                            "----------------------------------\n"
                            "最后就是饼图了,因为饼图这个图很特殊，所以他的变量是所有当中变量最少的\n\n\n"
                            "数据组, \n"
                            "数据组标签=None,\n"
                            "数据组颜色=None, \n"
                            "总标题=None, \n"
                            "百分比=False\n"
                            "---------------------------------\n"
                            "然后。。。然后就没了，哈欠。。。"
                            , "matplotlib中文辅助模块 - 高级教程", "ok")

                if a == "tool玩具模块":
                    res=window.列表选择对话框("这相当于是我的一个代码仓库吧，我以后写的所有可以拿来用的小程序全都会放在这里（是不是很过分☕😉）", "tool玩具模块", [
                        "密码模块",
                        "网易云音乐模块",
                        "排名模块"
                    ])
                    for a in res:
                        if a=="密码模块":
                            window.弹窗(
                                      "这个加密其实特别简单，就是把一个字换成另一个字让你看不懂就行了，嗯，他的值是返回过来的\n"
                                      "本来这个玩具的完全体是有gui的，但是为了顺应模块的需要，我又把它砍了，这就做了一些很无语的调整\n"
                                      "嗯，就这样把\n"
                                      "------------------------\n"
                                      "加密示例：\n"
                                      "tool.密码(模式，内容，密码)\n\n"
                                      "解密示例：\n"
                                      "tool.密码(模式，密码，内容)\n\n"
                                      ,"password加密模块","ok")
                        if a=="网易云音乐模块":
                            window.弹窗(
                                "这个模块其实就是一个爬虫，爬的网易云的歌单里面的歌，最多只能爬一首歌单的前10首，vip的只能爬前几秒，下就下在根目录（我在搞事情哈哈）\n"
                                "-----------------------------\n\n"
                                "示例语法\n"
                                "tool.网易云音乐(['歌单链接1'，'歌单链接2'])"
                            ,"网易云音乐模块","ok")
                        if a=="网易云音乐模块":
                            window.弹窗(
                                "这个模块其实就是一个爬虫，爬的网易云的歌单里面的歌，最多只能爬一首歌单的前10首，vip的只能爬前几秒，下就下在根目录（我在搞事情哈哈）\n"
                                "-----------------------------\n\n"
                                "示例语法\n"
                                "tool.网易云音乐(['歌单链接1'，'歌单链接2'])"
                            ,"网易云音乐模块","ok")
