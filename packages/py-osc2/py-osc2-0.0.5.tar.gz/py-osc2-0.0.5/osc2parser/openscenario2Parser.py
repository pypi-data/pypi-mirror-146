# Generated from openscenario2.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3m")
        buf.write("\u04de\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\3\2\7\2\u010e")
        buf.write("\n\2\f\2\16\2\u0111\13\2\3\2\7\2\u0114\n\2\f\2\16\2\u0117")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\5\5\u0123")
        buf.write("\n\5\3\6\3\6\3\6\7\6\u0128\n\6\f\6\16\6\u012b\13\6\3\6")
        buf.write("\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0138\n\7")
        buf.write("\3\b\3\b\5\b\u013c\n\b\3\t\3\t\5\t\u0140\n\t\3\n\3\n\3")
        buf.write("\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20")
        buf.write("\3\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\7\23\u0166\n\23\f\23\16\23\u0169\13\23\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\5\25\u0174\n\25\3\25\3")
        buf.write("\25\5\25\u0178\n\25\3\25\3\25\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u0180\n\26\3\27\3\27\3\27\3\27\5\27\u0186\n\27\3\30\3")
        buf.write("\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u0191\n\31")
        buf.write("\f\31\16\31\u0194\13\31\3\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\5\32\u019c\n\32\3\33\3\33\3\34\3\34\3\35\3\35\5\35\u01a4")
        buf.write("\n\35\3\36\3\36\3\36\5\36\u01a9\n\36\3\36\3\36\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u01b6\n\37")
        buf.write("\3\37\3\37\5\37\u01ba\n\37\5\37\u01bc\n\37\3\37\3\37\3")
        buf.write("\37\6\37\u01c1\n\37\r\37\16\37\u01c2\3\37\3\37\3\37\5")
        buf.write("\37\u01c8\n\37\3 \3 \3 \3 \3 \5 \u01cf\n \3!\3!\3\"\3")
        buf.write("\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u01de\n#\3#\3#\5#\u01e2")
        buf.write("\n#\5#\u01e4\n#\3#\3#\3#\6#\u01e9\n#\r#\16#\u01ea\3#\3")
        buf.write("#\3#\5#\u01f0\n#\3$\3$\3$\3$\3$\5$\u01f7\n$\3%\3%\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\5&\u0204\n&\3&\3&\5&\u0208\n&\5")
        buf.write("&\u020a\n&\3&\3&\3&\3&\6&\u0210\n&\r&\16&\u0211\3&\3&")
        buf.write("\3&\5&\u0217\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u021f\n\'")
        buf.write("\3(\3(\3(\5(\u0224\n(\3(\3(\3)\3)\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\5*\u0233\n*\3*\3*\5*\u0237\n*\5*\u0239\n*\3*\3")
        buf.write("*\3*\3*\6*\u023f\n*\r*\16*\u0240\3*\3*\3*\5*\u0246\n*")
        buf.write("\3+\3+\3+\3+\5+\u024c\n+\3+\3+\3+\5+\u0251\n+\3+\3+\3")
        buf.write("+\3+\6+\u0257\n+\r+\16+\u0258\3+\3+\3+\5+\u025e\n+\3,")
        buf.write("\3,\3-\3-\5-\u0264\n-\3.\3.\3.\3.\3.\3.\3.\7.\u026d\n")
        buf.write(".\f.\16.\u0270\13.\3.\3.\3.\3/\3/\3/\3/\3/\6/\u027a\n")
        buf.write("/\r/\16/\u027b\3/\3/\3\60\3\60\3\60\5\60\u0283\n\60\3")
        buf.write("\61\3\61\3\61\3\61\5\61\u0289\n\61\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\5\62\u0291\n\62\3\62\3\62\5\62\u0295\n\62\3")
        buf.write("\62\3\62\3\63\3\63\5\63\u029b\n\63\3\63\3\63\5\63\u029f")
        buf.write("\n\63\3\63\5\63\u02a2\n\63\3\64\3\64\3\64\3\65\3\65\3")
        buf.write("\65\3\66\3\66\3\67\3\67\38\38\38\58\u02b1\n8\38\38\39")
        buf.write("\39\39\39\39\59\u02ba\n9\3:\3:\3:\3:\3:\3;\3;\3;\3;\3")
        buf.write(";\3<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3=\3=\5=\u02d2\n=\3=\3")
        buf.write("=\3>\3>\3?\3?\3@\3@\5@\u02dc\n@\3A\3A\3A\7A\u02e1\nA\f")
        buf.write("A\16A\u02e4\13A\3A\3A\3A\3A\5A\u02ea\nA\3A\3A\5A\u02ee")
        buf.write("\nA\3B\3B\3B\3B\7B\u02f4\nB\fB\16B\u02f7\13B\3B\3B\3B")
        buf.write("\3B\3B\5B\u02fe\nB\3B\3B\3C\3C\3C\3C\3C\3C\3C\5C\u0309")
        buf.write("\nC\3C\3C\3D\3D\3E\3E\3E\3E\6E\u0313\nE\rE\16E\u0314\3")
        buf.write("E\3E\3F\3F\3G\3G\5G\u031d\nG\3H\3H\3H\5H\u0322\nH\3H\3")
        buf.write("H\3H\3H\3I\3I\3J\3J\3K\3K\3K\3K\3K\3K\3L\3L\5L\u0334\n")
        buf.write("L\3M\3M\3M\3M\5M\u033a\nM\3M\3M\3M\5M\u033f\nM\3M\3M\3")
        buf.write("M\3N\3N\3O\3O\5O\u0348\nO\3O\3O\3O\3O\3O\3O\3O\5O\u0351")
        buf.write("\nO\3O\3O\5O\u0355\nO\3P\3P\3Q\3Q\3R\3R\3R\3R\3R\3R\3")
        buf.write("S\3S\3S\5S\u0364\nS\3S\3S\3S\5S\u0369\nS\3S\3S\3S\3T\3")
        buf.write("T\5T\u0370\nT\3U\3U\3U\3U\3U\6U\u0377\nU\rU\16U\u0378")
        buf.write("\3U\3U\3V\3V\5V\u037f\nV\3W\3W\3W\3X\3X\3X\5X\u0387\n")
        buf.write("X\3X\3X\3X\3X\3X\5X\u038e\nX\3Y\3Y\3Z\3Z\3Z\3Z\3Z\5Z\u0397")
        buf.write("\nZ\3Z\3Z\3Z\6Z\u039c\nZ\rZ\16Z\u039d\3Z\3Z\5Z\u03a2\n")
        buf.write("Z\3[\3[\3\\\3\\\3\\\5\\\u03a9\n\\\3\\\3\\\3\\\5\\\u03ae")
        buf.write("\n\\\3\\\3\\\3\\\5\\\u03b3\n\\\3]\3]\3]\3]\6]\u03b9\n")
        buf.write("]\r]\16]\u03ba\3]\3]\3^\3^\3^\5^\u03c2\n^\3_\3_\3`\3`")
        buf.write("\3`\3`\3a\3a\3a\3a\3a\3a\5a\u03d0\na\3a\3a\3b\3b\3b\3")
        buf.write("b\3c\3c\3c\5c\u03db\nc\3c\3c\3d\3d\3d\3d\3e\3e\3e\7e\u03e6")
        buf.write("\ne\fe\16e\u03e9\13e\3f\3f\3f\3f\3f\5f\u03f0\nf\3g\3g")
        buf.write("\3h\3h\3h\7h\u03f7\nh\fh\16h\u03fa\13h\3h\3h\7h\u03fe")
        buf.write("\nh\fh\16h\u0401\13h\3h\3h\3h\7h\u0406\nh\fh\16h\u0409")
        buf.write("\13h\5h\u040b\nh\3i\3i\3j\3j\3j\3j\3k\3k\5k\u0415\nk\3")
        buf.write("l\3l\3l\3l\3l\3l\3m\3m\3m\7m\u0420\nm\fm\16m\u0423\13")
        buf.write("m\3n\3n\3n\7n\u0428\nn\fn\16n\u042b\13n\3o\3o\3o\7o\u0430")
        buf.write("\no\fo\16o\u0433\13o\3p\3p\3p\5p\u0438\np\3q\3q\3q\3q")
        buf.write("\3q\3q\3q\7q\u0441\nq\fq\16q\u0444\13q\3r\3r\3s\3s\3s")
        buf.write("\3s\3s\3s\3s\7s\u044f\ns\fs\16s\u0452\13s\3t\3t\3u\3u")
        buf.write("\3u\3u\3u\3u\3u\7u\u045d\nu\fu\16u\u0460\13u\3v\3v\3w")
        buf.write("\3w\3w\5w\u0467\nw\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u0482\nx\3")
        buf.write("x\3x\3x\3x\7x\u0488\nx\fx\16x\u048b\13x\3y\3y\3y\3y\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\5z\u0498\nz\3{\3{\3{\3{\3{\3{\3{\5")
        buf.write("{\u04a1\n{\3|\3|\3|\3|\7|\u04a7\n|\f|\16|\u04aa\13|\3")
        buf.write("|\3|\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u04bb\n")
        buf.write("}\3~\3~\3\177\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3")
        buf.write("\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\5\u0084\u04d6\n\u0084\3\u0085")
        buf.write("\3\u0085\3\u0086\3\u0086\5\u0086\u04dc\n\u0086\3\u0086")
        buf.write("\2\6\u00e0\u00e4\u00e8\u00ee\u0087\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2")
        buf.write("\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4")
        buf.write("\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106")
        buf.write("\u0108\u010a\2\n\3\2\7\13\3\2\26\35\3\2\66\67\3\2?@\3")
        buf.write("\2CE\4\2$$OT\3\2UV\3\2WY\2\u04ff\2\u010f\3\2\2\2\4\u011a")
        buf.write("\3\2\2\2\6\u011c\3\2\2\2\b\u0122\3\2\2\2\n\u0129\3\2\2")
        buf.write("\2\f\u0137\3\2\2\2\16\u013b\3\2\2\2\20\u013f\3\2\2\2\22")
        buf.write("\u0141\3\2\2\2\24\u0143\3\2\2\2\26\u0145\3\2\2\2\30\u0149")
        buf.write("\3\2\2\2\32\u014b\3\2\2\2\34\u0151\3\2\2\2\36\u0159\3")
        buf.write("\2\2\2 \u015b\3\2\2\2\"\u015d\3\2\2\2$\u0162\3\2\2\2&")
        buf.write("\u016a\3\2\2\2(\u016e\3\2\2\2*\u017b\3\2\2\2,\u0181\3")
        buf.write("\2\2\2.\u0187\3\2\2\2\60\u0189\3\2\2\2\62\u0198\3\2\2")
        buf.write("\2\64\u019d\3\2\2\2\66\u019f\3\2\2\28\u01a3\3\2\2\2:\u01a8")
        buf.write("\3\2\2\2<\u01ac\3\2\2\2>\u01ce\3\2\2\2@\u01d0\3\2\2\2")
        buf.write("B\u01d2\3\2\2\2D\u01d4\3\2\2\2F\u01f6\3\2\2\2H\u01f8\3")
        buf.write("\2\2\2J\u01fa\3\2\2\2L\u021e\3\2\2\2N\u0223\3\2\2\2P\u0227")
        buf.write("\3\2\2\2R\u0229\3\2\2\2T\u0247\3\2\2\2V\u025f\3\2\2\2")
        buf.write("X\u0263\3\2\2\2Z\u0265\3\2\2\2\\\u0274\3\2\2\2^\u0282")
        buf.write("\3\2\2\2`\u0288\3\2\2\2b\u028a\3\2\2\2d\u02a1\3\2\2\2")
        buf.write("f\u02a3\3\2\2\2h\u02a6\3\2\2\2j\u02a9\3\2\2\2l\u02ab\3")
        buf.write("\2\2\2n\u02b0\3\2\2\2p\u02b9\3\2\2\2r\u02bb\3\2\2\2t\u02c0")
        buf.write("\3\2\2\2v\u02c5\3\2\2\2x\u02ca\3\2\2\2z\u02d5\3\2\2\2")
        buf.write("|\u02d7\3\2\2\2~\u02db\3\2\2\2\u0080\u02dd\3\2\2\2\u0082")
        buf.write("\u02ef\3\2\2\2\u0084\u0301\3\2\2\2\u0086\u030c\3\2\2\2")
        buf.write("\u0088\u030e\3\2\2\2\u008a\u0318\3\2\2\2\u008c\u031c\3")
        buf.write("\2\2\2\u008e\u031e\3\2\2\2\u0090\u0327\3\2\2\2\u0092\u0329")
        buf.write("\3\2\2\2\u0094\u032b\3\2\2\2\u0096\u0333\3\2\2\2\u0098")
        buf.write("\u0335\3\2\2\2\u009a\u0343\3\2\2\2\u009c\u0345\3\2\2\2")
        buf.write("\u009e\u0356\3\2\2\2\u00a0\u0358\3\2\2\2\u00a2\u035a\3")
        buf.write("\2\2\2\u00a4\u0363\3\2\2\2\u00a6\u036f\3\2\2\2\u00a8\u0371")
        buf.write("\3\2\2\2\u00aa\u037e\3\2\2\2\u00ac\u0380\3\2\2\2\u00ae")
        buf.write("\u0386\3\2\2\2\u00b0\u038f\3\2\2\2\u00b2\u0391\3\2\2\2")
        buf.write("\u00b4\u03a3\3\2\2\2\u00b6\u03a8\3\2\2\2\u00b8\u03b4\3")
        buf.write("\2\2\2\u00ba\u03c1\3\2\2\2\u00bc\u03c3\3\2\2\2\u00be\u03c5")
        buf.write("\3\2\2\2\u00c0\u03c9\3\2\2\2\u00c2\u03d3\3\2\2\2\u00c4")
        buf.write("\u03d7\3\2\2\2\u00c6\u03de\3\2\2\2\u00c8\u03e2\3\2\2\2")
        buf.write("\u00ca\u03ea\3\2\2\2\u00cc\u03f1\3\2\2\2\u00ce\u040a\3")
        buf.write("\2\2\2\u00d0\u040c\3\2\2\2\u00d2\u040e\3\2\2\2\u00d4\u0414")
        buf.write("\3\2\2\2\u00d6\u0416\3\2\2\2\u00d8\u041c\3\2\2\2\u00da")
        buf.write("\u0424\3\2\2\2\u00dc\u042c\3\2\2\2\u00de\u0437\3\2\2\2")
        buf.write("\u00e0\u0439\3\2\2\2\u00e2\u0445\3\2\2\2\u00e4\u0447\3")
        buf.write("\2\2\2\u00e6\u0453\3\2\2\2\u00e8\u0455\3\2\2\2\u00ea\u0461")
        buf.write("\3\2\2\2\u00ec\u0466\3\2\2\2\u00ee\u0468\3\2\2\2\u00f0")
        buf.write("\u048c\3\2\2\2\u00f2\u0497\3\2\2\2\u00f4\u04a0\3\2\2\2")
        buf.write("\u00f6\u04a2\3\2\2\2\u00f8\u04ba\3\2\2\2\u00fa\u04bc\3")
        buf.write("\2\2\2\u00fc\u04be\3\2\2\2\u00fe\u04c0\3\2\2\2\u0100\u04c2")
        buf.write("\3\2\2\2\u0102\u04c4\3\2\2\2\u0104\u04c6\3\2\2\2\u0106")
        buf.write("\u04d5\3\2\2\2\u0108\u04d7\3\2\2\2\u010a\u04db\3\2\2\2")
        buf.write("\u010c\u010e\5\4\3\2\u010d\u010c\3\2\2\2\u010e\u0111\3")
        buf.write("\2\2\2\u010f\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0115")
        buf.write("\3\2\2\2\u0111\u010f\3\2\2\2\u0112\u0114\5\f\7\2\u0113")
        buf.write("\u0112\3\2\2\2\u0114\u0117\3\2\2\2\u0115\u0113\3\2\2\2")
        buf.write("\u0115\u0116\3\2\2\2\u0116\u0118\3\2\2\2\u0117\u0115\3")
        buf.write("\2\2\2\u0118\u0119\7\2\2\3\u0119\3\3\2\2\2\u011a\u011b")
        buf.write("\5\6\4\2\u011b\5\3\2\2\2\u011c\u011d\7\3\2\2\u011d\u011e")
        buf.write("\5\b\5\2\u011e\u011f\7i\2\2\u011f\7\3\2\2\2\u0120\u0123")
        buf.write("\5\u00fa~\2\u0121\u0123\5\n\6\2\u0122\u0120\3\2\2\2\u0122")
        buf.write("\u0121\3\2\2\2\u0123\t\3\2\2\2\u0124\u0125\5\u0106\u0084")
        buf.write("\2\u0125\u0126\7\4\2\2\u0126\u0128\3\2\2\2\u0127\u0124")
        buf.write("\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129")
        buf.write("\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u0129\3\2\2\2")
        buf.write("\u012c\u012d\5\u0106\u0084\2\u012d\13\3\2\2\2\u012e\u0138")
        buf.write("\5\32\16\2\u012f\u0138\5\34\17\2\u0130\u0138\5\60\31\2")
        buf.write("\u0131\u0138\5<\37\2\u0132\u0138\5D#\2\u0133\u0138\5R")
        buf.write("*\2\u0134\u0138\5J&\2\u0135\u0138\5T+\2\u0136\u0138\5")
        buf.write("X-\2\u0137\u012e\3\2\2\2\u0137\u012f\3\2\2\2\u0137\u0130")
        buf.write("\3\2\2\2\u0137\u0131\3\2\2\2\u0137\u0132\3\2\2\2\u0137")
        buf.write("\u0133\3\2\2\2\u0137\u0134\3\2\2\2\u0137\u0135\3\2\2\2")
        buf.write("\u0137\u0136\3\2\2\2\u0138\r\3\2\2\2\u0139\u013c\5\20")
        buf.write("\t\2\u013a\u013c\5\24\13\2\u013b\u0139\3\2\2\2\u013b\u013a")
        buf.write("\3\2\2\2\u013c\17\3\2\2\2\u013d\u0140\5\30\r\2\u013e\u0140")
        buf.write("\5\22\n\2\u013f\u013d\3\2\2\2\u013f\u013e\3\2\2\2\u0140")
        buf.write("\21\3\2\2\2\u0141\u0142\5\u0106\u0084\2\u0142\23\3\2\2")
        buf.write("\2\u0143\u0144\5\26\f\2\u0144\25\3\2\2\2\u0145\u0146\7")
        buf.write("\5\2\2\u0146\u0147\7\6\2\2\u0147\u0148\5\20\t\2\u0148")
        buf.write("\27\3\2\2\2\u0149\u014a\t\2\2\2\u014a\31\3\2\2\2\u014b")
        buf.write("\u014c\7\f\2\2\u014c\u014d\5\22\n\2\u014d\u014e\7\r\2")
        buf.write("\2\u014e\u014f\5\36\20\2\u014f\u0150\7i\2\2\u0150\33\3")
        buf.write("\2\2\2\u0151\u0152\7\16\2\2\u0152\u0153\5\u010a\u0086")
        buf.write("\2\u0153\u0154\7\6\2\2\u0154\u0155\5\22\n\2\u0155\u0156")
        buf.write("\7\r\2\2\u0156\u0157\5 \21\2\u0157\u0158\7i\2\2\u0158")
        buf.write("\35\3\2\2\2\u0159\u015a\5\"\22\2\u015a\37\3\2\2\2\u015b")
        buf.write("\u015c\5(\25\2\u015c!\3\2\2\2\u015d\u015e\7\17\2\2\u015e")
        buf.write("\u015f\7\20\2\2\u015f\u0160\5$\23\2\u0160\u0161\7\21\2")
        buf.write("\2\u0161#\3\2\2\2\u0162\u0167\5&\24\2\u0163\u0164\7\22")
        buf.write("\2\2\u0164\u0166\5&\24\2\u0165\u0163\3\2\2\2\u0166\u0169")
        buf.write("\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168")
        buf.write("%\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016b\5.\30\2\u016b")
        buf.write("\u016c\7\23\2\2\u016c\u016d\5\u00fe\u0080\2\u016d\'\3")
        buf.write("\2\2\2\u016e\u016f\7\17\2\2\u016f\u0170\7\20\2\2\u0170")
        buf.write("\u0173\5$\23\2\u0171\u0172\7\22\2\2\u0172\u0174\5*\26")
        buf.write("\2\u0173\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0177")
        buf.write("\3\2\2\2\u0175\u0176\7\22\2\2\u0176\u0178\5,\27\2\u0177")
        buf.write("\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\3\2\2\2")
        buf.write("\u0179\u017a\7\21\2\2\u017a)\3\2\2\2\u017b\u017c\7\24")
        buf.write("\2\2\u017c\u017f\7\23\2\2\u017d\u0180\5\u0104\u0083\2")
        buf.write("\u017e\u0180\5\u00fe\u0080\2\u017f\u017d\3\2\2\2\u017f")
        buf.write("\u017e\3\2\2\2\u0180+\3\2\2\2\u0181\u0182\7\25\2\2\u0182")
        buf.write("\u0185\7\23\2\2\u0183\u0186\5\u0104\u0083\2\u0184\u0186")
        buf.write("\5\u00fe\u0080\2\u0185\u0183\3\2\2\2\u0185\u0184\3\2\2")
        buf.write("\2\u0186-\3\2\2\2\u0187\u0188\t\3\2\2\u0188/\3\2\2\2\u0189")
        buf.write("\u018a\7\36\2\2\u018a\u018b\5\64\33\2\u018b\u018c\7\23")
        buf.write("\2\2\u018c\u018d\7\37\2\2\u018d\u0192\5\62\32\2\u018e")
        buf.write("\u018f\7\22\2\2\u018f\u0191\5\62\32\2\u0190\u018e\3\2")
        buf.write("\2\2\u0191\u0194\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193")
        buf.write("\3\2\2\2\u0193\u0195\3\2\2\2\u0194\u0192\3\2\2\2\u0195")
        buf.write("\u0196\7 \2\2\u0196\u0197\7i\2\2\u0197\61\3\2\2\2\u0198")
        buf.write("\u019b\5\66\34\2\u0199\u019a\7!\2\2\u019a\u019c\58\35")
        buf.write("\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\63\3")
        buf.write("\2\2\2\u019d\u019e\5\u0106\u0084\2\u019e\65\3\2\2\2\u019f")
        buf.write("\u01a0\5\u0106\u0084\2\u01a0\67\3\2\2\2\u01a1\u01a4\5")
        buf.write("\u0100\u0081\2\u01a2\u01a4\5\u0102\u0082\2\u01a3\u01a1")
        buf.write("\3\2\2\2\u01a3\u01a2\3\2\2\2\u01a49\3\2\2\2\u01a5\u01a6")
        buf.write("\5\64\33\2\u01a6\u01a7\7\4\2\2\u01a7\u01a9\3\2\2\2\u01a8")
        buf.write("\u01a5\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\3\2\2\2")
        buf.write("\u01aa\u01ab\5\66\34\2\u01ab;\3\2\2\2\u01ac\u01ad\7\"")
        buf.write("\2\2\u01ad\u01bb\5@!\2\u01ae\u01af\7#\2\2\u01af\u01b9")
        buf.write("\5@!\2\u01b0\u01b1\7\20\2\2\u01b1\u01b2\5B\"\2\u01b2\u01b5")
        buf.write("\7$\2\2\u01b3\u01b6\5:\36\2\u01b4\u01b6\5\u00fc\177\2")
        buf.write("\u01b5\u01b3\3\2\2\2\u01b5\u01b4\3\2\2\2\u01b6\u01b7\3")
        buf.write("\2\2\2\u01b7\u01b8\7\21\2\2\u01b8\u01ba\3\2\2\2\u01b9")
        buf.write("\u01b0\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bc\3\2\2\2")
        buf.write("\u01bb\u01ae\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01c7\3")
        buf.write("\2\2\2\u01bd\u01be\7\23\2\2\u01be\u01c0\7l\2\2\u01bf\u01c1")
        buf.write("\5> \2\u01c0\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c0")
        buf.write("\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4")
        buf.write("\u01c5\7m\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c8\7i\2\2\u01c7")
        buf.write("\u01bd\3\2\2\2\u01c7\u01c6\3\2\2\2\u01c8=\3\2\2\2\u01c9")
        buf.write("\u01cf\5b\62\2\u01ca\u01cf\5~@\2\u01cb\u01cf\5\u008cG")
        buf.write("\2\u01cc\u01cf\5\u0098M\2\u01cd\u01cf\5\u00a2R\2\u01ce")
        buf.write("\u01c9\3\2\2\2\u01ce\u01ca\3\2\2\2\u01ce\u01cb\3\2\2\2")
        buf.write("\u01ce\u01cc\3\2\2\2\u01ce\u01cd\3\2\2\2\u01cf?\3\2\2")
        buf.write("\2\u01d0\u01d1\5\u0106\u0084\2\u01d1A\3\2\2\2\u01d2\u01d3")
        buf.write("\5\u0106\u0084\2\u01d3C\3\2\2\2\u01d4\u01d5\7%\2\2\u01d5")
        buf.write("\u01e3\5H%\2\u01d6\u01d7\7#\2\2\u01d7\u01e1\5H%\2\u01d8")
        buf.write("\u01d9\7\20\2\2\u01d9\u01da\5B\"\2\u01da\u01dd\7$\2\2")
        buf.write("\u01db\u01de\5:\36\2\u01dc\u01de\5\u00fc\177\2\u01dd\u01db")
        buf.write("\3\2\2\2\u01dd\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write("\u01e0\7\21\2\2\u01e0\u01e2\3\2\2\2\u01e1\u01d8\3\2\2")
        buf.write("\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3\2\2\2\u01e3\u01d6")
        buf.write("\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01ef\3\2\2\2\u01e5")
        buf.write("\u01e6\7\23\2\2\u01e6\u01e8\7l\2\2\u01e7\u01e9\5F$\2\u01e8")
        buf.write("\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01e8\3\2\2\2")
        buf.write("\u01ea\u01eb\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\7")
        buf.write("m\2\2\u01ed\u01f0\3\2\2\2\u01ee\u01f0\7i\2\2\u01ef\u01e5")
        buf.write("\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0E\3\2\2\2\u01f1\u01f7")
        buf.write("\5b\62\2\u01f2\u01f7\5~@\2\u01f3\u01f7\5\u008cG\2\u01f4")
        buf.write("\u01f7\5\u0098M\2\u01f5\u01f7\5\u00a2R\2\u01f6\u01f1\3")
        buf.write("\2\2\2\u01f6\u01f2\3\2\2\2\u01f6\u01f3\3\2\2\2\u01f6\u01f4")
        buf.write("\3\2\2\2\u01f6\u01f5\3\2\2\2\u01f7G\3\2\2\2\u01f8\u01f9")
        buf.write("\5\u0106\u0084\2\u01f9I\3\2\2\2\u01fa\u01fb\7&\2\2\u01fb")
        buf.write("\u0209\5N(\2\u01fc\u01fd\7#\2\2\u01fd\u0207\5N(\2\u01fe")
        buf.write("\u01ff\7\20\2\2\u01ff\u0200\5B\"\2\u0200\u0203\7$\2\2")
        buf.write("\u0201\u0204\5:\36\2\u0202\u0204\5\u00fc\177\2\u0203\u0201")
        buf.write("\3\2\2\2\u0203\u0202\3\2\2\2\u0204\u0205\3\2\2\2\u0205")
        buf.write("\u0206\7\21\2\2\u0206\u0208\3\2\2\2\u0207\u01fe\3\2\2")
        buf.write("\2\u0207\u0208\3\2\2\2\u0208\u020a\3\2\2\2\u0209\u01fc")
        buf.write("\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u0216\3\2\2\2\u020b")
        buf.write("\u020c\7\23\2\2\u020c\u020f\7l\2\2\u020d\u0210\5L\'\2")
        buf.write("\u020e\u0210\5\u00a6T\2\u020f\u020d\3\2\2\2\u020f\u020e")
        buf.write("\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u020f\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214\7m\2\2")
        buf.write("\u0214\u0217\3\2\2\2\u0215\u0217\7i\2\2\u0216\u020b\3")
        buf.write("\2\2\2\u0216\u0215\3\2\2\2\u0217K\3\2\2\2\u0218\u021f")
        buf.write("\5b\62\2\u0219\u021f\5~@\2\u021a\u021f\5\u008cG\2\u021b")
        buf.write("\u021f\5\u0098M\2\u021c\u021f\5\u00a2R\2\u021d\u021f\5")
        buf.write("\u00a4S\2\u021e\u0218\3\2\2\2\u021e\u0219\3\2\2\2\u021e")
        buf.write("\u021a\3\2\2\2\u021e\u021b\3\2\2\2\u021e\u021c\3\2\2\2")
        buf.write("\u021e\u021d\3\2\2\2\u021fM\3\2\2\2\u0220\u0221\5H%\2")
        buf.write("\u0221\u0222\7\4\2\2\u0222\u0224\3\2\2\2\u0223\u0220\3")
        buf.write("\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0226")
        buf.write("\5P)\2\u0226O\3\2\2\2\u0227\u0228\5\u0106\u0084\2\u0228")
        buf.write("Q\3\2\2\2\u0229\u022a\7\'\2\2\u022a\u0238\5N(\2\u022b")
        buf.write("\u022c\7#\2\2\u022c\u0236\5N(\2\u022d\u022e\7\20\2\2\u022e")
        buf.write("\u022f\5B\"\2\u022f\u0232\7$\2\2\u0230\u0233\5:\36\2\u0231")
        buf.write("\u0233\5\u00fc\177\2\u0232\u0230\3\2\2\2\u0232\u0231\3")
        buf.write("\2\2\2\u0233\u0234\3\2\2\2\u0234\u0235\7\21\2\2\u0235")
        buf.write("\u0237\3\2\2\2\u0236\u022d\3\2\2\2\u0236\u0237\3\2\2\2")
        buf.write("\u0237\u0239\3\2\2\2\u0238\u022b\3\2\2\2\u0238\u0239\3")
        buf.write("\2\2\2\u0239\u0245\3\2\2\2\u023a\u023b\7\23\2\2\u023b")
        buf.write("\u023e\7l\2\2\u023c\u023f\5L\'\2\u023d\u023f\5\u00a6T")
        buf.write("\2\u023e\u023c\3\2\2\2\u023e\u023d\3\2\2\2\u023f\u0240")
        buf.write("\3\2\2\2\u0240\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241")
        buf.write("\u0242\3\2\2\2\u0242\u0243\7m\2\2\u0243\u0246\3\2\2\2")
        buf.write("\u0244\u0246\7i\2\2\u0245\u023a\3\2\2\2\u0245\u0244\3")
        buf.write("\2\2\2\u0246S\3\2\2\2\u0247\u024b\7(\2\2\u0248\u0249\5")
        buf.write("H%\2\u0249\u024a\7\4\2\2\u024a\u024c\3\2\2\2\u024b\u0248")
        buf.write("\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\3\2\2\2\u024d")
        buf.write("\u0250\5V,\2\u024e\u024f\7\6\2\2\u024f\u0251\5N(\2\u0250")
        buf.write("\u024e\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u025d\3\2\2\2")
        buf.write("\u0252\u0253\7\23\2\2\u0253\u0256\7l\2\2\u0254\u0257\5")
        buf.write("L\'\2\u0255\u0257\5\u00a8U\2\u0256\u0254\3\2\2\2\u0256")
        buf.write("\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0256\3\2\2\2")
        buf.write("\u0258\u0259\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025b\7")
        buf.write("m\2\2\u025b\u025e\3\2\2\2\u025c\u025e\7i\2\2\u025d\u0252")
        buf.write("\3\2\2\2\u025d\u025c\3\2\2\2\u025eU\3\2\2\2\u025f\u0260")
        buf.write("\5\u0106\u0084\2\u0260W\3\2\2\2\u0261\u0264\5Z.\2\u0262")
        buf.write("\u0264\5\\/\2\u0263\u0261\3\2\2\2\u0263\u0262\3\2\2\2")
        buf.write("\u0264Y\3\2\2\2\u0265\u0266\7)\2\2\u0266\u0267\5\64\33")
        buf.write("\2\u0267\u0268\7\23\2\2\u0268\u0269\7\37\2\2\u0269\u026e")
        buf.write("\5\62\32\2\u026a\u026b\7\22\2\2\u026b\u026d\5\62\32\2")
        buf.write("\u026c\u026a\3\2\2\2\u026d\u0270\3\2\2\2\u026e\u026c\3")
        buf.write("\2\2\2\u026e\u026f\3\2\2\2\u026f\u0271\3\2\2\2\u0270\u026e")
        buf.write("\3\2\2\2\u0271\u0272\7 \2\2\u0272\u0273\7i\2\2\u0273[")
        buf.write("\3\2\2\2\u0274\u0275\7)\2\2\u0275\u0276\5^\60\2\u0276")
        buf.write("\u0277\7\23\2\2\u0277\u0279\7l\2\2\u0278\u027a\5`\61\2")
        buf.write("\u0279\u0278\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u0279\3")
        buf.write("\2\2\2\u027b\u027c\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027e")
        buf.write("\7m\2\2\u027e]\3\2\2\2\u027f\u0283\5@!\2\u0280\u0283\5")
        buf.write("H%\2\u0281\u0283\5N(\2\u0282\u027f\3\2\2\2\u0282\u0280")
        buf.write("\3\2\2\2\u0282\u0281\3\2\2\2\u0283_\3\2\2\2\u0284\u0289")
        buf.write("\5> \2\u0285\u0289\5F$\2\u0286\u0289\5L\'\2\u0287\u0289")
        buf.write("\5\u00a6T\2\u0288\u0284\3\2\2\2\u0288\u0285\3\2\2\2\u0288")
        buf.write("\u0286\3\2\2\2\u0288\u0287\3\2\2\2\u0289a\3\2\2\2\u028a")
        buf.write("\u028b\7*\2\2\u028b\u0290\5l\67\2\u028c\u028d\7\20\2\2")
        buf.write("\u028d\u028e\5\u00c8e\2\u028e\u028f\7\21\2\2\u028f\u0291")
        buf.write("\3\2\2\2\u0290\u028c\3\2\2\2\u0290\u0291\3\2\2\2\u0291")
        buf.write("\u0294\3\2\2\2\u0292\u0293\7\r\2\2\u0293\u0295\5d\63\2")
        buf.write("\u0294\u0292\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0296\3")
        buf.write("\2\2\2\u0296\u0297\7i\2\2\u0297c\3\2\2\2\u0298\u029e\5")
        buf.write("f\64\2\u0299\u029b\5h\65\2\u029a\u0299\3\2\2\2\u029a\u029b")
        buf.write("\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029d\7+\2\2\u029d")
        buf.write("\u029f\5p9\2\u029e\u029a\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a2\3\2\2\2\u02a0\u02a2\5p9\2\u02a1\u0298\3\2\2\2\u02a1")
        buf.write("\u02a0\3\2\2\2\u02a2e\3\2\2\2\u02a3\u02a4\7,\2\2\u02a4")
        buf.write("\u02a5\5n8\2\u02a5g\3\2\2\2\u02a6\u02a7\7-\2\2\u02a7\u02a8")
        buf.write("\5j\66\2\u02a8i\3\2\2\2\u02a9\u02aa\5\u0106\u0084\2\u02aa")
        buf.write("k\3\2\2\2\u02ab\u02ac\5\u0106\u0084\2\u02acm\3\2\2\2\u02ad")
        buf.write("\u02ae\5\u00d4k\2\u02ae\u02af\7\4\2\2\u02af\u02b1\3\2")
        buf.write("\2\2\u02b0\u02ad\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b2")
        buf.write("\3\2\2\2\u02b2\u02b3\5l\67\2\u02b3o\3\2\2\2\u02b4\u02ba")
        buf.write("\5z>\2\u02b5\u02ba\5r:\2\u02b6\u02ba\5t;\2\u02b7\u02ba")
        buf.write("\5v<\2\u02b8\u02ba\5x=\2\u02b9\u02b4\3\2\2\2\u02b9\u02b5")
        buf.write("\3\2\2\2\u02b9\u02b6\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9")
        buf.write("\u02b8\3\2\2\2\u02baq\3\2\2\2\u02bb\u02bc\7.\2\2\u02bc")
        buf.write("\u02bd\7\20\2\2\u02bd\u02be\5z>\2\u02be\u02bf\7\21\2\2")
        buf.write("\u02bfs\3\2\2\2\u02c0\u02c1\7/\2\2\u02c1\u02c2\7\20\2")
        buf.write("\2\u02c2\u02c3\5z>\2\u02c3\u02c4\7\21\2\2\u02c4u\3\2\2")
        buf.write("\2\u02c5\u02c6\7\60\2\2\u02c6\u02c7\7\20\2\2\u02c7\u02c8")
        buf.write("\5|?\2\u02c8\u02c9\7\21\2\2\u02c9w\3\2\2\2\u02ca\u02cb")
        buf.write("\7\61\2\2\u02cb\u02cc\7\20\2\2\u02cc\u02d1\5|?\2\u02cd")
        buf.write("\u02ce\7\22\2\2\u02ce\u02cf\7\25\2\2\u02cf\u02d0\7\23")
        buf.write("\2\2\u02d0\u02d2\5|?\2\u02d1\u02cd\3\2\2\2\u02d1\u02d2")
        buf.write("\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d4\7\21\2\2\u02d4")
        buf.write("y\3\2\2\2\u02d5\u02d6\5\u00d4k\2\u02d6{\3\2\2\2\u02d7")
        buf.write("\u02d8\5\u00d4k\2\u02d8}\3\2\2\2\u02d9\u02dc\5\u0080A")
        buf.write("\2\u02da\u02dc\5\u0082B\2\u02db\u02d9\3\2\2\2\u02db\u02da")
        buf.write("\3\2\2\2\u02dc\177\3\2\2\2\u02dd\u02e2\5B\"\2\u02de\u02df")
        buf.write("\7\22\2\2\u02df\u02e1\5B\"\2\u02e0\u02de\3\2\2\2\u02e1")
        buf.write("\u02e4\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\u02e5\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e5\u02e6\7")
        buf.write("\23\2\2\u02e6\u02e9\5\16\b\2\u02e7\u02e8\7!\2\2\u02e8")
        buf.write("\u02ea\5\u0086D\2\u02e9\u02e7\3\2\2\2\u02e9\u02ea\3\2")
        buf.write("\2\2\u02ea\u02ed\3\2\2\2\u02eb\u02ee\5\u0088E\2\u02ec")
        buf.write("\u02ee\7i\2\2\u02ed\u02eb\3\2\2\2\u02ed\u02ec\3\2\2\2")
        buf.write("\u02ee\u0081\3\2\2\2\u02ef\u02f0\7\62\2\2\u02f0\u02f5")
        buf.write("\5B\"\2\u02f1\u02f2\7\22\2\2\u02f2\u02f4\5B\"\2\u02f3")
        buf.write("\u02f1\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2")
        buf.write("\u02f5\u02f6\3\2\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02f5\3")
        buf.write("\2\2\2\u02f8\u02f9\7\23\2\2\u02f9\u02fd\5\16\b\2\u02fa")
        buf.write("\u02fb\7!\2\2\u02fb\u02fe\5\u0086D\2\u02fc\u02fe\5\u0084")
        buf.write("C\2\u02fd\u02fa\3\2\2\2\u02fd\u02fc\3\2\2\2\u02fd\u02fe")
        buf.write("\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0300\7i\2\2\u0300")
        buf.write("\u0083\3\2\2\2\u0301\u0302\7\63\2\2\u0302\u0303\7\20\2")
        buf.write("\2\u0303\u0304\5\u00d4k\2\u0304\u0305\7\22\2\2\u0305\u0308")
        buf.write("\5d\63\2\u0306\u0307\7\22\2\2\u0307\u0309\5\u0086D\2\u0308")
        buf.write("\u0306\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030a\3\2\2\2")
        buf.write("\u030a\u030b\7\21\2\2\u030b\u0085\3\2\2\2\u030c\u030d")
        buf.write("\5\u00d4k\2\u030d\u0087\3\2\2\2\u030e\u030f\7\64\2\2\u030f")
        buf.write("\u0310\7\23\2\2\u0310\u0312\7l\2\2\u0311\u0313\5\u008a")
        buf.write("F\2\u0312\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0312")
        buf.write("\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\3\2\2\2\u0316")
        buf.write("\u0317\7m\2\2\u0317\u0089\3\2\2\2\u0318\u0319\5\u008c")
        buf.write("G\2\u0319\u008b\3\2\2\2\u031a\u031d\5\u008eH\2\u031b\u031d")
        buf.write("\5\u0094K\2\u031c\u031a\3\2\2\2\u031c\u031b\3\2\2\2\u031d")
        buf.write("\u008d\3\2\2\2\u031e\u031f\7\65\2\2\u031f\u0321\7\20\2")
        buf.write("\2\u0320\u0322\5\u0090I\2\u0321\u0320\3\2\2\2\u0321\u0322")
        buf.write("\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324\5\u0092J\2\u0324")
        buf.write("\u0325\7\21\2\2\u0325\u0326\7i\2\2\u0326\u008f\3\2\2\2")
        buf.write("\u0327\u0328\t\4\2\2\u0328\u0091\3\2\2\2\u0329\u032a\5")
        buf.write("\u00d4k\2\u032a\u0093\3\2\2\2\u032b\u032c\78\2\2\u032c")
        buf.write("\u032d\7\20\2\2\u032d\u032e\5\u0096L\2\u032e\u032f\7\21")
        buf.write("\2\2\u032f\u0330\7i\2\2\u0330\u0095\3\2\2\2\u0331\u0334")
        buf.write("\5B\"\2\u0332\u0334\5\u00f0y\2\u0333\u0331\3\2\2\2\u0333")
        buf.write("\u0332\3\2\2\2\u0334\u0097\3\2\2\2\u0335\u0336\79\2\2")
        buf.write("\u0336\u0337\5\u00a0Q\2\u0337\u0339\7\20\2\2\u0338\u033a")
        buf.write("\5\u00c8e\2\u0339\u0338\3\2\2\2\u0339\u033a\3\2\2\2\u033a")
        buf.write("\u033b\3\2\2\2\u033b\u033e\7\21\2\2\u033c\u033d\7:\2\2")
        buf.write("\u033d\u033f\5\u009aN\2\u033e\u033c\3\2\2\2\u033e\u033f")
        buf.write("\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0341\5\u009cO\2\u0341")
        buf.write("\u0342\7i\2\2\u0342\u0099\3\2\2\2\u0343\u0344\5\16\b\2")
        buf.write("\u0344\u009b\3\2\2\2\u0345\u0347\7\r\2\2\u0346\u0348\5")
        buf.write("\u009eP\2\u0347\u0346\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u0354\3\2\2\2\u0349\u034a\7;\2\2\u034a\u0355\5\u00d4")
        buf.write("k\2\u034b\u0355\7<\2\2\u034c\u034d\7=\2\2\u034d\u034e")
        buf.write("\5\n\6\2\u034e\u0350\7\20\2\2\u034f\u0351\5\u00ceh\2\u0350")
        buf.write("\u034f\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0352\3\2\2\2")
        buf.write("\u0352\u0353\7\21\2\2\u0353\u0355\3\2\2\2\u0354\u0349")
        buf.write("\3\2\2\2\u0354\u034b\3\2\2\2\u0354\u034c\3\2\2\2\u0355")
        buf.write("\u009d\3\2\2\2\u0356\u0357\7>\2\2\u0357\u009f\3\2\2\2")
        buf.write("\u0358\u0359\5\u0106\u0084\2\u0359\u00a1\3\2\2\2\u035a")
        buf.write("\u035b\t\5\2\2\u035b\u035c\7\20\2\2\u035c\u035d\5\u00ce")
        buf.write("h\2\u035d\u035e\7\21\2\2\u035e\u035f\7i\2\2\u035f\u00a3")
        buf.write("\3\2\2\2\u0360\u0361\5\u00bc_\2\u0361\u0362\7\4\2\2\u0362")
        buf.write("\u0364\3\2\2\2\u0363\u0360\3\2\2\2\u0363\u0364\3\2\2\2")
        buf.write("\u0364\u0365\3\2\2\2\u0365\u0366\5V,\2\u0366\u0368\7\20")
        buf.write("\2\2\u0367\u0369\5\u00ceh\2\u0368\u0367\3\2\2\2\u0368")
        buf.write("\u0369\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b\7\21\2")
        buf.write("\2\u036b\u036c\7i\2\2\u036c\u00a5\3\2\2\2\u036d\u0370")
        buf.write("\5\u00a8U\2\u036e\u0370\5\u00acW\2\u036f\u036d\3\2\2\2")
        buf.write("\u036f\u036e\3\2\2\2\u0370\u00a7\3\2\2\2\u0371\u0372\7")
        buf.write("A\2\2\u0372\u0373\5d\63\2\u0373\u0374\7\23\2\2\u0374\u0376")
        buf.write("\7l\2\2\u0375\u0377\5\u00aaV\2\u0376\u0375\3\2\2\2\u0377")
        buf.write("\u0378\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037a\3\2\2\2\u037a\u037b\7m\2\2\u037b\u00a9\3")
        buf.write("\2\2\2\u037c\u037f\5\u00c2b\2\u037d\u037f\5\u00c0a\2\u037e")
        buf.write("\u037c\3\2\2\2\u037e\u037d\3\2\2\2\u037f\u00ab\3\2\2\2")
        buf.write("\u0380\u0381\7B\2\2\u0381\u0382\5\u00aeX\2\u0382\u00ad")
        buf.write("\3\2\2\2\u0383\u0384\5\u00b0Y\2\u0384\u0385\7\23\2\2\u0385")
        buf.write("\u0387\3\2\2\2\u0386\u0383\3\2\2\2\u0386\u0387\3\2\2\2")
        buf.write("\u0387\u038d\3\2\2\2\u0388\u038e\5\u00b2Z\2\u0389\u038e")
        buf.write("\5\u00b6\\\2\u038a\u038e\5\u00be`\2\u038b\u038e\5\u00c0")
        buf.write("a\2\u038c\u038e\5\u00c2b\2\u038d\u0388\3\2\2\2\u038d\u0389")
        buf.write("\3\2\2\2\u038d\u038a\3\2\2\2\u038d\u038b\3\2\2\2\u038d")
        buf.write("\u038c\3\2\2\2\u038e\u00af\3\2\2\2\u038f\u0390\5\u0106")
        buf.write("\u0084\2\u0390\u00b1\3\2\2\2\u0391\u0396\5\u00b4[\2\u0392")
        buf.write("\u0393\7\20\2\2\u0393\u0394\5\u00ceh\2\u0394\u0395\7\21")
        buf.write("\2\2\u0395\u0397\3\2\2\2\u0396\u0392\3\2\2\2\u0396\u0397")
        buf.write("\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u0399\7\23\2\2\u0399")
        buf.write("\u039b\7l\2\2\u039a\u039c\5\u00aeX\2\u039b\u039a\3\2\2")
        buf.write("\2\u039c\u039d\3\2\2\2\u039d\u039b\3\2\2\2\u039d\u039e")
        buf.write("\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\7m\2\2\u03a0")
        buf.write("\u03a2\5\u00b8]\2\u03a1\u03a0\3\2\2\2\u03a1\u03a2\3\2")
        buf.write("\2\2\u03a2\u00b3\3\2\2\2\u03a3\u03a4\t\6\2\2\u03a4\u00b5")
        buf.write("\3\2\2\2\u03a5\u03a6\5\u00bc_\2\u03a6\u03a7\7\4\2\2\u03a7")
        buf.write("\u03a9\3\2\2\2\u03a8\u03a5\3\2\2\2\u03a8\u03a9\3\2\2\2")
        buf.write("\u03a9\u03aa\3\2\2\2\u03aa\u03ab\5P)\2\u03ab\u03ad\7\20")
        buf.write("\2\2\u03ac\u03ae\5\u00ceh\2\u03ad\u03ac\3\2\2\2\u03ad")
        buf.write("\u03ae\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b2\7\21\2")
        buf.write("\2\u03b0\u03b3\5\u00b8]\2\u03b1\u03b3\7i\2\2\u03b2\u03b0")
        buf.write("\3\2\2\2\u03b2\u03b1\3\2\2\2\u03b3\u00b7\3\2\2\2\u03b4")
        buf.write("\u03b5\7\64\2\2\u03b5\u03b6\7\23\2\2\u03b6\u03b8\7l\2")
        buf.write("\2\u03b7\u03b9\5\u00ba^\2\u03b8\u03b7\3\2\2\2\u03b9\u03ba")
        buf.write("\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb")
        buf.write("\u03bc\3\2\2\2\u03bc\u03bd\7m\2\2\u03bd\u00b9\3\2\2\2")
        buf.write("\u03be\u03c2\5\u008cG\2\u03bf\u03c2\5\u00a4S\2\u03c0\u03c2")
        buf.write("\5\u00c6d\2\u03c1\u03be\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1")
        buf.write("\u03c0\3\2\2\2\u03c2\u00bb\3\2\2\2\u03c3\u03c4\5\u00d4")
        buf.write("k\2\u03c4\u00bd\3\2\2\2\u03c5\u03c6\7F\2\2\u03c6\u03c7")
        buf.write("\5d\63\2\u03c7\u03c8\7i\2\2\u03c8\u00bf\3\2\2\2\u03c9")
        buf.write("\u03ca\7G\2\2\u03ca\u03cf\5l\67\2\u03cb\u03cc\7\20\2\2")
        buf.write("\u03cc\u03cd\5\u00ceh\2\u03cd\u03ce\7\21\2\2\u03ce\u03d0")
        buf.write("\3\2\2\2\u03cf\u03cb\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0")
        buf.write("\u03d1\3\2\2\2\u03d1\u03d2\7i\2\2\u03d2\u00c1\3\2\2\2")
        buf.write("\u03d3\u03d4\7H\2\2\u03d4\u03d5\5\u00c4c\2\u03d5\u03d6")
        buf.write("\7i\2\2\u03d6\u00c3\3\2\2\2\u03d7\u03d8\5\u00eex\2\u03d8")
        buf.write("\u03da\7\20\2\2\u03d9\u03db\5\u00ceh\2\u03da\u03d9\3\2")
        buf.write("\2\2\u03da\u03db\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd")
        buf.write("\7\21\2\2\u03dd\u00c5\3\2\2\2\u03de\u03df\7I\2\2\u03df")
        buf.write("\u03e0\5d\63\2\u03e0\u03e1\7i\2\2\u03e1\u00c7\3\2\2\2")
        buf.write("\u03e2\u03e7\5\u00caf\2\u03e3\u03e4\7\22\2\2\u03e4\u03e6")
        buf.write("\5\u00caf\2\u03e5\u03e3\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7")
        buf.write("\u03e5\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u00c9\3\2\2\2")
        buf.write("\u03e9\u03e7\3\2\2\2\u03ea\u03eb\5\u00ccg\2\u03eb\u03ec")
        buf.write("\7\23\2\2\u03ec\u03ef\5\16\b\2\u03ed\u03ee\7!\2\2\u03ee")
        buf.write("\u03f0\5\u0086D\2\u03ef\u03ed\3\2\2\2\u03ef\u03f0\3\2")
        buf.write("\2\2\u03f0\u00cb\3\2\2\2\u03f1\u03f2\5\u0106\u0084\2\u03f2")
        buf.write("\u00cd\3\2\2\2\u03f3\u03f8\5\u00d0i\2\u03f4\u03f5\7\22")
        buf.write("\2\2\u03f5\u03f7\5\u00d0i\2\u03f6\u03f4\3\2\2\2\u03f7")
        buf.write("\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2")
        buf.write("\u03f9\u03ff\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fb\u03fc\7")
        buf.write("\22\2\2\u03fc\u03fe\5\u00d2j\2\u03fd\u03fb\3\2\2\2\u03fe")
        buf.write("\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2")
        buf.write("\u0400\u040b\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u0407\5")
        buf.write("\u00d2j\2\u0403\u0404\7\22\2\2\u0404\u0406\5\u00d2j\2")
        buf.write("\u0405\u0403\3\2\2\2\u0406\u0409\3\2\2\2\u0407\u0405\3")
        buf.write("\2\2\2\u0407\u0408\3\2\2\2\u0408\u040b\3\2\2\2\u0409\u0407")
        buf.write("\3\2\2\2\u040a\u03f3\3\2\2\2\u040a\u0402\3\2\2\2\u040b")
        buf.write("\u00cf\3\2\2\2\u040c\u040d\5\u00d4k\2\u040d\u00d1\3\2")
        buf.write("\2\2\u040e\u040f\5\u00ccg\2\u040f\u0410\7\23\2\2\u0410")
        buf.write("\u0411\5\u00d4k\2\u0411\u00d3\3\2\2\2\u0412\u0415\5\u00d8")
        buf.write("m\2\u0413\u0415\5\u00d6l\2\u0414\u0412\3\2\2\2\u0414\u0413")
        buf.write("\3\2\2\2\u0415\u00d5\3\2\2\2\u0416\u0417\5\u00d8m\2\u0417")
        buf.write("\u0418\7J\2\2\u0418\u0419\5\u00d4k\2\u0419\u041a\7\23")
        buf.write("\2\2\u041a\u041b\5\u00d4k\2\u041b\u00d7\3\2\2\2\u041c")
        buf.write("\u0421\5\u00dan\2\u041d\u041e\7K\2\2\u041e\u0420\5\u00da")
        buf.write("n\2\u041f\u041d\3\2\2\2\u0420\u0423\3\2\2\2\u0421\u041f")
        buf.write("\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u00d9\3\2\2\2\u0423")
        buf.write("\u0421\3\2\2\2\u0424\u0429\5\u00dco\2\u0425\u0426\7L\2")
        buf.write("\2\u0426\u0428\5\u00dco\2\u0427\u0425\3\2\2\2\u0428\u042b")
        buf.write("\3\2\2\2\u0429\u0427\3\2\2\2\u0429\u042a\3\2\2\2\u042a")
        buf.write("\u00db\3\2\2\2\u042b\u0429\3\2\2\2\u042c\u0431\5\u00de")
        buf.write("p\2\u042d\u042e\7M\2\2\u042e\u0430\5\u00dep\2\u042f\u042d")
        buf.write("\3\2\2\2\u0430\u0433\3\2\2\2\u0431\u042f\3\2\2\2\u0431")
        buf.write("\u0432\3\2\2\2\u0432\u00dd\3\2\2\2\u0433\u0431\3\2\2\2")
        buf.write("\u0434\u0435\7N\2\2\u0435\u0438\5\u00dep\2\u0436\u0438")
        buf.write("\5\u00e0q\2\u0437\u0434\3\2\2\2\u0437\u0436\3\2\2\2\u0438")
        buf.write("\u00df\3\2\2\2\u0439\u043a\bq\1\2\u043a\u043b\5\u00e4")
        buf.write("s\2\u043b\u0442\3\2\2\2\u043c\u043d\f\3\2\2\u043d\u043e")
        buf.write("\5\u00e2r\2\u043e\u043f\5\u00e4s\2\u043f\u0441\3\2\2\2")
        buf.write("\u0440\u043c\3\2\2\2\u0441\u0444\3\2\2\2\u0442\u0440\3")
        buf.write("\2\2\2\u0442\u0443\3\2\2\2\u0443\u00e1\3\2\2\2\u0444\u0442")
        buf.write("\3\2\2\2\u0445\u0446\t\7\2\2\u0446\u00e3\3\2\2\2\u0447")
        buf.write("\u0448\bs\1\2\u0448\u0449\5\u00e8u\2\u0449\u0450\3\2\2")
        buf.write("\2\u044a\u044b\f\3\2\2\u044b\u044c\5\u00e6t\2\u044c\u044d")
        buf.write("\5\u00e8u\2\u044d\u044f\3\2\2\2\u044e\u044a\3\2\2\2\u044f")
        buf.write("\u0452\3\2\2\2\u0450\u044e\3\2\2\2\u0450\u0451\3\2\2\2")
        buf.write("\u0451\u00e5\3\2\2\2\u0452\u0450\3\2\2\2\u0453\u0454\t")
        buf.write("\b\2\2\u0454\u00e7\3\2\2\2\u0455\u0456\bu\1\2\u0456\u0457")
        buf.write("\5\u00ecw\2\u0457\u045e\3\2\2\2\u0458\u0459\f\3\2\2\u0459")
        buf.write("\u045a\5\u00eav\2\u045a\u045b\5\u00ecw\2\u045b\u045d\3")
        buf.write("\2\2\2\u045c\u0458\3\2\2\2\u045d\u0460\3\2\2\2\u045e\u045c")
        buf.write("\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u00e9\3\2\2\2\u0460")
        buf.write("\u045e\3\2\2\2\u0461\u0462\t\t\2\2\u0462\u00eb\3\2\2\2")
        buf.write("\u0463\u0467\5\u00eex\2\u0464\u0465\7V\2\2\u0465\u0467")
        buf.write("\5\u00ecw\2\u0466\u0463\3\2\2\2\u0466\u0464\3\2\2\2\u0467")
        buf.write("\u00ed\3\2\2\2\u0468\u0469\bx\1\2\u0469\u046a\5\u00f2")
        buf.write("z\2\u046a\u0489\3\2\2\2\u046b\u046c\f\7\2\2\u046c\u046d")
        buf.write("\7\4\2\2\u046d\u046e\7-\2\2\u046e\u046f\7\20\2\2\u046f")
        buf.write("\u0470\5\16\b\2\u0470\u0471\7\21\2\2\u0471\u0488\3\2\2")
        buf.write("\2\u0472\u0473\f\6\2\2\u0473\u0474\7\4\2\2\u0474\u0475")
        buf.write("\7\r\2\2\u0475\u0476\7\20\2\2\u0476\u0477\5\16\b\2\u0477")
        buf.write("\u0478\7\21\2\2\u0478\u0488\3\2\2\2\u0479\u047a\f\5\2")
        buf.write("\2\u047a\u047b\7\37\2\2\u047b\u047c\5\u00d4k\2\u047c\u047d")
        buf.write("\7 \2\2\u047d\u0488\3\2\2\2\u047e\u047f\f\4\2\2\u047f")
        buf.write("\u0481\7\20\2\2\u0480\u0482\5\u00ceh\2\u0481\u0480\3\2")
        buf.write("\2\2\u0481\u0482\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0488")
        buf.write("\7\21\2\2\u0484\u0485\f\3\2\2\u0485\u0486\7\4\2\2\u0486")
        buf.write("\u0488\5B\"\2\u0487\u046b\3\2\2\2\u0487\u0472\3\2\2\2")
        buf.write("\u0487\u0479\3\2\2\2\u0487\u047e\3\2\2\2\u0487\u0484\3")
        buf.write("\2\2\2\u0488\u048b\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u048a")
        buf.write("\3\2\2\2\u048a\u00ef\3\2\2\2\u048b\u0489\3\2\2\2\u048c")
        buf.write("\u048d\5\u00eex\2\u048d\u048e\7\4\2\2\u048e\u048f\5B\"")
        buf.write("\2\u048f\u00f1\3\2\2\2\u0490\u0498\5\u00f4{\2\u0491\u0498")
        buf.write("\7Z\2\2\u0492\u0498\5\u0106\u0084\2\u0493\u0494\7\20\2")
        buf.write("\2\u0494\u0495\5\u00d4k\2\u0495\u0496\7\21\2\2\u0496\u0498")
        buf.write("\3\2\2\2\u0497\u0490\3\2\2\2\u0497\u0491\3\2\2\2\u0497")
        buf.write("\u0492\3\2\2\2\u0497\u0493\3\2\2\2\u0498\u00f3\3\2\2\2")
        buf.write("\u0499\u04a1\5\u00fe\u0080\2\u049a\u04a1\5\u0104\u0083")
        buf.write("\2\u049b\u04a1\5\u0108\u0085\2\u049c\u04a1\5\u00fc\177")
        buf.write("\2\u049d\u04a1\5\u00fa~\2\u049e\u04a1\5\u00f6|\2\u049f")
        buf.write("\u04a1\5\u00f8}\2\u04a0\u0499\3\2\2\2\u04a0\u049a\3\2")
        buf.write("\2\2\u04a0\u049b\3\2\2\2\u04a0\u049c\3\2\2\2\u04a0\u049d")
        buf.write("\3\2\2\2\u04a0\u049e\3\2\2\2\u04a0\u049f\3\2\2\2\u04a1")
        buf.write("\u00f5\3\2\2\2\u04a2\u04a3\7\37\2\2\u04a3\u04a8\5\u00d4")
        buf.write("k\2\u04a4\u04a5\7\22\2\2\u04a5\u04a7\5\u00d4k\2\u04a6")
        buf.write("\u04a4\3\2\2\2\u04a7\u04aa\3\2\2\2\u04a8\u04a6\3\2\2\2")
        buf.write("\u04a8\u04a9\3\2\2\2\u04a9\u04ab\3\2\2\2\u04aa\u04a8\3")
        buf.write("\2\2\2\u04ab\u04ac\7 \2\2\u04ac\u00f7\3\2\2\2\u04ad\u04ae")
        buf.write("\7[\2\2\u04ae\u04af\7\20\2\2\u04af\u04b0\5\u00d4k\2\u04b0")
        buf.write("\u04b1\7\22\2\2\u04b1\u04b2\5\u00d4k\2\u04b2\u04b3\7\21")
        buf.write("\2\2\u04b3\u04bb\3\2\2\2\u04b4\u04b5\7\37\2\2\u04b5\u04b6")
        buf.write("\5\u00d4k\2\u04b6\u04b7\7\\\2\2\u04b7\u04b8\5\u00d4k\2")
        buf.write("\u04b8\u04b9\7 \2\2\u04b9\u04bb\3\2\2\2\u04ba\u04ad\3")
        buf.write("\2\2\2\u04ba\u04b4\3\2\2\2\u04bb\u00f9\3\2\2\2\u04bc\u04bd")
        buf.write("\7]\2\2\u04bd\u00fb\3\2\2\2\u04be\u04bf\7`\2\2\u04bf\u00fd")
        buf.write("\3\2\2\2\u04c0\u04c1\7a\2\2\u04c1\u00ff\3\2\2\2\u04c2")
        buf.write("\u04c3\7b\2\2\u04c3\u0101\3\2\2\2\u04c4\u04c5\7c\2\2\u04c5")
        buf.write("\u0103\3\2\2\2\u04c6\u04c7\7e\2\2\u04c7\u0105\3\2\2\2")
        buf.write("\u04c8\u04d6\7f\2\2\u04c9\u04d6\7;\2\2\u04ca\u04d6\7\16")
        buf.write("\2\2\u04cb\u04d6\7\3\2\2\u04cc\u04d6\5.\30\2\u04cd\u04d6")
        buf.write("\7\24\2\2\u04ce\u04d6\7\25\2\2\u04cf\u04d6\7\36\2\2\u04d0")
        buf.write("\u04d6\7\"\2\2\u04d1\u04d6\7%\2\2\u04d2\u04d6\7&\2\2\u04d3")
        buf.write("\u04d6\7\'\2\2\u04d4\u04d6\7(\2\2\u04d5\u04c8\3\2\2\2")
        buf.write("\u04d5\u04c9\3\2\2\2\u04d5\u04ca\3\2\2\2\u04d5\u04cb\3")
        buf.write("\2\2\2\u04d5\u04cc\3\2\2\2\u04d5\u04cd\3\2\2\2\u04d5\u04ce")
        buf.write("\3\2\2\2\u04d5\u04cf\3\2\2\2\u04d5\u04d0\3\2\2\2\u04d5")
        buf.write("\u04d1\3\2\2\2\u04d5\u04d2\3\2\2\2\u04d5\u04d3\3\2\2\2")
        buf.write("\u04d5\u04d4\3\2\2\2\u04d6\u0107\3\2\2\2\u04d7\u04d8\7")
        buf.write("g\2\2\u04d8\u0109\3\2\2\2\u04d9\u04dc\7f\2\2\u04da\u04dc")
        buf.write("\5.\30\2\u04db\u04d9\3\2\2\2\u04db\u04da\3\2\2\2\u04dc")
        buf.write("\u010b\3\2\2\2w\u010f\u0115\u0122\u0129\u0137\u013b\u013f")
        buf.write("\u0167\u0173\u0177\u017f\u0185\u0192\u019b\u01a3\u01a8")
        buf.write("\u01b5\u01b9\u01bb\u01c2\u01c7\u01ce\u01dd\u01e1\u01e3")
        buf.write("\u01ea\u01ef\u01f6\u0203\u0207\u0209\u020f\u0211\u0216")
        buf.write("\u021e\u0223\u0232\u0236\u0238\u023e\u0240\u0245\u024b")
        buf.write("\u0250\u0256\u0258\u025d\u0263\u026e\u027b\u0282\u0288")
        buf.write("\u0290\u0294\u029a\u029e\u02a1\u02b0\u02b9\u02d1\u02db")
        buf.write("\u02e2\u02e9\u02ed\u02f5\u02fd\u0308\u0314\u031c\u0321")
        buf.write("\u0333\u0339\u033e\u0347\u0350\u0354\u0363\u0368\u036f")
        buf.write("\u0378\u037e\u0386\u038d\u0396\u039d\u03a1\u03a8\u03ad")
        buf.write("\u03b2\u03ba\u03c1\u03cf\u03da\u03e7\u03ef\u03f8\u03ff")
        buf.write("\u0407\u040a\u0414\u0421\u0429\u0431\u0437\u0442\u0450")
        buf.write("\u045e\u0466\u0481\u0487\u0489\u0497\u04a0\u04a8\u04ba")
        buf.write("\u04d5\u04db")
        return buf.getvalue()


class openscenario2Parser ( Parser ):

    grammarFileName = "openscenario2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'import'", "'.'", "'list'", "'of'", "'int'", 
                     "'uint'", "'float'", "'bool'", "'string'", "'type'", 
                     "'is'", "'unit'", "'SI'", "'('", "')'", "','", "':'", 
                     "'factor'", "'offset'", "'kg'", "'m'", "'s'", "'A'", 
                     "'K'", "'mol'", "'cd'", "'rad'", "'enum'", "'['", "']'", 
                     "'='", "'struct'", "'inherits'", "'=='", "'actor'", 
                     "'scenario'", "'action'", "'modifier'", "'extend'", 
                     "'event'", "'if'", "'@'", "'as'", "'rise'", "'fall'", 
                     "'elapsed'", "'every'", "'var'", "'sample'", "'with'", 
                     "'keep'", "'default'", "'hard'", "'remove_default'", 
                     "'def'", "'->'", "'expression'", "'undefined'", "'external'", 
                     "'only'", "'cover'", "'record'", "'on'", "'do'", "'serial'", 
                     "'one_of'", "'parallel'", "'wait'", "'emit'", "'call'", 
                     "'until'", "'?'", "'=>'", "'or'", "'and'", "'not'", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'in'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'it'", "'range'", "'..'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "STRING_LITERAL", 
                      "SHORTSTRING", "LONGSTRING", "BOOL_LITERAL", "INTEGER_LITERAL", 
                      "UINT_LITERAL", "HEX_UINT_LITERAL", "INT_LITERAL", 
                      "FLOAT_LITERAL", "IDENTIFIER", "PHYSICAL_LITERAL", 
                      "LINEJOINER", "NEWLINE", "WS", "COMMENT", "INDENT", 
                      "DEDENT" ]

    RULE_osc_file = 0
    RULE_prelude_statement = 1
    RULE_import_statement = 2
    RULE_import_reference = 3
    RULE_structured_identifier = 4
    RULE_osc_declaration = 5
    RULE_type_declarator = 6
    RULE_non_aggregate_type_declarator = 7
    RULE_declared_type_name = 8
    RULE_aggregate_type_declarator = 9
    RULE_list_type_declarator = 10
    RULE_primitive_type = 11
    RULE_physical_type_declaration = 12
    RULE_unit_declaration = 13
    RULE_base_unit_specifier = 14
    RULE_unit_specifier = 15
    RULE_si_base_unit_specifier = 16
    RULE_si_base_exponent_list = 17
    RULE_si_base_exponent = 18
    RULE_si_unit_specifier = 19
    RULE_si_factor = 20
    RULE_si_offset = 21
    RULE_si_base_unit_name = 22
    RULE_enum_declaration = 23
    RULE_enum_member_decl = 24
    RULE_enum_name = 25
    RULE_enum_member_name = 26
    RULE_enum_member_value = 27
    RULE_enum_value_reference = 28
    RULE_struct_declaration = 29
    RULE_struct_member_decl = 30
    RULE_struct_name = 31
    RULE_field_name = 32
    RULE_actor_declaration = 33
    RULE_actor_member_decl = 34
    RULE_actor_name = 35
    RULE_scenario_declaration = 36
    RULE_scenario_member_decl = 37
    RULE_qualified_behavior_name = 38
    RULE_behavior_name = 39
    RULE_action_declaration = 40
    RULE_modifier_declaration = 41
    RULE_modifier_name = 42
    RULE_type_extension = 43
    RULE_enum_type_extension = 44
    RULE_structured_type_extension = 45
    RULE_extendable_type_name = 46
    RULE_extension_member_decl = 47
    RULE_event_declaration = 48
    RULE_event_specification = 49
    RULE_event_reference = 50
    RULE_event_field_decl = 51
    RULE_event_field_name = 52
    RULE_event_name = 53
    RULE_event_path = 54
    RULE_event_condition = 55
    RULE_rise_expression = 56
    RULE_fall_expression = 57
    RULE_elapsed_expression = 58
    RULE_every_expression = 59
    RULE_bool_expression = 60
    RULE_duration_expression = 61
    RULE_field_declaration = 62
    RULE_parameter_declaration = 63
    RULE_variable_declaration = 64
    RULE_sample_expression = 65
    RULE_default_value = 66
    RULE_parameter_with_declaration = 67
    RULE_parameter_with_member = 68
    RULE_constraint_declaration = 69
    RULE_keep_constraint_declaration = 70
    RULE_constraint_qualifier = 71
    RULE_constraint_expression = 72
    RULE_remove_default_declaration = 73
    RULE_parameter_reference = 74
    RULE_method_declaration = 75
    RULE_return_type = 76
    RULE_method_implementation = 77
    RULE_method_qualifier = 78
    RULE_method_name = 79
    RULE_coverage_declaration = 80
    RULE_modifier_application = 81
    RULE_behavior_specification = 82
    RULE_on_directive = 83
    RULE_on_member = 84
    RULE_do_directive = 85
    RULE_do_member = 86
    RULE_label_name = 87
    RULE_composition = 88
    RULE_composition_operator = 89
    RULE_behavior_invocation = 90
    RULE_behavior_with_declaration = 91
    RULE_behavior_with_member = 92
    RULE_actor_expression = 93
    RULE_wait_directive = 94
    RULE_emit_directive = 95
    RULE_call_directive = 96
    RULE_method_invocation = 97
    RULE_until_directive = 98
    RULE_argument_list_specification = 99
    RULE_argument_specification = 100
    RULE_argument_name = 101
    RULE_argument_list = 102
    RULE_positional_argument = 103
    RULE_named_argument = 104
    RULE_expression = 105
    RULE_ternary_op_exp = 106
    RULE_implication = 107
    RULE_disjunction = 108
    RULE_conjunction = 109
    RULE_inversion = 110
    RULE_relation = 111
    RULE_relational_op = 112
    RULE_sum_exp = 113
    RULE_additive_op = 114
    RULE_term = 115
    RULE_multiplicative_op = 116
    RULE_factor = 117
    RULE_postfix_exp = 118
    RULE_field_access = 119
    RULE_primary_exp = 120
    RULE_value_exp = 121
    RULE_list_constructor = 122
    RULE_range_constructor = 123
    RULE_string_literal = 124
    RULE_bool_literal = 125
    RULE_integer_literal = 126
    RULE_uint_literal = 127
    RULE_hex_uint_literal = 128
    RULE_float_literal = 129
    RULE_identifier = 130
    RULE_physical_literal = 131
    RULE_unit_name = 132

    ruleNames =  [ "osc_file", "prelude_statement", "import_statement", 
                   "import_reference", "structured_identifier", "osc_declaration", 
                   "type_declarator", "non_aggregate_type_declarator", "declared_type_name", 
                   "aggregate_type_declarator", "list_type_declarator", 
                   "primitive_type", "physical_type_declaration", "unit_declaration", 
                   "base_unit_specifier", "unit_specifier", "si_base_unit_specifier", 
                   "si_base_exponent_list", "si_base_exponent", "si_unit_specifier", 
                   "si_factor", "si_offset", "si_base_unit_name", "enum_declaration", 
                   "enum_member_decl", "enum_name", "enum_member_name", 
                   "enum_member_value", "enum_value_reference", "struct_declaration", 
                   "struct_member_decl", "struct_name", "field_name", "actor_declaration", 
                   "actor_member_decl", "actor_name", "scenario_declaration", 
                   "scenario_member_decl", "qualified_behavior_name", "behavior_name", 
                   "action_declaration", "modifier_declaration", "modifier_name", 
                   "type_extension", "enum_type_extension", "structured_type_extension", 
                   "extendable_type_name", "extension_member_decl", "event_declaration", 
                   "event_specification", "event_reference", "event_field_decl", 
                   "event_field_name", "event_name", "event_path", "event_condition", 
                   "rise_expression", "fall_expression", "elapsed_expression", 
                   "every_expression", "bool_expression", "duration_expression", 
                   "field_declaration", "parameter_declaration", "variable_declaration", 
                   "sample_expression", "default_value", "parameter_with_declaration", 
                   "parameter_with_member", "constraint_declaration", "keep_constraint_declaration", 
                   "constraint_qualifier", "constraint_expression", "remove_default_declaration", 
                   "parameter_reference", "method_declaration", "return_type", 
                   "method_implementation", "method_qualifier", "method_name", 
                   "coverage_declaration", "modifier_application", "behavior_specification", 
                   "on_directive", "on_member", "do_directive", "do_member", 
                   "label_name", "composition", "composition_operator", 
                   "behavior_invocation", "behavior_with_declaration", "behavior_with_member", 
                   "actor_expression", "wait_directive", "emit_directive", 
                   "call_directive", "method_invocation", "until_directive", 
                   "argument_list_specification", "argument_specification", 
                   "argument_name", "argument_list", "positional_argument", 
                   "named_argument", "expression", "ternary_op_exp", "implication", 
                   "disjunction", "conjunction", "inversion", "relation", 
                   "relational_op", "sum_exp", "additive_op", "term", "multiplicative_op", 
                   "factor", "postfix_exp", "field_access", "primary_exp", 
                   "value_exp", "list_constructor", "range_constructor", 
                   "string_literal", "bool_literal", "integer_literal", 
                   "uint_literal", "hex_uint_literal", "float_literal", 
                   "identifier", "physical_literal", "unit_name" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    STRING_LITERAL=91
    SHORTSTRING=92
    LONGSTRING=93
    BOOL_LITERAL=94
    INTEGER_LITERAL=95
    UINT_LITERAL=96
    HEX_UINT_LITERAL=97
    INT_LITERAL=98
    FLOAT_LITERAL=99
    IDENTIFIER=100
    PHYSICAL_LITERAL=101
    LINEJOINER=102
    NEWLINE=103
    WS=104
    COMMENT=105
    INDENT=106
    DEDENT=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Osc_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(openscenario2Parser.EOF, 0)

        def prelude_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Prelude_statementContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Prelude_statementContext,i)


        def osc_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Osc_declarationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Osc_declarationContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_osc_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOsc_file" ):
                listener.enterOsc_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOsc_file" ):
                listener.exitOsc_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOsc_file" ):
                return visitor.visitOsc_file(self)
            else:
                return visitor.visitChildren(self)




    def osc_file(self):

        localctx = openscenario2Parser.Osc_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_osc_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__0:
                self.state = 266
                self.prelude_statement()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__9) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__38))) != 0):
                self.state = 272
                self.osc_declaration()
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 278
            self.match(openscenario2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prelude_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_statement(self):
            return self.getTypedRuleContext(openscenario2Parser.Import_statementContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_prelude_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrelude_statement" ):
                listener.enterPrelude_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrelude_statement" ):
                listener.exitPrelude_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrelude_statement" ):
                return visitor.visitPrelude_statement(self)
            else:
                return visitor.visitChildren(self)




    def prelude_statement(self):

        localctx = openscenario2Parser.Prelude_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_prelude_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.import_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Import_referenceContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_import_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_statement" ):
                listener.enterImport_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_statement" ):
                listener.exitImport_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_statement" ):
                return visitor.visitImport_statement(self)
            else:
                return visitor.visitChildren(self)




    def import_statement(self):

        localctx = openscenario2Parser.Import_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(openscenario2Parser.T__0)
            self.state = 283
            self.import_reference()
            self.state = 284
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.String_literalContext,0)


        def structured_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Structured_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_import_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_reference" ):
                listener.enterImport_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_reference" ):
                listener.exitImport_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_reference" ):
                return visitor.visitImport_reference(self)
            else:
                return visitor.visitChildren(self)




    def import_reference(self):

        localctx = openscenario2Parser.Import_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_reference)
        try:
            self.state = 288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 286
                self.string_literal()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.structured_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structured_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_structured_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructured_identifier" ):
                listener.enterStructured_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructured_identifier" ):
                listener.exitStructured_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructured_identifier" ):
                return visitor.visitStructured_identifier(self)
            else:
                return visitor.visitChildren(self)




    def structured_identifier(self):

        localctx = openscenario2Parser.Structured_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_structured_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 290
                    self.identifier()
                    self.state = 291
                    self.match(openscenario2Parser.T__1) 
                self.state = 297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 298
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Osc_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physical_type_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Physical_type_declarationContext,0)


        def unit_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Unit_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_declarationContext,0)


        def struct_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Struct_declarationContext,0)


        def actor_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_declarationContext,0)


        def action_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Action_declarationContext,0)


        def scenario_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Scenario_declarationContext,0)


        def modifier_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_declarationContext,0)


        def type_extension(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_extensionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_osc_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOsc_declaration" ):
                listener.enterOsc_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOsc_declaration" ):
                listener.exitOsc_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOsc_declaration" ):
                return visitor.visitOsc_declaration(self)
            else:
                return visitor.visitChildren(self)




    def osc_declaration(self):

        localctx = openscenario2Parser.Osc_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_osc_declaration)
        try:
            self.state = 309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 300
                self.physical_type_declaration()
                pass
            elif token in [openscenario2Parser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self.unit_declaration()
                pass
            elif token in [openscenario2Parser.T__27]:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.enum_declaration()
                pass
            elif token in [openscenario2Parser.T__31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.struct_declaration()
                pass
            elif token in [openscenario2Parser.T__34]:
                self.enterOuterAlt(localctx, 5)
                self.state = 304
                self.actor_declaration()
                pass
            elif token in [openscenario2Parser.T__36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 305
                self.action_declaration()
                pass
            elif token in [openscenario2Parser.T__35]:
                self.enterOuterAlt(localctx, 7)
                self.state = 306
                self.scenario_declaration()
                pass
            elif token in [openscenario2Parser.T__37]:
                self.enterOuterAlt(localctx, 8)
                self.state = 307
                self.modifier_declaration()
                pass
            elif token in [openscenario2Parser.T__38]:
                self.enterOuterAlt(localctx, 9)
                self.state = 308
                self.type_extension()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_aggregate_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Non_aggregate_type_declaratorContext,0)


        def aggregate_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Aggregate_type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declarator" ):
                listener.enterType_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declarator" ):
                listener.exitType_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_declarator" ):
                return visitor.visitType_declarator(self)
            else:
                return visitor.visitChildren(self)




    def type_declarator(self):

        localctx = openscenario2Parser.Type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_type_declarator)
        try:
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__4, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__8, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 311
                self.non_aggregate_type_declarator()
                pass
            elif token in [openscenario2Parser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.aggregate_type_declarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_aggregate_type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_type(self):
            return self.getTypedRuleContext(openscenario2Parser.Primitive_typeContext,0)


        def declared_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Declared_type_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_non_aggregate_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_aggregate_type_declarator" ):
                listener.enterNon_aggregate_type_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_aggregate_type_declarator" ):
                listener.exitNon_aggregate_type_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_aggregate_type_declarator" ):
                return visitor.visitNon_aggregate_type_declarator(self)
            else:
                return visitor.visitChildren(self)




    def non_aggregate_type_declarator(self):

        localctx = openscenario2Parser.Non_aggregate_type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_non_aggregate_type_declarator)
        try:
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__4, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.primitive_type()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self.declared_type_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declared_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_declared_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclared_type_name" ):
                listener.enterDeclared_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclared_type_name" ):
                listener.exitDeclared_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared_type_name" ):
                return visitor.visitDeclared_type_name(self)
            else:
                return visitor.visitChildren(self)




    def declared_type_name(self):

        localctx = openscenario2Parser.Declared_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_declared_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.List_type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_aggregate_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_type_declarator" ):
                listener.enterAggregate_type_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_type_declarator" ):
                listener.exitAggregate_type_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_type_declarator" ):
                return visitor.visitAggregate_type_declarator(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_type_declarator(self):

        localctx = openscenario2Parser.Aggregate_type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_aggregate_type_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.list_type_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_aggregate_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Non_aggregate_type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_list_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_type_declarator" ):
                listener.enterList_type_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_type_declarator" ):
                listener.exitList_type_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_type_declarator" ):
                return visitor.visitList_type_declarator(self)
            else:
                return visitor.visitChildren(self)




    def list_type_declarator(self):

        localctx = openscenario2Parser.List_type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_list_type_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(openscenario2Parser.T__2)
            self.state = 324
            self.match(openscenario2Parser.T__3)
            self.state = 325
            self.non_aggregate_type_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primitive_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_primitive_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_type" ):
                listener.enterPrimitive_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_type" ):
                listener.exitPrimitive_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_type" ):
                return visitor.visitPrimitive_type(self)
            else:
                return visitor.visitChildren(self)




    def primitive_type(self):

        localctx = openscenario2Parser.Primitive_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_primitive_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__4) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__8))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Physical_type_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Declared_type_nameContext,0)


        def base_unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Base_unit_specifierContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_physical_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_type_declaration" ):
                listener.enterPhysical_type_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_type_declaration" ):
                listener.exitPhysical_type_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_type_declaration" ):
                return visitor.visitPhysical_type_declaration(self)
            else:
                return visitor.visitChildren(self)




    def physical_type_declaration(self):

        localctx = openscenario2Parser.Physical_type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_physical_type_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(openscenario2Parser.T__9)
            self.state = 330
            self.declared_type_name()
            self.state = 331
            self.match(openscenario2Parser.T__10)
            self.state = 332
            self.base_unit_specifier()
            self.state = 333
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Unit_nameContext,0)


        def declared_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Declared_type_nameContext,0)


        def unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Unit_specifierContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_unit_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_declaration" ):
                listener.enterUnit_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_declaration" ):
                listener.exitUnit_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_declaration" ):
                return visitor.visitUnit_declaration(self)
            else:
                return visitor.visitChildren(self)




    def unit_declaration(self):

        localctx = openscenario2Parser.Unit_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unit_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(openscenario2Parser.T__11)
            self.state = 336
            self.unit_name()
            self.state = 337
            self.match(openscenario2Parser.T__3)
            self.state = 338
            self.declared_type_name()
            self.state = 339
            self.match(openscenario2Parser.T__10)
            self.state = 340
            self.unit_specifier()
            self.state = 341
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_specifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_base_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_unit_specifier" ):
                listener.enterBase_unit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_unit_specifier" ):
                listener.exitBase_unit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_unit_specifier" ):
                return visitor.visitBase_unit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def base_unit_specifier(self):

        localctx = openscenario2Parser.Base_unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_base_unit_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.si_base_unit_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_unit_specifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_specifier" ):
                listener.enterUnit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_specifier" ):
                listener.exitUnit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_specifier" ):
                return visitor.visitUnit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def unit_specifier(self):

        localctx = openscenario2Parser.Unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_unit_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.si_unit_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_exponent_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_exponent_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_unit_specifier" ):
                listener.enterSi_base_unit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_unit_specifier" ):
                listener.exitSi_base_unit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_unit_specifier" ):
                return visitor.visitSi_base_unit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def si_base_unit_specifier(self):

        localctx = openscenario2Parser.Si_base_unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_si_base_unit_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(openscenario2Parser.T__12)
            self.state = 348
            self.match(openscenario2Parser.T__13)
            self.state = 349
            self.si_base_exponent_list()
            self.state = 350
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_exponent_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_exponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Si_base_exponentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Si_base_exponentContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_exponent_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_exponent_list" ):
                listener.enterSi_base_exponent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_exponent_list" ):
                listener.exitSi_base_exponent_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_exponent_list" ):
                return visitor.visitSi_base_exponent_list(self)
            else:
                return visitor.visitChildren(self)




    def si_base_exponent_list(self):

        localctx = openscenario2Parser.Si_base_exponent_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_si_base_exponent_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.si_base_exponent()
            self.state = 357
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 353
                    self.match(openscenario2Parser.T__15)
                    self.state = 354
                    self.si_base_exponent() 
                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_exponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_nameContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_exponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_exponent" ):
                listener.enterSi_base_exponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_exponent" ):
                listener.exitSi_base_exponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_exponent" ):
                return visitor.visitSi_base_exponent(self)
            else:
                return visitor.visitChildren(self)




    def si_base_exponent(self):

        localctx = openscenario2Parser.Si_base_exponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_si_base_exponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.si_base_unit_name()
            self.state = 361
            self.match(openscenario2Parser.T__16)
            self.state = 362
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_exponent_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_exponent_listContext,0)


        def si_factor(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_factorContext,0)


        def si_offset(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_offsetContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_unit_specifier" ):
                listener.enterSi_unit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_unit_specifier" ):
                listener.exitSi_unit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_unit_specifier" ):
                return visitor.visitSi_unit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def si_unit_specifier(self):

        localctx = openscenario2Parser.Si_unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_si_unit_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(openscenario2Parser.T__12)
            self.state = 365
            self.match(openscenario2Parser.T__13)
            self.state = 366
            self.si_base_exponent_list()
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 367
                self.match(openscenario2Parser.T__15)
                self.state = 368
                self.si_factor()


            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__15:
                self.state = 371
                self.match(openscenario2Parser.T__15)
                self.state = 372
                self.si_offset()


            self.state = 375
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Float_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_factor" ):
                listener.enterSi_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_factor" ):
                listener.exitSi_factor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_factor" ):
                return visitor.visitSi_factor(self)
            else:
                return visitor.visitChildren(self)




    def si_factor(self):

        localctx = openscenario2Parser.Si_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_si_factor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(openscenario2Parser.T__17)
            self.state = 378
            self.match(openscenario2Parser.T__16)
            self.state = 381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.FLOAT_LITERAL]:
                self.state = 379
                self.float_literal()
                pass
            elif token in [openscenario2Parser.INTEGER_LITERAL]:
                self.state = 380
                self.integer_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_offsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Float_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_offset" ):
                listener.enterSi_offset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_offset" ):
                listener.exitSi_offset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_offset" ):
                return visitor.visitSi_offset(self)
            else:
                return visitor.visitChildren(self)




    def si_offset(self):

        localctx = openscenario2Parser.Si_offsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_si_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(openscenario2Parser.T__18)
            self.state = 384
            self.match(openscenario2Parser.T__16)
            self.state = 387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.FLOAT_LITERAL]:
                self.state = 385
                self.float_literal()
                pass
            elif token in [openscenario2Parser.INTEGER_LITERAL]:
                self.state = 386
                self.integer_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_unit_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_unit_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_unit_name" ):
                listener.enterSi_base_unit_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_unit_name" ):
                listener.exitSi_base_unit_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_unit_name" ):
                return visitor.visitSi_base_unit_name(self)
            else:
                return visitor.visitChildren(self)




    def si_base_unit_name(self):

        localctx = openscenario2Parser.Si_base_unit_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_si_base_unit_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_nameContext,0)


        def enum_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Enum_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Enum_member_declContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_declaration" ):
                return visitor.visitEnum_declaration(self)
            else:
                return visitor.visitChildren(self)




    def enum_declaration(self):

        localctx = openscenario2Parser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enum_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(openscenario2Parser.T__27)
            self.state = 392
            self.enum_name()
            self.state = 393
            self.match(openscenario2Parser.T__16)
            self.state = 394
            self.match(openscenario2Parser.T__28)
            self.state = 395
            self.enum_member_decl()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__15:
                self.state = 396
                self.match(openscenario2Parser.T__15)
                self.state = 397
                self.enum_member_decl()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(openscenario2Parser.T__29)
            self.state = 404
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_member_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_member_nameContext,0)


        def enum_member_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_member_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_decl" ):
                listener.enterEnum_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_decl" ):
                listener.exitEnum_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_member_decl" ):
                return visitor.visitEnum_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def enum_member_decl(self):

        localctx = openscenario2Parser.Enum_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enum_member_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.enum_member_name()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__30:
                self.state = 407
                self.match(openscenario2Parser.T__30)
                self.state = 408
                self.enum_member_value()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_name" ):
                listener.enterEnum_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_name" ):
                listener.exitEnum_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_name" ):
                return visitor.visitEnum_name(self)
            else:
                return visitor.visitChildren(self)




    def enum_name(self):

        localctx = openscenario2Parser.Enum_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enum_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_name" ):
                listener.enterEnum_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_name" ):
                listener.exitEnum_member_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_member_name" ):
                return visitor.visitEnum_member_name(self)
            else:
                return visitor.visitChildren(self)




    def enum_member_name(self):

        localctx = openscenario2Parser.Enum_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enum_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uint_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Uint_literalContext,0)


        def hex_uint_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Hex_uint_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_member_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_value" ):
                listener.enterEnum_member_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_value" ):
                listener.exitEnum_member_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_member_value" ):
                return visitor.visitEnum_member_value(self)
            else:
                return visitor.visitChildren(self)




    def enum_member_value(self):

        localctx = openscenario2Parser.Enum_member_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_enum_member_value)
        try:
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.UINT_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.uint_literal()
                pass
            elif token in [openscenario2Parser.HEX_UINT_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.hex_uint_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_value_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_member_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_member_nameContext,0)


        def enum_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_value_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_value_reference" ):
                listener.enterEnum_value_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_value_reference" ):
                listener.exitEnum_value_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_value_reference" ):
                return visitor.visitEnum_value_reference(self)
            else:
                return visitor.visitChildren(self)




    def enum_value_reference(self):

        localctx = openscenario2Parser.Enum_value_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_enum_value_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 419
                self.enum_name()
                self.state = 420
                self.match(openscenario2Parser.T__1)


            self.state = 424
            self.enum_member_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Struct_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Struct_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def struct_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Struct_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Struct_member_declContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_struct_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration" ):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration" ):
                listener.exitStruct_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declaration" ):
                return visitor.visitStruct_declaration(self)
            else:
                return visitor.visitChildren(self)




    def struct_declaration(self):

        localctx = openscenario2Parser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_struct_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(openscenario2Parser.T__31)
            self.state = 427
            self.struct_name()
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__32:
                self.state = 428
                self.match(openscenario2Parser.T__32)
                self.state = 429
                self.struct_name()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__13:
                    self.state = 430
                    self.match(openscenario2Parser.T__13)
                    self.state = 431
                    self.field_name()
                    self.state = 432
                    self.match(openscenario2Parser.T__33)
                    self.state = 435
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                        self.state = 433
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 434
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 437
                    self.match(openscenario2Parser.T__14)




            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__16]:
                self.state = 443
                self.match(openscenario2Parser.T__16)
                self.state = 444
                self.match(openscenario2Parser.INDENT)
                self.state = 446 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 445
                    self.struct_member_decl()
                    self.state = 448 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__47) | (1 << openscenario2Parser.T__50) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__54) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__61))) != 0) or _la==openscenario2Parser.IDENTIFIER):
                        break

                self.state = 450
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 452
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_declarationContext,0)


        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_declarationContext,0)


        def coverage_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Coverage_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_struct_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_decl" ):
                listener.enterStruct_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_decl" ):
                listener.exitStruct_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_member_decl" ):
                return visitor.visitStruct_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def struct_member_decl(self):

        localctx = openscenario2Parser.Struct_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_struct_member_decl)
        try:
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.event_declaration()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__47, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.field_declaration()
                pass
            elif token in [openscenario2Parser.T__50, openscenario2Parser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self.constraint_declaration()
                pass
            elif token in [openscenario2Parser.T__54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 458
                self.method_declaration()
                pass
            elif token in [openscenario2Parser.T__60, openscenario2Parser.T__61]:
                self.enterOuterAlt(localctx, 5)
                self.state = 459
                self.coverage_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_struct_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_name" ):
                listener.enterStruct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_name" ):
                listener.exitStruct_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_name" ):
                return visitor.visitStruct_name(self)
            else:
                return visitor.visitChildren(self)




    def struct_name(self):

        localctx = openscenario2Parser.Struct_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_struct_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_name" ):
                listener.enterField_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_name" ):
                listener.exitField_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_name" ):
                return visitor.visitField_name(self)
            else:
                return visitor.visitChildren(self)




    def field_name(self):

        localctx = openscenario2Parser.Field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actor_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Actor_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def actor_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Actor_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Actor_member_declContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_declaration" ):
                listener.enterActor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_declaration" ):
                listener.exitActor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_declaration" ):
                return visitor.visitActor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def actor_declaration(self):

        localctx = openscenario2Parser.Actor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_actor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(openscenario2Parser.T__34)
            self.state = 467
            self.actor_name()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__32:
                self.state = 468
                self.match(openscenario2Parser.T__32)
                self.state = 469
                self.actor_name()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__13:
                    self.state = 470
                    self.match(openscenario2Parser.T__13)
                    self.state = 471
                    self.field_name()
                    self.state = 472
                    self.match(openscenario2Parser.T__33)
                    self.state = 475
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                        self.state = 473
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 474
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 477
                    self.match(openscenario2Parser.T__14)




            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__16]:
                self.state = 483
                self.match(openscenario2Parser.T__16)
                self.state = 484
                self.match(openscenario2Parser.INDENT)
                self.state = 486 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 485
                    self.actor_member_decl()
                    self.state = 488 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__47) | (1 << openscenario2Parser.T__50) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__54) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__61))) != 0) or _la==openscenario2Parser.IDENTIFIER):
                        break

                self.state = 490
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 492
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_declarationContext,0)


        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_declarationContext,0)


        def coverage_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Coverage_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_member_decl" ):
                listener.enterActor_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_member_decl" ):
                listener.exitActor_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_member_decl" ):
                return visitor.visitActor_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def actor_member_decl(self):

        localctx = openscenario2Parser.Actor_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_actor_member_decl)
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.event_declaration()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__47, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.field_declaration()
                pass
            elif token in [openscenario2Parser.T__50, openscenario2Parser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.constraint_declaration()
                pass
            elif token in [openscenario2Parser.T__54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.method_declaration()
                pass
            elif token in [openscenario2Parser.T__60, openscenario2Parser.T__61]:
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                self.coverage_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_name" ):
                listener.enterActor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_name" ):
                listener.exitActor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_name" ):
                return visitor.visitActor_name(self)
            else:
                return visitor.visitChildren(self)




    def actor_name(self):

        localctx = openscenario2Parser.Actor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_actor_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scenario_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_behavior_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Qualified_behavior_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def scenario_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Scenario_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,i)


        def behavior_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Behavior_specificationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Behavior_specificationContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_scenario_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScenario_declaration" ):
                listener.enterScenario_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScenario_declaration" ):
                listener.exitScenario_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScenario_declaration" ):
                return visitor.visitScenario_declaration(self)
            else:
                return visitor.visitChildren(self)




    def scenario_declaration(self):

        localctx = openscenario2Parser.Scenario_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_scenario_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(openscenario2Parser.T__35)
            self.state = 505
            self.qualified_behavior_name()
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__32:
                self.state = 506
                self.match(openscenario2Parser.T__32)
                self.state = 507
                self.qualified_behavior_name()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__13:
                    self.state = 508
                    self.match(openscenario2Parser.T__13)
                    self.state = 509
                    self.field_name()
                    self.state = 510
                    self.match(openscenario2Parser.T__33)
                    self.state = 513
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                        self.state = 511
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 512
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 515
                    self.match(openscenario2Parser.T__14)




            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__16]:
                self.state = 521
                self.match(openscenario2Parser.T__16)
                self.state = 522
                self.match(openscenario2Parser.INDENT)
                self.state = 525 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 525
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__47, openscenario2Parser.T__50, openscenario2Parser.T__53, openscenario2Parser.T__54, openscenario2Parser.T__56, openscenario2Parser.T__60, openscenario2Parser.T__61, openscenario2Parser.T__75, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                        self.state = 523
                        self.scenario_member_decl()
                        pass
                    elif token in [openscenario2Parser.T__62, openscenario2Parser.T__63]:
                        self.state = 524
                        self.behavior_specification()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 527 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__47) | (1 << openscenario2Parser.T__50) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__54) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__61) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__75 - 64)) | (1 << (openscenario2Parser.T__83 - 64)) | (1 << (openscenario2Parser.T__87 - 64)) | (1 << (openscenario2Parser.T__88 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)))) != 0)):
                        break

                self.state = 529
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 531
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scenario_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_declarationContext,0)


        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_declarationContext,0)


        def coverage_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Coverage_declarationContext,0)


        def modifier_application(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_applicationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_scenario_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScenario_member_decl" ):
                listener.enterScenario_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScenario_member_decl" ):
                listener.exitScenario_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScenario_member_decl" ):
                return visitor.visitScenario_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def scenario_member_decl(self):

        localctx = openscenario2Parser.Scenario_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_scenario_member_decl)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.event_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.field_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.constraint_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 537
                self.method_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 538
                self.coverage_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 539
                self.modifier_application()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_behavior_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_nameContext,0)


        def actor_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_qualified_behavior_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_behavior_name" ):
                listener.enterQualified_behavior_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_behavior_name" ):
                listener.exitQualified_behavior_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_behavior_name" ):
                return visitor.visitQualified_behavior_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_behavior_name(self):

        localctx = openscenario2Parser.Qualified_behavior_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_qualified_behavior_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 542
                self.actor_name()
                self.state = 543
                self.match(openscenario2Parser.T__1)


            self.state = 547
            self.behavior_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_name" ):
                listener.enterBehavior_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_name" ):
                listener.exitBehavior_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_name" ):
                return visitor.visitBehavior_name(self)
            else:
                return visitor.visitChildren(self)




    def behavior_name(self):

        localctx = openscenario2Parser.Behavior_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_behavior_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Action_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_behavior_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Qualified_behavior_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def scenario_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Scenario_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,i)


        def behavior_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Behavior_specificationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Behavior_specificationContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_action_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_declaration" ):
                listener.enterAction_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_declaration" ):
                listener.exitAction_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_declaration" ):
                return visitor.visitAction_declaration(self)
            else:
                return visitor.visitChildren(self)




    def action_declaration(self):

        localctx = openscenario2Parser.Action_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_action_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(openscenario2Parser.T__36)
            self.state = 552
            self.qualified_behavior_name()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__32:
                self.state = 553
                self.match(openscenario2Parser.T__32)
                self.state = 554
                self.qualified_behavior_name()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__13:
                    self.state = 555
                    self.match(openscenario2Parser.T__13)
                    self.state = 556
                    self.field_name()
                    self.state = 557
                    self.match(openscenario2Parser.T__33)
                    self.state = 560
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                        self.state = 558
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 559
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 562
                    self.match(openscenario2Parser.T__14)




            self.state = 579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__16]:
                self.state = 568
                self.match(openscenario2Parser.T__16)
                self.state = 569
                self.match(openscenario2Parser.INDENT)
                self.state = 572 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 572
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__47, openscenario2Parser.T__50, openscenario2Parser.T__53, openscenario2Parser.T__54, openscenario2Parser.T__56, openscenario2Parser.T__60, openscenario2Parser.T__61, openscenario2Parser.T__75, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                        self.state = 570
                        self.scenario_member_decl()
                        pass
                    elif token in [openscenario2Parser.T__62, openscenario2Parser.T__63]:
                        self.state = 571
                        self.behavior_specification()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 574 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__47) | (1 << openscenario2Parser.T__50) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__54) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__61) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__75 - 64)) | (1 << (openscenario2Parser.T__83 - 64)) | (1 << (openscenario2Parser.T__87 - 64)) | (1 << (openscenario2Parser.T__88 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)))) != 0)):
                        break

                self.state = 576
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 578
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def actor_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,0)


        def qualified_behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def scenario_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Scenario_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,i)


        def on_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.On_directiveContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.On_directiveContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_modifier_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_declaration" ):
                listener.enterModifier_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_declaration" ):
                listener.exitModifier_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_declaration" ):
                return visitor.visitModifier_declaration(self)
            else:
                return visitor.visitChildren(self)




    def modifier_declaration(self):

        localctx = openscenario2Parser.Modifier_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_modifier_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(openscenario2Parser.T__37)
            self.state = 585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 582
                self.actor_name()
                self.state = 583
                self.match(openscenario2Parser.T__1)


            self.state = 587
            self.modifier_name()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__3:
                self.state = 588
                self.match(openscenario2Parser.T__3)
                self.state = 589
                self.qualified_behavior_name()


            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__16]:
                self.state = 592
                self.match(openscenario2Parser.T__16)
                self.state = 593
                self.match(openscenario2Parser.INDENT)
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 596
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__47, openscenario2Parser.T__50, openscenario2Parser.T__53, openscenario2Parser.T__54, openscenario2Parser.T__56, openscenario2Parser.T__60, openscenario2Parser.T__61, openscenario2Parser.T__75, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                        self.state = 594
                        self.scenario_member_decl()
                        pass
                    elif token in [openscenario2Parser.T__62]:
                        self.state = 595
                        self.on_directive()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__47) | (1 << openscenario2Parser.T__50) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__54) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__61) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (openscenario2Parser.T__75 - 76)) | (1 << (openscenario2Parser.T__83 - 76)) | (1 << (openscenario2Parser.T__87 - 76)) | (1 << (openscenario2Parser.T__88 - 76)) | (1 << (openscenario2Parser.STRING_LITERAL - 76)) | (1 << (openscenario2Parser.BOOL_LITERAL - 76)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 76)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 76)) | (1 << (openscenario2Parser.IDENTIFIER - 76)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 76)))) != 0)):
                        break

                self.state = 600
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 602
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_modifier_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_name" ):
                listener.enterModifier_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_name" ):
                listener.exitModifier_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_name" ):
                return visitor.visitModifier_name(self)
            else:
                return visitor.visitChildren(self)




    def modifier_name(self):

        localctx = openscenario2Parser.Modifier_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_modifier_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_type_extension(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_type_extensionContext,0)


        def structured_type_extension(self):
            return self.getTypedRuleContext(openscenario2Parser.Structured_type_extensionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_type_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_extension" ):
                listener.enterType_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_extension" ):
                listener.exitType_extension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_extension" ):
                return visitor.visitType_extension(self)
            else:
                return visitor.visitChildren(self)




    def type_extension(self):

        localctx = openscenario2Parser.Type_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_type_extension)
        try:
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.enum_type_extension()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.structured_type_extension()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_type_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_nameContext,0)


        def enum_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Enum_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Enum_member_declContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_type_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_type_extension" ):
                listener.enterEnum_type_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_type_extension" ):
                listener.exitEnum_type_extension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_type_extension" ):
                return visitor.visitEnum_type_extension(self)
            else:
                return visitor.visitChildren(self)




    def enum_type_extension(self):

        localctx = openscenario2Parser.Enum_type_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enum_type_extension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(openscenario2Parser.T__38)
            self.state = 612
            self.enum_name()
            self.state = 613
            self.match(openscenario2Parser.T__16)
            self.state = 614
            self.match(openscenario2Parser.T__28)
            self.state = 615
            self.enum_member_decl()
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__15:
                self.state = 616
                self.match(openscenario2Parser.T__15)
                self.state = 617
                self.enum_member_decl()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 623
            self.match(openscenario2Parser.T__29)
            self.state = 624
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structured_type_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extendable_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Extendable_type_nameContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def extension_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Extension_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Extension_member_declContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_structured_type_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructured_type_extension" ):
                listener.enterStructured_type_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructured_type_extension" ):
                listener.exitStructured_type_extension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructured_type_extension" ):
                return visitor.visitStructured_type_extension(self)
            else:
                return visitor.visitChildren(self)




    def structured_type_extension(self):

        localctx = openscenario2Parser.Structured_type_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_structured_type_extension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(openscenario2Parser.T__38)
            self.state = 627
            self.extendable_type_name()
            self.state = 628
            self.match(openscenario2Parser.T__16)
            self.state = 629
            self.match(openscenario2Parser.INDENT)
            self.state = 631 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 630
                self.extension_member_decl()
                self.state = 633 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__47) | (1 << openscenario2Parser.T__50) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__54) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__61) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__75 - 64)) | (1 << (openscenario2Parser.T__83 - 64)) | (1 << (openscenario2Parser.T__87 - 64)) | (1 << (openscenario2Parser.T__88 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)))) != 0)):
                    break

            self.state = 635
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extendable_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Struct_nameContext,0)


        def actor_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,0)


        def qualified_behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_extendable_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendable_type_name" ):
                listener.enterExtendable_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendable_type_name" ):
                listener.exitExtendable_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendable_type_name" ):
                return visitor.visitExtendable_type_name(self)
            else:
                return visitor.visitChildren(self)




    def extendable_type_name(self):

        localctx = openscenario2Parser.Extendable_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_extendable_type_name)
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.struct_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.actor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 639
                self.qualified_behavior_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extension_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_member_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Struct_member_declContext,0)


        def actor_member_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_member_declContext,0)


        def scenario_member_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,0)


        def behavior_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_specificationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_extension_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_member_decl" ):
                listener.enterExtension_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_member_decl" ):
                listener.exitExtension_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtension_member_decl" ):
                return visitor.visitExtension_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def extension_member_decl(self):

        localctx = openscenario2Parser.Extension_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_extension_member_decl)
        try:
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self.struct_member_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                self.actor_member_decl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 644
                self.scenario_member_decl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 645
                self.behavior_specification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def argument_list_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_list_specificationContext,0)


        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_declaration" ):
                return visitor.visitEvent_declaration(self)
            else:
                return visitor.visitChildren(self)




    def event_declaration(self):

        localctx = openscenario2Parser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_event_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(openscenario2Parser.T__39)
            self.state = 649
            self.event_name()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__13:
                self.state = 650
                self.match(openscenario2Parser.T__13)
                self.state = 651
                self.argument_list_specification()
                self.state = 652
                self.match(openscenario2Parser.T__14)


            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__10:
                self.state = 656
                self.match(openscenario2Parser.T__10)
                self.state = 657
                self.event_specification()


            self.state = 660
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_referenceContext,0)


        def event_condition(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_conditionContext,0)


        def event_field_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_field_declContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_specification" ):
                listener.enterEvent_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_specification" ):
                listener.exitEvent_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_specification" ):
                return visitor.visitEvent_specification(self)
            else:
                return visitor.visitChildren(self)




    def event_specification(self):

        localctx = openscenario2Parser.Event_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_event_specification)
        self._la = 0 # Token type
        try:
            self.state = 671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.event_reference()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__40 or _la==openscenario2Parser.T__42:
                    self.state = 664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==openscenario2Parser.T__42:
                        self.state = 663
                        self.event_field_decl()


                    self.state = 666
                    self.match(openscenario2Parser.T__40)
                    self.state = 667
                    self.event_condition()


                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__46, openscenario2Parser.T__56, openscenario2Parser.T__75, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.event_condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_path(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_pathContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_reference" ):
                listener.enterEvent_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_reference" ):
                listener.exitEvent_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_reference" ):
                return visitor.visitEvent_reference(self)
            else:
                return visitor.visitChildren(self)




    def event_reference(self):

        localctx = openscenario2Parser.Event_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_event_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(openscenario2Parser.T__41)
            self.state = 674
            self.event_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_field_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_field_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_field_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_field_decl" ):
                listener.enterEvent_field_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_field_decl" ):
                listener.exitEvent_field_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_field_decl" ):
                return visitor.visitEvent_field_decl(self)
            else:
                return visitor.visitChildren(self)




    def event_field_decl(self):

        localctx = openscenario2Parser.Event_field_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_event_field_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(openscenario2Parser.T__42)
            self.state = 677
            self.event_field_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_field_name" ):
                listener.enterEvent_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_field_name" ):
                listener.exitEvent_field_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_field_name" ):
                return visitor.visitEvent_field_name(self)
            else:
                return visitor.visitChildren(self)




    def event_field_name(self):

        localctx = openscenario2Parser.Event_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_event_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_name" ):
                listener.enterEvent_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_name" ):
                listener.exitEvent_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_name" ):
                return visitor.visitEvent_name(self)
            else:
                return visitor.visitChildren(self)




    def event_name(self):

        localctx = openscenario2Parser.Event_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_event_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_pathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_path" ):
                listener.enterEvent_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_path" ):
                listener.exitEvent_path(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_path" ):
                return visitor.visitEvent_path(self)
            else:
                return visitor.visitChildren(self)




    def event_path(self):

        localctx = openscenario2Parser.Event_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_event_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 683
                self.expression()
                self.state = 684
                self.match(openscenario2Parser.T__1)


            self.state = 688
            self.event_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_expressionContext,0)


        def rise_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Rise_expressionContext,0)


        def fall_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Fall_expressionContext,0)


        def elapsed_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Elapsed_expressionContext,0)


        def every_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Every_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_condition" ):
                listener.enterEvent_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_condition" ):
                listener.exitEvent_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_condition" ):
                return visitor.visitEvent_condition(self)
            else:
                return visitor.visitChildren(self)




    def event_condition(self):

        localctx = openscenario2Parser.Event_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_event_condition)
        try:
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.T__75, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.bool_expression()
                pass
            elif token in [openscenario2Parser.T__43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.rise_expression()
                pass
            elif token in [openscenario2Parser.T__44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 692
                self.fall_expression()
                pass
            elif token in [openscenario2Parser.T__45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 693
                self.elapsed_expression()
                pass
            elif token in [openscenario2Parser.T__46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 694
                self.every_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rise_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_rise_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRise_expression" ):
                listener.enterRise_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRise_expression" ):
                listener.exitRise_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRise_expression" ):
                return visitor.visitRise_expression(self)
            else:
                return visitor.visitChildren(self)




    def rise_expression(self):

        localctx = openscenario2Parser.Rise_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_rise_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(openscenario2Parser.T__43)
            self.state = 698
            self.match(openscenario2Parser.T__13)
            self.state = 699
            self.bool_expression()
            self.state = 700
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fall_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_fall_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFall_expression" ):
                listener.enterFall_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFall_expression" ):
                listener.exitFall_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFall_expression" ):
                return visitor.visitFall_expression(self)
            else:
                return visitor.visitChildren(self)




    def fall_expression(self):

        localctx = openscenario2Parser.Fall_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fall_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(openscenario2Parser.T__44)
            self.state = 703
            self.match(openscenario2Parser.T__13)
            self.state = 704
            self.bool_expression()
            self.state = 705
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elapsed_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def duration_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Duration_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_elapsed_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElapsed_expression" ):
                listener.enterElapsed_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElapsed_expression" ):
                listener.exitElapsed_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElapsed_expression" ):
                return visitor.visitElapsed_expression(self)
            else:
                return visitor.visitChildren(self)




    def elapsed_expression(self):

        localctx = openscenario2Parser.Elapsed_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elapsed_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(openscenario2Parser.T__45)
            self.state = 708
            self.match(openscenario2Parser.T__13)
            self.state = 709
            self.duration_expression()
            self.state = 710
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Every_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def duration_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Duration_expressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Duration_expressionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_every_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvery_expression" ):
                listener.enterEvery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvery_expression" ):
                listener.exitEvery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvery_expression" ):
                return visitor.visitEvery_expression(self)
            else:
                return visitor.visitChildren(self)




    def every_expression(self):

        localctx = openscenario2Parser.Every_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_every_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(openscenario2Parser.T__46)
            self.state = 713
            self.match(openscenario2Parser.T__13)
            self.state = 714
            self.duration_expression()
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__15:
                self.state = 715
                self.match(openscenario2Parser.T__15)
                self.state = 716
                self.match(openscenario2Parser.T__18)
                self.state = 717
                self.match(openscenario2Parser.T__16)
                self.state = 718
                self.duration_expression()


            self.state = 721
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bool_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_bool_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_expression" ):
                listener.enterBool_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_expression" ):
                listener.exitBool_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_expression" ):
                return visitor.visitBool_expression(self)
            else:
                return visitor.visitChildren(self)




    def bool_expression(self):

        localctx = openscenario2Parser.Bool_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_bool_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Duration_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_duration_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration_expression" ):
                listener.enterDuration_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration_expression" ):
                listener.exitDuration_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDuration_expression" ):
                return visitor.visitDuration_expression(self)
            else:
                return visitor.visitChildren(self)




    def duration_expression(self):

        localctx = openscenario2Parser.Duration_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_duration_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Parameter_declarationContext,0)


        def variable_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Variable_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_declaration" ):
                return visitor.visitField_declaration(self)
            else:
                return visitor.visitChildren(self)




    def field_declaration(self):

        localctx = openscenario2Parser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_field_declaration)
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.parameter_declaration()
                pass
            elif token in [openscenario2Parser.T__47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.variable_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Field_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,i)


        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def parameter_with_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Parameter_with_declarationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_declaration" ):
                listener.enterParameter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_declaration" ):
                listener.exitParameter_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_declaration" ):
                return visitor.visitParameter_declaration(self)
            else:
                return visitor.visitChildren(self)




    def parameter_declaration(self):

        localctx = openscenario2Parser.Parameter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_parameter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.field_name()
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__15:
                self.state = 732
                self.match(openscenario2Parser.T__15)
                self.state = 733
                self.field_name()
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 739
            self.match(openscenario2Parser.T__16)
            self.state = 740
            self.type_declarator()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__30:
                self.state = 741
                self.match(openscenario2Parser.T__30)
                self.state = 742
                self.default_value()


            self.state = 747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__49]:
                self.state = 745
                self.parameter_with_declaration()
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 746
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Field_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,i)


        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def sample_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Sample_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = openscenario2Parser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(openscenario2Parser.T__47)
            self.state = 750
            self.field_name()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__15:
                self.state = 751
                self.match(openscenario2Parser.T__15)
                self.state = 752
                self.field_name()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 758
            self.match(openscenario2Parser.T__16)
            self.state = 759
            self.type_declarator()
            self.state = 763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__30]:
                self.state = 760
                self.match(openscenario2Parser.T__30)
                self.state = 761
                self.default_value()
                pass
            elif token in [openscenario2Parser.T__48]:
                self.state = 762
                self.sample_expression()
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                pass
            else:
                pass
            self.state = 765
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sample_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_sample_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_expression" ):
                listener.enterSample_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_expression" ):
                listener.exitSample_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_expression" ):
                return visitor.visitSample_expression(self)
            else:
                return visitor.visitChildren(self)




    def sample_expression(self):

        localctx = openscenario2Parser.Sample_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_sample_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(openscenario2Parser.T__48)
            self.state = 768
            self.match(openscenario2Parser.T__13)
            self.state = 769
            self.expression()
            self.state = 770
            self.match(openscenario2Parser.T__15)
            self.state = 771
            self.event_specification()
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__15:
                self.state = 772
                self.match(openscenario2Parser.T__15)
                self.state = 773
                self.default_value()


            self.state = 776
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = openscenario2Parser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_with_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def parameter_with_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Parameter_with_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Parameter_with_memberContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_with_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_with_declaration" ):
                listener.enterParameter_with_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_with_declaration" ):
                listener.exitParameter_with_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_with_declaration" ):
                return visitor.visitParameter_with_declaration(self)
            else:
                return visitor.visitChildren(self)




    def parameter_with_declaration(self):

        localctx = openscenario2Parser.Parameter_with_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_parameter_with_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(openscenario2Parser.T__49)
            self.state = 781
            self.match(openscenario2Parser.T__16)
            self.state = 782
            self.match(openscenario2Parser.INDENT)
            self.state = 784 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 783
                self.parameter_with_member()
                self.state = 786 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==openscenario2Parser.T__50 or _la==openscenario2Parser.T__53):
                    break

            self.state = 788
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_with_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_with_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_with_member" ):
                listener.enterParameter_with_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_with_member" ):
                listener.exitParameter_with_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_with_member" ):
                return visitor.visitParameter_with_member(self)
            else:
                return visitor.visitChildren(self)




    def parameter_with_member(self):

        localctx = openscenario2Parser.Parameter_with_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_parameter_with_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.constraint_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keep_constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Keep_constraint_declarationContext,0)


        def remove_default_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Remove_default_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_constraint_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_declaration" ):
                listener.enterConstraint_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_declaration" ):
                listener.exitConstraint_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_declaration" ):
                return visitor.visitConstraint_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constraint_declaration(self):

        localctx = openscenario2Parser.Constraint_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_constraint_declaration)
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.keep_constraint_declaration()
                pass
            elif token in [openscenario2Parser.T__53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.remove_default_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keep_constraint_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_expressionContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def constraint_qualifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_qualifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_keep_constraint_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_constraint_declaration" ):
                listener.enterKeep_constraint_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_constraint_declaration" ):
                listener.exitKeep_constraint_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeep_constraint_declaration" ):
                return visitor.visitKeep_constraint_declaration(self)
            else:
                return visitor.visitChildren(self)




    def keep_constraint_declaration(self):

        localctx = openscenario2Parser.Keep_constraint_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_keep_constraint_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(openscenario2Parser.T__50)
            self.state = 797
            self.match(openscenario2Parser.T__13)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__51 or _la==openscenario2Parser.T__52:
                self.state = 798
                self.constraint_qualifier()


            self.state = 801
            self.constraint_expression()
            self.state = 802
            self.match(openscenario2Parser.T__14)
            self.state = 803
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_constraint_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_qualifier" ):
                listener.enterConstraint_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_qualifier" ):
                listener.exitConstraint_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_qualifier" ):
                return visitor.visitConstraint_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def constraint_qualifier(self):

        localctx = openscenario2Parser.Constraint_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_constraint_qualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            _la = self._input.LA(1)
            if not(_la==openscenario2Parser.T__51 or _la==openscenario2Parser.T__52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_constraint_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_expression" ):
                listener.enterConstraint_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_expression" ):
                listener.exitConstraint_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_expression" ):
                return visitor.visitConstraint_expression(self)
            else:
                return visitor.visitChildren(self)




    def constraint_expression(self):

        localctx = openscenario2Parser.Constraint_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_constraint_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remove_default_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Parameter_referenceContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_remove_default_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_default_declaration" ):
                listener.enterRemove_default_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_default_declaration" ):
                listener.exitRemove_default_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemove_default_declaration" ):
                return visitor.visitRemove_default_declaration(self)
            else:
                return visitor.visitChildren(self)




    def remove_default_declaration(self):

        localctx = openscenario2Parser.Remove_default_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_remove_default_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(openscenario2Parser.T__53)
            self.state = 810
            self.match(openscenario2Parser.T__13)
            self.state = 811
            self.parameter_reference()
            self.state = 812
            self.match(openscenario2Parser.T__14)
            self.state = 813
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def field_access(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_accessContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_reference" ):
                listener.enterParameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_reference" ):
                listener.exitParameter_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_reference" ):
                return visitor.visitParameter_reference(self)
            else:
                return visitor.visitChildren(self)




    def parameter_reference(self):

        localctx = openscenario2Parser.Parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_parameter_reference)
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.field_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.field_access()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_nameContext,0)


        def method_implementation(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_implementationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def argument_list_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_list_specificationContext,0)


        def return_type(self):
            return self.getTypedRuleContext(openscenario2Parser.Return_typeContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_declaration" ):
                return visitor.visitMethod_declaration(self)
            else:
                return visitor.visitChildren(self)




    def method_declaration(self):

        localctx = openscenario2Parser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(openscenario2Parser.T__54)
            self.state = 820
            self.method_name()
            self.state = 821
            self.match(openscenario2Parser.T__13)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__56))) != 0) or _la==openscenario2Parser.IDENTIFIER:
                self.state = 822
                self.argument_list_specification()


            self.state = 825
            self.match(openscenario2Parser.T__14)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__55:
                self.state = 826
                self.match(openscenario2Parser.T__55)
                self.state = 827
                self.return_type()


            self.state = 830
            self.method_implementation()
            self.state = 831
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_type" ):
                return visitor.visitReturn_type(self)
            else:
                return visitor.visitChildren(self)




    def return_type(self):

        localctx = openscenario2Parser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_return_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.type_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_implementationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def structured_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Structured_identifierContext,0)


        def method_qualifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_qualifierContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_implementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_implementation" ):
                listener.enterMethod_implementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_implementation" ):
                listener.exitMethod_implementation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_implementation" ):
                return visitor.visitMethod_implementation(self)
            else:
                return visitor.visitChildren(self)




    def method_implementation(self):

        localctx = openscenario2Parser.Method_implementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_method_implementation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(openscenario2Parser.T__10)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__59:
                self.state = 836
                self.method_qualifier()


            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__56]:
                self.state = 839
                self.match(openscenario2Parser.T__56)
                self.state = 840
                self.expression()
                pass
            elif token in [openscenario2Parser.T__57]:
                self.state = 841
                self.match(openscenario2Parser.T__57)
                pass
            elif token in [openscenario2Parser.T__58]:
                self.state = 842
                self.match(openscenario2Parser.T__58)
                self.state = 843
                self.structured_identifier()
                self.state = 844
                self.match(openscenario2Parser.T__13)
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__56))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (openscenario2Parser.T__75 - 76)) | (1 << (openscenario2Parser.T__83 - 76)) | (1 << (openscenario2Parser.T__87 - 76)) | (1 << (openscenario2Parser.T__88 - 76)) | (1 << (openscenario2Parser.STRING_LITERAL - 76)) | (1 << (openscenario2Parser.BOOL_LITERAL - 76)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 76)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 76)) | (1 << (openscenario2Parser.IDENTIFIER - 76)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 76)))) != 0):
                    self.state = 845
                    self.argument_list()


                self.state = 848
                self.match(openscenario2Parser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_qualifier" ):
                listener.enterMethod_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_qualifier" ):
                listener.exitMethod_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_qualifier" ):
                return visitor.visitMethod_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def method_qualifier(self):

        localctx = openscenario2Parser.Method_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_method_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(openscenario2Parser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_name" ):
                return visitor.visitMethod_name(self)
            else:
                return visitor.visitChildren(self)




    def method_name(self):

        localctx = openscenario2Parser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_method_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Coverage_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_coverage_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoverage_declaration" ):
                listener.enterCoverage_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoverage_declaration" ):
                listener.exitCoverage_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoverage_declaration" ):
                return visitor.visitCoverage_declaration(self)
            else:
                return visitor.visitChildren(self)




    def coverage_declaration(self):

        localctx = openscenario2Parser.Coverage_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_coverage_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            _la = self._input.LA(1)
            if not(_la==openscenario2Parser.T__60 or _la==openscenario2Parser.T__61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 857
            self.match(openscenario2Parser.T__13)
            self.state = 858
            self.argument_list()
            self.state = 859
            self.match(openscenario2Parser.T__14)
            self.state = 860
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_applicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def actor_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_expressionContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_modifier_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_application" ):
                listener.enterModifier_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_application" ):
                listener.exitModifier_application(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_application" ):
                return visitor.visitModifier_application(self)
            else:
                return visitor.visitChildren(self)




    def modifier_application(self):

        localctx = openscenario2Parser.Modifier_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_modifier_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 862
                self.actor_expression()
                self.state = 863
                self.match(openscenario2Parser.T__1)


            self.state = 867
            self.modifier_name()
            self.state = 868
            self.match(openscenario2Parser.T__13)
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__56))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (openscenario2Parser.T__75 - 76)) | (1 << (openscenario2Parser.T__83 - 76)) | (1 << (openscenario2Parser.T__87 - 76)) | (1 << (openscenario2Parser.T__88 - 76)) | (1 << (openscenario2Parser.STRING_LITERAL - 76)) | (1 << (openscenario2Parser.BOOL_LITERAL - 76)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 76)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 76)) | (1 << (openscenario2Parser.IDENTIFIER - 76)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 76)))) != 0):
                self.state = 869
                self.argument_list()


            self.state = 872
            self.match(openscenario2Parser.T__14)
            self.state = 873
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def on_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.On_directiveContext,0)


        def do_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Do_directiveContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_specification" ):
                listener.enterBehavior_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_specification" ):
                listener.exitBehavior_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_specification" ):
                return visitor.visitBehavior_specification(self)
            else:
                return visitor.visitChildren(self)




    def behavior_specification(self):

        localctx = openscenario2Parser.Behavior_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_behavior_specification)
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 875
                self.on_directive()
                pass
            elif token in [openscenario2Parser.T__63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.do_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def on_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.On_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.On_memberContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_on_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_directive" ):
                listener.enterOn_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_directive" ):
                listener.exitOn_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_directive" ):
                return visitor.visitOn_directive(self)
            else:
                return visitor.visitChildren(self)




    def on_directive(self):

        localctx = openscenario2Parser.On_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_on_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(openscenario2Parser.T__62)
            self.state = 880
            self.event_specification()
            self.state = 881
            self.match(openscenario2Parser.T__16)
            self.state = 882
            self.match(openscenario2Parser.INDENT)
            self.state = 884 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 883
                self.on_member()
                self.state = 886 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==openscenario2Parser.T__68 or _la==openscenario2Parser.T__69):
                    break

            self.state = 888
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def call_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Call_directiveContext,0)


        def emit_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Emit_directiveContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_on_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_member" ):
                listener.enterOn_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_member" ):
                listener.exitOn_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_member" ):
                return visitor.visitOn_member(self)
            else:
                return visitor.visitChildren(self)




    def on_member(self):

        localctx = openscenario2Parser.On_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_on_member)
        try:
            self.state = 892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.call_directive()
                pass
            elif token in [openscenario2Parser.T__68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.emit_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def do_member(self):
            return self.getTypedRuleContext(openscenario2Parser.Do_memberContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_do_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_directive" ):
                listener.enterDo_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_directive" ):
                listener.exitDo_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_directive" ):
                return visitor.visitDo_directive(self)
            else:
                return visitor.visitChildren(self)




    def do_directive(self):

        localctx = openscenario2Parser.Do_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_do_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(openscenario2Parser.T__63)
            self.state = 895
            self.do_member()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def composition(self):
            return self.getTypedRuleContext(openscenario2Parser.CompositionContext,0)


        def behavior_invocation(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_invocationContext,0)


        def wait_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Wait_directiveContext,0)


        def emit_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Emit_directiveContext,0)


        def call_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Call_directiveContext,0)


        def label_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Label_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_do_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_member" ):
                listener.enterDo_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_member" ):
                listener.exitDo_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_member" ):
                return visitor.visitDo_member(self)
            else:
                return visitor.visitChildren(self)




    def do_member(self):

        localctx = openscenario2Parser.Do_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_do_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 897
                self.label_name()
                self.state = 898
                self.match(openscenario2Parser.T__16)


            self.state = 907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__64, openscenario2Parser.T__65, openscenario2Parser.T__66]:
                self.state = 902
                self.composition()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.T__75, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                self.state = 903
                self.behavior_invocation()
                pass
            elif token in [openscenario2Parser.T__67]:
                self.state = 904
                self.wait_directive()
                pass
            elif token in [openscenario2Parser.T__68]:
                self.state = 905
                self.emit_directive()
                pass
            elif token in [openscenario2Parser.T__69]:
                self.state = 906
                self.call_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = openscenario2Parser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def composition_operator(self):
            return self.getTypedRuleContext(openscenario2Parser.Composition_operatorContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def do_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Do_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Do_memberContext,i)


        def behavior_with_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_with_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_composition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition" ):
                listener.enterComposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition" ):
                listener.exitComposition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposition" ):
                return visitor.visitComposition(self)
            else:
                return visitor.visitChildren(self)




    def composition(self):

        localctx = openscenario2Parser.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_composition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.composition_operator()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__13:
                self.state = 912
                self.match(openscenario2Parser.T__13)
                self.state = 913
                self.argument_list()
                self.state = 914
                self.match(openscenario2Parser.T__14)


            self.state = 918
            self.match(openscenario2Parser.T__16)
            self.state = 919
            self.match(openscenario2Parser.INDENT)
            self.state = 921 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 920
                self.do_member()
                self.state = 923 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__56))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (openscenario2Parser.T__64 - 65)) | (1 << (openscenario2Parser.T__65 - 65)) | (1 << (openscenario2Parser.T__66 - 65)) | (1 << (openscenario2Parser.T__67 - 65)) | (1 << (openscenario2Parser.T__68 - 65)) | (1 << (openscenario2Parser.T__69 - 65)) | (1 << (openscenario2Parser.T__75 - 65)) | (1 << (openscenario2Parser.T__83 - 65)) | (1 << (openscenario2Parser.T__87 - 65)) | (1 << (openscenario2Parser.T__88 - 65)) | (1 << (openscenario2Parser.STRING_LITERAL - 65)) | (1 << (openscenario2Parser.BOOL_LITERAL - 65)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 65)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 65)) | (1 << (openscenario2Parser.IDENTIFIER - 65)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 65)))) != 0)):
                    break

            self.state = 925
            self.match(openscenario2Parser.DEDENT)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__49:
                self.state = 926
                self.behavior_with_declaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Composition_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_composition_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition_operator" ):
                listener.enterComposition_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition_operator" ):
                listener.exitComposition_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposition_operator" ):
                return visitor.visitComposition_operator(self)
            else:
                return visitor.visitChildren(self)




    def composition_operator(self):

        localctx = openscenario2Parser.Composition_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_composition_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (openscenario2Parser.T__64 - 65)) | (1 << (openscenario2Parser.T__65 - 65)) | (1 << (openscenario2Parser.T__66 - 65)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_invocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_nameContext,0)


        def behavior_with_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_with_declarationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def actor_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_expressionContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_invocation" ):
                listener.enterBehavior_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_invocation" ):
                listener.exitBehavior_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_invocation" ):
                return visitor.visitBehavior_invocation(self)
            else:
                return visitor.visitChildren(self)




    def behavior_invocation(self):

        localctx = openscenario2Parser.Behavior_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_behavior_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 931
                self.actor_expression()
                self.state = 932
                self.match(openscenario2Parser.T__1)


            self.state = 936
            self.behavior_name()
            self.state = 937
            self.match(openscenario2Parser.T__13)
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__56))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (openscenario2Parser.T__75 - 76)) | (1 << (openscenario2Parser.T__83 - 76)) | (1 << (openscenario2Parser.T__87 - 76)) | (1 << (openscenario2Parser.T__88 - 76)) | (1 << (openscenario2Parser.STRING_LITERAL - 76)) | (1 << (openscenario2Parser.BOOL_LITERAL - 76)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 76)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 76)) | (1 << (openscenario2Parser.IDENTIFIER - 76)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 76)))) != 0):
                self.state = 938
                self.argument_list()


            self.state = 941
            self.match(openscenario2Parser.T__14)
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__49]:
                self.state = 942
                self.behavior_with_declaration()
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 943
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_with_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def behavior_with_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Behavior_with_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Behavior_with_memberContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_with_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_with_declaration" ):
                listener.enterBehavior_with_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_with_declaration" ):
                listener.exitBehavior_with_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_with_declaration" ):
                return visitor.visitBehavior_with_declaration(self)
            else:
                return visitor.visitChildren(self)




    def behavior_with_declaration(self):

        localctx = openscenario2Parser.Behavior_with_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_behavior_with_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(openscenario2Parser.T__49)
            self.state = 947
            self.match(openscenario2Parser.T__16)
            self.state = 948
            self.match(openscenario2Parser.INDENT)
            self.state = 950 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 949
                self.behavior_with_member()
                self.state = 952 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__50) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__56))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (openscenario2Parser.T__70 - 71)) | (1 << (openscenario2Parser.T__75 - 71)) | (1 << (openscenario2Parser.T__83 - 71)) | (1 << (openscenario2Parser.T__87 - 71)) | (1 << (openscenario2Parser.T__88 - 71)) | (1 << (openscenario2Parser.STRING_LITERAL - 71)) | (1 << (openscenario2Parser.BOOL_LITERAL - 71)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 71)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 71)) | (1 << (openscenario2Parser.IDENTIFIER - 71)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 71)))) != 0)):
                    break

            self.state = 954
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_with_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def modifier_application(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_applicationContext,0)


        def until_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Until_directiveContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_with_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_with_member" ):
                listener.enterBehavior_with_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_with_member" ):
                listener.exitBehavior_with_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_with_member" ):
                return visitor.visitBehavior_with_member(self)
            else:
                return visitor.visitChildren(self)




    def behavior_with_member(self):

        localctx = openscenario2Parser.Behavior_with_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_behavior_with_member)
        try:
            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__50, openscenario2Parser.T__53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 956
                self.constraint_declaration()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.T__75, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 957
                self.modifier_application()
                pass
            elif token in [openscenario2Parser.T__70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 958
                self.until_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_expression" ):
                listener.enterActor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_expression" ):
                listener.exitActor_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_expression" ):
                return visitor.visitActor_expression(self)
            else:
                return visitor.visitChildren(self)




    def actor_expression(self):

        localctx = openscenario2Parser.Actor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_actor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wait_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_wait_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_directive" ):
                listener.enterWait_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_directive" ):
                listener.exitWait_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWait_directive" ):
                return visitor.visitWait_directive(self)
            else:
                return visitor.visitChildren(self)




    def wait_directive(self):

        localctx = openscenario2Parser.Wait_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_wait_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(openscenario2Parser.T__67)
            self.state = 964
            self.event_specification()
            self.state = 965
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Emit_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_emit_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmit_directive" ):
                listener.enterEmit_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmit_directive" ):
                listener.exitEmit_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmit_directive" ):
                return visitor.visitEmit_directive(self)
            else:
                return visitor.visitChildren(self)




    def emit_directive(self):

        localctx = openscenario2Parser.Emit_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_emit_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(openscenario2Parser.T__68)
            self.state = 968
            self.event_name()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__13:
                self.state = 969
                self.match(openscenario2Parser.T__13)
                self.state = 970
                self.argument_list()
                self.state = 971
                self.match(openscenario2Parser.T__14)


            self.state = 975
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_invocation(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_invocationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_call_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_directive" ):
                listener.enterCall_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_directive" ):
                listener.exitCall_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_directive" ):
                return visitor.visitCall_directive(self)
            else:
                return visitor.visitChildren(self)




    def call_directive(self):

        localctx = openscenario2Parser.Call_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_call_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(openscenario2Parser.T__69)
            self.state = 978
            self.method_invocation()
            self.state = 979
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_invocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_invocation" ):
                return visitor.visitMethod_invocation(self)
            else:
                return visitor.visitChildren(self)




    def method_invocation(self):

        localctx = openscenario2Parser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.postfix_exp(0)
            self.state = 982
            self.match(openscenario2Parser.T__13)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__56))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (openscenario2Parser.T__75 - 76)) | (1 << (openscenario2Parser.T__83 - 76)) | (1 << (openscenario2Parser.T__87 - 76)) | (1 << (openscenario2Parser.T__88 - 76)) | (1 << (openscenario2Parser.STRING_LITERAL - 76)) | (1 << (openscenario2Parser.BOOL_LITERAL - 76)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 76)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 76)) | (1 << (openscenario2Parser.IDENTIFIER - 76)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 76)))) != 0):
                self.state = 983
                self.argument_list()


            self.state = 986
            self.match(openscenario2Parser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Until_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_until_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_directive" ):
                listener.enterUntil_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_directive" ):
                listener.exitUntil_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntil_directive" ):
                return visitor.visitUntil_directive(self)
            else:
                return visitor.visitChildren(self)




    def until_directive(self):

        localctx = openscenario2Parser.Until_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_until_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(openscenario2Parser.T__70)
            self.state = 989
            self.event_specification()
            self.state = 990
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_list_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Argument_specificationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Argument_specificationContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_list_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list_specification" ):
                listener.enterArgument_list_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list_specification" ):
                listener.exitArgument_list_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_list_specification" ):
                return visitor.visitArgument_list_specification(self)
            else:
                return visitor.visitChildren(self)




    def argument_list_specification(self):

        localctx = openscenario2Parser.Argument_list_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_argument_list_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.argument_specification()
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__15:
                self.state = 993
                self.match(openscenario2Parser.T__15)
                self.state = 994
                self.argument_specification()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_nameContext,0)


        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_specification" ):
                listener.enterArgument_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_specification" ):
                listener.exitArgument_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_specification" ):
                return visitor.visitArgument_specification(self)
            else:
                return visitor.visitChildren(self)




    def argument_specification(self):

        localctx = openscenario2Parser.Argument_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_argument_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.argument_name()
            self.state = 1001
            self.match(openscenario2Parser.T__16)
            self.state = 1002
            self.type_declarator()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__30:
                self.state = 1003
                self.match(openscenario2Parser.T__30)
                self.state = 1004
                self.default_value()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_name" ):
                return visitor.visitArgument_name(self)
            else:
                return visitor.visitChildren(self)




    def argument_name(self):

        localctx = openscenario2Parser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positional_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Positional_argumentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Positional_argumentContext,i)


        def named_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Named_argumentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Named_argumentContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_list" ):
                return visitor.visitArgument_list(self)
            else:
                return visitor.visitChildren(self)




    def argument_list(self):

        localctx = openscenario2Parser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.state = 1032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.positional_argument()
                self.state = 1014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1010
                        self.match(openscenario2Parser.T__15)
                        self.state = 1011
                        self.positional_argument() 
                    self.state = 1016
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openscenario2Parser.T__15:
                    self.state = 1017
                    self.match(openscenario2Parser.T__15)
                    self.state = 1018
                    self.named_argument()
                    self.state = 1023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1024
                self.named_argument()
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openscenario2Parser.T__15:
                    self.state = 1025
                    self.match(openscenario2Parser.T__15)
                    self.state = 1026
                    self.named_argument()
                    self.state = 1031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_positional_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_argument" ):
                listener.enterPositional_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_argument" ):
                listener.exitPositional_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_argument" ):
                return visitor.visitPositional_argument(self)
            else:
                return visitor.visitChildren(self)




    def positional_argument(self):

        localctx = openscenario2Parser.Positional_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_positional_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_argument" ):
                return visitor.visitNamed_argument(self)
            else:
                return visitor.visitChildren(self)




    def named_argument(self):

        localctx = openscenario2Parser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.argument_name()
            self.state = 1037
            self.match(openscenario2Parser.T__16)
            self.state = 1038
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implication(self):
            return self.getTypedRuleContext(openscenario2Parser.ImplicationContext,0)


        def ternary_op_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Ternary_op_expContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = openscenario2Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_expression)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.implication()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.ternary_op_exp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ternary_op_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implication(self):
            return self.getTypedRuleContext(openscenario2Parser.ImplicationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_ternary_op_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernary_op_exp" ):
                listener.enterTernary_op_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernary_op_exp" ):
                listener.exitTernary_op_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernary_op_exp" ):
                return visitor.visitTernary_op_exp(self)
            else:
                return visitor.visitChildren(self)




    def ternary_op_exp(self):

        localctx = openscenario2Parser.Ternary_op_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_ternary_op_exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.implication()
            self.state = 1045
            self.match(openscenario2Parser.T__71)
            self.state = 1046
            self.expression()
            self.state = 1047
            self.match(openscenario2Parser.T__16)
            self.state = 1048
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.DisjunctionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_implication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplication" ):
                listener.enterImplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplication" ):
                listener.exitImplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplication" ):
                return visitor.visitImplication(self)
            else:
                return visitor.visitChildren(self)




    def implication(self):

        localctx = openscenario2Parser.ImplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_implication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.disjunction()
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__72:
                self.state = 1051
                self.match(openscenario2Parser.T__72)
                self.state = 1052
                self.disjunction()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ConjunctionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = openscenario2Parser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.conjunction()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__73:
                self.state = 1059
                self.match(openscenario2Parser.T__73)
                self.state = 1060
                self.conjunction()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.InversionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.InversionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = openscenario2Parser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.inversion()
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__74:
                self.state = 1067
                self.match(openscenario2Parser.T__74)
                self.state = 1068
                self.inversion()
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InversionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self):
            return self.getTypedRuleContext(openscenario2Parser.InversionContext,0)


        def relation(self):
            return self.getTypedRuleContext(openscenario2Parser.RelationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_inversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInversion" ):
                listener.enterInversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInversion" ):
                listener.exitInversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInversion" ):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)




    def inversion(self):

        localctx = openscenario2Parser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_inversion)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.match(openscenario2Parser.T__75)
                self.state = 1075
                self.inversion()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.T__83, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1076
                self.relation(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Sum_expContext,0)


        def relation(self):
            return self.getTypedRuleContext(openscenario2Parser.RelationContext,0)


        def relational_op(self):
            return self.getTypedRuleContext(openscenario2Parser.Relational_opContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 222
        self.enterRecursionRule(localctx, 222, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.sum_exp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = openscenario2Parser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1082
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1083
                    self.relational_op()
                    self.state = 1084
                    self.sum_exp(0) 
                self.state = 1090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = openscenario2Parser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            _la = self._input.LA(1)
            if not(((((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & ((1 << (openscenario2Parser.T__33 - 34)) | (1 << (openscenario2Parser.T__76 - 34)) | (1 << (openscenario2Parser.T__77 - 34)) | (1 << (openscenario2Parser.T__78 - 34)) | (1 << (openscenario2Parser.T__79 - 34)) | (1 << (openscenario2Parser.T__80 - 34)) | (1 << (openscenario2Parser.T__81 - 34)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sum_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(openscenario2Parser.TermContext,0)


        def sum_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Sum_expContext,0)


        def additive_op(self):
            return self.getTypedRuleContext(openscenario2Parser.Additive_opContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_sum_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_exp" ):
                listener.enterSum_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_exp" ):
                listener.exitSum_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSum_exp" ):
                return visitor.visitSum_exp(self)
            else:
                return visitor.visitChildren(self)



    def sum_exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.Sum_expContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_sum_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1102
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = openscenario2Parser.Sum_expContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sum_exp)
                    self.state = 1096
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1097
                    self.additive_op()
                    self.state = 1098
                    self.term(0) 
                self.state = 1104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Additive_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_additive_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_op" ):
                listener.enterAdditive_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_op" ):
                listener.exitAdditive_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditive_op" ):
                return visitor.visitAdditive_op(self)
            else:
                return visitor.visitChildren(self)




    def additive_op(self):

        localctx = openscenario2Parser.Additive_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_additive_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            _la = self._input.LA(1)
            if not(_la==openscenario2Parser.T__82 or _la==openscenario2Parser.T__83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(openscenario2Parser.FactorContext,0)


        def term(self):
            return self.getTypedRuleContext(openscenario2Parser.TermContext,0)


        def multiplicative_op(self):
            return self.getTypedRuleContext(openscenario2Parser.Multiplicative_opContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1116
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = openscenario2Parser.TermContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 1110
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1111
                    self.multiplicative_op()
                    self.state = 1112
                    self.factor() 
                self.state = 1118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Multiplicative_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_multiplicative_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_op" ):
                listener.enterMultiplicative_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_op" ):
                listener.exitMultiplicative_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicative_op" ):
                return visitor.visitMultiplicative_op(self)
            else:
                return visitor.visitChildren(self)




    def multiplicative_op(self):

        localctx = openscenario2Parser.Multiplicative_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_multiplicative_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            _la = self._input.LA(1)
            if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (openscenario2Parser.T__84 - 85)) | (1 << (openscenario2Parser.T__85 - 85)) | (1 << (openscenario2Parser.T__86 - 85)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)


        def factor(self):
            return self.getTypedRuleContext(openscenario2Parser.FactorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = openscenario2Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_factor)
        try:
            self.state = 1124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__13, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.T__87, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1121
                self.postfix_exp(0)
                pass
            elif token in [openscenario2Parser.T__83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(openscenario2Parser.T__83)
                self.state = 1123
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postfix_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_postfix_exp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Type_test_exp_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_test_exp_pe" ):
                listener.enterType_test_exp_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_test_exp_pe" ):
                listener.exitType_test_exp_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_test_exp_pe" ):
                return visitor.visitType_test_exp_pe(self)
            else:
                return visitor.visitChildren(self)


    class Cast_exp_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_exp_pe" ):
                listener.enterCast_exp_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_exp_pe" ):
                listener.exitCast_exp_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_exp_pe" ):
                return visitor.visitCast_exp_pe(self)
            else:
                return visitor.visitChildren(self)


    class Primary_exp_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Primary_expContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_exp_pe" ):
                listener.enterPrimary_exp_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_exp_pe" ):
                listener.exitPrimary_exp_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_exp_pe" ):
                return visitor.visitPrimary_exp_pe(self)
            else:
                return visitor.visitChildren(self)


    class Field_access_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_access_pe" ):
                listener.enterField_access_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_access_pe" ):
                listener.exitField_access_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_access_pe" ):
                return visitor.visitField_access_pe(self)
            else:
                return visitor.visitChildren(self)


    class Element_access_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_access_pe" ):
                listener.enterElement_access_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_access_pe" ):
                listener.exitElement_access_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_access_pe" ):
                return visitor.visitElement_access_pe(self)
            else:
                return visitor.visitChildren(self)


    class Function_application_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_application_pe" ):
                listener.enterFunction_application_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_application_pe" ):
                listener.exitFunction_application_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_application_pe" ):
                return visitor.visitFunction_application_pe(self)
            else:
                return visitor.visitChildren(self)



    def postfix_exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.Postfix_expContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 236
        self.enterRecursionRule(localctx, 236, self.RULE_postfix_exp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = openscenario2Parser.Primary_exp_peContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1127
            self.primary_exp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1157
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        localctx = openscenario2Parser.Cast_exp_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1129
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1130
                        self.match(openscenario2Parser.T__1)
                        self.state = 1131
                        self.match(openscenario2Parser.T__42)
                        self.state = 1132
                        self.match(openscenario2Parser.T__13)
                        self.state = 1133
                        self.type_declarator()
                        self.state = 1134
                        self.match(openscenario2Parser.T__14)
                        pass

                    elif la_ == 2:
                        localctx = openscenario2Parser.Type_test_exp_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1136
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1137
                        self.match(openscenario2Parser.T__1)
                        self.state = 1138
                        self.match(openscenario2Parser.T__10)
                        self.state = 1139
                        self.match(openscenario2Parser.T__13)
                        self.state = 1140
                        self.type_declarator()
                        self.state = 1141
                        self.match(openscenario2Parser.T__14)
                        pass

                    elif la_ == 3:
                        localctx = openscenario2Parser.Element_access_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1143
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1144
                        self.match(openscenario2Parser.T__28)
                        self.state = 1145
                        self.expression()
                        self.state = 1146
                        self.match(openscenario2Parser.T__29)
                        pass

                    elif la_ == 4:
                        localctx = openscenario2Parser.Function_application_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1148
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1149
                        self.match(openscenario2Parser.T__13)
                        self.state = 1151
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__17) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__19) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__21) | (1 << openscenario2Parser.T__22) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__34) | (1 << openscenario2Parser.T__35) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__56))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (openscenario2Parser.T__75 - 76)) | (1 << (openscenario2Parser.T__83 - 76)) | (1 << (openscenario2Parser.T__87 - 76)) | (1 << (openscenario2Parser.T__88 - 76)) | (1 << (openscenario2Parser.STRING_LITERAL - 76)) | (1 << (openscenario2Parser.BOOL_LITERAL - 76)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 76)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 76)) | (1 << (openscenario2Parser.IDENTIFIER - 76)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 76)))) != 0):
                            self.state = 1150
                            self.argument_list()


                        self.state = 1153
                        self.match(openscenario2Parser.T__14)
                        pass

                    elif la_ == 5:
                        localctx = openscenario2Parser.Field_access_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1154
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1155
                        self.match(openscenario2Parser.T__1)
                        self.state = 1156
                        self.field_name()
                        pass

             
                self.state = 1161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Field_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)


        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_field_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_access" ):
                listener.enterField_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_access" ):
                listener.exitField_access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_access" ):
                return visitor.visitField_access(self)
            else:
                return visitor.visitChildren(self)




    def field_access(self):

        localctx = openscenario2Parser.Field_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_field_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.postfix_exp(0)
            self.state = 1163
            self.match(openscenario2Parser.T__1)
            self.state = 1164
            self.field_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Value_expContext,0)


        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_primary_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_exp" ):
                listener.enterPrimary_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_exp" ):
                listener.exitPrimary_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_exp" ):
                return visitor.visitPrimary_exp(self)
            else:
                return visitor.visitChildren(self)




    def primary_exp(self):

        localctx = openscenario2Parser.Primary_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_primary_exp)
        try:
            self.state = 1173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__28, openscenario2Parser.T__88, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.PHYSICAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self.value_exp()
                pass
            elif token in [openscenario2Parser.T__87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.match(openscenario2Parser.T__87)
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__11, openscenario2Parser.T__17, openscenario2Parser.T__18, openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__31, openscenario2Parser.T__34, openscenario2Parser.T__35, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__56, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1168
                self.identifier()
                pass
            elif token in [openscenario2Parser.T__13]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1169
                self.match(openscenario2Parser.T__13)
                self.state = 1170
                self.expression()
                self.state = 1171
                self.match(openscenario2Parser.T__14)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Float_literalContext,0)


        def physical_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Physical_literalContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.String_literalContext,0)


        def list_constructor(self):
            return self.getTypedRuleContext(openscenario2Parser.List_constructorContext,0)


        def range_constructor(self):
            return self.getTypedRuleContext(openscenario2Parser.Range_constructorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_value_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_exp" ):
                listener.enterValue_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_exp" ):
                listener.exitValue_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_exp" ):
                return visitor.visitValue_exp(self)
            else:
                return visitor.visitChildren(self)




    def value_exp(self):

        localctx = openscenario2Parser.Value_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_value_exp)
        try:
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1175
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self.float_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1177
                self.physical_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1178
                self.bool_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1179
                self.string_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1180
                self.list_constructor()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1181
                self.range_constructor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_list_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_constructor" ):
                listener.enterList_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_constructor" ):
                listener.exitList_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_constructor" ):
                return visitor.visitList_constructor(self)
            else:
                return visitor.visitChildren(self)




    def list_constructor(self):

        localctx = openscenario2Parser.List_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_list_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(openscenario2Parser.T__28)
            self.state = 1185
            self.expression()
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__15:
                self.state = 1186
                self.match(openscenario2Parser.T__15)
                self.state = 1187
                self.expression()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1193
            self.match(openscenario2Parser.T__29)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Range_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_range_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_constructor" ):
                listener.enterRange_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_constructor" ):
                listener.exitRange_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_constructor" ):
                return visitor.visitRange_constructor(self)
            else:
                return visitor.visitChildren(self)




    def range_constructor(self):

        localctx = openscenario2Parser.Range_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_range_constructor)
        try:
            self.state = 1208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.match(openscenario2Parser.T__88)
                self.state = 1196
                self.match(openscenario2Parser.T__13)
                self.state = 1197
                self.expression()
                self.state = 1198
                self.match(openscenario2Parser.T__15)
                self.state = 1199
                self.expression()
                self.state = 1200
                self.match(openscenario2Parser.T__14)
                pass
            elif token in [openscenario2Parser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.match(openscenario2Parser.T__28)
                self.state = 1203
                self.expression()
                self.state = 1204
                self.match(openscenario2Parser.T__89)
                self.state = 1205
                self.expression()
                self.state = 1206
                self.match(openscenario2Parser.T__29)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(openscenario2Parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_literal" ):
                return visitor.visitString_literal(self)
            else:
                return visitor.visitChildren(self)




    def string_literal(self):

        localctx = openscenario2Parser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(openscenario2Parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bool_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL_LITERAL(self):
            return self.getToken(openscenario2Parser.BOOL_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_bool_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_literal" ):
                listener.enterBool_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_literal" ):
                listener.exitBool_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_literal" ):
                return visitor.visitBool_literal(self)
            else:
                return visitor.visitChildren(self)




    def bool_literal(self):

        localctx = openscenario2Parser.Bool_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_bool_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(openscenario2Parser.BOOL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Integer_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(openscenario2Parser.INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_literal" ):
                return visitor.visitInteger_literal(self)
            else:
                return visitor.visitChildren(self)




    def integer_literal(self):

        localctx = openscenario2Parser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(openscenario2Parser.INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Uint_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UINT_LITERAL(self):
            return self.getToken(openscenario2Parser.UINT_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_uint_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUint_literal" ):
                listener.enterUint_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUint_literal" ):
                listener.exitUint_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUint_literal" ):
                return visitor.visitUint_literal(self)
            else:
                return visitor.visitChildren(self)




    def uint_literal(self):

        localctx = openscenario2Parser.Uint_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_uint_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.match(openscenario2Parser.UINT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hex_uint_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_UINT_LITERAL(self):
            return self.getToken(openscenario2Parser.HEX_UINT_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_hex_uint_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_uint_literal" ):
                listener.enterHex_uint_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_uint_literal" ):
                listener.exitHex_uint_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHex_uint_literal" ):
                return visitor.visitHex_uint_literal(self)
            else:
                return visitor.visitChildren(self)




    def hex_uint_literal(self):

        localctx = openscenario2Parser.Hex_uint_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_hex_uint_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(openscenario2Parser.HEX_UINT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Float_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(openscenario2Parser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_literal" ):
                return visitor.visitFloat_literal(self)
            else:
                return visitor.visitChildren(self)




    def float_literal(self):

        localctx = openscenario2Parser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(openscenario2Parser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(openscenario2Parser.IDENTIFIER, 0)

        def si_base_unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = openscenario2Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_identifier)
        try:
            self.state = 1235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.match(openscenario2Parser.IDENTIFIER)
                pass
            elif token in [openscenario2Parser.T__56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.match(openscenario2Parser.T__56)
                pass
            elif token in [openscenario2Parser.T__11]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1224
                self.match(openscenario2Parser.T__11)
                pass
            elif token in [openscenario2Parser.T__0]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1225
                self.match(openscenario2Parser.T__0)
                pass
            elif token in [openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1226
                self.si_base_unit_name()
                pass
            elif token in [openscenario2Parser.T__17]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1227
                self.match(openscenario2Parser.T__17)
                pass
            elif token in [openscenario2Parser.T__18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1228
                self.match(openscenario2Parser.T__18)
                pass
            elif token in [openscenario2Parser.T__27]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1229
                self.match(openscenario2Parser.T__27)
                pass
            elif token in [openscenario2Parser.T__31]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1230
                self.match(openscenario2Parser.T__31)
                pass
            elif token in [openscenario2Parser.T__34]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1231
                self.match(openscenario2Parser.T__34)
                pass
            elif token in [openscenario2Parser.T__35]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1232
                self.match(openscenario2Parser.T__35)
                pass
            elif token in [openscenario2Parser.T__36]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1233
                self.match(openscenario2Parser.T__36)
                pass
            elif token in [openscenario2Parser.T__37]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1234
                self.match(openscenario2Parser.T__37)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Physical_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PHYSICAL_LITERAL(self):
            return self.getToken(openscenario2Parser.PHYSICAL_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_physical_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_literal" ):
                listener.enterPhysical_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_literal" ):
                listener.exitPhysical_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_literal" ):
                return visitor.visitPhysical_literal(self)
            else:
                return visitor.visitChildren(self)




    def physical_literal(self):

        localctx = openscenario2Parser.Physical_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_physical_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(openscenario2Parser.PHYSICAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(openscenario2Parser.IDENTIFIER, 0)

        def si_base_unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_unit_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_name" ):
                listener.enterUnit_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_name" ):
                listener.exitUnit_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_name" ):
                return visitor.visitUnit_name(self)
            else:
                return visitor.visitChildren(self)




    def unit_name(self):

        localctx = openscenario2Parser.Unit_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_unit_name)
        try:
            self.state = 1241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.match(openscenario2Parser.IDENTIFIER)
                pass
            elif token in [openscenario2Parser.T__19, openscenario2Parser.T__20, openscenario2Parser.T__21, openscenario2Parser.T__22, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.si_base_unit_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[111] = self.relation_sempred
        self._predicates[113] = self.sum_exp_sempred
        self._predicates[115] = self.term_sempred
        self._predicates[118] = self.postfix_exp_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def sum_exp_sempred(self, localctx:Sum_expContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfix_exp_sempred(self, localctx:Postfix_expContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         




