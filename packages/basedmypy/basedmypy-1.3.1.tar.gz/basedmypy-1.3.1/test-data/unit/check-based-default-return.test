-- Type checker test cases for default return type.


[case testSimple]
# flags: --default-return
def f(): ...
reveal_type(f)  # N:13: Revealed type is "def ()"
reveal_type(f())  # N:13: Revealed type is "None"

def g(i: int): ...
reveal_type(g)  # N:13: Revealed type is "def (i: builtins.int)"

class A:
    def f(self): ...
    def g(self, i: int): ...

reveal_type(A.f)  # N:13: Revealed type is "def (self: __main__.A)"
reveal_type(A.g)  # N:13: Revealed type is "def (self: __main__.A, i: builtins.int)"


[case testPartiallyTyped]
# flags: --default-return --allow-any-expr
def foo(a): ...  # E:1: Function is missing a type annotation for one or more arguments  [no-untyped-def]
reveal_type(foo)  # N:13: Revealed type is "def (a: Any)"



[case testUntypedDefs]
# flags: --default-return --allow-untyped-defs --allow-any-expr

def f(): ...
reveal_type(f)  # N:13: Revealed type is "def () -> Any"

def g(i: int): ...
reveal_type(g)  # N:13: Revealed type is "def (i: builtins.int)"

def h(i: int, j): ... # E:1: Function is missing a type annotation for one or more arguments  [no-untyped-def]

class A:
    def f(self): ...
    def g(self, i): ...
    def h(self, i: int): ...
    def i(self, i: int, j): ... # E:5: Function is missing a type annotation for one or more arguments  [no-untyped-def]

reveal_type(A.f)  # N:13: Revealed type is "def (self: __main__.A) -> Any"
reveal_type(A.g)  # N:13: Revealed type is "def (self: __main__.A, i: Any) -> Any"
reveal_type(A.h)  # N:13: Revealed type is "def (self: __main__.A, i: builtins.int)"


[case testIncompleteDefs]
# flags: --default-return --allow-incomplete-defs --allow-untyped-defs --allow-any-expr

def f(i): ...
reveal_type(f)  # N:13: Revealed type is "def (i: Any) -> Any"

def g(i: int, j): ...
reveal_type(g)  # N:13: Revealed type is "def (i: builtins.int, j: Any)"

class A:
    def f(self): ...
    def g(self, i): ...
    def h(self, i: int): ...
    def i(self, i: int, j): ...

reveal_type(A.f)  # N:13: Revealed type is "def (self: __main__.A) -> Any"
reveal_type(A.g)  # N:13: Revealed type is "def (self: __main__.A, i: Any) -> Any"
reveal_type(A.h)  # N:13: Revealed type is "def (self: __main__.A, i: builtins.int)"
reveal_type(A.i)  # N:13: Revealed type is "def (self: __main__.A, i: builtins.int, j: Any)"


[case testGenerator]
# flags: --default-return

def f():  # E:1: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
    yield

def g(i: int):  # E: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
    yield

class A:
    def f(self): # E:5: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
        yield
    def g(self, i: int): # E: The return type of a generator function should be "Generator" or one of its supertypes  [misc]
        yield


[case testLambda]
# flags: --default-return --allow-any-expr

f = lambda x: x
g = lambda: ...
reveal_type(f)  # N:13: Revealed type is "def (x: Any) -> Any"
reveal_type(g)  # N:13: Revealed type is "def () -> builtins.ellipsis"


[case testExplicitAny]
# flags: --default-return --allow-any-expr  --allow-any-explicit
from typing import Any

def f() -> Any: ...
def g(i: int) -> Any: ...
reveal_type(f)  # N:13: Revealed type is "def () -> Any"
reveal_type(g)  # N:13: Revealed type is "def (i: builtins.int) -> Any"

class A:
    def f(self) -> Any: ...
    def g(self, i: int) -> Any: ...
reveal_type(A.f)  # N:13: Revealed type is "def (self: __main__.A) -> Any"
reveal_type(A.g)  # N:13: Revealed type is "def (self: __main__.A, i: builtins.int) -> Any"


[case testNoDefaultReturn]
# flags: --allow-any-expr

def f(i): ...  # E:1: Function is missing a type annotation  [no-untyped-def]
def g(i: int, j): ...  # E:1: Function is missing a return type annotation  [no-untyped-def] \
                       # E:1: Function is missing a type annotation for one or more arguments  [no-untyped-def]

class A:
    def f(self, i): ...  # E:5: Function is missing a type annotation  [no-untyped-def]
    def g(self, i: int, j): ...  # E:5: Function is missing a return type annotation  [no-untyped-def] \
                                 # E:5: Function is missing a type annotation for one or more arguments  [no-untyped-def]


[case testOverload]
# flags: --default-return
from typing import overload

class A:
    @overload
    def f(self): ...
    @overload
    def f(self, i: int): ...
    def f(self, i: int = 0): ...

reveal_type(A.f)  # N:13: Revealed type is "Overload(def (self: __main__.A), def (self: __main__.A, i: builtins.int))"

@overload
def f(): ...
@overload
def f(i: int): ...
def f(i: int = 0): ...

reveal_type(f)  # N:13: Revealed type is "Overload(def (), def (i: builtins.int))"


[case testOverloadIncomplete]
# flags: --default-return --allow-incomplete-defs --allow-untyped-defs --allow-any-expr
from typing import overload

class A:
    @overload
    def f(self): ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, i, j: int): ...
    def f(self, i: int = 0, j: int = 0): ...

reveal_type(A.f)  # N:13: Revealed type is "Overload(def (self: __main__.A) -> Any, def (self: __main__.A, i: Any) -> Any, def (self: __main__.A, i: Any, j: builtins.int))"

@overload
def f(): ...
@overload
def f(i): ...
@overload
def f(i, j: int): ...
def f(i: int = 0, j: int = 0): ...

reveal_type(f)  # N:13: Revealed type is "Overload(def () -> Any, def (i: Any) -> Any, def (i: Any, j: builtins.int))"


[case testOverloadUntyped]
# flags: --default-return --allow-untyped-defs --allow-any-expr
from typing import overload

class A:
    @overload
    def f(self): ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, *, j: int): ...
    def f(self, i: int = 0, j: int = 0): ...

reveal_type(A.f)  # N:13: Revealed type is "Overload(def (self: __main__.A) -> Any, def (self: __main__.A, i: Any) -> Any, def (self: __main__.A, *, j: builtins.int))"

@overload
def f(): ...
@overload
def f(i): ...
@overload
def f(*, j: int): ...
def f(i: int = 0, j: int = 0): ...

reveal_type(f)  # N:13: Revealed type is "Overload(def () -> Any, def (i: Any) -> Any, def (*, j: builtins.int))"

[case testOverloadOther]
# flags: --default-return --allow-untyped-defs --allow-incomplete-defs --allow-any-expr
from typing import overload

class A:
    @overload
    def f(self) -> int: ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, i, j: int): ...
    def f(self, i: int = 0, j: int = 0) -> object: ...

reveal_type(A.f)  # N:13: Revealed type is "Overload(def (self: __main__.A) -> builtins.int, def (self: __main__.A, i: Any) -> Any, def (self: __main__.A, i: Any, j: builtins.int))"

class B:
    @overload
    def f(self) -> str: ...
    @overload
    def f(self, i): ...
    @overload
    def f(self, i, j: int) -> int: ...
    def f(self, i: int = 0, j: int = 0) -> object: ...

reveal_type(B.f)  # N:13: Revealed type is "Overload(def (self: __main__.B) -> builtins.str, def (self: __main__.B, i: Any) -> Any, def (self: __main__.B, i: Any, j: builtins.int) -> builtins.int)"
