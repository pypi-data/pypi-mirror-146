build: false

environment:
  matrix:
    - PYTHON_VERSION: 3.8
      MINICONDA: C:\Miniconda3
      PYTHON_ARC: "64"

init:
  - "ECHO %PYTHON_VERSION% %MINICONDA% %PYTHON_ARC%"

install:
#  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
  - mkdir C:\Users\appveyor\.conda
  - call %MINICONDA%\Scripts\activate.bat
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - "conda create -q -n test-environment python=%PYTHON_VERSION% numpy scipy pytables>=3.5.1 pytest"
  - activate test-environment
  - pip install coverage
  #- conda install --yes --file requirements.txt
  - pip install -r requirements_appveyor.txt

test_script:
  - pytest

#test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  # - "build.cmd %PYTHON%\\python.exe setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  # - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"
#  - "%PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
#  - path: dist\*

on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
